begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|CacheReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_comment
comment|/**  * Main class for a series of name-node benchmarks.  *   * Each benchmark measures throughput and average execution time   * of a specific name-node operation, e.g. file creation or block reports.  *   * The benchmark does not involve any other hadoop components  * except for the name-node. Each operation is executed  * by calling directly the respective name-node method.  * The name-node here is real all other components are simulated.  *   * Command line arguments for the benchmark include:  *<ol>  *<li>total number of operations to be performed,</li>  *<li>number of threads to run these operations,</li>  *<li>followed by operation specific input parameters.</li>  *<li>-logLevel L specifies the logging level when the benchmark runs.  * The default logging level is {@link Level#ERROR}.</li>  *<li>-UGCacheRefreshCount G will cause the benchmark to call  * {@link NameNodeRpcServer#refreshUserToGroupsMappings} after  * every G operations, which purges the name-node's user group cache.  * By default the refresh is never called.</li>  *<li>-keepResults do not clean up the name-space after execution.</li>  *<li>-useExisting do not recreate the name-space, use existing data.</li>  *</ol>  *   * The benchmark first generates inputs for each thread so that the  * input generation overhead does not effect the resulting statistics.  * The number of operations performed by threads is practically the same.   * Precisely, the difference between the number of operations   * performed by any two threads does not exceed 1.  *   * Then the benchmark executes the specified number of operations using   * the specified number of threads and outputs the resulting stats.  */
end_comment

begin_class
DECL|class|NNThroughputBenchmark
specifier|public
class|class
name|NNThroughputBenchmark
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NNThroughputBenchmark
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|16
decl_stmt|;
DECL|field|GENERAL_OPTIONS_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|GENERAL_OPTIONS_USAGE
init|=
literal|"     [-keepResults] | [-logLevel L] | [-UGCacheRefreshCount G]"
decl_stmt|;
DECL|field|config
specifier|static
name|Configuration
name|config
decl_stmt|;
DECL|field|nameNode
specifier|static
name|NameNode
name|nameNode
decl_stmt|;
DECL|field|nameNodeProto
specifier|static
name|NamenodeProtocols
name|nameNodeProto
decl_stmt|;
DECL|method|NNThroughputBenchmark (Configuration conf)
name|NNThroughputBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|config
operator|=
name|conf
expr_stmt|;
comment|// We do not need many handlers, since each thread simulates a handler
comment|// by calling name-node methods directly
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HANDLER_COUNT_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set exclude file
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
literal|"${hadoop.tmp.dir}/dfs/hosts/exclude"
argument_list|)
expr_stmt|;
name|File
name|excludeFile
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
literal|"exclude"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|excludeFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|excludeFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|excludeFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NNThroughputBenchmark: cannot mkdir "
operator|+
name|excludeFile
argument_list|)
throw|;
block|}
operator|new
name|FileOutputStream
argument_list|(
name|excludeFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set include file
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
literal|"${hadoop.tmp.dir}/dfs/hosts/include"
argument_list|)
expr_stmt|;
name|File
name|includeFile
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
literal|"include"
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|FileOutputStream
argument_list|(
name|includeFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start the NameNode
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|nameNode
operator|=
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|nameNodeProto
operator|=
name|nameNode
operator|.
name|getRpcServer
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|nameNode
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setNameNodeLoggingLevel (Level logLevel)
specifier|static
name|void
name|setNameNodeLoggingLevel
parameter_list|(
name|Level
name|logLevel
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Log level = "
operator|+
name|logLevel
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// change log level to NameNode logs
name|LogManager
operator|.
name|getLogger
argument_list|(
name|NameNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
name|NetworkTopology
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
name|FSNamesystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LeaseManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Groups
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
block|}
comment|/**    * Base class for collecting operation statistics.    *     * Overload this class in order to run statistics for a     * specific name-node operation.    */
DECL|class|OperationStatsBase
specifier|abstract
class|class
name|OperationStatsBase
block|{
DECL|field|BASE_DIR_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|BASE_DIR_NAME
init|=
literal|"/nnThroughputBenchmark"
decl_stmt|;
DECL|field|OP_ALL_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|OP_ALL_NAME
init|=
literal|"all"
decl_stmt|;
DECL|field|OP_ALL_USAGE
specifier|protected
specifier|static
specifier|final
name|String
name|OP_ALL_USAGE
init|=
literal|"-op all<other ops options>"
decl_stmt|;
DECL|field|baseDir
specifier|protected
name|String
name|baseDir
decl_stmt|;
DECL|field|replication
specifier|protected
name|short
name|replication
decl_stmt|;
DECL|field|numThreads
specifier|protected
name|int
name|numThreads
init|=
literal|0
decl_stmt|;
comment|// number of threads
DECL|field|numOpsRequired
specifier|protected
name|int
name|numOpsRequired
init|=
literal|0
decl_stmt|;
comment|// number of operations requested
DECL|field|numOpsExecuted
specifier|protected
name|int
name|numOpsExecuted
init|=
literal|0
decl_stmt|;
comment|// number of operations executed
DECL|field|cumulativeTime
specifier|protected
name|long
name|cumulativeTime
init|=
literal|0
decl_stmt|;
comment|// sum of times for each op
DECL|field|elapsedTime
specifier|protected
name|long
name|elapsedTime
init|=
literal|0
decl_stmt|;
comment|// time from start to finish
DECL|field|keepResults
specifier|protected
name|boolean
name|keepResults
init|=
literal|false
decl_stmt|;
comment|// don't clean base directory on exit
DECL|field|logLevel
specifier|protected
name|Level
name|logLevel
decl_stmt|;
comment|// logging level, ERROR by default
DECL|field|ugcRefreshCount
specifier|protected
name|int
name|ugcRefreshCount
init|=
literal|0
decl_stmt|;
comment|// user group cache refresh count
DECL|field|daemons
specifier|protected
name|List
argument_list|<
name|StatsDaemon
argument_list|>
name|daemons
decl_stmt|;
comment|/**      * Operation name.      */
DECL|method|getOpName ()
specifier|abstract
name|String
name|getOpName
parameter_list|()
function_decl|;
comment|/**      * Parse command line arguments.      *       * @param args arguments      * @throws IOException      */
DECL|method|parseArguments (List<String> args)
specifier|abstract
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Generate inputs for each daemon thread.      *       * @param opsPerThread number of inputs for each thread.      * @throws IOException      */
DECL|method|generateInputs (int[] opsPerThread)
specifier|abstract
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|opsPerThread
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * This corresponds to the arg1 argument of       * {@link #executeOp(int, int, String)}, which can have different meanings      * depending on the operation performed.      *       * @param daemonId      * @return the argument      */
DECL|method|getExecutionArgument (int daemonId)
specifier|abstract
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
function_decl|;
comment|/**      * Execute name-node operation.      *       * @param daemonId id of the daemon calling this method.      * @param inputIdx serial index of the operation called by the deamon.      * @param arg1 operation specific argument.      * @return time of the individual name-node call.      * @throws IOException      */
DECL|method|executeOp (int daemonId, int inputIdx, String arg1)
specifier|abstract
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Print the results of the benchmarking.      */
DECL|method|printResults ()
specifier|abstract
name|void
name|printResults
parameter_list|()
function_decl|;
DECL|method|OperationStatsBase ()
name|OperationStatsBase
parameter_list|()
block|{
name|baseDir
operator|=
name|BASE_DIR_NAME
operator|+
literal|"/"
operator|+
name|getOpName
argument_list|()
expr_stmt|;
name|replication
operator|=
operator|(
name|short
operator|)
name|config
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|numOpsRequired
operator|=
literal|10
expr_stmt|;
name|numThreads
operator|=
literal|3
expr_stmt|;
name|logLevel
operator|=
name|Level
operator|.
name|ERROR
expr_stmt|;
name|ugcRefreshCount
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
DECL|method|benchmark ()
name|void
name|benchmark
parameter_list|()
throws|throws
name|IOException
block|{
name|daemons
operator|=
operator|new
name|ArrayList
argument_list|<
name|StatsDaemon
argument_list|>
argument_list|()
expr_stmt|;
name|long
name|start
init|=
literal|0
decl_stmt|;
try|try
block|{
name|numOpsExecuted
operator|=
literal|0
expr_stmt|;
name|cumulativeTime
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|numThreads
operator|<
literal|1
condition|)
return|return;
name|int
name|tIdx
init|=
literal|0
decl_stmt|;
comment|// thread index< nrThreads
name|int
name|opsPerThread
index|[]
init|=
operator|new
name|int
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|opsScheduled
init|=
literal|0
init|;
name|opsScheduled
operator|<
name|numOpsRequired
condition|;
name|opsScheduled
operator|+=
name|opsPerThread
index|[
name|tIdx
operator|++
index|]
control|)
block|{
comment|// execute  in a separate thread
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
operator|(
name|numOpsRequired
operator|-
name|opsScheduled
operator|)
operator|/
operator|(
name|numThreads
operator|-
name|tIdx
operator|)
expr_stmt|;
if|if
condition|(
name|opsPerThread
index|[
name|tIdx
index|]
operator|==
literal|0
condition|)
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// if numThreads> numOpsRequired then the remaining threads will do nothing
for|for
control|(
init|;
name|tIdx
operator|<
name|numThreads
condition|;
name|tIdx
operator|++
control|)
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
literal|0
expr_stmt|;
name|generateInputs
argument_list|(
name|opsPerThread
argument_list|)
expr_stmt|;
name|setNameNodeLoggingLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
for|for
control|(
name|tIdx
operator|=
literal|0
init|;
name|tIdx
operator|<
name|numThreads
condition|;
name|tIdx
operator|++
control|)
name|daemons
operator|.
name|add
argument_list|(
operator|new
name|StatsDaemon
argument_list|(
name|tIdx
argument_list|,
name|opsPerThread
index|[
name|tIdx
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|numOpsRequired
operator|+
literal|" "
operator|+
name|getOpName
argument_list|()
operator|+
literal|"(s)."
argument_list|)
expr_stmt|;
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
name|d
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
while|while
condition|(
name|isInPorgress
argument_list|()
condition|)
block|{
comment|// try {Thread.sleep(500);} catch (InterruptedException e) {}
block|}
name|elapsedTime
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
expr_stmt|;
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
block|{
name|incrementStats
argument_list|(
name|d
operator|.
name|localNumOpsExecuted
argument_list|,
name|d
operator|.
name|localCumulativeTime
argument_list|)
expr_stmt|;
comment|// System.out.println(d.toString() + ": ops Exec = " + d.localNumOpsExecuted);
block|}
block|}
block|}
DECL|method|isInPorgress ()
specifier|private
name|boolean
name|isInPorgress
parameter_list|()
block|{
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
if|if
condition|(
name|d
operator|.
name|isInProgress
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|cleanUp ()
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|nameNodeProto
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keepResults
condition|)
name|nameNodeProto
operator|.
name|delete
argument_list|(
name|getBaseDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumOpsExecuted ()
name|int
name|getNumOpsExecuted
parameter_list|()
block|{
return|return
name|numOpsExecuted
return|;
block|}
DECL|method|getCumulativeTime ()
name|long
name|getCumulativeTime
parameter_list|()
block|{
return|return
name|cumulativeTime
return|;
block|}
DECL|method|getElapsedTime ()
name|long
name|getElapsedTime
parameter_list|()
block|{
return|return
name|elapsedTime
return|;
block|}
DECL|method|getAverageTime ()
name|long
name|getAverageTime
parameter_list|()
block|{
return|return
name|numOpsExecuted
operator|==
literal|0
condition|?
literal|0
else|:
name|cumulativeTime
operator|/
name|numOpsExecuted
return|;
block|}
DECL|method|getOpsPerSecond ()
name|double
name|getOpsPerSecond
parameter_list|()
block|{
return|return
name|elapsedTime
operator|==
literal|0
condition|?
literal|0
else|:
literal|1000
operator|*
operator|(
name|double
operator|)
name|numOpsExecuted
operator|/
name|elapsedTime
return|;
block|}
DECL|method|getBaseDir ()
name|String
name|getBaseDir
parameter_list|()
block|{
return|return
name|baseDir
return|;
block|}
DECL|method|getClientName (int idx)
name|String
name|getClientName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|getOpName
argument_list|()
operator|+
literal|"-client-"
operator|+
name|idx
return|;
block|}
DECL|method|incrementStats (int ops, long time)
name|void
name|incrementStats
parameter_list|(
name|int
name|ops
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|numOpsExecuted
operator|+=
name|ops
expr_stmt|;
name|cumulativeTime
operator|+=
name|time
expr_stmt|;
block|}
comment|/**      * Parse first 2 arguments, corresponding to the "-op" option.      *       * @param args      * @return true if operation is all, which means that options not related      * to this operation should be ignored, or false otherwise, meaning      * that usage should be printed when an unrelated option is encountered.      * @throws IOException      */
DECL|method|verifyOpArgument (List<String> args)
specifier|protected
name|boolean
name|verifyOpArgument
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
operator|!
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-op"
argument_list|)
condition|)
name|printUsage
argument_list|()
expr_stmt|;
comment|// process common options
name|int
name|krIndex
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|"-keepResults"
argument_list|)
decl_stmt|;
name|keepResults
operator|=
operator|(
name|krIndex
operator|>=
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|keepResults
condition|)
block|{
name|args
operator|.
name|remove
argument_list|(
name|krIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|llIndex
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|"-logLevel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|llIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<=
name|llIndex
operator|+
literal|1
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|logLevel
operator|=
name|Level
operator|.
name|toLevel
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|llIndex
operator|+
literal|1
argument_list|)
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|llIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|llIndex
argument_list|)
expr_stmt|;
block|}
name|int
name|ugrcIndex
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|"-UGCacheRefreshCount"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugrcIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<=
name|ugrcIndex
operator|+
literal|1
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|int
name|g
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|ugrcIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|>
literal|0
condition|)
name|ugcRefreshCount
operator|=
name|g
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|ugrcIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|ugrcIndex
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|OP_ALL_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|getOpName
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|getOpName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|printStats ()
name|void
name|printStats
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" stats  ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"# operations: "
operator|+
name|getNumOpsExecuted
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Elapsed Time: "
operator|+
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Ops per sec: "
operator|+
name|getOpsPerSecond
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Average Time: "
operator|+
name|getAverageTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * One of the threads that perform stats operations.    */
DECL|class|StatsDaemon
specifier|private
class|class
name|StatsDaemon
extends|extends
name|Thread
block|{
DECL|field|daemonId
specifier|private
name|int
name|daemonId
decl_stmt|;
DECL|field|opsPerThread
specifier|private
name|int
name|opsPerThread
decl_stmt|;
DECL|field|arg1
specifier|private
name|String
name|arg1
decl_stmt|;
comment|// argument passed to executeOp()
DECL|field|localNumOpsExecuted
specifier|private
specifier|volatile
name|int
name|localNumOpsExecuted
init|=
literal|0
decl_stmt|;
DECL|field|localCumulativeTime
specifier|private
specifier|volatile
name|long
name|localCumulativeTime
init|=
literal|0
decl_stmt|;
DECL|field|statsOp
specifier|private
name|OperationStatsBase
name|statsOp
decl_stmt|;
DECL|method|StatsDaemon (int daemonId, int nrOps, OperationStatsBase op)
name|StatsDaemon
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|nrOps
parameter_list|,
name|OperationStatsBase
name|op
parameter_list|)
block|{
name|this
operator|.
name|daemonId
operator|=
name|daemonId
expr_stmt|;
name|this
operator|.
name|opsPerThread
operator|=
name|nrOps
expr_stmt|;
name|this
operator|.
name|statsOp
operator|=
name|op
expr_stmt|;
name|setName
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|localNumOpsExecuted
operator|=
literal|0
expr_stmt|;
name|localCumulativeTime
operator|=
literal|0
expr_stmt|;
name|arg1
operator|=
name|statsOp
operator|.
name|getExecutionArgument
argument_list|(
name|daemonId
argument_list|)
expr_stmt|;
try|try
block|{
name|benchmarkOne
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsDaemon "
operator|+
name|daemonId
operator|+
literal|" failed: \n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StatsDaemon-"
operator|+
name|daemonId
return|;
block|}
DECL|method|benchmarkOne ()
name|void
name|benchmarkOne
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|opsPerThread
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|localNumOpsExecuted
operator|+
literal|1
operator|)
operator|%
name|statsOp
operator|.
name|ugcRefreshCount
operator|==
literal|0
condition|)
name|nameNodeProto
operator|.
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
name|long
name|stat
init|=
name|statsOp
operator|.
name|executeOp
argument_list|(
name|daemonId
argument_list|,
name|idx
argument_list|,
name|arg1
argument_list|)
decl_stmt|;
name|localNumOpsExecuted
operator|++
expr_stmt|;
name|localCumulativeTime
operator|+=
name|stat
expr_stmt|;
block|}
block|}
DECL|method|isInProgress ()
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
name|localNumOpsExecuted
operator|<
name|opsPerThread
return|;
block|}
comment|/**      * Schedule to stop this daemon.      */
DECL|method|terminate ()
name|void
name|terminate
parameter_list|()
block|{
name|opsPerThread
operator|=
name|localNumOpsExecuted
expr_stmt|;
block|}
block|}
comment|/**    * Clean all benchmark result directories.    */
DECL|class|CleanAllStats
class|class
name|CleanAllStats
extends|extends
name|OperationStatsBase
block|{
comment|// Operation types
DECL|field|OP_CLEAN_NAME
specifier|static
specifier|final
name|String
name|OP_CLEAN_NAME
init|=
literal|"clean"
decl_stmt|;
DECL|field|OP_CLEAN_USAGE
specifier|static
specifier|final
name|String
name|OP_CLEAN_USAGE
init|=
literal|"-op clean"
decl_stmt|;
DECL|method|CleanAllStats (List<String> args)
name|CleanAllStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|numOpsRequired
operator|=
literal|1
expr_stmt|;
name|numThreads
operator|=
literal|1
expr_stmt|;
name|keepResults
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_CLEAN_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|boolean
name|ignoreUnrelatedOptions
init|=
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
operator|!
name|ignoreUnrelatedOptions
condition|)
name|printUsage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] opsPerThread)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|opsPerThread
parameter_list|)
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
comment|/**      * Does not require the argument      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Remove entire benchmark directory.      */
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|nameNodeProto
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|nameNodeProto
operator|.
name|delete
argument_list|(
name|BASE_DIR_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove directory "
operator|+
name|BASE_DIR_NAME
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * File creation statistics.    *     * Each thread creates the same (+ or -1) number of files.    * File names are pre-generated during initialization.    * The created files do not have blocks.    */
DECL|class|CreateFileStats
class|class
name|CreateFileStats
extends|extends
name|OperationStatsBase
block|{
comment|// Operation types
DECL|field|OP_CREATE_NAME
specifier|static
specifier|final
name|String
name|OP_CREATE_NAME
init|=
literal|"create"
decl_stmt|;
DECL|field|OP_CREATE_USAGE
specifier|static
specifier|final
name|String
name|OP_CREATE_USAGE
init|=
literal|"-op create [-threads T] [-files N] [-filesPerDir P] [-close]"
decl_stmt|;
DECL|field|nameGenerator
specifier|protected
name|FileNameGenerator
name|nameGenerator
decl_stmt|;
DECL|field|fileNames
specifier|protected
name|String
index|[]
index|[]
name|fileNames
decl_stmt|;
DECL|field|closeUponCreate
specifier|private
name|boolean
name|closeUponCreate
decl_stmt|;
DECL|method|CreateFileStats (List<String> args)
name|CreateFileStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_CREATE_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|boolean
name|ignoreUnrelatedOptions
init|=
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|int
name|nrFilesPerDir
init|=
literal|4
decl_stmt|;
name|closeUponCreate
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-files"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|numOpsRequired
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-threads"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|numThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-filesPerDir"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|nrFilesPerDir
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-close"
argument_list|)
condition|)
block|{
name|closeUponCreate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ignoreUnrelatedOptions
condition|)
name|printUsage
argument_list|()
expr_stmt|;
block|}
name|nameGenerator
operator|=
operator|new
name|FileNameGenerator
argument_list|(
name|getBaseDir
argument_list|()
argument_list|,
name|nrFilesPerDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] opsPerThread)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|opsPerThread
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|opsPerThread
operator|.
name|length
operator|==
name|numThreads
operator|:
literal|"Error opsPerThread.length"
assert|;
name|nameNodeProto
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// int generatedFileIdx = 0;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generate "
operator|+
name|numOpsRequired
operator|+
literal|" intputs for "
operator|+
name|getOpName
argument_list|()
argument_list|)
expr_stmt|;
name|fileNames
operator|=
operator|new
name|String
index|[
name|numThreads
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numThreads
condition|;
name|idx
operator|++
control|)
block|{
name|int
name|threadOps
init|=
name|opsPerThread
index|[
name|idx
index|]
decl_stmt|;
name|fileNames
index|[
name|idx
index|]
operator|=
operator|new
name|String
index|[
name|threadOps
index|]
expr_stmt|;
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
name|threadOps
condition|;
name|jdx
operator|++
control|)
name|fileNames
index|[
name|idx
index|]
index|[
name|jdx
index|]
operator|=
name|nameGenerator
operator|.
name|getNextFileName
argument_list|(
literal|"ThroughputBench"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dummyActionNoSynch (int daemonId, int fileIdx)
name|void
name|dummyActionNoSynch
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|fileIdx
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
name|fileNames
index|[
name|daemonId
index|]
index|[
name|fileIdx
index|]
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * returns client name      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
name|getClientName
argument_list|(
name|daemonId
argument_list|)
return|;
block|}
comment|/**      * Do file create.      */
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String clientName)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// dummyActionNoSynch(fileIdx);
name|nameNodeProto
operator|.
name|create
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
name|replication
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
for|for
control|(
name|boolean
name|written
init|=
operator|!
name|closeUponCreate
init|;
operator|!
name|written
condition|;
name|written
operator|=
name|nameNodeProto
operator|.
name|complete
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|,
name|clientName
argument_list|,
literal|null
argument_list|,
name|INodeId
operator|.
name|GRANDFATHER_INODE_ID
argument_list|)
control|)
empty_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nrFiles = "
operator|+
name|numOpsRequired
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nrThreads = "
operator|+
name|numThreads
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nrFilesPerDir = "
operator|+
name|nameGenerator
operator|.
name|getFilesPerDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Open file statistics.    *     * Measure how many open calls (getBlockLocations())     * the name-node can handle per second.    */
DECL|class|OpenFileStats
class|class
name|OpenFileStats
extends|extends
name|CreateFileStats
block|{
comment|// Operation types
DECL|field|OP_OPEN_NAME
specifier|static
specifier|final
name|String
name|OP_OPEN_NAME
init|=
literal|"open"
decl_stmt|;
DECL|field|OP_USAGE_ARGS
specifier|static
specifier|final
name|String
name|OP_USAGE_ARGS
init|=
literal|" [-threads T] [-files N] [-filesPerDir P] [-useExisting]"
decl_stmt|;
DECL|field|OP_OPEN_USAGE
specifier|static
specifier|final
name|String
name|OP_OPEN_USAGE
init|=
literal|"-op "
operator|+
name|OP_OPEN_NAME
operator|+
name|OP_USAGE_ARGS
decl_stmt|;
DECL|field|useExisting
specifier|private
name|boolean
name|useExisting
decl_stmt|;
comment|// do not generate files, use existing ones
DECL|method|OpenFileStats (List<String> args)
name|OpenFileStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_OPEN_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|int
name|ueIndex
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|"-useExisting"
argument_list|)
decl_stmt|;
name|useExisting
operator|=
operator|(
name|ueIndex
operator|>=
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|useExisting
condition|)
block|{
name|args
operator|.
name|remove
argument_list|(
name|ueIndex
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] opsPerThread)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|opsPerThread
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create files using opsPerThread
name|String
index|[]
name|createArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"-op"
block|,
literal|"create"
block|,
literal|"-threads"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|numThreads
argument_list|)
block|,
literal|"-files"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|numOpsRequired
argument_list|)
block|,
literal|"-filesPerDir"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nameGenerator
operator|.
name|getFilesPerDirectory
argument_list|()
argument_list|)
block|,
literal|"-close"
block|}
decl_stmt|;
name|CreateFileStats
name|opCreate
init|=
operator|new
name|CreateFileStats
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|createArgs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useExisting
condition|)
block|{
comment|// create files if they were not created before
name|opCreate
operator|.
name|benchmark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|numOpsRequired
operator|+
literal|" files."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"useExisting = true. Assuming "
operator|+
name|numOpsRequired
operator|+
literal|" files have been created before."
argument_list|)
expr_stmt|;
block|}
comment|// use the same files for open
name|super
operator|.
name|generateInputs
argument_list|(
name|opsPerThread
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameNodeProto
operator|.
name|getFileInfo
argument_list|(
name|opCreate
operator|.
name|getBaseDir
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|nameNodeProto
operator|.
name|getFileInfo
argument_list|(
name|getBaseDir
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|nameNodeProto
operator|.
name|rename
argument_list|(
name|opCreate
operator|.
name|getBaseDir
argument_list|()
argument_list|,
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nameNodeProto
operator|.
name|getFileInfo
argument_list|(
name|getBaseDir
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|getBaseDir
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Do file open.      */
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|nameNodeProto
operator|.
name|getBlockLocations
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|,
literal|0L
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
comment|/**    * Delete file statistics.    *     * Measure how many delete calls the name-node can handle per second.    */
DECL|class|DeleteFileStats
class|class
name|DeleteFileStats
extends|extends
name|OpenFileStats
block|{
comment|// Operation types
DECL|field|OP_DELETE_NAME
specifier|static
specifier|final
name|String
name|OP_DELETE_NAME
init|=
literal|"delete"
decl_stmt|;
DECL|field|OP_DELETE_USAGE
specifier|static
specifier|final
name|String
name|OP_DELETE_USAGE
init|=
literal|"-op "
operator|+
name|OP_DELETE_NAME
operator|+
name|OP_USAGE_ARGS
decl_stmt|;
DECL|method|DeleteFileStats (List<String> args)
name|DeleteFileStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_DELETE_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|nameNodeProto
operator|.
name|delete
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
comment|/**    * List file status statistics.    *     * Measure how many get-file-status calls the name-node can handle per second.    */
DECL|class|FileStatusStats
class|class
name|FileStatusStats
extends|extends
name|OpenFileStats
block|{
comment|// Operation types
DECL|field|OP_FILE_STATUS_NAME
specifier|static
specifier|final
name|String
name|OP_FILE_STATUS_NAME
init|=
literal|"fileStatus"
decl_stmt|;
DECL|field|OP_FILE_STATUS_USAGE
specifier|static
specifier|final
name|String
name|OP_FILE_STATUS_USAGE
init|=
literal|"-op "
operator|+
name|OP_FILE_STATUS_NAME
operator|+
name|OP_USAGE_ARGS
decl_stmt|;
DECL|method|FileStatusStats (List<String> args)
name|FileStatusStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_FILE_STATUS_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|nameNodeProto
operator|.
name|getFileInfo
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
comment|/**    * Rename file statistics.    *     * Measure how many rename calls the name-node can handle per second.    */
DECL|class|RenameFileStats
class|class
name|RenameFileStats
extends|extends
name|OpenFileStats
block|{
comment|// Operation types
DECL|field|OP_RENAME_NAME
specifier|static
specifier|final
name|String
name|OP_RENAME_NAME
init|=
literal|"rename"
decl_stmt|;
DECL|field|OP_RENAME_USAGE
specifier|static
specifier|final
name|String
name|OP_RENAME_USAGE
init|=
literal|"-op "
operator|+
name|OP_RENAME_NAME
operator|+
name|OP_USAGE_ARGS
decl_stmt|;
DECL|field|destNames
specifier|protected
name|String
index|[]
index|[]
name|destNames
decl_stmt|;
DECL|method|RenameFileStats (List<String> args)
name|RenameFileStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_RENAME_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] opsPerThread)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|opsPerThread
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|generateInputs
argument_list|(
name|opsPerThread
argument_list|)
expr_stmt|;
name|destNames
operator|=
operator|new
name|String
index|[
name|fileNames
operator|.
name|length
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numThreads
condition|;
name|idx
operator|++
control|)
block|{
name|int
name|nrNames
init|=
name|fileNames
index|[
name|idx
index|]
operator|.
name|length
decl_stmt|;
name|destNames
index|[
name|idx
index|]
operator|=
operator|new
name|String
index|[
name|nrNames
index|]
expr_stmt|;
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
name|nrNames
condition|;
name|jdx
operator|++
control|)
name|destNames
index|[
name|idx
index|]
index|[
name|jdx
index|]
operator|=
name|fileNames
index|[
name|idx
index|]
index|[
name|jdx
index|]
operator|+
literal|".r"
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|nameNodeProto
operator|.
name|rename
argument_list|(
name|fileNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|,
name|destNames
index|[
name|daemonId
index|]
index|[
name|inputIdx
index|]
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
comment|/**    * Minimal data-node simulator.    */
DECL|class|TinyDatanode
specifier|private
specifier|static
class|class
name|TinyDatanode
implements|implements
name|Comparable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|DF_CAPACITY
specifier|private
specifier|static
specifier|final
name|long
name|DF_CAPACITY
init|=
literal|100
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|DF_USED
specifier|private
specifier|static
specifier|final
name|long
name|DF_USED
init|=
literal|0
decl_stmt|;
DECL|field|nsInfo
name|NamespaceInfo
name|nsInfo
decl_stmt|;
DECL|field|dnRegistration
name|DatanodeRegistration
name|dnRegistration
decl_stmt|;
DECL|field|storage
name|DatanodeStorage
name|storage
decl_stmt|;
comment|//only one storage
DECL|field|blocks
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|blocks
decl_stmt|;
DECL|field|nrBlocks
name|int
name|nrBlocks
decl_stmt|;
comment|// actual number of blocks
DECL|field|blockReportList
name|long
index|[]
name|blockReportList
decl_stmt|;
DECL|field|dnIdx
name|int
name|dnIdx
decl_stmt|;
comment|/**      * Return a a 6 digit integer port.      * This is necessary in order to provide lexocographic ordering.      * Host names are all the same, the ordering goes by port numbers.      */
DECL|method|getNodePort (int num)
specifier|private
specifier|static
name|int
name|getNodePort
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|port
init|=
literal|100000
operator|+
name|num
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|6
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Too many data-nodes"
argument_list|)
throw|;
block|}
return|return
name|port
return|;
block|}
DECL|method|TinyDatanode (int dnIdx, int blockCapacity)
name|TinyDatanode
parameter_list|(
name|int
name|dnIdx
parameter_list|,
name|int
name|blockCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dnIdx
operator|=
name|dnIdx
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|(
name|blockCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|nrBlocks
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|dnRegistration
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getXferAddr ()
name|String
name|getXferAddr
parameter_list|()
block|{
return|return
name|dnRegistration
operator|.
name|getXferAddr
argument_list|()
return|;
block|}
DECL|method|register ()
name|void
name|register
parameter_list|()
throws|throws
name|IOException
block|{
comment|// get versions from the namenode
name|nsInfo
operator|=
name|nameNodeProto
operator|.
name|versionRequest
argument_list|()
expr_stmt|;
name|dnRegistration
operator|=
operator|new
name|DatanodeRegistration
argument_list|(
operator|new
name|DatanodeID
argument_list|(
name|DNS
operator|.
name|getDefaultIP
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|DNS
operator|.
name|getDefaultHost
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
literal|""
argument_list|,
name|getNodePort
argument_list|(
name|dnIdx
argument_list|)
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_DEFAULT_PORT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_DEFAULT_PORT
argument_list|)
argument_list|,
operator|new
name|DataStorage
argument_list|(
name|nsInfo
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|ExportedBlockKeys
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|DataNode
operator|.
name|setNewStorageID
argument_list|(
name|dnRegistration
argument_list|)
expr_stmt|;
comment|// register datanode
name|dnRegistration
operator|=
name|nameNodeProto
operator|.
name|registerDatanode
argument_list|(
name|dnRegistration
argument_list|)
expr_stmt|;
comment|//first block reports
name|storage
operator|=
operator|new
name|DatanodeStorage
argument_list|(
name|dnRegistration
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StorageBlockReport
index|[]
name|reports
init|=
block|{
operator|new
name|StorageBlockReport
argument_list|(
name|storage
argument_list|,
operator|new
name|BlockListAsLongs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|nameNodeProto
operator|.
name|blockReport
argument_list|(
name|dnRegistration
argument_list|,
name|nameNode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|reports
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send a heartbeat to the name-node.      * Ignore reply commands.      */
DECL|method|sendHeartbeat ()
name|void
name|sendHeartbeat
parameter_list|()
throws|throws
name|IOException
block|{
comment|// register datanode
comment|// TODO:FEDERATION currently a single block pool is supported
name|StorageReport
index|[]
name|rep
init|=
block|{
operator|new
name|StorageReport
argument_list|(
name|dnRegistration
operator|.
name|getStorageID
argument_list|()
argument_list|,
literal|false
argument_list|,
name|DF_CAPACITY
argument_list|,
name|DF_USED
argument_list|,
name|DF_CAPACITY
operator|-
name|DF_USED
argument_list|,
name|DF_USED
argument_list|)
block|}
decl_stmt|;
name|CacheReport
index|[]
name|cacheRep
init|=
block|{
operator|new
name|CacheReport
argument_list|(
literal|0l
argument_list|,
literal|0l
argument_list|)
block|}
decl_stmt|;
name|DatanodeCommand
index|[]
name|cmds
init|=
name|nameNodeProto
operator|.
name|sendHeartbeat
argument_list|(
name|dnRegistration
argument_list|,
name|rep
argument_list|,
name|cacheRep
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getCommands
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatanodeCommand
name|cmd
range|:
name|cmds
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sendHeartbeat Name-node reply: "
operator|+
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addBlock (Block blk)
name|boolean
name|addBlock
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
if|if
condition|(
name|nrBlocks
operator|==
name|blocks
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot add block: datanode capacity = "
operator|+
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|blocks
operator|.
name|set
argument_list|(
name|nrBlocks
argument_list|,
name|blk
argument_list|)
expr_stmt|;
name|nrBlocks
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|formBlockReport ()
name|void
name|formBlockReport
parameter_list|()
block|{
comment|// fill remaining slots with blocks that do not exist
for|for
control|(
name|int
name|idx
init|=
name|blocks
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|idx
operator|>=
name|nrBlocks
condition|;
name|idx
operator|--
control|)
name|blocks
operator|.
name|set
argument_list|(
name|idx
argument_list|,
operator|new
name|Block
argument_list|(
name|blocks
operator|.
name|size
argument_list|()
operator|-
name|idx
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|blockReportList
operator|=
operator|new
name|BlockListAsLongs
argument_list|(
name|blocks
argument_list|,
literal|null
argument_list|)
operator|.
name|getBlockListAsLongs
argument_list|()
expr_stmt|;
block|}
DECL|method|getBlockReportList ()
name|long
index|[]
name|getBlockReportList
parameter_list|()
block|{
return|return
name|blockReportList
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (String xferAddr)
specifier|public
name|int
name|compareTo
parameter_list|(
name|String
name|xferAddr
parameter_list|)
block|{
return|return
name|getXferAddr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|xferAddr
argument_list|)
return|;
block|}
comment|/**      * Send a heartbeat to the name-node and replicate blocks if requested.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// keep it for future blockReceived benchmark
DECL|method|replicateBlocks ()
name|int
name|replicateBlocks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// register datanode
name|StorageReport
index|[]
name|rep
init|=
block|{
operator|new
name|StorageReport
argument_list|(
name|dnRegistration
operator|.
name|getStorageID
argument_list|()
argument_list|,
literal|false
argument_list|,
name|DF_CAPACITY
argument_list|,
name|DF_USED
argument_list|,
name|DF_CAPACITY
operator|-
name|DF_USED
argument_list|,
name|DF_USED
argument_list|)
block|}
decl_stmt|;
name|CacheReport
index|[]
name|cacheRep
init|=
block|{
operator|new
name|CacheReport
argument_list|(
literal|0l
argument_list|,
literal|0l
argument_list|)
block|}
decl_stmt|;
name|DatanodeCommand
index|[]
name|cmds
init|=
name|nameNodeProto
operator|.
name|sendHeartbeat
argument_list|(
name|dnRegistration
argument_list|,
name|rep
argument_list|,
name|cacheRep
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getCommands
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatanodeCommand
name|cmd
range|:
name|cmds
control|)
block|{
if|if
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
operator|==
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
condition|)
block|{
comment|// Send a copy of a block to another datanode
name|BlockCommand
name|bcmd
init|=
operator|(
name|BlockCommand
operator|)
name|cmd
decl_stmt|;
return|return
name|transferBlocks
argument_list|(
name|bcmd
operator|.
name|getBlocks
argument_list|()
argument_list|,
name|bcmd
operator|.
name|getTargets
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**      * Transfer blocks to another data-node.      * Just report on behalf of the other data-node      * that the blocks have been received.      */
DECL|method|transferBlocks ( Block blocks[], DatanodeInfo xferTargets[][] )
specifier|private
name|int
name|transferBlocks
parameter_list|(
name|Block
name|blocks
index|[]
parameter_list|,
name|DatanodeInfo
name|xferTargets
index|[]
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeInfo
name|blockTargets
index|[]
init|=
name|xferTargets
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|blockTargets
operator|.
name|length
condition|;
name|t
operator|++
control|)
block|{
name|DatanodeInfo
name|dnInfo
init|=
name|blockTargets
index|[
name|t
index|]
decl_stmt|;
name|DatanodeRegistration
name|receivedDNReg
decl_stmt|;
name|receivedDNReg
operator|=
operator|new
name|DatanodeRegistration
argument_list|(
name|dnInfo
argument_list|,
operator|new
name|DataStorage
argument_list|(
name|nsInfo
argument_list|,
name|dnInfo
operator|.
name|getStorageID
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ExportedBlockKeys
argument_list|()
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ReceivedDeletedBlockInfo
index|[]
name|rdBlocks
init|=
block|{
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|report
init|=
block|{
operator|new
name|StorageReceivedDeletedBlocks
argument_list|(
name|receivedDNReg
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|rdBlocks
argument_list|)
block|}
decl_stmt|;
name|nameNodeProto
operator|.
name|blockReceivedAndDeleted
argument_list|(
name|receivedDNReg
argument_list|,
name|nameNode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|blocks
operator|.
name|length
return|;
block|}
block|}
comment|/**    * Block report statistics.    *     * Each thread here represents its own data-node.    * Data-nodes send the same block report each time.    * The block report may contain missing or non-existing blocks.    */
DECL|class|BlockReportStats
class|class
name|BlockReportStats
extends|extends
name|OperationStatsBase
block|{
DECL|field|OP_BLOCK_REPORT_NAME
specifier|static
specifier|final
name|String
name|OP_BLOCK_REPORT_NAME
init|=
literal|"blockReport"
decl_stmt|;
DECL|field|OP_BLOCK_REPORT_USAGE
specifier|static
specifier|final
name|String
name|OP_BLOCK_REPORT_USAGE
init|=
literal|"-op blockReport [-datanodes T] [-reports N] "
operator|+
literal|"[-blocksPerReport B] [-blocksPerFile F]"
decl_stmt|;
DECL|field|blocksPerReport
specifier|private
name|int
name|blocksPerReport
decl_stmt|;
DECL|field|blocksPerFile
specifier|private
name|int
name|blocksPerFile
decl_stmt|;
DECL|field|datanodes
specifier|private
name|TinyDatanode
index|[]
name|datanodes
decl_stmt|;
comment|// array of data-nodes sorted by name
DECL|method|BlockReportStats (List<String> args)
name|BlockReportStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|blocksPerReport
operator|=
literal|100
expr_stmt|;
name|this
operator|.
name|blocksPerFile
operator|=
literal|10
expr_stmt|;
comment|// set heartbeat interval to 3 min, so that expiration were 40 min
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|3
operator|*
literal|60
argument_list|)
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// adjust replication to the number of data-nodes
name|this
operator|.
name|replication
operator|=
operator|(
name|short
operator|)
name|Math
operator|.
name|min
argument_list|(
name|replication
argument_list|,
name|getNumDatanodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Each thread pretends its a data-node here.      */
DECL|method|getNumDatanodes ()
specifier|private
name|int
name|getNumDatanodes
parameter_list|()
block|{
return|return
name|numThreads
return|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_BLOCK_REPORT_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|boolean
name|ignoreUnrelatedOptions
init|=
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-reports"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|numOpsRequired
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-datanodes"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|numThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-blocksPerReport"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|blocksPerReport
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-blocksPerFile"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|blocksPerFile
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ignoreUnrelatedOptions
condition|)
name|printUsage
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] ignore)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nrDatanodes
init|=
name|getNumDatanodes
argument_list|()
decl_stmt|;
name|int
name|nrBlocks
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|blocksPerReport
operator|*
name|nrDatanodes
operator|/
name|replication
argument_list|)
decl_stmt|;
name|int
name|nrFiles
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|nrBlocks
operator|/
name|blocksPerFile
argument_list|)
decl_stmt|;
name|datanodes
operator|=
operator|new
name|TinyDatanode
index|[
name|nrDatanodes
index|]
expr_stmt|;
comment|// create data-nodes
name|String
name|prevDNName
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrDatanodes
condition|;
name|idx
operator|++
control|)
block|{
name|datanodes
index|[
name|idx
index|]
operator|=
operator|new
name|TinyDatanode
argument_list|(
name|idx
argument_list|,
name|blocksPerReport
argument_list|)
expr_stmt|;
name|datanodes
index|[
name|idx
index|]
operator|.
name|register
argument_list|()
expr_stmt|;
assert|assert
name|datanodes
index|[
name|idx
index|]
operator|.
name|getXferAddr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|prevDNName
argument_list|)
operator|>
literal|0
operator|:
literal|"Data-nodes must be sorted lexicographically."
assert|;
name|datanodes
index|[
name|idx
index|]
operator|.
name|sendHeartbeat
argument_list|()
expr_stmt|;
name|prevDNName
operator|=
name|datanodes
index|[
name|idx
index|]
operator|.
name|getXferAddr
argument_list|()
expr_stmt|;
block|}
comment|// create files
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|nrFiles
operator|+
literal|" with "
operator|+
name|blocksPerFile
operator|+
literal|" blocks each."
argument_list|)
expr_stmt|;
name|FileNameGenerator
name|nameGenerator
decl_stmt|;
name|nameGenerator
operator|=
operator|new
name|FileNameGenerator
argument_list|(
name|getBaseDir
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|String
name|clientName
init|=
name|getClientName
argument_list|(
literal|007
argument_list|)
decl_stmt|;
name|nameNodeProto
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrFiles
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|fileName
init|=
name|nameGenerator
operator|.
name|getNextFileName
argument_list|(
literal|"ThroughputBench"
argument_list|)
decl_stmt|;
name|nameNodeProto
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
name|replication
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|lastBlock
init|=
name|addBlocks
argument_list|(
name|fileName
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
name|nameNodeProto
operator|.
name|complete
argument_list|(
name|fileName
argument_list|,
name|clientName
argument_list|,
name|lastBlock
argument_list|,
name|INodeId
operator|.
name|GRANDFATHER_INODE_ID
argument_list|)
expr_stmt|;
block|}
comment|// prepare block reports
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrDatanodes
condition|;
name|idx
operator|++
control|)
block|{
name|datanodes
index|[
name|idx
index|]
operator|.
name|formBlockReport
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addBlocks (String fileName, String clientName)
specifier|private
name|ExtendedBlock
name|addBlocks
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|prevBlock
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|jdx
init|=
literal|0
init|;
name|jdx
operator|<
name|blocksPerFile
condition|;
name|jdx
operator|++
control|)
block|{
name|LocatedBlock
name|loc
init|=
name|nameNodeProto
operator|.
name|addBlock
argument_list|(
name|fileName
argument_list|,
name|clientName
argument_list|,
name|prevBlock
argument_list|,
literal|null
argument_list|,
name|INodeId
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|prevBlock
operator|=
name|loc
operator|.
name|getBlock
argument_list|()
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dnInfo
range|:
name|loc
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|int
name|dnIdx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|datanodes
argument_list|,
name|dnInfo
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl_stmt|;
name|datanodes
index|[
name|dnIdx
index|]
operator|.
name|addBlock
argument_list|(
name|loc
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
name|ReceivedDeletedBlockInfo
index|[]
name|rdBlocks
init|=
block|{
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|loc
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|report
init|=
block|{
operator|new
name|StorageReceivedDeletedBlocks
argument_list|(
name|datanodes
index|[
name|dnIdx
index|]
operator|.
name|dnRegistration
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|rdBlocks
argument_list|)
block|}
decl_stmt|;
name|nameNodeProto
operator|.
name|blockReceivedAndDeleted
argument_list|(
name|datanodes
index|[
name|dnIdx
index|]
operator|.
name|dnRegistration
argument_list|,
name|loc
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prevBlock
return|;
block|}
comment|/**      * Does not require the argument      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|daemonId
operator|<
name|numThreads
operator|:
literal|"Wrong daemonId."
assert|;
name|TinyDatanode
name|dn
init|=
name|datanodes
index|[
name|daemonId
index|]
decl_stmt|;
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|StorageBlockReport
index|[]
name|report
init|=
block|{
operator|new
name|StorageBlockReport
argument_list|(
name|dn
operator|.
name|storage
argument_list|,
name|dn
operator|.
name|getBlockReportList
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|nameNodeProto
operator|.
name|blockReport
argument_list|(
name|dn
operator|.
name|dnRegistration
argument_list|,
name|nameNode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|String
name|blockDistribution
init|=
literal|""
decl_stmt|;
name|String
name|delim
init|=
literal|"("
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|getNumDatanodes
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|blockDistribution
operator|+=
name|delim
operator|+
name|datanodes
index|[
name|idx
index|]
operator|.
name|nrBlocks
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
name|blockDistribution
operator|+=
literal|")"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"reports = "
operator|+
name|numOpsRequired
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"datanodes = "
operator|+
name|numThreads
operator|+
literal|" "
operator|+
name|blockDistribution
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"blocksPerReport = "
operator|+
name|blocksPerReport
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"blocksPerFile = "
operator|+
name|blocksPerFile
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|// end BlockReportStats
comment|/**    * Measures how fast replication monitor can compute data-node work.    *     * It runs only one thread until no more work can be scheduled.    */
DECL|class|ReplicationStats
class|class
name|ReplicationStats
extends|extends
name|OperationStatsBase
block|{
DECL|field|OP_REPLICATION_NAME
specifier|static
specifier|final
name|String
name|OP_REPLICATION_NAME
init|=
literal|"replication"
decl_stmt|;
DECL|field|OP_REPLICATION_USAGE
specifier|static
specifier|final
name|String
name|OP_REPLICATION_USAGE
init|=
literal|"-op replication [-datanodes T] [-nodesToDecommission D] "
operator|+
literal|"[-nodeReplicationLimit C] [-totalBlocks B] [-replication R]"
decl_stmt|;
DECL|field|blockReportObject
specifier|private
name|BlockReportStats
name|blockReportObject
decl_stmt|;
DECL|field|numDatanodes
specifier|private
name|int
name|numDatanodes
decl_stmt|;
DECL|field|nodesToDecommission
specifier|private
name|int
name|nodesToDecommission
decl_stmt|;
DECL|field|nodeReplicationLimit
specifier|private
name|int
name|nodeReplicationLimit
decl_stmt|;
DECL|field|totalBlocks
specifier|private
name|int
name|totalBlocks
decl_stmt|;
DECL|field|numDecommissionedBlocks
specifier|private
name|int
name|numDecommissionedBlocks
decl_stmt|;
DECL|field|numPendingBlocks
specifier|private
name|int
name|numPendingBlocks
decl_stmt|;
DECL|method|ReplicationStats (List<String> args)
name|ReplicationStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|numThreads
operator|=
literal|1
expr_stmt|;
name|numDatanodes
operator|=
literal|3
expr_stmt|;
name|nodesToDecommission
operator|=
literal|1
expr_stmt|;
name|nodeReplicationLimit
operator|=
literal|100
expr_stmt|;
name|totalBlocks
operator|=
literal|100
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// number of operations is 4 times the number of decommissioned
comment|// blocks divided by the number of needed replications scanned
comment|// by the replication monitor in one iteration
name|numOpsRequired
operator|=
operator|(
name|totalBlocks
operator|*
name|replication
operator|*
name|nodesToDecommission
operator|*
literal|2
operator|)
operator|/
operator|(
name|numDatanodes
operator|*
name|numDatanodes
operator|)
expr_stmt|;
name|String
index|[]
name|blkReportArgs
init|=
block|{
literal|"-op"
block|,
literal|"blockReport"
block|,
literal|"-datanodes"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|numDatanodes
argument_list|)
block|,
literal|"-blocksPerReport"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|totalBlocks
operator|*
name|replication
operator|/
name|numDatanodes
argument_list|)
block|,
literal|"-blocksPerFile"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|numDatanodes
argument_list|)
block|}
decl_stmt|;
name|blockReportObject
operator|=
operator|new
name|BlockReportStats
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blkReportArgs
argument_list|)
argument_list|)
expr_stmt|;
name|numDecommissionedBlocks
operator|=
literal|0
expr_stmt|;
name|numPendingBlocks
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_REPLICATION_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|boolean
name|ignoreUnrelatedOptions
init|=
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-datanodes"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|numDatanodes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-nodesToDecommission"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|nodesToDecommission
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-nodeReplicationLimit"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|nodeReplicationLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-totalBlocks"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|totalBlocks
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-replication"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|replication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ignoreUnrelatedOptions
condition|)
name|printUsage
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|generateInputs (int[] ignore)
name|void
name|generateInputs
parameter_list|(
name|int
index|[]
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|nameNode
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
comment|// start data-nodes; create a bunch of files; generate block reports.
name|blockReportObject
operator|.
name|generateInputs
argument_list|(
name|ignore
argument_list|)
expr_stmt|;
comment|// stop replication monitor
name|BlockManagerTestUtil
operator|.
name|stopReplicationThread
argument_list|(
name|namesystem
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// report blocks once
name|int
name|nrDatanodes
init|=
name|blockReportObject
operator|.
name|getNumDatanodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrDatanodes
condition|;
name|idx
operator|++
control|)
block|{
name|blockReportObject
operator|.
name|executeOp
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// decommission data-nodes
name|decommissionNodes
argument_list|()
expr_stmt|;
comment|// set node replication limit
name|BlockManagerTestUtil
operator|.
name|setNodeReplicationLimit
argument_list|(
name|namesystem
operator|.
name|getBlockManager
argument_list|()
argument_list|,
name|nodeReplicationLimit
argument_list|)
expr_stmt|;
block|}
DECL|method|decommissionNodes ()
specifier|private
name|void
name|decommissionNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|excludeFN
init|=
name|config
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
literal|"exclude"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|excludeFile
init|=
operator|new
name|FileOutputStream
argument_list|(
name|excludeFN
argument_list|)
decl_stmt|;
name|excludeFile
operator|.
name|getChannel
argument_list|()
operator|.
name|truncate
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|int
name|nrDatanodes
init|=
name|blockReportObject
operator|.
name|getNumDatanodes
argument_list|()
decl_stmt|;
name|numDecommissionedBlocks
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesToDecommission
condition|;
name|i
operator|++
control|)
block|{
name|TinyDatanode
name|dn
init|=
name|blockReportObject
operator|.
name|datanodes
index|[
name|nrDatanodes
operator|-
literal|1
operator|-
name|i
index|]
decl_stmt|;
name|numDecommissionedBlocks
operator|+=
name|dn
operator|.
name|nrBlocks
expr_stmt|;
name|excludeFile
operator|.
name|write
argument_list|(
name|dn
operator|.
name|getXferAddr
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|excludeFile
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Datanode "
operator|+
name|dn
operator|+
literal|" is decommissioned."
argument_list|)
expr_stmt|;
block|}
name|excludeFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|nameNodeProto
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
comment|/**      * Does not require the argument      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String ignore)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|ignore
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|daemonId
operator|<
name|numThreads
operator|:
literal|"Wrong daemonId."
assert|;
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// compute data-node work
name|int
name|work
init|=
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|nameNode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|numPendingBlocks
operator|+=
name|work
expr_stmt|;
if|if
condition|(
name|work
operator|==
literal|0
condition|)
name|daemons
operator|.
name|get
argument_list|(
name|daemonId
argument_list|)
operator|.
name|terminate
argument_list|()
expr_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|String
name|blockDistribution
init|=
literal|""
decl_stmt|;
name|String
name|delim
init|=
literal|"("
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|blockReportObject
operator|.
name|getNumDatanodes
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|blockDistribution
operator|+=
name|delim
operator|+
name|blockReportObject
operator|.
name|datanodes
index|[
name|idx
index|]
operator|.
name|nrBlocks
expr_stmt|;
name|delim
operator|=
literal|", "
expr_stmt|;
block|}
name|blockDistribution
operator|+=
literal|")"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"numOpsRequired = "
operator|+
name|numOpsRequired
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"datanodes = "
operator|+
name|numDatanodes
operator|+
literal|" "
operator|+
name|blockDistribution
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"decommissioned datanodes = "
operator|+
name|nodesToDecommission
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"datanode replication limit = "
operator|+
name|nodeReplicationLimit
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"total blocks = "
operator|+
name|totalBlocks
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"decommissioned blocks = "
operator|+
name|numDecommissionedBlocks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pending replications = "
operator|+
name|numPendingBlocks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"replications per sec: "
operator|+
name|getBlocksPerSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlocksPerSecond ()
specifier|private
name|double
name|getBlocksPerSecond
parameter_list|()
block|{
return|return
name|elapsedTime
operator|==
literal|0
condition|?
literal|0
else|:
literal|1000
operator|*
operator|(
name|double
operator|)
name|numPendingBlocks
operator|/
name|elapsedTime
return|;
block|}
block|}
comment|// end ReplicationStats
DECL|method|printUsage ()
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: NNThroughputBenchmark"
operator|+
literal|"\n\t"
operator|+
name|OperationStatsBase
operator|.
name|OP_ALL_USAGE
operator|+
literal|" | \n\t"
operator|+
name|CreateFileStats
operator|.
name|OP_CREATE_USAGE
operator|+
literal|" | \n\t"
operator|+
name|OpenFileStats
operator|.
name|OP_OPEN_USAGE
operator|+
literal|" | \n\t"
operator|+
name|DeleteFileStats
operator|.
name|OP_DELETE_USAGE
operator|+
literal|" | \n\t"
operator|+
name|FileStatusStats
operator|.
name|OP_FILE_STATUS_USAGE
operator|+
literal|" | \n\t"
operator|+
name|RenameFileStats
operator|.
name|OP_RENAME_USAGE
operator|+
literal|" | \n\t"
operator|+
name|BlockReportStats
operator|.
name|OP_BLOCK_REPORT_USAGE
operator|+
literal|" | \n\t"
operator|+
name|ReplicationStats
operator|.
name|OP_REPLICATION_USAGE
operator|+
literal|" | \n\t"
operator|+
name|CleanAllStats
operator|.
name|OP_CLEAN_USAGE
operator|+
literal|" | \n\t"
operator|+
name|GENERAL_OPTIONS_USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Main method of the benchmark.    * @param args command line parameters    */
DECL|method|runBenchmark (Configuration conf, List<String> args)
specifier|public
specifier|static
name|void
name|runBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
operator|!
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-op"
argument_list|)
condition|)
name|printUsage
argument_list|()
expr_stmt|;
name|String
name|type
init|=
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|runAll
init|=
name|OperationStatsBase
operator|.
name|OP_ALL_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|NNThroughputBenchmark
name|bench
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OperationStatsBase
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|OperationStatsBase
argument_list|>
argument_list|()
decl_stmt|;
name|OperationStatsBase
name|opStat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bench
operator|=
operator|new
name|NNThroughputBenchmark
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|runAll
operator|||
name|CreateFileStats
operator|.
name|OP_CREATE_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|CreateFileStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|OpenFileStats
operator|.
name|OP_OPEN_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|OpenFileStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|DeleteFileStats
operator|.
name|OP_DELETE_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|DeleteFileStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|FileStatusStats
operator|.
name|OP_FILE_STATUS_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|FileStatusStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|RenameFileStats
operator|.
name|OP_RENAME_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|RenameFileStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|BlockReportStats
operator|.
name|OP_BLOCK_REPORT_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|BlockReportStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|ReplicationStats
operator|.
name|OP_REPLICATION_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|ReplicationStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|CleanAllStats
operator|.
name|OP_CLEAN_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
name|bench
operator|.
expr|new
name|CleanAllStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ops
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|printUsage
argument_list|()
expr_stmt|;
comment|// run each benchmark
for|for
control|(
name|OperationStatsBase
name|op
range|:
name|ops
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting benchmark: "
operator|+
name|op
operator|.
name|getOpName
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|benchmark
argument_list|()
expr_stmt|;
name|op
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
comment|// print statistics
for|for
control|(
name|OperationStatsBase
name|op
range|:
name|ops
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|op
operator|.
name|printResults
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|bench
operator|!=
literal|null
condition|)
name|bench
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|runBenchmark
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

