begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|AsyncCallHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AsyncGetFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/** Test async methods with HA setup. */
end_comment

begin_class
DECL|class|TestAsyncHDFSWithHA
specifier|public
class|class
name|TestAsyncHDFSWithHA
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAsyncHDFSWithHA
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|RetryInvocationHandler
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|getReturnValue ()
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Future
argument_list|<
name|T
argument_list|>
name|getReturnValue
parameter_list|()
block|{
return|return
operator|new
name|AsyncGetFuture
argument_list|<>
argument_list|(
name|AsyncCallHandler
operator|.
name|getAsyncReturn
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mkdirs (DistributedFileSystem dfs, String dir, Path[] srcs, Path[] dsts)
specifier|static
name|void
name|mkdirs
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
name|dir
parameter_list|,
name|Path
index|[]
name|srcs
parameter_list|,
name|Path
index|[]
name|dsts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dsts
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTestAsyncWithoutRetry (Configuration conf, MiniDFSCluster cluster, DistributedFileSystem dfs)
specifier|static
name|void
name|runTestAsyncWithoutRetry
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|num
init|=
literal|5
decl_stmt|;
specifier|final
name|String
name|renameDir
init|=
literal|"/testAsyncWithoutRetry/"
decl_stmt|;
specifier|final
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|num
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|Path
index|[]
name|dsts
init|=
operator|new
name|Path
index|[
name|num
operator|+
literal|1
index|]
decl_stmt|;
name|mkdirs
argument_list|(
name|dfs
argument_list|,
name|renameDir
argument_list|,
name|srcs
argument_list|,
name|dsts
argument_list|)
expr_stmt|;
comment|// create a proxy without retry.
specifier|final
name|NameNodeProxiesClient
operator|.
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxyInfo
init|=
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|ClientProtocol
name|cp
init|=
name|proxyInfo
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// submit async calls
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|src
init|=
name|srcs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dst
init|=
name|dsts
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|i
operator|+
literal|") rename "
operator|+
name|src
operator|+
literal|" -> "
operator|+
name|dst
argument_list|)
expr_stmt|;
name|cp
operator|.
name|rename2
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|getReturnValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// wait for the async calls
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|f
range|:
name|results
control|)
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|//check results
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Testing HDFS async methods with HA setup. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testAsyncWithHAFailover ()
specifier|public
name|void
name|testAsyncWithHAFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|num
init|=
literal|10
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|runTestAsyncWithoutRetry
argument_list|(
name|conf
argument_list|,
name|cluster
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
specifier|final
name|String
name|renameDir
init|=
literal|"/testAsyncWithHAFailover/"
decl_stmt|;
specifier|final
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|num
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|Path
index|[]
name|dsts
init|=
operator|new
name|Path
index|[
name|num
operator|+
literal|1
index|]
decl_stmt|;
name|mkdirs
argument_list|(
name|dfs
argument_list|,
name|renameDir
argument_list|,
name|srcs
argument_list|,
name|dsts
argument_list|)
expr_stmt|;
comment|// submit async calls and trigger failover in the middle.
specifier|final
name|AsyncDistributedFileSystem
name|adfs
init|=
name|dfs
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|num
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|half
init|=
name|num
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|num
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|i
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|id
operator|==
name|half
condition|)
block|{
comment|// failover
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// rename
name|results
operator|.
name|add
argument_list|(
name|adfs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|id
index|]
argument_list|,
name|dsts
index|[
name|id
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for the tasks
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
operator|+
literal|1
argument_list|,
name|futures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|num
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// wait for the async calls
name|Assert
operator|.
name|assertEquals
argument_list|(
name|num
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|r
range|:
name|results
control|)
block|{
name|r
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// check results
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|num
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|boolean
name|renamed
init|=
name|i
operator|!=
name|half
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|!
name|renamed
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|renamed
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

