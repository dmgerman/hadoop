begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodesInPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests the replication handling/calculation of snapshots. In  * particular, {@link INodeFile#getFileReplication()} and  * {@link INodeFile#getPreferredBlockReplication()} are tested to make sure  * the number of replication is calculated correctly with/without snapshots.  */
end_comment

begin_class
DECL|class|TestSnapshotReplication
specifier|public
class|class
name|TestSnapshotReplication
block|{
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|NUMDATANODE
specifier|private
specifier|static
specifier|final
name|int
name|NUMDATANODE
init|=
literal|5
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|file1
specifier|private
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|fsdir
name|FSDirectory
name|fsdir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUMDATANODE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Check the replication of a given file. We test both    * {@link INodeFile#getFileReplication()} and    * {@link INodeFile#getPreferredBlockReplication()}.    *    * @param file The given file    * @param replication The expected replication number    * @param blockReplication The expected replication number for the block    * @throws Exception    */
DECL|method|checkFileReplication (Path file, short replication, short blockReplication)
specifier|private
name|void
name|checkFileReplication
parameter_list|(
name|Path
name|file
parameter_list|,
name|short
name|replication
parameter_list|,
name|short
name|blockReplication
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get FileStatus of file1, and identify the replication number of file1.
comment|// Note that the replication number in FileStatus was derived from
comment|// INodeFile#getFileReplication().
name|short
name|fileReplication
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|replication
argument_list|,
name|fileReplication
argument_list|)
expr_stmt|;
comment|// Check the correctness of getPreferredBlockReplication()
name|INode
name|inode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inode
operator|instanceof
name|INodeFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockReplication
argument_list|,
operator|(
operator|(
name|INodeFile
operator|)
name|inode
operator|)
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test replication number calculation for a normal file without snapshots.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicationWithoutSnapshot ()
specifier|public
name|void
name|testReplicationWithoutSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create file1, set its replication to REPLICATION
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Check the replication of file1
name|checkFileReplication
argument_list|(
name|file1
argument_list|,
name|REPLICATION
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Change the replication factor of file1 from 3 to 2
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file1
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the replication again
name|checkFileReplication
argument_list|(
name|file1
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getINodeFile (Path p)
name|INodeFile
name|getINodeFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|s
init|=
name|p
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|fsdir
operator|.
name|getINode
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|)
return|;
block|}
comment|/**    * Check the replication for both the current file and all its prior snapshots    *     * @param currentFile    *          the Path of the current file    * @param snapshotRepMap    *          A map maintaining all the snapshots of the current file, as well    *          as their expected replication number stored in their corresponding    *          INodes    * @param expectedBlockRep    *          The expected replication number    * @throws Exception    */
DECL|method|checkSnapshotFileReplication (Path currentFile, Map<Path, Short> snapshotRepMap, short expectedBlockRep)
specifier|private
name|void
name|checkSnapshotFileReplication
parameter_list|(
name|Path
name|currentFile
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|Short
argument_list|>
name|snapshotRepMap
parameter_list|,
name|short
name|expectedBlockRep
parameter_list|)
throws|throws
name|Exception
block|{
comment|// First check the getPreferredBlockReplication for the INode of
comment|// the currentFile
specifier|final
name|INodeFile
name|inodeOfCurrentFile
init|=
name|getINodeFile
argument_list|(
name|currentFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockRep
argument_list|,
name|inodeOfCurrentFile
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Then check replication for every snapshot
for|for
control|(
name|Path
name|ss
range|:
name|snapshotRepMap
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsdir
operator|.
name|getINodesInPath
argument_list|(
name|ss
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|INodeFile
name|ssInode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|asFile
argument_list|()
decl_stmt|;
comment|// The replication number derived from the
comment|// INodeFileWithLink#getPreferredBlockReplication should
comment|// always == expectedBlockRep
name|assertEquals
argument_list|(
name|expectedBlockRep
argument_list|,
name|ssInode
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also check the number derived from INodeFile#getFileReplication
name|assertEquals
argument_list|(
name|snapshotRepMap
operator|.
name|get
argument_list|(
name|ss
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|,
name|ssInode
operator|.
name|getFileReplication
argument_list|(
name|iip
operator|.
name|getPathSnapshotId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test replication number calculation for a file with snapshots.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicationWithSnapshot ()
specifier|public
name|void
name|testReplicationWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|short
name|fileRep
init|=
literal|1
decl_stmt|;
comment|// Create file1, set its replication to 1
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|fileRep
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|Short
argument_list|>
name|snapshotRepMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
comment|// Change replication factor from 1 to 5. In the meanwhile, keep taking
comment|// snapshots for sub1
for|for
control|(
init|;
name|fileRep
operator|<
name|NUMDATANODE
condition|;
control|)
block|{
comment|// Create snapshot for sub1
name|Path
name|snapshotRoot
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub1
argument_list|,
literal|"s"
operator|+
name|fileRep
argument_list|)
decl_stmt|;
name|Path
name|snapshot
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check the replication stored in the INode of the snapshot of file1
name|assertEquals
argument_list|(
name|fileRep
argument_list|,
name|getINodeFile
argument_list|(
name|snapshot
argument_list|)
operator|.
name|getFileReplication
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotRepMap
operator|.
name|put
argument_list|(
name|snapshot
argument_list|,
name|fileRep
argument_list|)
expr_stmt|;
comment|// Increase the replication factor by 1
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file1
argument_list|,
operator|++
name|fileRep
argument_list|)
expr_stmt|;
comment|// Check the replication for file1
name|checkFileReplication
argument_list|(
name|file1
argument_list|,
name|fileRep
argument_list|,
name|fileRep
argument_list|)
expr_stmt|;
comment|// Also check the replication for all the prior snapshots of file1
name|checkSnapshotFileReplication
argument_list|(
name|file1
argument_list|,
name|snapshotRepMap
argument_list|,
name|fileRep
argument_list|)
expr_stmt|;
block|}
comment|// Change replication factor back to 3.
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file1
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Check the replication for file1
comment|// Currently the max replication among snapshots should be 4
name|checkFileReplication
argument_list|(
name|file1
argument_list|,
name|REPLICATION
argument_list|,
call|(
name|short
call|)
argument_list|(
name|NUMDATANODE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also check the replication for all the prior snapshots of file1.
comment|// Currently the max replication among snapshots should be 4
name|checkSnapshotFileReplication
argument_list|(
name|file1
argument_list|,
name|snapshotRepMap
argument_list|,
call|(
name|short
call|)
argument_list|(
name|NUMDATANODE
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test replication for a file with snapshots, also including the scenario    * where the original file is deleted    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicationAfterDeletion ()
specifier|public
name|void
name|testReplicationAfterDeletion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create file1, set its replication to 3
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|Short
argument_list|>
name|snapshotRepMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
comment|// Take 3 snapshots of sub1
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|root
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub1
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Path
name|ssFile
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|snapshotRepMap
operator|.
name|put
argument_list|(
name|ssFile
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
block|}
comment|// Check replication
name|checkFileReplication
argument_list|(
name|file1
argument_list|,
name|REPLICATION
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|checkSnapshotFileReplication
argument_list|(
name|file1
argument_list|,
name|snapshotRepMap
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Delete file1
name|hdfs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Check replication of snapshots
for|for
control|(
name|Path
name|ss
range|:
name|snapshotRepMap
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|INodeFile
name|ssInode
init|=
name|getINodeFile
argument_list|(
name|ss
argument_list|)
decl_stmt|;
comment|// The replication number derived from the
comment|// INodeFileWithLink#getPreferredBlockReplication should
comment|// always == expectedBlockRep
name|assertEquals
argument_list|(
name|REPLICATION
argument_list|,
name|ssInode
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also check the number derived from INodeFile#getFileReplication
name|assertEquals
argument_list|(
name|snapshotRepMap
operator|.
name|get
argument_list|(
name|ss
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|,
name|ssInode
operator|.
name|getFileReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

