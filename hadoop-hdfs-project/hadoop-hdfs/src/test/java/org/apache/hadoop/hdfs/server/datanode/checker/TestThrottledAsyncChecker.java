begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Verify functionality of {@link ThrottledAsyncChecker}.  */
end_comment

begin_class
DECL|class|TestThrottledAsyncChecker
specifier|public
class|class
name|TestThrottledAsyncChecker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestThrottledAsyncChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MIN_ERROR_CHECK_GAP
specifier|private
specifier|static
specifier|final
name|long
name|MIN_ERROR_CHECK_GAP
init|=
literal|1000
decl_stmt|;
comment|/**    * Test various scheduling combinations to ensure scheduling and    * throttling behave as expected.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testScheduler ()
specifier|public
name|void
name|testScheduler
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoOpCheckable
name|target1
init|=
operator|new
name|NoOpCheckable
argument_list|()
decl_stmt|;
specifier|final
name|NoOpCheckable
name|target2
init|=
operator|new
name|NoOpCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|MIN_ERROR_CHECK_GAP
argument_list|,
literal|0
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
comment|// check target1 and ensure we get back the expected result.
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Check target1 again without advancing the timer. target1 should not
comment|// be checked again.
name|assertFalse
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Schedule target2 scheduled without advancing the timer.
comment|// target2 should be checked as it has never been checked before.
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target2
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target2
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Advance the timer but just short of the min gap.
comment|// Neither target1 nor target2 should be checked again.
name|timer
operator|.
name|advance
argument_list|(
name|MIN_ERROR_CHECK_GAP
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target2
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target2
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Advance the timer again.
comment|// Both targets should be checked now.
name|timer
operator|.
name|advance
argument_list|(
name|MIN_ERROR_CHECK_GAP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target2
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target2
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testConcurrentChecks ()
specifier|public
name|void
name|testConcurrentChecks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StalledCheckable
name|target
init|=
operator|new
name|StalledCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|MIN_ERROR_CHECK_GAP
argument_list|,
literal|0
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf1
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf2
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Ensure that concurrent requests return the future object
comment|// for the first caller.
name|assertTrue
argument_list|(
name|olf1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|olf2
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that the context is passed through to the Checkable#check    * method.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContextIsPassed ()
specifier|public
name|void
name|testContextIsPassed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NoOpCheckable
name|target1
init|=
operator|new
name|NoOpCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|MIN_ERROR_CHECK_GAP
argument_list|,
literal|0
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|MIN_ERROR_CHECK_GAP
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|false
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
DECL|method|waitTestCheckableCheckCount (TestCheckableBase target, long expectedChecks)
specifier|private
name|void
name|waitTestCheckableCheckCount
parameter_list|(
name|TestCheckableBase
name|target
parameter_list|,
name|long
name|expectedChecks
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// This can take a short while until the internal callback in
comment|// ThrottledAsyncChecker is scheduled for execution.
comment|// If it does trigger a new check then the test
comment|// will fail with a timeout.
return|return
name|target
operator|.
name|getTotalChecks
argument_list|()
operator|==
name|expectedChecks
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that an exception thrown by the check routine is    * propagated.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExceptionIsPropagated ()
specifier|public
name|void
name|testExceptionIsPropagated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThrowingCheckable
name|target
init|=
operator|new
name|ThrowingCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|MIN_ERROR_CHECK_GAP
argument_list|,
literal|0
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|olf
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|olf
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to get expected ExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DummyException
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that the exception from a failed check is cached    * and returned without re-running the check when the minimum    * gap has not elapsed.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExceptionCaching ()
specifier|public
name|void
name|testExceptionCaching
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ThrowingCheckable
name|target1
init|=
operator|new
name|ThrowingCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|MIN_ERROR_CHECK_GAP
argument_list|,
literal|0
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|checker
operator|.
name|schedule
argument_list|(
name|target1
argument_list|,
literal|true
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|waitTestCheckableCheckCount
argument_list|(
name|target1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple ExecutorService for testing.    */
DECL|method|getExecutorService ()
specifier|private
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|class|TestCheckableBase
specifier|private
specifier|abstract
specifier|static
class|class
name|TestCheckableBase
implements|implements
name|Checkable
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
block|{
DECL|field|numChecks
specifier|protected
specifier|final
name|AtomicLong
name|numChecks
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|getTotalChecks ()
specifier|public
name|long
name|getTotalChecks
parameter_list|()
block|{
return|return
name|numChecks
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|incrTotalChecks ()
specifier|public
name|void
name|incrTotalChecks
parameter_list|()
block|{
name|numChecks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A Checkable that just returns its input.    */
DECL|class|NoOpCheckable
specifier|private
specifier|static
class|class
name|NoOpCheckable
extends|extends
name|TestCheckableBase
block|{
annotation|@
name|Override
DECL|method|check (Boolean context)
specifier|public
name|Boolean
name|check
parameter_list|(
name|Boolean
name|context
parameter_list|)
block|{
name|incrTotalChecks
argument_list|()
expr_stmt|;
return|return
name|context
return|;
block|}
block|}
comment|/**    * A Checkable that throws an exception when checked.    */
DECL|class|ThrowingCheckable
specifier|private
specifier|static
class|class
name|ThrowingCheckable
extends|extends
name|TestCheckableBase
block|{
annotation|@
name|Override
DECL|method|check (Boolean context)
specifier|public
name|Boolean
name|check
parameter_list|(
name|Boolean
name|context
parameter_list|)
throws|throws
name|DummyException
block|{
name|incrTotalChecks
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|DummyException
argument_list|()
throw|;
block|}
block|}
DECL|class|DummyException
specifier|private
specifier|static
class|class
name|DummyException
extends|extends
name|Exception
block|{   }
comment|/**    * A checkable that hangs forever when checked.    */
DECL|class|StalledCheckable
specifier|private
specifier|static
class|class
name|StalledCheckable
implements|implements
name|Checkable
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
block|{
annotation|@
name|Override
DECL|method|check (Boolean ignored)
specifier|public
name|Boolean
name|check
parameter_list|(
name|Boolean
name|ignored
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// Unreachable.
block|}
block|}
block|}
end_class

end_unit

