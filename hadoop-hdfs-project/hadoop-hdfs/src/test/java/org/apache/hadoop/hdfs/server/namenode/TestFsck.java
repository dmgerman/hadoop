begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|RollingFileAppender
import|;
end_import

begin_comment
comment|/**  * A JUnit test for doing fsck  */
end_comment

begin_class
DECL|class|TestFsck
specifier|public
class|class
name|TestFsck
extends|extends
name|TestCase
block|{
DECL|field|auditLogFile
specifier|static
specifier|final
name|String
name|auditLogFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"build/test"
argument_list|)
operator|+
literal|"/audit.log"
decl_stmt|;
comment|// Pattern for:
comment|// ugi=name ip=/address cmd=FSCK src=/ dst=null perm=null
DECL|field|fsckPattern
specifier|static
specifier|final
name|Pattern
name|fsckPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"ugi=.*?\\s"
operator|+
literal|"ip=/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\s"
operator|+
literal|"cmd=fsck\\ssrc=\\/\\sdst=null\\s"
operator|+
literal|"perm=null"
argument_list|)
decl_stmt|;
DECL|method|runFsck (Configuration conf, int expectedErrCode, boolean checkErrorCode,String... path)
specifier|static
name|String
name|runFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|expectedErrCode
parameter_list|,
name|boolean
name|checkErrorCode
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSPermissionChecker
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|int
name|errCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkErrorCode
condition|)
name|assertEquals
argument_list|(
name|expectedErrCode
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSPermissionChecker
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
return|return
name|bStream
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** do fsck */
DECL|method|testFsck ()
specifier|public
name|void
name|testFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"TestFsck"
argument_list|,
literal|20
argument_list|,
literal|3
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|long
name|precision
init|=
literal|1L
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/srcdat"
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|aTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|setupAuditLogs
argument_list|()
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyAuditLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|aTime
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// restart the cluster; bring up namenode but not the data nodes
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// expect the result is corrupt
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
comment|// bring up data nodes& cleanup cluster
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Sets up log4j logger for auditlogs */
DECL|method|setupAuditLogs ()
specifier|private
name|void
name|setupAuditLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|auditLogFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|auditLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|PatternLayout
name|layout
init|=
operator|new
name|PatternLayout
argument_list|(
literal|"%m%n"
argument_list|)
decl_stmt|;
name|RollingFileAppender
name|appender
init|=
operator|new
name|RollingFileAppender
argument_list|(
name|layout
argument_list|,
name|auditLogFile
argument_list|)
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAuditLogs ()
specifier|private
name|void
name|verifyAuditLogs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Turn off the logs
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|auditLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
comment|// Ensure audit log has only one for FSCK
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|auditLogFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected fsck event not found in audit log"
argument_list|,
name|fsckPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected event in audit log"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFsckNonExistent ()
specifier|public
name|void
name|testFsckNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"TestFsck"
argument_list|,
literal|20
argument_list|,
literal|3
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/non-existent"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|outStr
operator|.
name|indexOf
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Test fsck with permission set on inodes */
DECL|method|testFsckPermission ()
specifier|public
name|void
name|testFsckPermission
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|3
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create a cluster with the current user, write some files
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|c2
init|=
name|cluster
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/dfsck"
decl_stmt|;
specifier|final
name|Path
name|dirpath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|c2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|dirpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
comment|// run DFSck as another user, should fail with permission issue
name|UserGroupInformation
name|fakeUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"ProbablyNotARealUserName"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ShangriLa"
block|}
argument_list|)
decl_stmt|;
name|fakeUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// set permission and try DFSck again as the fake user, should succeed
name|fs
operator|.
name|setPermission
argument_list|(
name|dirpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|fakeUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFsckMove ()
specifier|public
name|void
name|testFsckMove
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"TestFsck"
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|topDir
init|=
literal|"/srcdat"
decl_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corrupt a block by deleting it
name|String
index|[]
name|fileNames
init|=
name|util
operator|.
name|getFileNames
argument_list|(
name|topDir
argument_list|)
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|fileNames
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We excpect the filesystem to be corrupted
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// Fix the filesystem by moving corrupted files to lost+found
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-move"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check to make sure we have healthy filesystem
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFsckOpenFiles ()
specifier|public
name|void
name|testFsckOpenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"TestFsck"
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|topDir
init|=
literal|"/srcdat"
decl_stmt|;
name|String
name|randomString
init|=
literal|"HADOOP  "
decl_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Open a file for writing and do not close for now
name|Path
name|openFile
init|=
operator|new
name|Path
argument_list|(
name|topDir
operator|+
literal|"/openFile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|openFile
argument_list|)
decl_stmt|;
name|int
name|writeCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|writeCount
operator|!=
literal|100
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|randomString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writeCount
operator|++
expr_stmt|;
block|}
comment|// We expect the filesystem to be HEALTHY and show one open file
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use -openforwrite option to list open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|,
literal|"-openforwrite"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"openFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the file
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now, fsck should show HEALTHY fs and should not show any open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCorruptBlock ()
specifier|public
name|void
name|testCorruptBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
literal|null
decl_stmt|;
name|LocatedBlocks
name|blocks
init|=
literal|null
decl_stmt|;
name|int
name|replicaCount
init|=
literal|0
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|outStr
init|=
literal|null
decl_stmt|;
name|short
name|factor
init|=
literal|1
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testCorruptBlock"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Wait until file replication has completed
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
decl_stmt|;
comment|// Make sure filesystem is in healthy state
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// corrupt replicas
name|File
name|blockFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
literal|0
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|raFile
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|badString
init|=
literal|"BADBAD"
decl_stmt|;
name|int
name|rand
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|channel
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|badString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Read the file to trigger reportBadBlocks
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// Ignore exception
block|}
name|dfsClient
operator|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
while|while
condition|(
name|replicaCount
operator|!=
name|factor
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if fsck reports the same
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"testCorruptBlock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Test if fsck can return -1 in case of failure    *     * @throws Exception    */
DECL|method|testFsckError ()
specifier|public
name|void
name|testFsckError
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// bring up a one-node cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
literal|"/test.txt"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a one-block file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// intentionally corrupt NN data structure
name|INodeFile
name|node
init|=
operator|(
name|INodeFile
operator|)
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|dir
operator|.
name|rootDir
operator|.
name|getNode
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|blocks
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|node
operator|.
name|blocks
index|[
literal|0
index|]
operator|.
name|setNumBytes
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|// set the block length to be negative
comment|// run fsck and expect a failure with -1 as the error code
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|FAILURE_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up file system
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** check if option -list-corruptfiles of fsck command works properly */
DECL|method|testFsckListCorruptFilesBlocks ()
specifier|public
name|void
name|testFsckListCorruptFilesBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"testGetCorruptFiles"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// String outStr = runFsck(conf, 0, true, "/corruptData", "-list-corruptfileblocks");
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1. good fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 0 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the blocks
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|File
index|[]
name|blocks
init|=
name|data_dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|blocks
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|blocks
index|[
name|idx
index|]
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"blk_"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blocks
index|[
name|idx
index|]
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for the namenode to see the corruption
specifier|final
name|NamenodeProtocols
name|namenode
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|CorruptFileBlocks
name|corruptFileBlocks
init|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|numCorrupt
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2. bad fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 3 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do a listing on a dir which doesn't have any corrupt blocks and validate
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/goodData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"3. good fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 0 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test for checking fsck command on illegal arguments should print the proper    * usage.    */
DECL|method|testToCheckTheFsckCommandOnIllegalArguments ()
specifier|public
name|void
name|testToCheckTheFsckCommandOnIllegalArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// bring up a one-node cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
literal|"/test.txt"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a one-block file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// passing illegal option
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|fileName
argument_list|,
literal|"-thisIsNotAValidFlag"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// passing multiple paths are arguments
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up file system
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

