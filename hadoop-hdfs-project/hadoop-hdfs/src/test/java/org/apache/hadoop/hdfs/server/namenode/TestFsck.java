begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeAdminProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CombinedHostFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|HostConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NamenodeFsck
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NamenodeFsck
operator|.
name|ReplicationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NamenodeFsck
operator|.
name|ErasureCodingResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|HostsFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|RollingFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * A JUnit test for doing fsck.  */
end_comment

begin_class
DECL|class|TestFsck
specifier|public
class|class
name|TestFsck
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFsck
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|AUDITLOG_FILE
specifier|static
specifier|final
name|String
name|AUDITLOG_FILE
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"TestFsck-audit.log"
argument_list|)
decl_stmt|;
comment|// Pattern for:
comment|// allowed=true ugi=name ip=/address cmd=FSCK src=/ dst=null perm=null
DECL|field|FSCK_PATTERN
specifier|static
specifier|final
name|Pattern
name|FSCK_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"allowed=.*?\\s"
operator|+
literal|"ugi=.*?\\s"
operator|+
literal|"ip=/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\s"
operator|+
literal|"cmd=fsck\\ssrc=\\/\\sdst=null\\s"
operator|+
literal|"perm=null\\s"
operator|+
literal|"proto=.*"
argument_list|)
decl_stmt|;
DECL|field|GET_FILE_INFO_PATTERN
specifier|static
specifier|final
name|Pattern
name|GET_FILE_INFO_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"allowed=.*?\\s"
operator|+
literal|"ugi=.*?\\s"
operator|+
literal|"ip=/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\s"
operator|+
literal|"cmd=getfileinfo\\ssrc=\\/\\sdst=null\\s"
operator|+
literal|"perm=null\\s"
operator|+
literal|"proto=.*"
argument_list|)
decl_stmt|;
DECL|field|NUM_MISSING_BLOCKS_PATTERN
specifier|static
specifier|final
name|Pattern
name|NUM_MISSING_BLOCKS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Missing blocks:\t\t([0123456789]*).*"
argument_list|)
decl_stmt|;
DECL|field|NUM_CORRUPT_BLOCKS_PATTERN
specifier|static
specifier|final
name|Pattern
name|NUM_CORRUPT_BLOCKS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Corrupt blocks:\t\t([0123456789]*).*"
argument_list|)
decl_stmt|;
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|method|runFsck (Configuration conf, int expectedErrCode, boolean checkErrorCode, String... path)
specifier|static
name|String
name|runFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|expectedErrCode
parameter_list|,
name|boolean
name|checkErrorCode
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSPermissionChecker
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|int
name|errCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkErrorCode
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedErrCode
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSPermissionChecker
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OUTPUT = "
operator|+
name|bStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bStream
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdownCluster ()
specifier|private
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** do fsck. */
annotation|@
name|Test
DECL|method|testFsck ()
specifier|public
name|void
name|testFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsck"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|final
name|long
name|precision
init|=
literal|1L
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/srcdat"
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|aTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|setupAuditLogs
argument_list|()
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyAuditLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|aTime
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownCluster
argument_list|()
expr_stmt|;
comment|// restart the cluster; bring up namenode but not the data nodes
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// expect the result is corrupt
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
comment|// bring up data nodes& cleanup cluster
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
comment|/** Sets up log4j logger for auditlogs. */
DECL|method|setupAuditLogs ()
specifier|private
name|void
name|setupAuditLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|AUDITLOG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|auditLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|PatternLayout
name|layout
init|=
operator|new
name|PatternLayout
argument_list|(
literal|"%m%n"
argument_list|)
decl_stmt|;
name|RollingFileAppender
name|appender
init|=
operator|new
name|RollingFileAppender
argument_list|(
name|layout
argument_list|,
name|AUDITLOG_FILE
argument_list|)
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAuditLogs ()
specifier|private
name|void
name|verifyAuditLogs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Turn off the logs
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|auditLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Audit log should contain one getfileinfo and one fsck
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|AUDITLOG_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
comment|// one extra getfileinfo stems from resolving the path
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected getfileinfo event not found in audit log"
argument_list|,
name|GET_FILE_INFO_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected fsck event not found in audit log"
argument_list|,
name|FSCK_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected event in audit log"
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the reader and remove the appender to release the audit log file
comment|// handle after verifying the content of the file.
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|removeAllAppenders
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFsckNonExistent ()
specifier|public
name|void
name|testFsckNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsck"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/non-existent"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|outStr
operator|.
name|indexOf
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat"
argument_list|)
expr_stmt|;
block|}
comment|/** Test fsck with permission set on inodes. */
annotation|@
name|Test
DECL|method|testFsckPermission ()
specifier|public
name|void
name|testFsckPermission
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
comment|// Create a cluster with the current user, write some files
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|c2
init|=
name|cluster
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/dfsck"
decl_stmt|;
specifier|final
name|Path
name|dirpath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|c2
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|dirpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
comment|// run DFSck as another user, should fail with permission issue
name|UserGroupInformation
name|fakeUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"ProbablyNotARealUserName"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ShangriLa"
block|}
argument_list|)
decl_stmt|;
name|fakeUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// set permission and try DFSck again as the fake user, should succeed
name|fs
operator|.
name|setPermission
argument_list|(
name|dirpath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|fakeUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsckMove ()
specifier|public
name|void
name|testFsckMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dfsBlockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|dfsBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
argument_list|(
literal|"TestFsck"
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
operator|(
literal|5
operator|*
name|dfsBlockSize
operator|)
operator|+
operator|(
name|dfsBlockSize
operator|-
literal|1
operator|)
argument_list|,
literal|5
operator|*
name|dfsBlockSize
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|topDir
init|=
literal|"/srcdat"
decl_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|fileNames
init|=
name|util
operator|.
name|getFileNames
argument_list|(
name|topDir
argument_list|)
decl_stmt|;
name|CorruptedTestFile
index|[]
name|ctFiles
init|=
operator|new
name|CorruptedTestFile
index|[]
block|{
operator|new
name|CorruptedTestFile
argument_list|(
name|fileNames
index|[
literal|0
index|]
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
block|,
operator|new
name|CorruptedTestFile
argument_list|(
name|fileNames
index|[
literal|1
index|]
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
block|,
operator|new
name|CorruptedTestFile
argument_list|(
name|fileNames
index|[
literal|2
index|]
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|4
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
block|,
operator|new
name|CorruptedTestFile
argument_list|(
name|fileNames
index|[
literal|3
index|]
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
block|,
operator|new
name|CorruptedTestFile
argument_list|(
name|fileNames
index|[
literal|4
index|]
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
block|}
decl_stmt|;
name|int
name|totalMissingBlocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CorruptedTestFile
name|ctFile
range|:
name|ctFiles
control|)
block|{
name|totalMissingBlocks
operator|+=
name|ctFile
operator|.
name|getTotalMissingBlocks
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CorruptedTestFile
name|ctFile
range|:
name|ctFiles
control|)
block|{
name|ctFile
operator|.
name|removeBlocks
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|// Wait for fsck to discover all the missing blocks
while|while
condition|(
literal|true
condition|)
block|{
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|numMissing
init|=
literal|null
decl_stmt|;
name|String
name|numCorrupt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|outStr
operator|.
name|split
argument_list|(
name|LINE_SEPARATOR
argument_list|)
control|)
block|{
name|Matcher
name|m
init|=
name|NUM_MISSING_BLOCKS_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|numMissing
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|m
operator|=
name|NUM_CORRUPT_BLOCKS_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|numCorrupt
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numMissing
operator|!=
literal|null
operator|&&
name|numCorrupt
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|numMissing
operator|==
literal|null
operator|||
name|numCorrupt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to find number of missing or corrupt"
operator|+
literal|" blocks in fsck output."
argument_list|)
throw|;
block|}
if|if
condition|(
name|numMissing
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|totalMissingBlocks
argument_list|)
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|numCorrupt
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
block|}
comment|// Copy the non-corrupt blocks of corruptFileName to lost+found.
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|,
literal|"-move"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WATERMELON: outStr = "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that we properly copied the block files from the DataNodes
comment|// to lost+found
for|for
control|(
name|CorruptedTestFile
name|ctFile
range|:
name|ctFiles
control|)
block|{
name|ctFile
operator|.
name|checkSalvagedRemains
argument_list|()
expr_stmt|;
block|}
comment|// Fix the filesystem by removing corruptFileName
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-delete"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check to make sure we have a healthy filesystem
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
block|}
DECL|class|CorruptedTestFile
specifier|static
specifier|private
class|class
name|CorruptedTestFile
block|{
DECL|field|name
specifier|final
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|blocksToCorrupt
specifier|final
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|blocksToCorrupt
decl_stmt|;
DECL|field|dfsClient
specifier|final
specifier|private
name|DFSClient
name|dfsClient
decl_stmt|;
DECL|field|numDataNodes
specifier|final
specifier|private
name|int
name|numDataNodes
decl_stmt|;
DECL|field|blockSize
specifier|final
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|initialContents
specifier|final
specifier|private
name|byte
index|[]
name|initialContents
decl_stmt|;
DECL|method|CorruptedTestFile (String name, Set<Integer> blocksToCorrupt, DFSClient dfsClient, int numDataNodes, int blockSize)
name|CorruptedTestFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|blocksToCorrupt
parameter_list|,
name|DFSClient
name|dfsClient
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|blocksToCorrupt
operator|=
name|blocksToCorrupt
expr_stmt|;
name|this
operator|.
name|dfsClient
operator|=
name|dfsClient
expr_stmt|;
name|this
operator|.
name|numDataNodes
operator|=
name|numDataNodes
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|initialContents
operator|=
name|cacheInitialContents
argument_list|()
expr_stmt|;
block|}
DECL|method|getTotalMissingBlocks ()
specifier|public
name|int
name|getTotalMissingBlocks
parameter_list|()
block|{
return|return
name|blocksToCorrupt
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|cacheInitialContents ()
specifier|private
name|byte
index|[]
name|cacheInitialContents
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsFileStatus
name|status
init|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|status
operator|.
name|getLen
argument_list|()
index|]
decl_stmt|;
name|DFSInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|dfsClient
operator|.
name|open
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|content
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|content
return|;
block|}
DECL|method|removeBlocks (MiniDFSCluster cluster)
specifier|public
name|void
name|removeBlocks
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
for|for
control|(
name|int
name|corruptIdx
range|:
name|blocksToCorrupt
control|)
block|{
comment|// Corrupt a block by deleting it
name|ExtendedBlock
name|block
init|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|name
argument_list|,
name|blockSize
operator|*
name|corruptIdx
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|corruptBlocks (MiniDFSCluster cluster)
specifier|public
name|void
name|corruptBlocks
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|corruptIdx
range|:
name|blocksToCorrupt
control|)
block|{
comment|// Corrupt a block by deleting it
name|ExtendedBlock
name|block
init|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|name
argument_list|,
name|blockSize
operator|*
name|corruptIdx
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileOutputStream
name|blockFileStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|blockFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|blockFileStream
operator|.
name|write
argument_list|(
literal|"corrupt"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|blockFileStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupted block file "
operator|+
name|blockFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkSalvagedRemains ()
specifier|public
name|void
name|checkSalvagedRemains
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|chainIdx
init|=
literal|0
decl_stmt|;
name|HdfsFileStatus
name|status
init|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|int
name|numBlocks
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|+
name|blockSize
operator|-
literal|1
operator|)
operator|/
name|blockSize
argument_list|)
decl_stmt|;
name|DFSInputStream
name|in
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|blockBuffer
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|blockIdx
init|=
literal|0
init|;
name|blockIdx
operator|<
name|numBlocks
condition|;
name|blockIdx
operator|++
control|)
block|{
if|if
condition|(
name|blocksToCorrupt
operator|.
name|contains
argument_list|(
name|blockIdx
argument_list|)
condition|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|dfsClient
operator|.
name|open
argument_list|(
literal|"/lost+found"
operator|+
name|name
operator|+
literal|"/"
operator|+
name|chainIdx
argument_list|)
expr_stmt|;
name|chainIdx
operator|++
expr_stmt|;
block|}
name|int
name|len
init|=
name|blockBuffer
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|blockIdx
operator|==
operator|(
name|numBlocks
operator|-
literal|1
operator|)
condition|)
block|{
comment|// The last block might not be full-length
name|len
operator|=
call|(
name|int
call|)
argument_list|(
name|in
operator|.
name|getFileLength
argument_list|()
operator|%
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
name|len
operator|=
name|blockBuffer
operator|.
name|length
expr_stmt|;
block|}
block|}
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|blockBuffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|int
name|startIdx
init|=
name|blockIdx
operator|*
name|blockSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|initialContents
index|[
name|startIdx
operator|+
name|i
index|]
operator|!=
name|blockBuffer
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"salvaged file "
operator|+
name|name
operator|+
literal|" differed "
operator|+
literal|"from what we expected on block "
operator|+
name|blockIdx
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFsckMoveAndDelete ()
specifier|public
name|void
name|testFsckMoveAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|maxMoveTries
init|=
literal|5
decl_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsckMoveAndDelete"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|topDir
init|=
literal|"/srcdat"
decl_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corrupt a block by deleting it
name|String
index|[]
name|fileNames
init|=
name|util
operator|.
name|getFileNames
argument_list|(
name|topDir
argument_list|)
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|corruptFileName
init|=
name|fileNames
index|[
literal|0
index|]
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|corruptFileName
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We excpect the filesystem to be corrupted
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// After a fsck -move, the corrupted file should still exist.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxMoveTries
condition|;
name|i
operator|++
control|)
block|{
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-move"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|newFileNames
init|=
name|util
operator|.
name|getFileNames
argument_list|(
name|topDir
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|newFileNames
control|)
block|{
if|if
condition|(
name|f
operator|.
name|equals
argument_list|(
name|corruptFileName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
comment|// Fix the filesystem by moving corrupted files to lost+found
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-move"
argument_list|,
literal|"-delete"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check to make sure we have healthy filesystem
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsckOpenFiles ()
specifier|public
name|void
name|testFsckOpenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsck"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|topDir
init|=
literal|"/srcdat"
decl_stmt|;
name|String
name|randomString
init|=
literal|"HADOOP  "
decl_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Open a file for writing and do not close for now
name|Path
name|openFile
init|=
operator|new
name|Path
argument_list|(
name|topDir
operator|+
literal|"/openFile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|openFile
argument_list|)
decl_stmt|;
name|int
name|writeCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|writeCount
operator|!=
literal|100
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|randomString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writeCount
operator|++
expr_stmt|;
block|}
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// We expect the filesystem to be HEALTHY and show one open file
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use -openforwrite option to list open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-locations"
argument_list|,
literal|"-openforwrite"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Under Construction Block:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"openFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the file
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now, fsck should show HEALTHY fs and should not show any open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Under Construction Block:"
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsckOpenECFiles ()
specifier|public
name|void
name|testFsckOpenECFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsckECFile"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
name|int
name|numAllUnits
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numAllUnits
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|String
name|topDir
init|=
literal|"/myDir"
decl_stmt|;
name|byte
index|[]
name|randomBytes
init|=
operator|new
name|byte
index|[
literal|3000000
index|]
decl_stmt|;
name|int
name|seed
init|=
literal|42
decl_stmt|;
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
comment|// set topDir to EC when it has replicated files
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|topDir
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
comment|// create a new file under topDir
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|topDir
argument_list|,
literal|"ecFile"
argument_list|)
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Open a EC file for writing and do not close for now
name|Path
name|openFile
init|=
operator|new
name|Path
argument_list|(
name|topDir
operator|+
literal|"/openECFile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|openFile
argument_list|)
decl_stmt|;
name|int
name|writeCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|writeCount
operator|!=
literal|300
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|writeCount
operator|++
expr_stmt|;
block|}
comment|// make sure the fsck can correctly handle mixed ec/replicated files
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|topDir
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-openforwrite"
argument_list|)
expr_stmt|;
comment|// We expect the filesystem to be HEALTHY and show one open file
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|openFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-openforwrite"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Live_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Expected_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use -openforwrite option to list open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|openFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-locations"
argument_list|,
literal|"-openforwrite"
argument_list|,
literal|"-replicaDetails"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Live_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Expected_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Under Construction Block:"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the file
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now, fsck should show HEALTHY fs and should not show any open files
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|openFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-locations"
argument_list|,
literal|"-racks"
argument_list|,
literal|"-replicaDetails"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"OPENFORWRITE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Under Construction Block:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Expected_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Live_repl="
operator|+
name|numAllUnits
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|topDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptBlock ()
specifier|public
name|void
name|testCorruptBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
literal|null
decl_stmt|;
name|LocatedBlocks
name|blocks
init|=
literal|null
decl_stmt|;
name|int
name|replicaCount
init|=
literal|0
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|outStr
init|=
literal|null
decl_stmt|;
name|short
name|factor
init|=
literal|1
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testCorruptBlock"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Wait until file replication has completed
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
decl_stmt|;
comment|// Make sure filesystem is in healthy state
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// corrupt replicas
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
literal|0
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|raFile
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|badString
init|=
literal|"BADBAD"
decl_stmt|;
name|int
name|rand
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|channel
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|badString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Read the file to trigger reportBadBlocks
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|ChecksumException
argument_list|)
expr_stmt|;
block|}
name|dfsClient
operator|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
while|while
condition|(
name|replicaCount
operator|!=
name|factor
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if fsck reports the same
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"testCorruptBlock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnderMinReplicatedBlock ()
specifier|public
name|void
name|testUnderMinReplicatedBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Set minReplication to 2
name|short
name|minReplication
init|=
literal|2
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MIN_KEY
argument_list|,
name|minReplication
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|DFSClient
name|dfsClient
init|=
literal|null
decl_stmt|;
name|LocatedBlocks
name|blocks
init|=
literal|null
decl_stmt|;
name|int
name|replicaCount
init|=
literal|0
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|outStr
init|=
literal|null
decl_stmt|;
name|short
name|factor
init|=
literal|1
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testUnderMinReplicatedBlock"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
name|minReplication
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Wait until file replication has completed
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|minReplication
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
decl_stmt|;
comment|// Make sure filesystem is in healthy state
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// corrupt the first replica
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
literal|0
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|raFile
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|badString
init|=
literal|"BADBAD"
decl_stmt|;
name|int
name|rand
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|channel
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|badString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dfsClient
operator|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
while|while
condition|(
name|replicaCount
operator|!=
name|factor
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Read the file to trigger reportBadBlocks
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|ChecksumException
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sleep in try: replicaCount="
operator|+
name|replicaCount
operator|+
literal|"  factor="
operator|+
name|factor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{       }
name|blocks
operator|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|replicaCount
operator|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
comment|// Check if fsck reports the same
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"UNDER MIN REPL'D BLOCKS:\t1 (100.0 %)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"dfs.namenode.replication.min:\t2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFsckReplicaDetails ()
specifier|public
name|void
name|testFsckReplicaDetails
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
name|short
name|numDn
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
specifier|final
name|long
name|fileSize
init|=
literal|1024
decl_stmt|;
name|boolean
name|checkDecommissionInProgress
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create files
specifier|final
name|String
name|testFile
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|fileSize
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
comment|// make sure datanode that has replica is fine before decommission
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-replicaDetails"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
literal|"(LIVE)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// decommission datanode
name|ExtendedBlock
name|eb
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|bm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockCollection
name|bc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|BlockInfo
name|bi
init|=
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|eb
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|bc
operator|=
name|fsn
operator|.
name|getBlockCollection
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|DatanodeDescriptor
name|dn
init|=
name|bc
operator|.
name|getBlocks
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDatanode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDecomManager
argument_list|()
operator|.
name|startDecommission
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|String
name|dnName
init|=
name|dn
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
comment|// check the replica status while decommissioning
name|fsckOut
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-replicaDetails"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
literal|"(DECOMMISSIONING)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start 2nd Datanode and wait for decommission to start
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|datanodeInfo
init|=
literal|null
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
control|)
block|{
if|if
condition|(
name|dnName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|datanodeInfo
operator|=
name|info
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|checkDecommissionInProgress
operator|&&
name|datanodeInfo
operator|!=
literal|null
operator|&&
name|datanodeInfo
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
name|checkDecommissionInProgress
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|datanodeInfo
operator|!=
literal|null
operator|&&
operator|!
name|datanodeInfo
operator|.
name|isDecommissioned
argument_list|()
condition|)
do|;
comment|// check the replica status after decommission is done
name|fsckOut
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-replicaDetails"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
literal|"(DECOMMISSIONED)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test if fsck can return -1 in case of failure.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testFsckError ()
specifier|public
name|void
name|testFsckError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// bring up a one-node cluster
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
literal|"/test.txt"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a one-block file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// intentionally corrupt NN data structure
name|INodeFile
name|node
init|=
operator|(
name|INodeFile
operator|)
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|dir
operator|.
name|getINode
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|node
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|blocks
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|blocks
index|[
literal|0
index|]
operator|.
name|setNumBytes
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|// set the block length to be negative
comment|// run fsck and expect a failure with -1 as the error code
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|FAILURE_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up file system
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** check if option -list-corruptfiles of fsck command works properly. */
annotation|@
name|Test
DECL|method|testFsckListCorruptFilesBlocks ()
specifier|public
name|void
name|testFsckListCorruptFilesBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testGetCorruptFiles"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|3
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1. good fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 0 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the blocks
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|File
name|dataDir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for the namenode to see the corruption
specifier|final
name|NamenodeProtocols
name|namenode
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|CorruptFileBlocks
name|corruptFileBlocks
init|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|numCorrupt
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2. bad fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 3 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do a listing on a dir which doesn't have any corrupt blocks and validate
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/goodData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"3. good fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 0 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for checking fsck command on illegal arguments should print the proper    * usage.    */
annotation|@
name|Test
DECL|method|testToCheckTheFsckCommandOnIllegalArguments ()
specifier|public
name|void
name|testToCheckTheFsckCommandOnIllegalArguments
parameter_list|()
throws|throws
name|Exception
block|{
comment|// bring up a one-node cluster
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|fileName
init|=
literal|"/test.txt"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a one-block file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// passing illegal option
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
name|fileName
argument_list|,
literal|"-thisIsNotAValidFlag"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// passing multiple paths are arguments
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up file system
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the # of missing block replicas and expected replicas is    * correct.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testFsckMissingReplicas ()
specifier|public
name|void
name|testFsckMissingReplicas
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Desired replication factor
comment|// Set this higher than numReplicas so it's under-replicated
specifier|final
name|short
name|replFactor
init|=
literal|2
decl_stmt|;
comment|// Number of replicas to actually start
specifier|final
name|short
name|numReplicas
init|=
literal|1
decl_stmt|;
comment|// Number of blocks to write
specifier|final
name|short
name|numBlocks
init|=
literal|3
decl_stmt|;
comment|// Set a small-ish blocksize
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
comment|// Startup a minicluster
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// Create a file that will be intentionally under-replicated
specifier|final
name|String
name|pathString
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|blockSize
operator|*
name|numBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Create an under-replicated file
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NetworkTopology
name|nettop
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Writer
name|result
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetAddress
name|remoteAddress
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|NamenodeFsck
name|fsck
init|=
operator|new
name|NamenodeFsck
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|,
name|nettop
argument_list|,
name|pmap
argument_list|,
name|out
argument_list|,
name|numReplicas
argument_list|,
name|remoteAddress
argument_list|)
decl_stmt|;
comment|// Run the fsck and check the Result
specifier|final
name|HdfsFileStatus
name|file
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Result
name|replRes
init|=
operator|new
name|ReplicationResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Result
name|ecRes
init|=
operator|new
name|ErasureCodingResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|check
argument_list|(
name|pathString
argument_list|,
name|file
argument_list|,
name|replRes
argument_list|,
name|ecRes
argument_list|)
expr_stmt|;
comment|// Also print the output from the fsck, for ex post facto sanity checks
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|replRes
operator|.
name|missingReplicas
argument_list|,
operator|(
name|numBlocks
operator|*
name|replFactor
operator|)
operator|-
operator|(
name|numBlocks
operator|*
name|numReplicas
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|replRes
operator|.
name|numExpectedReplicas
argument_list|,
name|numBlocks
operator|*
name|replFactor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the # of misreplaced replicas is correct.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testFsckMisPlacedReplicas ()
specifier|public
name|void
name|testFsckMisPlacedReplicas
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Desired replication factor
specifier|final
name|short
name|replFactor
init|=
literal|2
decl_stmt|;
comment|// Number of replicas to actually start
name|short
name|numDn
init|=
literal|2
decl_stmt|;
comment|// Number of blocks to write
specifier|final
name|short
name|numBlocks
init|=
literal|3
decl_stmt|;
comment|// Set a small-ish blocksize
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|,
literal|"/rack1"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
comment|// Startup a minicluster
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// Create a file that will be intentionally under-replicated
specifier|final
name|String
name|pathString
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|blockSize
operator|*
name|numBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Create an under-replicated file
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NetworkTopology
name|nettop
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
comment|// Add a new node on different rack, so previous blocks' replicas
comment|// are considered to be misplaced
name|nettop
operator|.
name|add
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"/rack2"
argument_list|,
literal|"/host3"
argument_list|)
argument_list|)
expr_stmt|;
name|numDn
operator|++
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Writer
name|result
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetAddress
name|remoteAddress
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|NamenodeFsck
name|fsck
init|=
operator|new
name|NamenodeFsck
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|,
name|nettop
argument_list|,
name|pmap
argument_list|,
name|out
argument_list|,
name|numDn
argument_list|,
name|remoteAddress
argument_list|)
decl_stmt|;
comment|// Run the fsck and check the Result
specifier|final
name|HdfsFileStatus
name|file
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Result
name|replRes
init|=
operator|new
name|ReplicationResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Result
name|ecRes
init|=
operator|new
name|ErasureCodingResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|check
argument_list|(
name|pathString
argument_list|,
name|file
argument_list|,
name|replRes
argument_list|,
name|ecRes
argument_list|)
expr_stmt|;
comment|// check misReplicatedBlock number.
name|assertEquals
argument_list|(
name|replRes
operator|.
name|numMisReplicatedBlocks
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
block|}
comment|/** Test fsck with FileNotFound. */
annotation|@
name|Test
DECL|method|testFsckFileNotFound ()
specifier|public
name|void
name|testFsckFileNotFound
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Number of replicas to actually start
specifier|final
name|short
name|numReplicas
init|=
literal|1
decl_stmt|;
name|NameNode
name|namenode
init|=
name|mock
argument_list|(
name|NameNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|NetworkTopology
name|nettop
init|=
name|mock
argument_list|(
name|NetworkTopology
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Writer
name|result
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetAddress
name|remoteAddress
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|FSNamesystem
name|fsName
init|=
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSDirectory
name|fsd
init|=
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlockManager
name|blockManager
init|=
name|mock
argument_list|(
name|BlockManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|DatanodeManager
name|dnManager
init|=
name|mock
argument_list|(
name|DatanodeManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|INodesInPath
name|iip
init|=
name|mock
argument_list|(
name|INodesInPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsName
operator|.
name|getBlockManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|blockManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsName
operator|.
name|getFSDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsd
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsd
operator|.
name|resolvePath
argument_list|(
name|anyObject
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|iip
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnManager
argument_list|)
expr_stmt|;
name|NamenodeFsck
name|fsck
init|=
operator|new
name|NamenodeFsck
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|,
name|nettop
argument_list|,
name|pmap
argument_list|,
name|out
argument_list|,
name|numReplicas
argument_list|,
name|remoteAddress
argument_list|)
decl_stmt|;
name|String
name|pathString
init|=
literal|"/tmp/testFile"
decl_stmt|;
name|long
name|length
init|=
literal|123L
decl_stmt|;
name|boolean
name|isDir
init|=
literal|false
decl_stmt|;
name|int
name|blockReplication
init|=
literal|1
decl_stmt|;
name|long
name|blockSize
init|=
literal|128
operator|*
literal|1024L
decl_stmt|;
name|long
name|modTime
init|=
literal|123123123L
decl_stmt|;
name|long
name|accessTime
init|=
literal|123123120L
decl_stmt|;
name|FsPermission
name|perms
init|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|String
name|owner
init|=
literal|"foo"
decl_stmt|;
name|String
name|group
init|=
literal|"bar"
decl_stmt|;
name|byte
index|[]
name|symlink
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|path
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|long
name|fileId
init|=
literal|312321L
decl_stmt|;
name|int
name|numChildren
init|=
literal|1
decl_stmt|;
name|byte
name|storagePolicy
init|=
literal|0
decl_stmt|;
name|HdfsFileStatus
name|file
init|=
operator|new
name|HdfsFileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|accessTime
argument_list|,
name|perms
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|symlink
argument_list|,
name|path
argument_list|,
name|fileId
argument_list|,
name|numChildren
argument_list|,
literal|null
argument_list|,
name|storagePolicy
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Result
name|replRes
init|=
operator|new
name|ReplicationResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Result
name|ecRes
init|=
operator|new
name|ErasureCodingResult
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|fsck
operator|.
name|check
argument_list|(
name|pathString
argument_list|,
name|file
argument_list|,
name|replRes
argument_list|,
name|ecRes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|replRes
operator|.
name|isHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test fsck with symlinks in the filesystem. */
annotation|@
name|Test
DECL|method|testFsckSymlink ()
specifier|public
name|void
name|testFsckSymlink
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|final
name|long
name|precision
init|=
literal|1L
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/srcdat"
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
specifier|final
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|symlink
init|=
operator|new
name|Path
argument_list|(
literal|"/srcdat-symlink"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|symlink
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|long
name|aTime
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|symlink
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|setupAuditLogs
argument_list|()
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyAuditLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|aTime
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|symlink
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Total symlinks:\t\t1"
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for including the snapshot files in fsck report.    */
annotation|@
name|Test
DECL|method|testFsckForSnapshotFiles ()
specifier|public
name|void
name|testFsckForSnapshotFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|runFsck
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-includeSnapshots"
argument_list|,
literal|"-files"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runFsck
operator|.
name|contains
argument_list|(
literal|"HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/srcdat"
decl_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"mySnapShot"
argument_list|)
expr_stmt|;
name|runFsck
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-includeSnapshots"
argument_list|,
literal|"-files"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runFsck
operator|.
name|contains
argument_list|(
literal|"/.snapshot/mySnapShot/srcdat"
argument_list|)
argument_list|)
expr_stmt|;
name|runFsck
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-files"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|runFsck
operator|.
name|contains
argument_list|(
literal|"mySnapShot"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for blockIdCK.    */
annotation|@
name|Test
DECL|method|testBlockIdCK ()
specifier|public
name|void
name|testBlockIdCK
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replFactor
init|=
literal|2
decl_stmt|;
name|short
name|numDn
init|=
literal|2
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//create files
specifier|final
name|String
name|pathString
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|1024
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|util
operator|.
name|getAllBlocks
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|bIds
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|//run fsck
comment|//illegal input test
name|String
name|runFsckResult
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
literal|"not_a_block_id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runFsckResult
operator|.
name|contains
argument_list|(
literal|"Incorrect blockId format:"
argument_list|)
argument_list|)
expr_stmt|;
comment|//general test
name|runFsckResult
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runFsckResult
operator|.
name|contains
argument_list|(
name|bIds
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runFsckResult
operator|.
name|contains
argument_list|(
name|bIds
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runFsckResult
operator|.
name|contains
argument_list|(
literal|"Block replica on datanode/rack: host1/rack1 is HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runFsckResult
operator|.
name|contains
argument_list|(
literal|"Block replica on datanode/rack: host2/rack2 is HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for blockIdCK with datanode decommission.    */
annotation|@
name|Test
DECL|method|testBlockIdCKDecommission ()
specifier|public
name|void
name|testBlockIdCKDecommission
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
name|short
name|numDn
init|=
literal|2
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
name|boolean
name|checkDecommissionInProgress
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//create files
specifier|final
name|String
name|pathString
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|1024
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|util
operator|.
name|getAllBlocks
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|bIds
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|//make sure datanode that has replica is fine before decommission
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|bIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|//decommission datanode
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|bm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|eb
init|=
name|util
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|BlockCollection
name|bc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|BlockInfo
name|bi
init|=
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|eb
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|bc
operator|=
name|fsn
operator|.
name|getBlockCollection
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|DatanodeDescriptor
name|dn
init|=
name|bc
operator|.
name|getBlocks
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDatanode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDecomManager
argument_list|()
operator|.
name|startDecommission
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|String
name|dnName
init|=
name|dn
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
comment|//wait for decommission start
name|DatanodeInfo
name|datanodeInfo
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
control|)
block|{
if|if
condition|(
name|dnName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|datanodeInfo
operator|=
name|info
expr_stmt|;
block|}
block|}
comment|//check decommissioning only once
if|if
condition|(
operator|!
name|checkDecommissionInProgress
operator|&&
name|datanodeInfo
operator|!=
literal|null
operator|&&
name|datanodeInfo
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|bIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|DECOMMISSIONING_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|checkDecommissionInProgress
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|datanodeInfo
operator|!=
literal|null
operator|&&
operator|!
name|datanodeInfo
operator|.
name|isDecommissioned
argument_list|()
condition|)
do|;
comment|//check decommissioned
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|bIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|DECOMMISSIONED_STATUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for blockIdCK with block corruption.    */
annotation|@
name|Test
DECL|method|testBlockIdCKCorruption ()
specifier|public
name|void
name|testBlockIdCKCorruption
parameter_list|()
throws|throws
name|Exception
block|{
name|short
name|numDn
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|block
decl_stmt|;
name|short
name|repFactor
init|=
literal|1
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//create files
specifier|final
name|String
name|pathString
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|1024
argument_list|,
name|repFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|util
operator|.
name|getAllBlocks
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|bIds
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|//make sure block is healthy before we corrupt it
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|bIds
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// corrupt replicas
name|block
operator|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|File
name|blockFile
init|=
name|cluster
operator|.
name|getBlockFile
argument_list|(
literal|0
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|raFile
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|badString
init|=
literal|"BADBAD"
decl_stmt|;
name|int
name|rand
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|channel
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|badString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|util
operator|.
name|waitCorruptReplicas
argument_list|(
name|dfs
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|block
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|,
literal|"-blockId"
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (final DistributedFileSystem dfs, Path dir, String fileName)
specifier|private
name|void
name|writeFile
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"teststring"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFile (final DistributedFileSystem dfs, String dirName, String fileName, String storagePolicy)
specifier|private
name|void
name|writeFile
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
name|dirName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|storagePolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dirPath
argument_list|,
name|storagePolicy
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|dirPath
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test storage policy display.    */
annotation|@
name|Test
DECL|method|testStoragePoliciesCK ()
specifier|public
name|void
name|testStoragePoliciesCK
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
literal|"/testhot"
argument_list|,
literal|"file"
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
literal|"/testwarm"
argument_list|,
literal|"file"
argument_list|,
literal|"WARM"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
literal|"/testcold"
argument_list|,
literal|"file"
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-storagepolicies"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"DISK:3(HOT)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"DISK:1,ARCHIVE:2(WARM)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"ARCHIVE:3(COLD)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"All blocks satisfy specified storage policy."
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testhot"
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testwarm"
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-storagepolicies"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"DISK:3(HOT)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"DISK:1,ARCHIVE:2(WARM)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"ARCHIVE:3(COLD)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"All blocks satisfy specified storage policy."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for blocks on decommissioning hosts are not shown as missing.    */
annotation|@
name|Test
DECL|method|testFsckWithDecommissionedReplicas ()
specifier|public
name|void
name|testFsckWithDecommissionedReplicas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
name|short
name|numDn
init|=
literal|2
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
specifier|final
name|long
name|fileSize
init|=
literal|1024
decl_stmt|;
name|boolean
name|checkDecommissionInProgress
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed Cluster Creation"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to get FileSystem"
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//create files
specifier|final
name|String
name|testFile
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|fileSize
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
comment|// make sure datanode that has replica is fine before decommission
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// decommission datanode
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|bm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|eb
init|=
name|util
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|BlockCollection
name|bc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|BlockInfo
name|bi
init|=
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|eb
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|bc
operator|=
name|fsn
operator|.
name|getBlockCollection
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|DatanodeDescriptor
name|dn
init|=
name|bc
operator|.
name|getBlocks
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDatanode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDecomManager
argument_list|()
operator|.
name|startDecommission
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|String
name|dnName
init|=
name|dn
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
comment|// wait for decommission start
name|DatanodeInfo
name|datanodeInfo
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
control|)
block|{
if|if
condition|(
name|dnName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|datanodeInfo
operator|=
name|info
expr_stmt|;
block|}
block|}
comment|// check the replica status should be healthy(0)
comment|// instead of corruption (1) during decommissioning
if|if
condition|(
operator|!
name|checkDecommissionInProgress
operator|&&
name|datanodeInfo
operator|!=
literal|null
operator|&&
name|datanodeInfo
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|checkDecommissionInProgress
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|datanodeInfo
operator|!=
literal|null
operator|&&
operator|!
name|datanodeInfo
operator|.
name|isDecommissioned
argument_list|()
condition|)
do|;
comment|// check the replica status should be healthy(0) after decommission
comment|// is done
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testECFsck ()
specifier|public
name|void
name|testECFsck
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
specifier|final
name|long
name|precision
init|=
literal|1L
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|int
name|dataBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create a contiguous file
name|Path
name|replDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/replicated"
argument_list|)
decl_stmt|;
name|Path
name|replFilePath
init|=
operator|new
name|Path
argument_list|(
name|replDirPath
argument_list|,
literal|"replfile"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|factor
init|=
literal|3
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replFilePath
argument_list|,
literal|1024
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|replFilePath
argument_list|,
name|factor
argument_list|)
expr_stmt|;
comment|// create a large striped file
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|Path
name|largeFilePath
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"largeFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createStripedFile
argument_list|(
name|cluster
argument_list|,
name|largeFilePath
argument_list|,
name|ecDirPath
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create a small striped file
name|Path
name|smallFilePath
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"smallFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|smallFilePath
argument_list|,
literal|"hello world!"
argument_list|)
expr_stmt|;
name|long
name|replTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replFilePath
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|ecTime
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|largeFilePath
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|setupAuditLogs
argument_list|()
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|verifyAuditLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|replTime
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|replFilePath
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ecTime
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|largeFilePath
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownCluster
argument_list|()
expr_stmt|;
comment|// restart the cluster; bring up namenode but not the data nodes
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|)
expr_stmt|;
comment|// expect the result is corrupt
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|outLines
init|=
name|outStr
operator|.
name|split
argument_list|(
literal|"\\r?\\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|outLines
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|largeFilePath
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|HdfsFileStatus
name|file
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|largeFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"policy="
operator|+
name|file
operator|.
name|getErasureCodingPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|replFilePath
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|line
operator|.
name|contains
argument_list|(
literal|"replication="
operator|+
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|replFilePath
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outStr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that corrupted snapshot files are listed with full dir.    */
annotation|@
name|Test
DECL|method|testFsckListCorruptSnapshotFiles ()
specifier|public
name|void
name|testFsckListCorruptSnapshotFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
literal|null
decl_stmt|;
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
name|int
name|numFiles
init|=
literal|3
decl_stmt|;
name|int
name|numSnapshots
init|=
literal|0
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testGetCorruptFiles"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
name|numFiles
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|hdfs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fp
init|=
operator|new
name|Path
argument_list|(
literal|"/corruptData/file"
argument_list|)
decl_stmt|;
name|util
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fp
argument_list|,
literal|1024
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|numFiles
operator|++
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|hdfs
argument_list|,
literal|"/corruptData"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/corruptData"
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/corruptData"
argument_list|)
argument_list|,
literal|"mySnapShot"
argument_list|)
expr_stmt|;
name|numSnapshots
operator|=
name|numFiles
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"1. good fsck out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has 0 CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the blocks
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|File
name|dataDir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|dataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete file when it has a snapshot
name|hdfs
operator|.
name|delete
argument_list|(
name|fp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|numFiles
operator|--
expr_stmt|;
comment|// wait for the namenode to see the corruption
specifier|final
name|NamenodeProtocols
name|namenode
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|CorruptFileBlocks
name|corruptFileBlocks
init|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|numCorrupt
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|getFiles
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
comment|// with -includeSnapshots all files are reported
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|,
literal|"-includeSnapshots"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"2. bad fsck include snapshot out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has "
operator|+
operator|(
name|numFiles
operator|+
name|numSnapshots
operator|)
operator|+
literal|" CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"/.snapshot/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// without -includeSnapshots only non-snapshots are reported
name|outStr
operator|=
name|runFsck
argument_list|(
name|conf
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/corruptData"
argument_list|,
literal|"-list-corruptfileblocks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"3. bad fsck exclude snapshot out: "
operator|+
name|outStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"has "
operator|+
name|numFiles
operator|+
literal|" CORRUPT files"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"/.snapshot/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFsckMoveAfterCorruption ()
specifier|public
name|void
name|testFsckMoveAfterCorruption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dfsBlockSize
init|=
literal|512
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|replication
init|=
literal|1
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|dfsBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|String
name|srcDir
init|=
literal|"/srcdat"
decl_stmt|;
specifier|final
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestFsck"
argument_list|)
operator|.
name|setMinSize
argument_list|(
name|dfsBlockSize
operator|*
literal|2
argument_list|)
operator|.
name|setMaxSize
argument_list|(
name|dfsBlockSize
operator|*
literal|3
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|dfs
argument_list|,
name|srcDir
argument_list|,
operator|(
name|short
operator|)
name|replication
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|fileNames
init|=
name|util
operator|.
name|getFileNames
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created files: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fileNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run fsck here. The output is automatically logged for easier debugging
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corrupt the first block
specifier|final
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|blockFileToCorrupt
init|=
name|fileNames
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|CorruptedTestFile
name|ctf
init|=
operator|new
name|CorruptedTestFile
argument_list|(
name|blockFileToCorrupt
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dfsClient
argument_list|,
name|numDatanodes
argument_list|,
name|dfsBlockSize
argument_list|)
decl_stmt|;
name|ctf
operator|.
name|corruptBlocks
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Wait for fsck to discover all the missing blocks
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
specifier|final
name|String
name|str
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|numCorrupt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|str
operator|.
name|split
argument_list|(
name|LINE_SEPARATOR
argument_list|)
control|)
block|{
name|Matcher
name|m
init|=
name|NUM_CORRUPT_BLOCKS_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|numCorrupt
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|numCorrupt
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot find corrupt blocks count in fsck output."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|numCorrupt
argument_list|)
operator|==
name|ctf
operator|.
name|getTotalMissingBlocks
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|str
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught unexpected exception."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-racks"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving blocks to lost+found"
argument_list|)
expr_stmt|;
comment|// Fsck will return error since we corrupted a block
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"/"
argument_list|,
literal|"-move"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|retVal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/lost+found"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|retVal
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Items in lost+found: "
operator|+
name|retVal
argument_list|)
expr_stmt|;
comment|// Expect all good blocks moved, only corrupted block skipped.
name|long
name|totalLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocatedFileStatus
name|lfs
range|:
name|retVal
control|)
block|{
name|totalLength
operator|+=
name|lfs
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Nothing is moved to lost+found!"
argument_list|,
name|totalLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|dfs
argument_list|,
name|srcDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFsckUpgradeDomain ()
specifier|public
name|void
name|testFsckUpgradeDomain
parameter_list|()
throws|throws
name|Exception
block|{
name|testUpgradeDomain
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testUpgradeDomain
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testUpgradeDomain
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testUpgradeDomain
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testUpgradeDomain (boolean defineUpgradeDomain, boolean displayUpgradeDomain)
specifier|private
name|void
name|testUpgradeDomain
parameter_list|(
name|boolean
name|defineUpgradeDomain
parameter_list|,
name|boolean
name|displayUpgradeDomain
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
specifier|final
name|short
name|numDN
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
specifier|final
name|long
name|fileSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|String
name|upgradeDomain
init|=
literal|"ud1"
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack1"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"127.0.0.1"
block|}
decl_stmt|;
name|HostsFileWriter
name|hostsFileWriter
init|=
operator|new
name|HostsFileWriter
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
if|if
condition|(
name|defineUpgradeDomain
condition|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY
argument_list|,
name|CombinedHostFileManager
operator|.
name|class
argument_list|,
name|HostConfigManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"temp/fsckupgradedomain"
argument_list|)
expr_stmt|;
block|}
name|DistributedFileSystem
name|dfs
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDN
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Configure the upgrade domain on the datanode
if|if
condition|(
name|defineUpgradeDomain
condition|)
block|{
name|DatanodeAdminProperties
name|dnProp
init|=
operator|new
name|DatanodeAdminProperties
argument_list|()
decl_stmt|;
name|DatanodeID
name|datanodeID
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
decl_stmt|;
name|dnProp
operator|.
name|setHostName
argument_list|(
name|datanodeID
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|dnProp
operator|.
name|setPort
argument_list|(
name|datanodeID
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
name|dnProp
operator|.
name|setUpgradeDomain
argument_list|(
name|upgradeDomain
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
operator|new
name|DatanodeAdminProperties
index|[]
block|{
name|dnProp
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
comment|// create files
specifier|final
name|String
name|testFile
init|=
operator|new
name|String
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|fileSize
argument_list|,
name|replFactor
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|fsckOut
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|testFile
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
name|displayUpgradeDomain
condition|?
literal|"-upgradedomains"
else|:
literal|"-locations"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsckOut
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|udValue
init|=
name|defineUpgradeDomain
condition|?
name|upgradeDomain
else|:
name|NamenodeFsck
operator|.
name|UNDEFINED
decl_stmt|;
name|assertEquals
argument_list|(
name|displayUpgradeDomain
argument_list|,
name|fsckOut
operator|.
name|contains
argument_list|(
literal|"(ud="
operator|+
name|udValue
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|defineUpgradeDomain
condition|)
block|{
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFsckCorruptECFile ()
specifier|public
name|void
name|testFsckCorruptECFile
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|int
name|dataBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|cellSize
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|dnIndices
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dnList
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalSize
condition|;
name|i
operator|++
control|)
block|{
name|dnIndices
operator|.
name|put
argument_list|(
name|dnList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIpcPort
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// create file
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDirPath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDirPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"corrupted"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|lsb
argument_list|,
name|cellSize
argument_list|,
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// make an unrecoverable ec file with corrupted blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parityBlocks
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ipcPort
init|=
name|blks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
name|int
name|dnIndex
init|=
name|dnIndices
operator|.
name|get
argument_list|(
name|ipcPort
argument_list|)
decl_stmt|;
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|dnIndex
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|blkFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|blks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Block file does not exist"
argument_list|,
name|blkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|blkFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"corruption"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disable the heart beat from DN so that the corrupted block record is
comment|// kept in NameNode
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Read the file to trigger reportBadBlocks
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"missingChunksNum="
operator|+
operator|(
name|parityBlocks
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitForUnrecoverableBlockGroup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFsckMissingECFile ()
specifier|public
name|void
name|testFsckMissingECFile
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|int
name|dataBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|cellSize
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create file
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDirPath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDirPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"missing"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// make an unrecoverable ec file with missing blocks
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DatanodeID
name|dnId
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parityBlocks
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|dnId
operator|=
name|dns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|dnId
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setDataNodeDead
argument_list|(
name|dnId
argument_list|)
expr_stmt|;
block|}
name|waitForUnrecoverableBlockGroup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|,
literal|"-files"
argument_list|,
literal|"-blocks"
argument_list|,
literal|"-locations"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|CORRUPT_STATUS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"Live_repl="
operator|+
operator|(
name|dataBlocks
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForUnrecoverableBlockGroup (Configuration configuration)
specifier|private
name|void
name|waitForUnrecoverableBlockGroup
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|configuration
argument_list|,
name|out
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/"
block|}
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|bStream
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"UNRECOVERABLE BLOCK GROUPS"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught unexpected exception."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

