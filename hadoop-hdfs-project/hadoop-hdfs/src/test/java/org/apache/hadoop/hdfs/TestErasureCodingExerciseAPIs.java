begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|CreateEncryptionZoneFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test after enable Erasure Coding on cluster, exercise Java API make sure they  * are working as expected.  *  */
end_comment

begin_class
DECL|class|TestErasureCodingExerciseAPIs
specifier|public
class|class
name|TestErasureCodingExerciseAPIs
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|dfsAdmin
specifier|private
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|fsWrapper
specifier|private
name|FileSystemTestWrapper
name|fsWrapper
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
comment|// 16k
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|method|getEcPolicy ()
specifier|private
specifier|static
name|ErasureCodingPolicy
name|getEcPolicy
parameter_list|()
block|{
return|return
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
return|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestErasureCodingExerciseAPIs
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|ecPolicy
operator|=
name|getEcPolicy
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set up java key store
name|String
name|testRootDir
init|=
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|targetFile
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|String
name|keyProviderURI
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|targetFile
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|keyProviderURI
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsWrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|enableAllECPolicies
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[access, setOwner, setTime] API call should succeed without    * failure.    * @throws IOException if any IO operation failed.    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testAccess ()
specifier|public
name|void
name|testAccess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
literal|"/p1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|userName
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|groupName
init|=
literal|"group1"
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|p1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0444
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|p1
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|userGroupInfo
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{
name|groupName
block|}
argument_list|)
decl_stmt|;
name|FileSystem
name|userFs
init|=
name|userGroupInfo
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
call|)
argument_list|()
operator|->
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|userFs
operator|.
name|setOwner
argument_list|(
name|p1
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|userFs
operator|.
name|access
argument_list|(
name|p1
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|long
name|mtime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1000L
decl_stmt|;
name|long
name|atime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|2000L
decl_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|p1
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|fileStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[setQuota, getQuotaUsage, getContentSummary,    * setQuotaByStorageType] API call should succeed without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testQuota ()
specifier|public
name|void
name|testQuota
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|qDir
init|=
operator|new
name|Path
argument_list|(
literal|"/quotaDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|qDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|qDir
argument_list|,
literal|6
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
name|QuotaUsage
name|usage
init|=
name|fs
operator|.
name|getQuotaUsage
argument_list|(
name|qDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getContentSummary
argument_list|(
name|qDir
argument_list|)
argument_list|,
name|usage
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuotaByStorageType
argument_list|(
name|qDir
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[addCachePool, modifyCachePool,removeCachePool] API call    * should without failure. FileSystem.[addCacheDirective,    * modifyCacheDirective, removeCacheDirective] are noop.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testCache ()
specifier|public
name|void
name|testCache
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeCachePool
argument_list|(
literal|"pool1"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Below calls should be noop.
name|long
name|id
init|=
name|fs
operator|.
name|addCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/pool2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|fs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pool1"
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[addErasureCodingPolicies, disableErasureCodingPolicy,    * getErasureCodingPolicy, removeErasureCodingPolicy, setErasureCodingPolicy    * unsetErasureCodingPolicy] API call still should be succeed without    * failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testErasureCodingPolicy ()
specifier|public
name|void
name|testErasureCodingPolicy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ecpDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tDir
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|defaultPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|tDir
argument_list|,
name|defaultPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|fPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|tDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultPolicy
argument_list|,
name|fPolicy
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cellSize
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|ECSchema
name|schema
init|=
operator|new
name|ECSchema
argument_list|(
literal|"rs"
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|newPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|fs
operator|.
name|addErasureCodingPolicies
argument_list|(
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|newPolicy
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|ErasureCodingPolicy
operator|.
name|composePolicyName
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|tDir
argument_list|)
expr_stmt|;
name|fPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|tDir
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|ErasureCodingPolicy
operator|.
name|composePolicyName
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|fs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[getAclStatus, modifyAclEntries, removeAclEntries, removeAcl    * removeDefaultAcl] API call should succeed without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testACLAPI ()
specifier|public
name|void
name|testACLAPI
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/aclTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|p
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
name|AclStatus
name|as
init|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|AclEntry
name|entry
range|:
name|aclSpec
control|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"as: %s, entry: %s"
argument_list|,
name|as
argument_list|,
name|entry
argument_list|)
argument_list|,
name|as
operator|.
name|getEntries
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AclEntry
argument_list|>
name|maclSpec
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|p
argument_list|,
name|maclSpec
argument_list|)
expr_stmt|;
name|as
operator|=
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|AclEntry
name|entry
range|:
name|maclSpec
control|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"as: %s, entry: %s"
argument_list|,
name|as
argument_list|,
name|entry
argument_list|)
argument_list|,
name|as
operator|.
name|getEntries
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|removeAclEntries
argument_list|(
name|p
argument_list|,
name|maclSpec
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeDefaultAcl
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fs
operator|.
name|getAclStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[setXAttr, getXAttr, getXAttrs, removeXAttr, listXAttrs] API    * call should succeed without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testAttr ()
specifier|public
name|void
name|testAttr
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/attrTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"write something"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|name
init|=
literal|"user.a1"
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
name|fs
operator|.
name|setXAttr
argument_list|(
name|filePath
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xattrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value
argument_list|,
name|fs
operator|.
name|getXAttr
argument_list|(
name|filePath
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
init|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listXAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeXAttr
argument_list|(
name|filePath
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xattrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|listXAttrs
operator|=
name|fs
operator|.
name|listXAttrs
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listXAttrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[allowSnapshot, createSnapshot, deleteSnapshot,    * renameSnapshot, getSnapshotDiffReport, disallowSnapshot] API call should    * succeed without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testSnapshotAPI ()
specifier|public
name|void
name|testSnapshotAPI
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/snapshotTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|p
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/snapshotTest/f1"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"write something"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|createSnapshot
argument_list|(
name|p
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|renameSnapshot
argument_list|(
name|p
argument_list|,
literal|"s2"
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|fs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|p
argument_list|,
literal|"s1"
argument_list|,
literal|"s3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|report
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s3"
argument_list|,
name|report
operator|.
name|getLaterSnapshotName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|p
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|p
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|disallowSnapshot
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[createSymlink, getFileLinkStatus] API call should succeed    * without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testSymbolicLink ()
specifier|public
name|void
name|testSymbolicLink
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/slTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/slTest/file"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"write something"
argument_list|)
expr_stmt|;
block|}
name|Path
name|sl
init|=
operator|new
name|Path
argument_list|(
literal|"/slTest1/sl"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|f
argument_list|,
name|sl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getLinkTarget
argument_list|(
name|sl
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|FileStatus
name|linkStatus
init|=
name|fs
operator|.
name|getFileLinkStatus
argument_list|(
name|sl
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|linkStatus
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[create, open, append, concat, getFileChecksum, rename,    * delete] API call should succeed without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testFileOpsAPI ()
specifier|public
name|void
name|testFileOpsAPI
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/fileTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Path
name|f1
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|fa
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"filea"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f1
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"create with some content"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|fa
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"create with some content"
argument_list|)
expr_stmt|;
block|}
comment|// setReplication is a noop
name|short
name|replication
init|=
name|fs
operator|.
name|getDefaultReplication
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|f1
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|replication
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|f1
argument_list|)
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|f1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileStatus
name|status1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|f1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|status1
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status1
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|statusa
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fa
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|statusa
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statusa
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|fa
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status1
argument_list|,
name|statuses
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusa
argument_list|,
name|statuses
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|iter
init|=
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status1
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusa
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Path
index|[]
name|concatPs
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"c1"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"c2"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"c3"
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
name|Path
name|cp
range|:
name|concatPs
control|)
block|{
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|cp
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"concat some content"
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|concat
argument_list|(
name|f1
argument_list|,
name|concatPs
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum1
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|f1
argument_list|)
decl_stmt|;
name|Path
name|f2
init|=
operator|new
name|Path
argument_list|(
literal|"/fileTest/file2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|f2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/fileTest/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|FileChecksum
name|checksum2
init|=
name|fs
operator|.
name|getFileChecksum
argument_list|(
name|f2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|checksum1
argument_list|,
name|checksum2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|f2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|Path
argument_list|>
name|corruptFileBlocks
init|=
name|fs
operator|.
name|listCorruptFileBlocks
argument_list|(
name|f2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|corruptFileBlocks
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[createEncryptionZone, getLocatedBlocks, getEZForPath,    * reencryptEncryptionZone, addDelegationTokens] API call should succeed    * without failure.    * @throws IOException if any IO operation failed.    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testEncryptionZone ()
specifier|public
name|void
name|testEncryptionZone
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|Path
name|zoneRoot
init|=
operator|new
name|Path
argument_list|(
literal|"ecRoot"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
name|zoneRoot
argument_list|,
literal|"/ec"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testKey
init|=
literal|"test_key"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|testKey
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|CreateEncryptionZoneFlag
argument_list|>
name|noTrash
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|NO_TRASH
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|testKey
argument_list|,
name|noTrash
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fp
init|=
operator|new
name|Path
argument_list|(
name|zonePath
argument_list|,
literal|"encFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fp
argument_list|,
literal|1
operator|<<
literal|13
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEEE
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|blocks
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|fp
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FileEncryptionInfo
name|fei
init|=
name|blocks
operator|.
name|getFileEncryptionInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testKey
argument_list|,
name|fei
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|EncryptionZone
name|ez
init|=
name|fs
operator|.
name|getEZForPath
argument_list|(
name|fp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|zonePath
operator|.
name|toString
argument_list|()
argument_list|,
name|ez
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|HdfsConstants
operator|.
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|fs
operator|.
name|addDelegationTokens
argument_list|(
literal|"JobTracker"
argument_list|,
name|creds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * FileSystem.[setStoragePolicy, unsetStoragePolicy] API call should succeed    * without failure.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testStoragePolicy ()
specifier|public
name|void
name|testStoragePolicy
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/storagePolicyTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|sp
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"/sp"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|sp
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"create with some content"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockStoragePolicySuite
name|suite
init|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|suite
operator|.
name|getPolicy
argument_list|(
literal|"HOT"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|sp
argument_list|,
name|hot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|sp
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
name|fs
operator|.
name|unsetStoragePolicy
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|sp
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
block|}
comment|/**    * append is not supported in EC.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/fileTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/fileTest/appendFile"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"create with some content"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"append is not supported on erasure coded file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|//Work as expected.
block|}
block|}
comment|/**    * truncate is not supported in EC.    * @throws IOException if any IO operation failed.    */
annotation|@
name|Test
DECL|method|testTruncate ()
specifier|public
name|void
name|testTruncate
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/truncateTest"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/truncateTest/truncatefile"
argument_list|)
decl_stmt|;
try|try
init|(
name|DataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
init|)
block|{
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"create with some content"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|f
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"truncate is not supported on erasure coded file."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//Work as expected.
block|}
block|}
annotation|@
name|After
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

