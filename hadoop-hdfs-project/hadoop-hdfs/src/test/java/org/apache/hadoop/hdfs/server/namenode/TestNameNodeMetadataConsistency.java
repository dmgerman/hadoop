begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestNameNodeMetadataConsistency
specifier|public
class|class
name|TestNameNodeMetadataConsistency
block|{
DECL|field|filePath1
specifier|private
specifier|static
specifier|final
name|Path
name|filePath1
init|=
operator|new
name|Path
argument_list|(
literal|"/testdata1.txt"
argument_list|)
decl_stmt|;
DECL|field|filePath2
specifier|private
specifier|static
specifier|final
name|Path
name|filePath2
init|=
operator|new
name|Path
argument_list|(
literal|"/testdata2.txt"
argument_list|)
decl_stmt|;
DECL|field|TEST_DATA_IN_FUTURE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_IN_FUTURE
init|=
literal|"This is test data"
decl_stmt|;
DECL|field|SCAN_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|SCAN_INTERVAL
init|=
literal|1
decl_stmt|;
DECL|field|SCAN_WAIT
specifier|private
specifier|static
specifier|final
name|int
name|SCAN_WAIT
init|=
literal|3
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
name|HdfsConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|InitTest ()
specifier|public
name|void
name|InitTest
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
name|SCAN_INTERVAL
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This test creates a file and modifies the block generation stamp to number    * that name node has not seen yet. It then asserts that name node moves into    * safe mode while it is in startup mode.    */
annotation|@
name|Test
DECL|method|testGenerationStampInFuture ()
specifier|public
name|void
name|testGenerationStampInFuture
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|OutputStream
name|ostream
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath1
argument_list|)
decl_stmt|;
name|ostream
operator|.
name|write
argument_list|(
name|TEST_DATA_IN_FUTURE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Re-write the Generation Stamp to a Generation Stamp in future.
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|genStamp
init|=
name|block
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
specifier|final
name|int
name|datanodeIndex
init|=
literal|0
decl_stmt|;
name|cluster
operator|.
name|changeGenStampOfBlock
argument_list|(
name|datanodeIndex
argument_list|,
name|block
argument_list|,
name|genStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// stop the data node so that it won't remove block
specifier|final
name|DataNodeProperties
name|dnProps
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|datanodeIndex
argument_list|)
decl_stmt|;
comment|// Simulate Namenode forgetting a Block
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|BlockInfo
name|bInfo
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoredBlock
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|removeBlock
argument_list|(
name|bInfo
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
comment|// we also need to tell block manager that we are in the startup path
name|BlockManagerTestUtil
operator|.
name|setStartupSafeModeForTest
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnProps
argument_list|)
expr_stmt|;
name|waitTil
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|SCAN_WAIT
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|waitTil
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|SCAN_WAIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that we find all written bytes in future block
name|assertEquals
argument_list|(
name|TEST_DATA_IN_FUTURE
operator|.
name|length
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getBytesWithFutureGenerationStamps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert safemode reason
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSafeModeTip
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Name node detected blocks with generation stamps in future"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pretty much the same tests as above but does not setup safeMode == true,    * hence we should not have positive count of Blocks in future.    */
annotation|@
name|Test
DECL|method|testEnsureGenStampsIsStartupOnly ()
specifier|public
name|void
name|testEnsureGenStampsIsStartupOnly
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|testData
init|=
literal|" This is test data"
decl_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|OutputStream
name|ostream
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath2
argument_list|)
decl_stmt|;
name|ostream
operator|.
name|write
argument_list|(
name|testData
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath2
argument_list|)
decl_stmt|;
name|long
name|genStamp
init|=
name|block
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
comment|// Re-write the Generation Stamp to a Generation Stamp in future.
name|cluster
operator|.
name|changeGenStampOfBlock
argument_list|(
literal|0
argument_list|,
name|block
argument_list|,
name|genStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProps
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Simulate  Namenode forgetting a Block
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockInfo
name|bInfo
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoredBlock
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|removeBlock
argument_list|(
name|bInfo
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnProps
argument_list|)
expr_stmt|;
name|waitTil
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|SCAN_WAIT
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|waitTil
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|SCAN_WAIT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that there are no bytes in future since isInStartupSafe
comment|// mode is not true.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getBytesWithFutureGenerationStamps
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitTil (long waitPeriod)
specifier|private
name|void
name|waitTil
parameter_list|(
name|long
name|waitPeriod
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitPeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

