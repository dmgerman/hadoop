begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_class
DECL|class|TestQuorumCall
specifier|public
class|class
name|TestQuorumCall
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testQuorums ()
specifier|public
name|void
name|testQuorums
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SettableFuture
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"f1"
argument_list|,
name|SettableFuture
operator|.
expr|<
name|String
operator|>
name|create
argument_list|()
argument_list|,
literal|"f2"
argument_list|,
name|SettableFuture
operator|.
expr|<
name|String
operator|>
name|create
argument_list|()
argument_list|,
literal|"f3"
argument_list|,
name|SettableFuture
operator|.
expr|<
name|String
operator|>
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|QuorumCall
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|q
init|=
name|QuorumCall
operator|.
name|create
argument_list|(
name|futures
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|countResponses
argument_list|()
argument_list|)
expr_stmt|;
name|futures
operator|.
name|get
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|set
argument_list|(
literal|"first future"
argument_list|)
expr_stmt|;
name|q
operator|.
name|waitFor
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// wait for 1 response
name|q
operator|.
name|waitFor
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// wait for 1 success
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|q
operator|.
name|countResponses
argument_list|()
argument_list|)
expr_stmt|;
name|futures
operator|.
name|get
argument_list|(
literal|"f2"
argument_list|)
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"error"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|q
operator|.
name|countResponses
argument_list|()
argument_list|)
expr_stmt|;
name|futures
operator|.
name|get
argument_list|(
literal|"f3"
argument_list|)
operator|.
name|set
argument_list|(
literal|"second future"
argument_list|)
expr_stmt|;
name|q
operator|.
name|waitFor
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// wait for 3 responses
name|q
operator|.
name|waitFor
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// 2 successes
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|q
operator|.
name|countResponses
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1=first future,f3=second future"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|join
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|q
operator|.
name|getResults
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|.
name|waitFor
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't time out waiting for more responses than came back"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

