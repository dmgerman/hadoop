begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReplicationPolicyWithUpgradeDomain
specifier|public
class|class
name|TestReplicationPolicyWithUpgradeDomain
extends|extends
name|BaseReplicationPolicyTest
block|{
DECL|method|TestReplicationPolicyWithUpgradeDomain ()
specifier|public
name|TestReplicationPolicyWithUpgradeDomain
parameter_list|()
block|{
name|this
operator|.
name|blockPlacementPolicy
operator|=
name|BlockPlacementPolicyWithUpgradeDomain
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDatanodeDescriptors (Configuration conf)
name|DatanodeDescriptor
index|[]
name|getDatanodeDescriptors
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r3"
block|,
literal|"/d1/r3"
block|,
literal|"/d1/r3"
block|}
decl_stmt|;
name|storages
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racks
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dataNodes
index|[]
init|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// each rack has 3 DNs with upgrade domain id 1,2,3 respectively.
name|String
name|upgradeDomain
init|=
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|i
operator|%
literal|3
operator|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|dataNodes
index|[
name|i
index|]
operator|.
name|setUpgradeDomain
argument_list|(
name|upgradeDomain
argument_list|)
expr_stmt|;
block|}
return|return
name|dataNodes
return|;
block|}
comment|/**    * Verify the targets are chosen to honor both    * rack and upgrade domain policies when number of replica is    * 0, 1, 2, 3, 4 respectively.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget1 ()
specifier|public
name|void
name|testChooseTarget1
parameter_list|()
throws|throws
name|Exception
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the rack and upgrade domain policies when excludeNodes are    * specified.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTargetWithExcludeNodes ()
specifier|public
name|void
name|testChooseTargetWithExcludeNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRacks
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRacks
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|7
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getRacks
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getRacks
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getUpgradeDomains
argument_list|(
name|targets
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|1
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
literal|true
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"targets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the correct replica is chosen to satisfy both rack and upgrade    * domain policy.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseReplicaToDelete ()
specifier|public
name|void
name|testChooseReplicaToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockPlacementPolicyWithUpgradeDomain
name|upgradeDomainPolicy
init|=
operator|(
name|BlockPlacementPolicyWithUpgradeDomain
operator|)
name|replicator
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|first
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|second
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|excessTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|excessTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|second
operator|.
name|add
argument_list|(
name|storages
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|second
operator|.
name|add
argument_list|(
name|storages
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
name|chosenStorage
init|=
name|upgradeDomainPolicy
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|excessTypes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|chosenStorage
argument_list|,
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|first
operator|.
name|clear
argument_list|()
expr_stmt|;
name|second
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excessTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|first
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|chosenStorage
operator|=
name|upgradeDomainPolicy
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|excessTypes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chosenStorage
operator|.
name|equals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
operator|||
name|chosenStorage
operator|.
name|equals
argument_list|(
name|storages
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the scenario where not enough replicas can't satisfy the policy.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTargetWithoutEnoughReplica ()
specifier|public
name|void
name|testChooseTargetWithoutEnoughReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targets
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
operator|||
name|targets
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the scenario where not enough replicas can't satisfy the policy.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testVerifyBlockPlacement ()
specifier|public
name|void
name|testVerifyBlockPlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|LocatedBlock
name|locatedBlock
decl_stmt|;
name|BlockPlacementStatus
name|status
decl_stmt|;
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"fake-pool"
argument_list|,
operator|new
name|Block
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|set
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 2 upgrade domains (not enough), 2 racks (enough)
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 upgrade domains (enough), 2 racks (enough)
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 upgrade domains (enough), 1 rack (not enough)
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|getErrorDescription
argument_list|()
operator|.
name|contains
argument_list|(
literal|"upgrade domain"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 upgrade domains( not enough), 3 racks (enough)
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getErrorDescription
argument_list|()
operator|.
name|contains
argument_list|(
literal|"upgrade domain"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3 upgrade domains (enough), 3 racks (enough)
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 upgrade domains (enough), 3 racks (enough), 4 replicas
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 upgrade domains (not enough), 3 racks (enough), 4 replicas
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|storages
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|b
argument_list|,
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|replicator
operator|.
name|verifyBlockPlacement
argument_list|(
literal|""
argument_list|,
name|locatedBlock
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getUpgradeDomains (DatanodeStorageInfo[] nodes)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getUpgradeDomains
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|nodes
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|upgradeDomains
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|node
range|:
name|nodes
control|)
block|{
name|upgradeDomains
operator|.
name|add
argument_list|(
name|node
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getUpgradeDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|upgradeDomains
return|;
block|}
DECL|method|getRacks (DatanodeStorageInfo[] nodes)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getRacks
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|nodes
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|racks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|node
range|:
name|nodes
control|)
block|{
name|String
name|rack
init|=
name|node
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|rack
argument_list|)
expr_stmt|;
block|}
return|return
name|racks
return|;
block|}
block|}
end_class

end_unit

