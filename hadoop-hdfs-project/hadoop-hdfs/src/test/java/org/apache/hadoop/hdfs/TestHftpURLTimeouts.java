begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHftpURLTimeouts
specifier|public
class|class
name|TestHftpURLTimeouts
block|{
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|URLUtils
operator|.
name|SOCKET_TIMEOUT
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHftpSocketTimeout ()
specifier|public
name|void
name|testHftpSocketTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"hftp"
argument_list|,
literal|null
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|null
argument_list|)
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|timedout
init|=
literal|false
decl_stmt|;
name|HftpFileSystem
name|fs
init|=
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|fs
operator|.
name|openConnection
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|timedout
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// this will consume the only slot in the backlog
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ste
parameter_list|)
block|{
name|timedout
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Read timed out"
argument_list|,
name|ste
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"read timedout"
argument_list|,
name|timedout
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"connect timedout"
argument_list|,
name|checkConnectTimeout
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHsftpSocketTimeout ()
specifier|public
name|void
name|testHsftpSocketTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"hsftp"
argument_list|,
literal|null
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|null
argument_list|)
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getLocalPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|timedout
init|=
literal|false
decl_stmt|;
name|HsftpFileSystem
name|fs
init|=
operator|(
name|HsftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|timedout
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// this will consume the only slot in the backlog
name|conn
operator|=
name|fs
operator|.
name|openConnection
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ste
parameter_list|)
block|{
comment|// SSL expects a negotiation, so it will timeout on read, unlike hftp
name|timedout
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Read timed out"
argument_list|,
name|ste
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"ssl read connect timedout"
argument_list|,
name|timedout
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"connect timedout"
argument_list|,
name|checkConnectTimeout
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkConnectTimeout (HftpFileSystem fs, boolean ignoreReadTimeout)
specifier|private
name|boolean
name|checkConnectTimeout
parameter_list|(
name|HftpFileSystem
name|fs
parameter_list|,
name|boolean
name|ignoreReadTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|timedout
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|HttpURLConnection
argument_list|>
name|conns
init|=
operator|new
name|LinkedList
argument_list|<
name|HttpURLConnection
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|// with a listen backlog of 1, should only have to make one connection
comment|// to trigger a connection timeout.  however... linux doesn't honor the
comment|// socket's listen backlog so we have to try a bunch of times
for|for
control|(
name|int
name|n
init|=
literal|32
init|;
operator|!
name|timedout
operator|&&
name|n
operator|>
literal|0
condition|;
name|n
operator|--
control|)
block|{
try|try
block|{
name|conns
operator|.
name|add
argument_list|(
name|fs
operator|.
name|openConnection
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ste
parameter_list|)
block|{
name|String
name|message
init|=
name|ste
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|// https will get a read timeout due to SSL negotiation, but
comment|// a normal http will not, so need to ignore SSL read timeouts
comment|// until a connect timeout occurs
if|if
condition|(
operator|!
operator|(
name|ignoreReadTimeout
operator|&&
name|message
operator|.
name|equals
argument_list|(
literal|"Read timed out"
argument_list|)
operator|)
condition|)
block|{
name|timedout
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"connect timed out"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|HttpURLConnection
name|conn
range|:
name|conns
control|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|timedout
return|;
block|}
block|}
end_class

end_unit

