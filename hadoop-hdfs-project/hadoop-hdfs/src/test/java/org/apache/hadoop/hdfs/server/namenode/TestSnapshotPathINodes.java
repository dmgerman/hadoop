begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
operator|.
name|INodesInPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectorySnapshottable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeFileSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test snapshot related operations. */
end_comment

begin_class
DECL|class|TestSnapshotPathINodes
specifier|public
class|class
name|TestSnapshotPathINodes
block|{
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|dir
specifier|static
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|static
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|file1
specifier|static
specifier|private
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|file2
specifier|static
specifier|private
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|static
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|static
specifier|private
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsdir
specifier|static
specifier|private
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|hdfs
specifier|static
specifier|private
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|static
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file2
argument_list|,
literal|1024
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|static
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test allow-snapshot operation. */
annotation|@
name|Test
DECL|method|testAllowSnapshot ()
specifier|public
name|void
name|testAllowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|path
init|=
name|sub1
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|INode
name|before
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Before a directory is snapshottable
name|Assert
operator|.
name|assertTrue
argument_list|(
name|before
operator|instanceof
name|INodeDirectory
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|before
operator|instanceof
name|INodeDirectorySnapshottable
argument_list|)
expr_stmt|;
comment|// After a directory is snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|{
specifier|final
name|INode
name|after
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|after
operator|instanceof
name|INodeDirectorySnapshottable
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|{
specifier|final
name|INode
name|after
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|after
operator|instanceof
name|INodeDirectory
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|after
operator|instanceof
name|INodeDirectorySnapshottable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSnapshot (INodesInPath inodesInPath, String name)
specifier|static
name|Snapshot
name|getSnapshot
parameter_list|(
name|INodesInPath
name|inodesInPath
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|i
init|=
name|inodesInPath
operator|.
name|getSnapshotRootIndex
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|final
name|INode
name|inode
init|=
name|inodesInPath
operator|.
name|getINodes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
return|return
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|inode
operator|)
operator|.
name|getSnapshot
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertSnapshot (INodesInPath inodesInPath, boolean isSnapshot, final Snapshot snapshot, int index)
specifier|static
name|void
name|assertSnapshot
parameter_list|(
name|INodesInPath
name|inodesInPath
parameter_list|,
name|boolean
name|isSnapshot
parameter_list|,
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|isSnapshot
argument_list|,
name|inodesInPath
operator|.
name|isSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|index
argument_list|,
name|inodesInPath
operator|.
name|getSnapshotRootIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isSnapshot
condition|?
name|snapshot
else|:
literal|null
argument_list|,
name|inodesInPath
operator|.
name|getPathSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isSnapshot
condition|?
literal|null
else|:
name|snapshot
argument_list|,
name|inodesInPath
operator|.
name|getLatestSnapshot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSnapshot
operator|&&
name|index
operator|>=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|Snapshot
operator|.
name|Root
operator|.
name|class
argument_list|,
name|inodesInPath
operator|.
name|getINodes
argument_list|()
index|[
name|index
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertINodeFile (INode inode, Path path)
specifier|static
name|void
name|assertINodeFile
parameter_list|(
name|INode
name|inode
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|inode
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeFile
operator|.
name|class
argument_list|,
name|inode
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}     * for normal (non-snapshot) file.    */
annotation|@
name|Test
DECL|method|testNonSnapshotPathINodes ()
specifier|public
name|void
name|testNonSnapshotPathINodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get the inodes by resolving the path of a normal file
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// The number of inodes should be equal to components.length
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// The returned nodesInPath should be non-snapshot
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The last INode should be associated with file1
name|assertTrue
argument_list|(
literal|"file1="
operator|+
name|file1
operator|+
literal|", nodesInPath="
operator|+
name|nodesInPath
argument_list|,
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|2
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|3
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call getExistingPathINodes and request only one INode. This is used
comment|// when identifying the INode for a given path.
name|nodesInPath
operator|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
literal|0
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call getExistingPathINodes and request 2 INodes. This is usually used
comment|// when identifying the parent INode of a given path.
name|nodesInPath
operator|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
literal|1
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
literal|0
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}     * for snapshot file.    */
annotation|@
name|Test
DECL|method|testSnapshotPathINodes ()
specifier|public
name|void
name|testSnapshotPathINodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a snapshot for the dir, and check the inodes for the path
comment|// pointing to a snapshot file
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// The path when accessing the snapshot file of file1 is
comment|// /TestSnapshot/sub1/.snapshot/s1/file1
name|String
name|snapshotPath
init|=
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|"/.snapshot/s1/file1"
decl_stmt|;
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// Length of inodes should be (components.length - 1), since we will ignore
comment|// ".snapshot"
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// SnapshotRootIndex should be 3: {root, Testsnapshot, sub1, s1, file1}
specifier|final
name|Snapshot
name|snapshot
init|=
name|getSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|snapshot
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Check the INode for file1 (snapshot file)
name|INode
name|snapshotFileNode
init|=
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|assertINodeFile
argument_list|(
name|snapshotFileNode
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snapshotFileNode
operator|.
name|getParent
argument_list|()
operator|instanceof
name|INodeDirectoryWithSnapshot
argument_list|)
expr_stmt|;
comment|// Call getExistingPathINodes and request only one INode.
name|nodesInPath
operator|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// The snapshotroot (s1) is not included in inodes. Thus the
comment|// snapshotRootIndex should be -1.
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|snapshot
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check the INode for file1 (snapshot file)
name|assertINodeFile
argument_list|(
name|nodesInPath
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Call getExistingPathINodes and request 2 INodes.
name|nodesInPath
operator|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// There should be two INodes in inodes: s1 and snapshot of file1. Thus the
comment|// SnapshotRootIndex should be 0.
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|snapshot
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertINodeFile
argument_list|(
name|nodesInPath
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Resolve the path "/TestSnapshot/sub1/.snapshot"
name|String
name|dotSnapshotPath
init|=
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|"/.snapshot"
decl_stmt|;
name|names
operator|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|dotSnapshotPath
argument_list|)
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|nodesInPath
operator|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inodes
operator|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
expr_stmt|;
comment|// The number of INodes returned should be components.length - 1 since we
comment|// will ignore ".snapshot"
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// No SnapshotRoot dir is included in the resolved inodes
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|snapshot
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The last INode should be the INode for sub1
name|assertEquals
argument_list|(
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|INodeFileSnapshot
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}     * for snapshot file after deleting the original file.    */
annotation|@
name|Test
DECL|method|testSnapshotPathINodesAfterDeletion ()
specifier|public
name|void
name|testSnapshotPathINodesAfterDeletion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a snapshot for the dir, and check the inodes for the path
comment|// pointing to a snapshot file
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// Delete the original file /TestSnapshot/sub1/file1
name|hdfs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
block|{
comment|// Resolve the path for the snapshot file
comment|// /TestSnapshot/sub1/.snapshot/s2/file1
name|String
name|snapshotPath
init|=
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|"/.snapshot/s2/file1"
decl_stmt|;
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// Length of inodes should be (components.length - 1), since we will ignore
comment|// ".snapshot"
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// SnapshotRootIndex should be 3: {root, Testsnapshot, sub1, s2, file1}
name|snapshot
operator|=
name|getSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|snapshot
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Check the INode for file1 (snapshot file)
name|assertINodeFile
argument_list|(
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|// Check the INodes for path /TestSnapshot/sub1/file1
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// The length of inodes should be equal to components.length
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// The number of non-null elements should be components.length - 1 since
comment|// file1 has been deleted
name|assertEquals
argument_list|(
name|nodesInPath
operator|.
name|getNumNonNull
argument_list|()
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The returned nodesInPath should be non-snapshot
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
name|snapshot
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The last INode should be null, and the one before should be associated
comment|// with sub1
name|assertNull
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|2
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|3
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|s4
specifier|static
specifier|private
name|Snapshot
name|s4
decl_stmt|;
comment|/**     * Test {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}     * for snapshot file while adding a new file after snapshot.    */
annotation|@
name|Test
DECL|method|testSnapshotPathINodesWithAddedFile ()
specifier|public
name|void
name|testSnapshotPathINodesWithAddedFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a snapshot for the dir, and check the inodes for the path
comment|// pointing to a snapshot file
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
comment|// Add a new file /TestSnapshot/sub1/file3
specifier|final
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file3
argument_list|,
literal|1024
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|{
comment|// Check the inodes for /TestSnapshot/sub1/.snapshot/s4/file3
name|String
name|snapshotPath
init|=
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|"/.snapshot/s4/file3"
decl_stmt|;
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// Length of inodes should be (components.length - 1), since we will ignore
comment|// ".snapshot"
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The number of non-null inodes should be components.length - 2, since
comment|// snapshot of file3 does not exist
name|assertEquals
argument_list|(
name|nodesInPath
operator|.
name|getNumNonNull
argument_list|()
argument_list|,
name|components
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
name|s4
operator|=
name|getSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
comment|// SnapshotRootIndex should still be 3: {root, Testsnapshot, sub1, s4, null}
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|true
argument_list|,
name|s4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Check the last INode in inodes, which should be null
name|assertNull
argument_list|(
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Check the inodes for /TestSnapshot/sub1/file3
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|file3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// The number of inodes should be equal to components.length
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// The returned nodesInPath should be non-snapshot
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
name|s4
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The last INode should be associated with file3
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|2
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|3
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test {@link INodeDirectory#getExistingPathINodes(byte[][], int, boolean)}     * for snapshot file while modifying file after snapshot.    */
comment|//  TODO: disable it temporarily since it uses append.
comment|//  @Test
DECL|method|testSnapshotPathINodesAfterModification ()
specifier|public
name|void
name|testSnapshotPathINodesAfterModification
parameter_list|()
throws|throws
name|Exception
block|{
comment|//file1 was deleted, create it again.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// First check the INode for /TestSnapshot/sub1/file1
name|String
index|[]
name|names
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|INodesInPath
name|nodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|inodes
init|=
name|nodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// The number of inodes should be equal to components.length
name|assertEquals
argument_list|(
name|inodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSnapshot
argument_list|(
name|nodesInPath
argument_list|,
literal|false
argument_list|,
name|s4
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The last INode should be associated with file1
name|assertEquals
argument_list|(
name|inodes
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a snapshot for the dir, and check the inodes for the path
comment|// pointing to a snapshot file
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// Modify file1
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
literal|"the content for appending"
argument_list|)
expr_stmt|;
comment|// Check the INodes for snapshot of file1
name|String
name|snapshotPath
init|=
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|"/.snapshot/s3/file1"
decl_stmt|;
name|names
operator|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|INodesInPath
name|ssNodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|INode
index|[]
name|ssInodes
init|=
name|ssNodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// Length of ssInodes should be (components.length - 1), since we will
comment|// ignore ".snapshot"
name|assertEquals
argument_list|(
name|ssInodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Snapshot
name|s3
init|=
name|getSnapshot
argument_list|(
name|ssNodesInPath
argument_list|,
literal|"s3"
argument_list|)
decl_stmt|;
name|assertSnapshot
argument_list|(
name|ssNodesInPath
argument_list|,
literal|true
argument_list|,
name|s3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Check the INode for snapshot of file1
name|INode
name|snapshotFileNode
init|=
name|ssInodes
index|[
name|ssInodes
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|snapshotFileNode
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snapshotFileNode
operator|instanceof
name|INodeFileSnapshot
argument_list|)
expr_stmt|;
comment|// The modification time of the snapshot INode should be the same with the
comment|// original INode before modification
name|assertEquals
argument_list|(
name|inodes
index|[
name|inodes
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|ssInodes
index|[
name|ssInodes
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the INode for /TestSnapshot/sub1/file1 again
name|names
operator|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|components
operator|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|INodesInPath
name|newNodesInPath
init|=
name|fsdir
operator|.
name|rootDir
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertSnapshot
argument_list|(
name|newNodesInPath
argument_list|,
literal|false
argument_list|,
name|s3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|INode
index|[]
name|newInodes
init|=
name|newNodesInPath
operator|.
name|getINodes
argument_list|()
decl_stmt|;
comment|// The number of inodes should be equal to components.length
name|assertEquals
argument_list|(
name|newInodes
operator|.
name|length
argument_list|,
name|components
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// The last INode should be associated with file1
specifier|final
name|int
name|last
init|=
name|components
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
name|newInodes
index|[
name|last
index|]
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// The modification time of the INode for file3 should have been changed
name|Assert
operator|.
name|assertFalse
argument_list|(
name|inodes
index|[
name|last
index|]
operator|.
name|getModificationTime
argument_list|()
operator|==
name|newInodes
index|[
name|last
index|]
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

