begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**                                                                                                                                 * Licensed to the Apache Software Foundation (ASF) under one                                                                       * or more contributor license agreements.  See the NOTICE file                                                                     * distributed with this work for additional information                                                                            * regarding copyright ownership.  The ASF licenses this file                                                                       * to you under the Apache License, Version 2.0 (the                                                                                * "License"); you may not use this file except in compliance                                                                       * with the License.  You may obtain a copy of the License at                                                                       *                                                                                                                                  *     http://www.apache.org/licenses/LICENSE-2.0                                                                                   *                                                                                                                                  * Unless required by applicable law or agreed to in writing, software                                                              * distributed under the License is distributed on an "AS IS" BASIS,                                                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                                         * See the License for the specific language governing permissions and                                                              * limitations under the License.                                                                                                   */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test the fileLength on cluster restarts */
end_comment

begin_class
DECL|class|TestFileLengthOnClusterRestart
specifier|public
class|class
name|TestFileLengthOnClusterRestart
block|{
comment|/**    * Tests the fileLength when we sync the file and restart the cluster and    * Datanodes not report to Namenode yet.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFileLengthWithHSyncAndClusterRestartWithOutDNsRegister ()
specifier|public
name|void
name|testFileLengthWithHSyncAndClusterRestartWithOutDNsRegister
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// create cluster
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|512
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HdfsDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|fileLength
init|=
literal|1030
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|fileLength
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|in
operator|=
operator|(
name|HdfsDataInputStream
operator|)
name|dfs
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify the length when we just restart NN. DNs will register
comment|// immediately.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileLength
argument_list|,
name|in
operator|.
name|getVisibleLength
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// This is just for ensuring NN started.
name|verifyNNIsInSafeMode
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|=
operator|(
name|HdfsDataInputStream
operator|)
name|dfs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Name node is in safe mode"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|in
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyNNIsInSafeMode (DistributedFileSystem dfs)
specifier|private
name|void
name|verifyNNIsInSafeMode
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|dfs
operator|.
name|isInSafeMode
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected to be in SafeMode"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// NN might not started completely Ignore
block|}
block|}
block|}
block|}
end_class

end_unit

