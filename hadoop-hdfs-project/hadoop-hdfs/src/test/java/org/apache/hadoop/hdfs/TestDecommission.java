begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DecommissionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class tests the decommissioning of nodes.  */
end_comment

begin_class
DECL|class|TestDecommission
specifier|public
class|class
name|TestDecommission
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDecommission
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|16384
decl_stmt|;
DECL|field|HEARTBEAT_INTERVAL
specifier|static
specifier|final
name|int
name|HEARTBEAT_INTERVAL
init|=
literal|1
decl_stmt|;
comment|// heartbeat interval in seconds
DECL|field|BLOCKREPORT_INTERVAL_MSEC
specifier|static
specifier|final
name|int
name|BLOCKREPORT_INTERVAL_MSEC
init|=
literal|1000
decl_stmt|;
comment|//block report in msec
DECL|field|NAMENODE_REPLICATION_INTERVAL
specifier|static
specifier|final
name|int
name|NAMENODE_REPLICATION_INTERVAL
init|=
literal|1
decl_stmt|;
comment|//replication interval
DECL|field|myrand
specifier|final
name|Random
name|myrand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|dir
name|Path
name|dir
decl_stmt|;
DECL|field|hostsFile
name|Path
name|hostsFile
decl_stmt|;
DECL|field|excludeFile
name|Path
name|excludeFile
decl_stmt|;
DECL|field|localFileSys
name|FileSystem
name|localFileSys
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// Set up the hosts/exclude files.
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|localFileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|PathUtils
operator|.
name|getTestDirName
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|+
literal|"/work-dir/decommission"
argument_list|)
expr_stmt|;
name|hostsFile
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"hosts"
argument_list|)
expr_stmt|;
name|excludeFile
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"exclude"
argument_list|)
expr_stmt|;
comment|// Setup conf
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|hostsFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
name|excludeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
name|BLOCKREPORT_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
name|NAMENODE_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|hostsFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanupFile
argument_list|(
name|localFileSys
argument_list|,
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeConfigFile (Path name, List<String> nodes)
specifier|private
name|void
name|writeConfigFile
parameter_list|(
name|Path
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete if it already exists
if|if
condition|(
name|localFileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|localFileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|stm
init|=
name|localFileSys
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains three blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created file "
operator|+
name|name
operator|+
literal|" with "
operator|+
name|repl
operator|+
literal|" replicas."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the number of replicas are as expected for each block in    * the given file.    * For blocks with a decommissioned node, verify that their replication    * is 1 more than what is specified.    * For blocks without decommissioned nodes, verify their replication is    * equal to what is specified.    *     * @param downnode - if null, there is no decommissioned node for this file.    * @return - null if no failure found, else an error message string.    */
DECL|method|checkFile (FileSystem fileSys, Path name, int repl, String downnode, int numDatanodes)
specifier|private
specifier|static
name|String
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|String
name|downnode
parameter_list|,
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isNodeDown
init|=
operator|(
name|downnode
operator|!=
literal|null
operator|)
decl_stmt|;
comment|// need a raw stream
name|assertTrue
argument_list|(
literal|"Not HDFS:"
operator|+
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|dinfo
init|=
name|dis
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|dinfo
control|)
block|{
comment|// for each block
name|int
name|hasdown
init|=
literal|0
decl_stmt|;
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// for each replica
if|if
condition|(
name|isNodeDown
operator|&&
name|nodes
index|[
name|j
index|]
operator|.
name|getXferAddr
argument_list|()
operator|.
name|equals
argument_list|(
name|downnode
argument_list|)
condition|)
block|{
name|hasdown
operator|++
expr_stmt|;
comment|//Downnode must actually be decommissioned
if|if
condition|(
operator|!
name|nodes
index|[
name|j
index|]
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is given as downnode, "
operator|+
literal|"but is not decommissioned"
return|;
block|}
comment|//Decommissioned node (if any) should only be last node in list.
if|if
condition|(
name|j
operator|!=
name|nodes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" decommissioned node "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" was not last node in list: "
operator|+
operator|(
name|j
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|nodes
operator|.
name|length
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is decommissioned."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Non-downnodes must not be decommissioned
if|if
condition|(
name|nodes
index|[
name|j
index|]
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is unexpectedly decommissioned"
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" has "
operator|+
name|hasdown
operator|+
literal|" decommissioned replica."
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|min
argument_list|(
name|numDatanodes
argument_list|,
name|repl
operator|+
name|hasdown
argument_list|)
operator|!=
name|nodes
operator|.
name|length
condition|)
block|{
return|return
literal|"Wrong number of replicas for block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|": "
operator|+
name|nodes
operator|.
name|length
operator|+
literal|", expected "
operator|+
name|Math
operator|.
name|min
argument_list|(
name|numDatanodes
argument_list|,
name|repl
operator|+
name|hasdown
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * decommission the DN at index dnIndex or one random node if dnIndex is set    * to -1 and wait for the node to reach the given {@code waitForState}.    */
DECL|method|decommissionNode (int nnIndex, String datanodeUuid, ArrayList<DatanodeInfo>decommissionedNodes, AdminStates waitForState)
specifier|private
name|DatanodeInfo
name|decommissionNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|String
name|datanodeUuid
parameter_list|,
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|AdminStates
name|waitForState
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
comment|//
comment|// pick one datanode randomly unless the caller specifies one.
comment|//
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|datanodeUuid
operator|==
literal|null
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
condition|)
block|{
name|index
operator|=
name|myrand
operator|.
name|nextInt
argument_list|(
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
index|[
name|index
index|]
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The caller specifies a DN
for|for
control|(
init|;
name|index
operator|<
name|info
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|info
index|[
name|index
index|]
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeUuid
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|==
name|info
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid datanodeUuid "
operator|+
name|datanodeUuid
argument_list|)
throw|;
block|}
block|}
name|String
name|nodename
init|=
name|info
index|[
name|index
index|]
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Decommissioning node: "
operator|+
name|nodename
argument_list|)
expr_stmt|;
comment|// write nodename into the exclude file.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|decommissionedNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decommissionedNodes
control|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nodes
operator|.
name|add
argument_list|(
name|nodename
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|ret
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|info
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|ret
argument_list|,
name|waitForState
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/* Ask a specific NN to stop decommission of the datanode and wait for each    * to reach the NORMAL state.    */
DECL|method|recommissionNode (int nnIndex, DatanodeInfo decommissionedNode)
specifier|private
name|void
name|recommissionNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|DatanodeInfo
name|decommissionedNode
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recommissioning node: "
operator|+
name|decommissionedNode
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|waitNodeState
argument_list|(
name|decommissionedNode
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
comment|/*     * Wait till node is fully decommissioned.    */
DECL|method|waitNodeState (DatanodeInfo node, AdminStates state)
specifier|private
name|void
name|waitNodeState
parameter_list|(
name|DatanodeInfo
name|node
parameter_list|,
name|AdminStates
name|state
parameter_list|)
block|{
name|boolean
name|done
init|=
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for node "
operator|+
name|node
operator|+
literal|" to change state to "
operator|+
name|state
operator|+
literal|" current state: "
operator|+
name|node
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_INTERVAL
operator|*
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing
block|}
name|done
operator|=
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"node "
operator|+
name|node
operator|+
literal|" reached the state "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
comment|/* Get DFSClient to the namenode */
DECL|method|getDfsClient (NameNode nn, Configuration conf)
specifier|private
specifier|static
name|DFSClient
name|getDfsClient
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DFSClient
argument_list|(
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/* Validate cluster has expected number of datanodes */
DECL|method|validateCluster (DFSClient client, int numDNs)
specifier|private
specifier|static
name|void
name|validateCluster
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|int
name|numDNs
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
name|numDNs
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Start a MiniDFSCluster     * @throws IOException */
DECL|method|startCluster (int numNameNodes, int numDatanodes, Configuration conf)
specifier|private
name|void
name|startCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameNodes
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameNodes
condition|;
name|i
operator|++
control|)
block|{
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|validateCluster
argument_list|(
name|client
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNodes (final FSNamesystem ns, final Configuration conf )
specifier|static
name|void
name|refreshNodes
parameter_list|(
specifier|final
name|FSNamesystem
name|ns
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyStats (NameNode namenode, FSNamesystem fsn, DatanodeInfo info, DataNode node, boolean decommissioning)
specifier|private
name|void
name|verifyStats
parameter_list|(
name|NameNode
name|namenode
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|,
name|DatanodeInfo
name|info
parameter_list|,
name|DataNode
name|node
parameter_list|,
name|boolean
name|decommissioning
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Do the stats check over 10 heartbeats
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
index|[]
name|newStats
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getStats
argument_list|()
decl_stmt|;
comment|// For decommissioning nodes, ensure capacity of the DN is no longer
comment|// counted. Only used space of the DN is counted in cluster capacity
name|assertEquals
argument_list|(
name|newStats
index|[
literal|0
index|]
argument_list|,
name|decommissioning
condition|?
name|info
operator|.
name|getDfsUsed
argument_list|()
else|:
name|info
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure cluster used capacity is counted for both normal and
comment|// decommissioning nodes
name|assertEquals
argument_list|(
name|newStats
index|[
literal|1
index|]
argument_list|,
name|info
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// For decommissioning nodes, remaining space from the DN is not counted
name|assertEquals
argument_list|(
name|newStats
index|[
literal|2
index|]
argument_list|,
name|decommissioning
condition|?
literal|0
else|:
name|info
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure transceiver count is same as that DN
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getTotalLoad
argument_list|()
argument_list|,
name|info
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests decommission for non federated cluster    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommission ()
specifier|public
name|void
name|testDecommission
parameter_list|()
throws|throws
name|IOException
block|{
name|testDecommission
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests decommission with replicas on the target datanode cannot be migrated    * to other datanodes and satisfy the replication factor. Make sure the    * datanode won't get stuck in decommissioning state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommission2 ()
specifier|public
name|void
name|testDecommission2
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommission"
argument_list|)
expr_stmt|;
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|namenodeDecomList
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
argument_list|(
name|numNamenodes
argument_list|)
decl_stmt|;
name|namenodeDecomList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
name|numDatanodes
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"testDecommission2.dat"
argument_list|)
decl_stmt|;
name|int
name|replicas
init|=
literal|4
decl_stmt|;
comment|// Start decommissioning one namenode at a time
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
name|namenodeDecomList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|int
name|deadDecomissioned
init|=
name|ns
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveDecomissioned
init|=
name|ns
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
decl_stmt|;
comment|// Decommission one node. Verify that node is decommissioned.
name|DatanodeInfo
name|decomNode
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|decomNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadDecomissioned
argument_list|,
name|ns
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveDecomissioned
operator|+
literal|1
argument_list|,
name|ns
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
name|decomNode
operator|.
name|getXferAddr
argument_list|()
argument_list|,
name|numDatanodes
argument_list|)
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Restart the cluster and ensure recommissioned datanodes
comment|// are allowed to register with the namenode
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test decommission for federeated cluster    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommissionFederation ()
specifier|public
name|void
name|testDecommissionFederation
parameter_list|()
throws|throws
name|IOException
block|{
name|testDecommission
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test decommission process on standby NN.    * Verify admins can run "dfsadmin -refreshNodes" on SBN and decomm    * process can finish as long as admins run "dfsadmin -refreshNodes"    * on active NN.    * SBN used to mark excess replica upon recommission. The SBN's pick    * for excess replica could be different from the one picked by ANN.    * That creates inconsistent state and prevent SBN from finishing    * decommission.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommissionOnStandby ()
specifier|public
name|void
name|testDecommissionOnStandby
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|hdfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hdfsConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hdfsConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|hdfsConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_TOLERATE_HEARTBEAT_MULTIPLIER_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The time to wait so that the slow DN's heartbeat is considered old
comment|// by BlockPlacementPolicyDefault and thus will choose that DN for
comment|// excess replica.
name|long
name|slowHeartbeatDNwaitTime
init|=
name|hdfsConf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|1000
operator|*
operator|(
name|hdfsConf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_TOLERATE_HEARTBEAT_MULTIPLIER_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_TOLERATE_HEARTBEAT_MULTIPLIER_DEFAULT
argument_list|)
operator|+
literal|1
operator|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Step 1, create a cluster with 4 DNs. Blocks are stored on the first 3 DNs.
comment|// The last DN is empty. Also configure the last DN to have slow heartbeat
comment|// so that it will be chosen as excess replica candidate during recommission.
comment|// Step 1.a, copy blocks to the first 3 DNs. Given the replica count is the
comment|// same as # of DNs, each DN will have a replica for any block.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"testDecommissionHA.dat"
argument_list|)
decl_stmt|;
name|int
name|replicas
init|=
literal|3
decl_stmt|;
name|FileSystem
name|activeFileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|activeFileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Step 1.b, start a DN with slow heartbeat, so that we can know for sure it
comment|// will be chosen as the target of excess replica during recommission.
name|hdfsConf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|hdfsConf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DataNode
name|lastDN
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|lastDN
operator|.
name|getDatanodeUuid
argument_list|()
expr_stmt|;
comment|// Step 2, decommission the first DN at both ANN and SBN.
name|DataNode
name|firstDN
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Step 2.a, ask ANN to decomm the first DN
name|DatanodeInfo
name|decommissionedNodeFromANN
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|firstDN
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
comment|// Step 2.b, ask SBN to decomm the first DN
name|DatanodeInfo
name|decomNodeFromSBN
init|=
name|decommissionNode
argument_list|(
literal|1
argument_list|,
name|firstDN
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
comment|// Step 3, recommission the first DN on SBN and ANN to create excess replica
comment|// It recommissions the node on SBN first to create potential
comment|// inconsistent state. In production cluster, such insistent state can happen
comment|// even if recommission command was issued on ANN first given the async nature
comment|// of the system.
comment|// Step 3.a, ask SBN to recomm the first DN.
comment|// SBN has been fixed so that it no longer invalidates excess replica during
comment|// recommission.
comment|// Before the fix, SBN could get into the following state.
comment|//    1. the last DN would have been chosen as excess replica, given its
comment|//    heartbeat is considered old.
comment|//    Please refer to BlockPlacementPolicyDefault#chooseReplicaToDelete
comment|//    2. After recommissionNode finishes, SBN has 3 live replicas ( 0, 1, 2 )
comment|//    and one excess replica ( 3 )
comment|// After the fix,
comment|//    After recommissionNode finishes, SBN has 4 live replicas ( 0, 1, 2, 3 )
name|Thread
operator|.
name|sleep
argument_list|(
name|slowHeartbeatDNwaitTime
argument_list|)
expr_stmt|;
name|recommissionNode
argument_list|(
literal|1
argument_list|,
name|decomNodeFromSBN
argument_list|)
expr_stmt|;
comment|// Step 3.b, ask ANN to recommission the first DN.
comment|// To verify the fix, the test makes sure the excess replica picked by ANN
comment|// is different from the one picked by SBN before the fix.
comment|// To achieve that, we make sure next-to-last DN is chosen as excess replica
comment|// by ANN.
comment|// 1. restore LastDNprop's heartbeat interval.
comment|// 2. Make next-to-last DN's heartbeat slow.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|LastDNprop
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LastDNprop
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|LastDNprop
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|nextToLastDNprop
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|nextToLastDNprop
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|nextToLastDNprop
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|slowHeartbeatDNwaitTime
argument_list|)
expr_stmt|;
name|recommissionNode
argument_list|(
literal|0
argument_list|,
name|decommissionedNodeFromANN
argument_list|)
expr_stmt|;
comment|// Step 3.c, make sure the DN has deleted the block and report to NNs
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForDNDeletions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerDeletionReports
argument_list|()
expr_stmt|;
comment|// Step 4, decommission the first DN on both ANN and SBN
comment|// With the fix to make sure SBN no longer marks excess replica
comment|// during recommission, SBN's decommission can finish properly
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|firstDN
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
comment|// Ask SBN to decomm the first DN
name|decommissionNode
argument_list|(
literal|1
argument_list|,
name|firstDN
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testDecommission (int numNamenodes, int numDatanodes)
specifier|private
name|void
name|testDecommission
parameter_list|(
name|int
name|numNamenodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommission"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|namenodeDecomList
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
argument_list|(
name|numNamenodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNamenodes
condition|;
name|i
operator|++
control|)
block|{
name|namenodeDecomList
operator|.
name|add
argument_list|(
name|i
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
name|numDatanodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"testDecommission.dat"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|numDatanodes
operator|-
literal|1
condition|;
name|iteration
operator|++
control|)
block|{
name|int
name|replicas
init|=
name|numDatanodes
operator|-
name|iteration
operator|-
literal|1
decl_stmt|;
comment|// Start decommissioning one namenode at a time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNamenodes
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
name|namenodeDecomList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|int
name|deadDecomissioned
init|=
name|ns
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveDecomissioned
init|=
name|ns
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
decl_stmt|;
comment|// Decommission one node. Verify that node is decommissioned.
name|DatanodeInfo
name|decomNode
init|=
name|decommissionNode
argument_list|(
name|i
argument_list|,
literal|null
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|decomNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadDecomissioned
argument_list|,
name|ns
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveDecomissioned
operator|+
literal|1
argument_list|,
name|ns
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// wait for the block to be replicated
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tries
operator|++
operator|<
literal|20
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
name|decomNode
operator|.
name|getXferAddr
argument_list|()
argument_list|,
name|numDatanodes
argument_list|)
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{           }
block|}
name|assertTrue
argument_list|(
literal|"Checked if block was replicated after decommission, tried "
operator|+
name|tries
operator|+
literal|" times."
argument_list|,
name|tries
operator|<
literal|20
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Restart the cluster and ensure decommissioned datanodes
comment|// are allowed to register with the namenode
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that over-replicated blocks are deleted on recommission.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRecommission ()
specifier|public
name|void
name|testRecommission
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDatanodes
init|=
literal|6
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testRecommission"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"testDecommission.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
name|numDatanodes
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Write a file to n-1 datanodes
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
comment|// Decommission one of the datanodes with a replica
name|BlockLocation
name|loc
init|=
name|fileSys
operator|.
name|getFileBlockLocations
argument_list|(
name|file1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of replicas from getFileBlockLocations"
argument_list|,
name|replicas
argument_list|,
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|String
name|toDecomHost
init|=
name|loc
operator|.
name|getNames
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|toDecomUuid
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DataNode
name|d
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
operator|.
name|equals
argument_list|(
name|toDecomHost
argument_list|)
condition|)
block|{
name|toDecomUuid
operator|=
name|d
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Could not find a dn with the block!"
argument_list|,
name|toDecomUuid
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|decomNode
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|toDecomUuid
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|decomNode
argument_list|)
expr_stmt|;
specifier|final
name|BlockManager
name|blockManager
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|datanodeManager
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|datanodeManager
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// wait for the block to be replicated
specifier|final
name|ExtendedBlock
name|b
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uuid
init|=
name|toDecomUuid
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|BlockInfo
name|info
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Replica locations: "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|numNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|dn
init|=
name|info
operator|.
name|getDatanode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dn
operator|+
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Count: "
operator|+
name|count
argument_list|)
expr_stmt|;
return|return
name|count
operator|==
name|replicas
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// redecommission and wait for over-replication to be fixed
name|recommissionNode
argument_list|(
literal|0
argument_list|,
name|decomNode
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|datanodeManager
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|,
literal|1
argument_list|,
name|replicas
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests cluster storage statistics during decommissioning for non    * federated cluster    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testClusterStats ()
specifier|public
name|void
name|testClusterStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testClusterStats
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests cluster storage statistics during decommissioning for    * federated cluster    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testClusterStatsFederation ()
specifier|public
name|void
name|testClusterStatsFederation
parameter_list|()
throws|throws
name|Exception
block|{
name|testClusterStats
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterStats (int numNameNodes)
specifier|public
name|void
name|testClusterStats
parameter_list|(
name|int
name|numNameNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testClusterStats"
argument_list|)
expr_stmt|;
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
name|startCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNameNodes
condition|;
name|i
operator|++
control|)
block|{
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"testClusterStats.dat"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|decomInfo
init|=
name|decommissionNode
argument_list|(
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
decl_stmt|;
name|DataNode
name|decomNode
init|=
name|getDataNode
argument_list|(
name|decomInfo
argument_list|)
decl_stmt|;
comment|// Check namenode stats for multiple datanode heartbeats
name|verifyStats
argument_list|(
name|namenode
argument_list|,
name|fsn
argument_list|,
name|decomInfo
argument_list|,
name|decomNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Stop decommissioning and verify stats
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|fsn
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|retInfo
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|fsn
argument_list|,
name|decomInfo
argument_list|)
decl_stmt|;
name|DataNode
name|retNode
init|=
name|getDataNode
argument_list|(
name|decomInfo
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|retInfo
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|verifyStats
argument_list|(
name|namenode
argument_list|,
name|fsn
argument_list|,
name|retInfo
argument_list|,
name|retNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDataNode (DatanodeInfo decomInfo)
specifier|private
name|DataNode
name|getDataNode
parameter_list|(
name|DatanodeInfo
name|decomInfo
parameter_list|)
block|{
name|DataNode
name|decomNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|decomInfo
operator|.
name|equals
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
condition|)
block|{
name|decomNode
operator|=
name|dn
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Could not find decomNode in cluster!"
argument_list|,
name|decomNode
argument_list|)
expr_stmt|;
return|return
name|decomNode
return|;
block|}
comment|/**    * Test host/include file functionality. Only datanodes    * in the include file are allowed to connect to the namenode in a non    * federated cluster.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testHostsFile ()
specifier|public
name|void
name|testHostsFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Test for a single namenode cluster
name|testHostsFile
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test host/include file functionality. Only datanodes    * in the include file are allowed to connect to the namenode in a     * federated cluster.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testHostsFileFederation ()
specifier|public
name|void
name|testHostsFileFederation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Test for 3 namenode federated cluster
name|testHostsFile
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testHostsFile (int numNameNodes)
specifier|public
name|void
name|testHostsFile
parameter_list|(
name|int
name|numNameNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameNodes
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|setupHostsFile
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Now empty hosts file and ensure the datanode is disallowed
comment|// from talking to namenode, resulting in it's shutdown.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|bogusIp
init|=
literal|"127.0.30.1"
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|bogusIp
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|hostsFile
argument_list|,
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numNameNodes
condition|;
name|j
operator|++
control|)
block|{
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|j
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|j
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|&&
name|info
operator|.
name|length
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for datanode to be marked dead"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_INTERVAL
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of live nodes should be 0"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Test that non-live and bogus hostnames are considered "dead".
comment|// The dead report should have an entry for (1) the DN  that is
comment|// now considered dead because it is no longer allowed to connect
comment|// and (2) the bogus entry in the hosts file (these entries are
comment|// always added last)
name|info
operator|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|DEAD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be 2 dead nodes"
argument_list|,
literal|2
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|DatanodeID
name|id
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|id
operator|.
name|getHostName
argument_list|()
argument_list|,
name|info
index|[
literal|0
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bogusIp
argument_list|,
name|info
index|[
literal|1
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDecommissionWithOpenfile ()
specifier|public
name|void
name|testDecommissionWithOpenfile
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommissionWithOpenfile"
argument_list|)
expr_stmt|;
comment|//At most 4 nodes will be decommissioned
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|openFile
init|=
literal|"/testDecommissionWithOpenfile.dat"
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|openFile
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// make sure the file was open for write
name|FSDataOutputStream
name|fdos
init|=
name|fileSys
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|openFile
argument_list|)
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|openFile
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnInfos4LastBlock
init|=
name|lbs
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnInfos4FirstBlock
init|=
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|dnInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DatanodeManager
name|dm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|dnInfos4FirstBlock
control|)
block|{
name|DatanodeInfo
name|found
init|=
name|datanodeInfo
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dif
range|:
name|dnInfos4LastBlock
control|)
block|{
if|if
condition|(
name|datanodeInfo
operator|.
name|equals
argument_list|(
name|dif
argument_list|)
condition|)
block|{
name|found
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|found
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|dnInfos
operator|.
name|add
argument_list|(
name|dm
operator|.
name|getDatanode
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//decommission one of the 3 nodes which have last block
name|nodes
operator|.
name|add
argument_list|(
name|dnInfos4LastBlock
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|dnInfos
operator|.
name|add
argument_list|(
name|dm
operator|.
name|getDatanode
argument_list|(
name|dnInfos4LastBlock
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|ns
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|dnInfos
control|)
block|{
name|waitNodeState
argument_list|(
name|dn
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
block|}
name|fdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests restart of namenode while datanode hosts are added to exclude file    **/
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommissionWithNamenodeRestart ()
specifier|public
name|void
name|testDecommissionWithNamenodeRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommissionWithNamenodeRestart"
argument_list|)
expr_stmt|;
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
name|int
name|replicas
init|=
literal|1
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"testDecommissionWithNamenodeRestart.dat"
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|DatanodeID
name|excludedDatanodeID
init|=
name|info
index|[
literal|0
index|]
decl_stmt|;
name|String
name|excludedDatanodeName
init|=
name|info
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|excludedDatanodeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add a new datanode to cluster
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numDatanodes
operator|+=
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of datanodes should be 2 "
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Restart the namenode
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|DatanodeInfo
name|datanodeInfo
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|excludedDatanodeID
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|datanodeInfo
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checked if block was replicated after decommission."
argument_list|,
name|checkFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
name|datanodeInfo
operator|.
name|getXferAddr
argument_list|()
argument_list|,
name|numDatanodes
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Restart the cluster and ensure recommissioned datanodes
comment|// are allowed to register with the namenode
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test using a "registration name" in a host include file.    *    * Registration names are DataNode names specified in the configuration by    * dfs.datanode.hostname.  The DataNode will send this name to the NameNode    * as part of its registration.  Registration names are helpful when you    * want to override the normal first result of DNS resolution on the    * NameNode.  For example, a given datanode IP may map to two hostnames,    * and you may want to choose which hostname is used internally in the    * cluster.    *    * It is not recommended to use a registration name which is not also a    * valid DNS hostname for the DataNode.  See HDFS-5237 for background.    */
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testIncludeByRegistrationName ()
specifier|public
name|void
name|testIncludeByRegistrationName
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|hdfsConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Any IPv4 address starting with 127 functions as a "loopback" address
comment|// which is connected to the current host.  So by choosing 127.0.0.100
comment|// as our registration name, we have chosen a name which is also a valid
comment|// way of reaching the local DataNode we're going to start.
comment|// Typically, a registration name would be a hostname, but we don't want
comment|// to deal with DNS in this test.
specifier|final
name|String
name|registrationName
init|=
literal|"127.0.0.100"
decl_stmt|;
specifier|final
name|String
name|nonExistentDn
init|=
literal|"127.0.0.10"
decl_stmt|;
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
name|registrationName
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|hdfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|checkDataNodeHostConfig
argument_list|(
literal|true
argument_list|)
operator|.
name|setupHostsFile
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Set up an includes file that doesn't have our datanode.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nonExistentDn
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|hostsFile
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hdfsConf
argument_list|)
expr_stmt|;
comment|// Wait for the DN to be marked dead.
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for DN to be marked as dead."
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hdfsConf
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|DatanodeInfo
name|info
index|[]
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|DEAD
argument_list|)
decl_stmt|;
return|return
name|info
operator|.
name|length
operator|==
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to check dead DNs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// Use a non-empty include file with our registration name.
comment|// It should work.
name|int
name|dnPort
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|registrationName
operator|+
literal|":"
operator|+
name|dnPort
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|hostsFile
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hdfsConf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Wait for the DN to come back.
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for DN to come back."
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|DatanodeInfo
name|info
index|[]
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
index|[
literal|0
index|]
operator|.
name|isDecommissioned
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|info
index|[
literal|0
index|]
operator|.
name|isDecommissionInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|registrationName
argument_list|,
name|info
index|[
literal|0
index|]
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to check dead DNs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testBlocksPerInterval ()
specifier|public
name|void
name|testBlocksPerInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|DecommissionManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
comment|// Turn the blocks per interval way down
name|newConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Disable the normal monitor runs
name|newConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|datanodeManager
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|DecommissionManager
name|decomManager
init|=
name|datanodeManager
operator|.
name|getDecomManager
argument_list|()
decl_stmt|;
comment|// Write a 3 block file, so each node has one block. Should scan 3 nodes.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
argument_list|,
literal|64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBAD1DEA
argument_list|)
expr_stmt|;
name|doDecomCheck
argument_list|(
name|datanodeManager
argument_list|,
name|decomManager
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Write another file, should only scan two
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
argument_list|,
literal|64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBAD1DEA
argument_list|)
expr_stmt|;
name|doDecomCheck
argument_list|(
name|datanodeManager
argument_list|,
name|decomManager
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// One more file, should only scan 1
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file3"
argument_list|)
argument_list|,
literal|64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBAD1DEA
argument_list|)
expr_stmt|;
name|doDecomCheck
argument_list|(
name|datanodeManager
argument_list|,
name|decomManager
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// blocks on each DN now exceeds limit, still scan at least one node
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file4"
argument_list|)
argument_list|,
literal|64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBAD1DEA
argument_list|)
expr_stmt|;
name|doDecomCheck
argument_list|(
name|datanodeManager
argument_list|,
name|decomManager
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|doDecomCheck (DatanodeManager datanodeManager, DecommissionManager decomManager, int expectedNumCheckedNodes)
specifier|private
name|void
name|doDecomCheck
parameter_list|(
name|DatanodeManager
name|datanodeManager
parameter_list|,
name|DecommissionManager
name|decomManager
parameter_list|,
name|int
name|expectedNumCheckedNodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
comment|// Decom all nodes
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|d
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DatanodeInfo
name|dn
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|d
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// Run decom scan and check
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|datanodeManager
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected # of nodes checked"
argument_list|,
name|expectedNumCheckedNodes
argument_list|,
name|decomManager
operator|.
name|getNumNodesChecked
argument_list|()
argument_list|)
expr_stmt|;
comment|// Recommission all nodes
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decommissionedNodes
control|)
block|{
name|recommissionNode
argument_list|(
literal|0
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testPendingNodes ()
specifier|public
name|void
name|testPendingNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|DecommissionManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
comment|// Only allow one node to be decom'd at a time
name|newConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Disable the normal monitor runs
name|newConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|datanodeManager
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|DecommissionManager
name|decomManager
init|=
name|datanodeManager
operator|.
name|getDecomManager
argument_list|()
decl_stmt|;
comment|// Keep a file open to prevent decom from progressing
name|HdfsDataOutputStream
name|open1
init|=
operator|(
name|HdfsDataOutputStream
operator|)
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/openFile1"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
comment|// Flush and trigger block reports so the block definitely shows up on NN
name|open1
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|open1
operator|.
name|hflush
argument_list|()
expr_stmt|;
for|for
control|(
name|DataNode
name|d
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|// Decom two nodes, so one is still alive
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DataNode
name|d
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|dn
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|d
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertTrackedAndPending
argument_list|(
name|decomManager
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|datanodeManager
argument_list|)
expr_stmt|;
block|}
comment|// Close file, try to decom the last node, should get stuck in tracked
name|open1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|DataNode
name|d
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|dn
init|=
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|d
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|decommissionedNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
decl_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|datanodeManager
argument_list|)
expr_stmt|;
name|assertTrackedAndPending
argument_list|(
name|decomManager
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTrackedAndPending (DecommissionManager decomManager, int tracked, int pending)
specifier|private
name|void
name|assertTrackedAndPending
parameter_list|(
name|DecommissionManager
name|decomManager
parameter_list|,
name|int
name|tracked
parameter_list|,
name|int
name|pending
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected number of tracked nodes"
argument_list|,
name|tracked
argument_list|,
name|decomManager
operator|.
name|getNumTrackedNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of pending nodes"
argument_list|,
name|pending
argument_list|,
name|decomManager
operator|.
name|getNumPendingNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

