begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestEditLogTailer
specifier|public
class|class
name|TestEditLogTailer
block|{
DECL|field|DIR_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DIR_PREFIX
init|=
literal|"/dir"
decl_stmt|;
DECL|field|DIRS_TO_MAKE
specifier|private
specifier|static
specifier|final
name|int
name|DIRS_TO_MAKE
init|=
literal|20
decl_stmt|;
DECL|field|SLEEP_TIME
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|1000
decl_stmt|;
DECL|field|NN_LAG_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|NN_LAG_TIMEOUT
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSImage
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|EditLogTailer
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTailer ()
specifier|public
name|void
name|testTailer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ServiceFailedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NameNode
name|nn1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn2
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|setSleepTime
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|nn2
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DIRS_TO_MAKE
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NameNodeAdapter
operator|.
name|mkdirs
argument_list|(
name|nn1
argument_list|,
name|getDirPath
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00755
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|waitForStandbyToCatchUp
argument_list|(
name|nn1
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DIRS_TO_MAKE
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|NameNodeAdapter
operator|.
name|getFileInfo
argument_list|(
name|nn2
argument_list|,
name|getDirPath
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|DIRS_TO_MAKE
operator|/
literal|2
init|;
name|i
operator|<
name|DIRS_TO_MAKE
condition|;
name|i
operator|++
control|)
block|{
name|NameNodeAdapter
operator|.
name|mkdirs
argument_list|(
name|nn1
argument_list|,
name|getDirPath
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00755
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|waitForStandbyToCatchUp
argument_list|(
name|nn1
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|DIRS_TO_MAKE
operator|/
literal|2
init|;
name|i
operator|<
name|DIRS_TO_MAKE
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|NameNodeAdapter
operator|.
name|getFileInfo
argument_list|(
name|nn2
argument_list|,
name|getDirPath
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDirPath (int suffix)
specifier|private
specifier|static
name|String
name|getDirPath
parameter_list|(
name|int
name|suffix
parameter_list|)
block|{
return|return
name|DIR_PREFIX
operator|+
name|suffix
return|;
block|}
DECL|method|waitForStandbyToCatchUp (NameNode active, NameNode standby)
specifier|private
specifier|static
name|void
name|waitForStandbyToCatchUp
parameter_list|(
name|NameNode
name|active
parameter_list|,
name|NameNode
name|standby
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|long
name|activeTxId
init|=
name|active
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
decl_stmt|;
name|doSaveNamespace
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|NN_LAG_TIMEOUT
condition|)
block|{
name|long
name|nn2HighestTxId
init|=
name|standby
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedTxId
argument_list|()
decl_stmt|;
if|if
condition|(
name|nn2HighestTxId
operator|>=
name|activeTxId
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doSaveNamespace (NameNode nn)
specifier|private
specifier|static
name|void
name|doSaveNamespace
parameter_list|(
name|NameNode
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

