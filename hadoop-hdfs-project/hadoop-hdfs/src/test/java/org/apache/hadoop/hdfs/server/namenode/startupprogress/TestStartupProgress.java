begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgressTestHelper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Status
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestStartupProgress
specifier|public
class|class
name|TestStartupProgress
block|{
DECL|field|startupProgress
specifier|private
name|StartupProgress
name|startupProgress
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|startupProgress
operator|=
operator|new
name|StartupProgress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCounter ()
specifier|public
name|void
name|testCounter
parameter_list|()
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageDelegationKeys
init|=
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|5000L
argument_list|)
expr_stmt|;
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Increment a counter again and check that the existing view was not
comment|// modified, but a new view shows the updated value.
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|=
name|startupProgress
operator|.
name|createView
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6000L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testElapsedTime ()
specifier|public
name|void
name|testElapsedTime
parameter_list|()
throws|throws
name|Exception
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
comment|// brief sleep to fake elapsed time
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageDelegationKeys
init|=
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
comment|// brief sleep to fake elapsed time
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|5000L
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
comment|// brief sleep to fake elapsed time
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Brief sleep, then check that completed phases/steps have the same elapsed
comment|// time, but running phases/steps have updated elapsed time.
name|long
name|totalTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|()
decl_stmt|;
name|long
name|loadingFsImageTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
decl_stmt|;
name|long
name|loadingFsImageInodesTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
decl_stmt|;
name|long
name|loadingFsImageDelegationKeysTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
decl_stmt|;
name|long
name|loadingEditsTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|)
decl_stmt|;
name|long
name|loadingEditsFileTime
init|=
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|totalTime
operator|<
name|view
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loadingFsImageTime
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loadingFsImageInodesTime
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadingEditsTime
operator|<
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadingEditsFileTime
operator|<
name|view
operator|.
name|getElapsedTime
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testFrozenAfterStartupCompletes ()
specifier|public
name|void
name|testFrozenAfterStartupCompletes
parameter_list|()
block|{
comment|// Do some updates and counter increments.
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setFile
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setSize
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|StartupProgressView
name|beforePhaseUpdate
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
comment|// LOADING_FSIMAGE phase has been completed, but attempt more updates to it
name|Step
name|fsimageStep2
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|fsimageStep2
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|fsimageStep2
argument_list|,
literal|1000000L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|fsimageStep2
argument_list|)
expr_stmt|;
comment|// Force completion of phases, so that entire startup process is completed.
for|for
control|(
name|Phase
name|phase
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Phase
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|startupProgress
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|!=
name|Status
operator|.
name|COMPLETE
condition|)
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
block|}
name|StartupProgressView
name|before
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
comment|// Attempt more updates and counter increments.
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setFile
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
literal|"file2"
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setSize
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
literal|20000L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
comment|// Also attempt a whole new step that wasn't used last time.
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|newStep
init|=
operator|new
name|Step
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|newStep
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_EDITS
argument_list|,
name|newStep
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|newStep
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|StartupProgressView
name|after
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
comment|// Expect that data was frozen after completion of entire startup process, so
comment|// second set of updates and counter increments should have had no effect.
name|assertViewEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|fsimageStep2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|before
operator|.
name|getElapsedTime
argument_list|()
argument_list|,
name|after
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// After the phase was completed but before startup was completed,
comment|// everything should be equal, except for the total elapsed time
name|assertViewEquals
argument_list|(
name|beforePhaseUpdate
argument_list|,
name|after
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|fsimageStep2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|after
operator|.
name|getSteps
argument_list|(
name|LOADING_EDITS
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertViewEquals (StartupProgressView view1, StartupProgressView view2, Phase phaseToVerify, Step... stepsToVerify)
specifier|private
name|void
name|assertViewEquals
parameter_list|(
name|StartupProgressView
name|view1
parameter_list|,
name|StartupProgressView
name|view2
parameter_list|,
name|Phase
name|phaseToVerify
parameter_list|,
name|Step
modifier|...
name|stepsToVerify
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|view1
operator|.
name|getCount
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|,
name|view2
operator|.
name|getCount
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getElapsedTime
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|,
name|view2
operator|.
name|getElapsedTime
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getFile
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|,
name|view2
operator|.
name|getFile
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getSize
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|,
name|view2
operator|.
name|getSize
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getTotal
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|,
name|view2
operator|.
name|getTotal
argument_list|(
name|phaseToVerify
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|stepsToVerify
control|)
block|{
name|assertEquals
argument_list|(
name|view1
operator|.
name|getCount
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|,
name|view2
operator|.
name|getCount
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getElapsedTime
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|,
name|view2
operator|.
name|getElapsedTime
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view1
operator|.
name|getTotal
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|,
name|view2
operator|.
name|getTotal
argument_list|(
name|phaseToVerify
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testInitialState ()
specifier|public
name|void
name|testInitialState
parameter_list|()
block|{
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|ArrayList
argument_list|<
name|Phase
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Phase
name|phase
range|:
name|view
operator|.
name|getPhases
argument_list|()
control|)
block|{
name|phases
operator|.
name|add
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|view
operator|.
name|getFile
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|view
operator|.
name|getSize
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PENDING
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|view
operator|.
name|getSteps
argument_list|(
name|phase
argument_list|)
control|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"unexpected step %s in phase %s at initial state"
argument_list|,
name|step
argument_list|,
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertArrayEquals
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Phase
operator|.
name|class
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|phases
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPercentComplete ()
specifier|public
name|void
name|testPercentComplete
parameter_list|()
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageDelegationKeys
init|=
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|,
literal|800L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|5000L
argument_list|)
expr_stmt|;
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.167f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.167f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.10f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.25f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
comment|// End steps/phases, and confirm that they jump to 100% completion.
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|view
operator|=
name|startupProgress
operator|.
name|createView
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testStatus ()
specifier|public
name|void
name|testStatus
parameter_list|()
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COMPLETE
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RUNNING
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PENDING
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testStepSequence ()
specifier|public
name|void
name|testStepSequence
parameter_list|()
block|{
comment|// Test that steps are returned in the correct sort order (by file and then
comment|// sequence number) by starting a few steps in a randomly shuffled order and
comment|// then asserting that they are returned in the expected order.
name|Step
index|[]
name|expectedSteps
init|=
operator|new
name|Step
index|[]
block|{
operator|new
name|Step
argument_list|(
name|INODES
argument_list|,
literal|"file1"
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|,
literal|"file1"
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|,
literal|"file2"
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|,
literal|"file2"
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|,
literal|"file3"
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|,
literal|"file3"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|Step
argument_list|>
name|shuffledSteps
init|=
operator|new
name|ArrayList
argument_list|<
name|Step
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedSteps
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|shuffledSteps
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|shuffledSteps
control|)
block|{
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Step
argument_list|>
name|actualSteps
init|=
operator|new
name|ArrayList
argument_list|<
name|Step
argument_list|>
argument_list|(
name|expectedSteps
operator|.
name|length
argument_list|)
decl_stmt|;
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|view
operator|.
name|getSteps
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
control|)
block|{
name|actualSteps
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|expectedSteps
argument_list|,
name|actualSteps
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testThreadSafety ()
specifier|public
name|void
name|testThreadSafety
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test for thread safety by starting multiple threads that mutate the same
comment|// StartupProgress instance in various ways.  We expect no internal
comment|// corruption of data structures and no lost updates on counter increments.
name|int
name|numThreads
init|=
literal|100
decl_stmt|;
comment|// Data tables used by each thread to determine values to pass to APIs.
name|Phase
index|[]
name|phases
init|=
block|{
name|LOADING_FSIMAGE
block|,
name|LOADING_FSIMAGE
block|,
name|LOADING_EDITS
block|,
name|LOADING_EDITS
block|}
decl_stmt|;
name|Step
index|[]
name|steps
init|=
operator|new
name|Step
index|[]
block|{
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
block|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
block|}
decl_stmt|;
name|String
index|[]
name|files
init|=
block|{
literal|"file1"
block|,
literal|"file1"
block|,
literal|"file2"
block|,
literal|"file2"
block|}
decl_stmt|;
name|long
index|[]
name|sizes
init|=
block|{
literal|1000L
block|,
literal|1000L
block|,
literal|2000L
block|,
literal|2000L
block|}
decl_stmt|;
name|long
index|[]
name|totals
init|=
block|{
literal|10000L
block|,
literal|20000L
block|,
literal|30000L
block|,
literal|40000L
block|}
decl_stmt|;
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Phase
name|phase
init|=
name|phases
index|[
name|i
operator|%
name|phases
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|Step
name|step
init|=
name|steps
index|[
name|i
operator|%
name|steps
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|String
name|file
init|=
name|files
index|[
name|i
operator|%
name|files
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|long
name|size
init|=
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|long
name|total
init|=
name|totals
index|[
name|i
operator|%
name|totals
operator|.
name|length
index|]
decl_stmt|;
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setFile
argument_list|(
name|phase
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setSize
argument_list|(
name|phase
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|phase
argument_list|,
name|step
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|startupProgress
argument_list|,
name|phase
argument_list|,
name|step
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|10000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Once a phase ends, future modifications to the steps in that phase are
comment|// ignored. Thus do not end the phases until after the other ops are done.
for|for
control|(
name|Phase
name|phase
range|:
name|phases
control|)
block|{
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file1"
argument_list|,
name|view
operator|.
name|getFile
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000L
argument_list|,
name|view
operator|.
name|getSize
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file2"
argument_list|,
name|view
operator|.
name|getFile
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|view
operator|.
name|getSize
argument_list|(
name|LOADING_EDITS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_EDITS
argument_list|,
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500L
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|LOADING_EDITS
argument_list|,
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTotal ()
specifier|public
name|void
name|testTotal
parameter_list|()
block|{
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageDelegationKeys
init|=
operator|new
name|Step
argument_list|(
name|DELEGATION_KEYS
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|,
literal|800L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|startupProgress
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|setTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|startupProgress
operator|.
name|endPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|StartupProgressView
name|view
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|800L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageDelegationKeys
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

