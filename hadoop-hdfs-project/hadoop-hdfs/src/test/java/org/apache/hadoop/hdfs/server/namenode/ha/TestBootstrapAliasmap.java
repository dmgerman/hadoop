begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryLevelDBAliasMapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TransferFsImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test for aliasmap bootstrap.  */
end_comment

begin_class
DECL|class|TestBootstrapAliasmap
specifier|public
class|class
name|TestBootstrapAliasmap
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
operator|.
name|setupNamenodeProvidedConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAliasmapBootstrap ()
specifier|public
name|void
name|testAliasmapBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
name|InMemoryLevelDBAliasMapServer
name|aliasMapServer
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getAliasMapServer
argument_list|()
decl_stmt|;
comment|// write some blocks to the aliasmap.
name|Block
name|block1
init|=
operator|new
name|Block
argument_list|(
literal|1000
argument_list|)
decl_stmt|,
name|block2
init|=
operator|new
name|Block
argument_list|(
literal|1002
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test1.dat"
argument_list|)
decl_stmt|;
name|aliasMapServer
operator|.
name|write
argument_list|(
operator|new
name|Block
argument_list|(
name|block1
argument_list|)
argument_list|,
operator|new
name|ProvidedStorageLocation
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|aliasMapServer
operator|.
name|write
argument_list|(
operator|new
name|Block
argument_list|(
name|block2
argument_list|)
argument_list|,
operator|new
name|ProvidedStorageLocation
argument_list|(
name|path
argument_list|,
literal|101
argument_list|,
literal|200
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|newLocation
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|scheme
init|=
name|DFSUtil
operator|.
name|getHttpClientScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URL
name|nnHttpURL
init|=
name|DFSUtil
operator|.
name|getInfoServerWithDefaultHost
argument_list|(
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|scheme
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
comment|// transfer the aliasmap.
name|newLocation
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|TransferFsImage
operator|.
name|downloadAliasMap
argument_list|(
name|nnHttpURL
argument_list|,
name|newLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create config for new aliasmap server at the new location.
name|Configuration
name|newConfig
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConfig
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
argument_list|,
name|newLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newConfig
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|,
literal|"127.0.0.1:"
operator|+
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|blockPoolId
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|InMemoryLevelDBAliasMapServer
name|newServer
init|=
operator|new
name|InMemoryLevelDBAliasMapServer
argument_list|(
name|InMemoryAliasMap
operator|::
name|init
argument_list|,
name|blockPoolId
argument_list|)
decl_stmt|;
name|newServer
operator|.
name|setConf
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
name|newServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// the server should have only 2 blocks.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newServer
operator|.
name|list
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
operator|.
name|getFileRegions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newServer
operator|.
name|read
argument_list|(
name|block1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newServer
operator|.
name|read
argument_list|(
name|block2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockPoolId
argument_list|,
name|newServer
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

