begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests that a file system adheres to the limit of  * maximum number of files that is configured.  */
end_comment

begin_class
DECL|class|TestFileLimit
specifier|public
class|class
name|TestFileLimit
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|simulatedStorage
name|boolean
name|simulatedStorage
init|=
literal|false
decl_stmt|;
comment|// creates a zero file.
DECL|method|createFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForLimit (FSNamesystem namesys, long num)
specifier|private
name|void
name|waitForLimit
parameter_list|(
name|FSNamesystem
name|namesys
parameter_list|,
name|long
name|num
parameter_list|)
block|{
comment|// wait for number of blocks to decrease
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|total
init|=
name|namesys
operator|.
name|getBlocksTotal
argument_list|()
operator|+
name|namesys
operator|.
name|dir
operator|.
name|totalInodes
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Comparing current nodes "
operator|+
name|total
operator|+
literal|" to become "
operator|+
name|num
argument_list|)
expr_stmt|;
if|if
condition|(
name|total
operator|==
name|num
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * Test that file data becomes available before file is closed.    */
annotation|@
name|Test
DECL|method|testFileLimit ()
specifier|public
name|void
name|testFileLimit
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|maxObjects
init|=
literal|5
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_OBJECTS_KEY
argument_list|,
name|maxObjects
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|currentNodes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSNamesystem
name|namesys
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|//
comment|// check that / exists
comment|//
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|currentNodes
operator|=
literal|1
expr_stmt|;
comment|// root inode
comment|// verify that we can create the specified number of files. We leave
comment|// one for the "/". Each file takes an inode and a block.
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxObjects
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus"
operator|+
name|i
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|currentNodes
operator|+=
literal|2
expr_stmt|;
comment|// two more objects for this creation.
block|}
comment|// verify that creating another file fails
name|boolean
name|hitException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|hitException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Was able to exceed file limit"
argument_list|,
name|hitException
argument_list|)
expr_stmt|;
comment|// delete one file
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus0"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted file "
operator|+
name|file0
argument_list|)
expr_stmt|;
name|currentNodes
operator|-=
literal|2
expr_stmt|;
comment|// wait for number of blocks to decrease
name|waitForLimit
argument_list|(
name|namesys
argument_list|,
name|currentNodes
argument_list|)
expr_stmt|;
comment|// now, we shud be able to create a new file
name|createFile
argument_list|(
name|fs
argument_list|,
name|file0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file "
operator|+
name|file0
operator|+
literal|" again."
argument_list|)
expr_stmt|;
name|currentNodes
operator|+=
literal|2
expr_stmt|;
comment|// delete the file again
name|file0
operator|=
operator|new
name|Path
argument_list|(
literal|"/filestatus0"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted file "
operator|+
name|file0
operator|+
literal|" again."
argument_list|)
expr_stmt|;
name|currentNodes
operator|-=
literal|2
expr_stmt|;
comment|// wait for number of blocks to decrease
name|waitForLimit
argument_list|(
name|namesys
argument_list|,
name|currentNodes
argument_list|)
expr_stmt|;
comment|// create two directories in place of the file that we deleted
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir0/dir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created directories "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|currentNodes
operator|+=
literal|2
expr_stmt|;
name|waitForLimit
argument_list|(
name|namesys
argument_list|,
name|currentNodes
argument_list|)
expr_stmt|;
comment|// verify that creating another directory fails
name|hitException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir.fail"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created directory should not have succeeded."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|hitException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Was able to exceed dir limit"
argument_list|,
name|hitException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileLimitSimulated ()
specifier|public
name|void
name|testFileLimitSimulated
parameter_list|()
throws|throws
name|IOException
block|{
name|simulatedStorage
operator|=
literal|true
expr_stmt|;
name|testFileLimit
argument_list|()
expr_stmt|;
name|simulatedStorage
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

