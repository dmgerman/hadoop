begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|StateStoreDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
operator|.
name|MountTableStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|federation
operator|.
name|RouterAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests Router admin commands.  */
end_comment

begin_class
DECL|class|TestRouterAdminCLI
specifier|public
class|class
name|TestRouterAdminCLI
block|{
DECL|field|cluster
specifier|private
specifier|static
name|StateStoreDFSCluster
name|cluster
decl_stmt|;
DECL|field|routerContext
specifier|private
specifier|static
name|RouterContext
name|routerContext
decl_stmt|;
DECL|field|stateStore
specifier|private
specifier|static
name|StateStoreService
name|stateStore
decl_stmt|;
DECL|field|admin
specifier|private
specifier|static
name|RouterAdmin
name|admin
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|RouterClient
name|client
decl_stmt|;
DECL|field|TEST_USER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER
init|=
literal|"test-user"
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|globalSetUp ()
specifier|public
specifier|static
name|void
name|globalSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|StateStoreDFSCluster
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Build and start a router with State Store + admin + RPC
name|Configuration
name|conf
init|=
operator|new
name|RouterConfigBuilder
argument_list|()
operator|.
name|stateStore
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start routers
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
name|routerContext
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|Router
name|router
init|=
name|routerContext
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|stateStore
operator|=
name|router
operator|.
name|getStateStore
argument_list|()
expr_stmt|;
name|Configuration
name|routerConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|routerSocket
init|=
name|router
operator|.
name|getAdminServerAddress
argument_list|()
decl_stmt|;
name|routerConf
operator|.
name|setSocketAddr
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
name|routerSocket
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|RouterAdmin
argument_list|(
name|routerConf
argument_list|)
expr_stmt|;
name|client
operator|=
name|routerContext
operator|.
name|getAdminClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownCluster ()
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
name|cluster
operator|.
name|stopRouter
argument_list|(
name|routerContext
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// set back system out
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddMountTable ()
specifier|public
name|void
name|testAddMountTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsId
init|=
literal|"ns0"
decl_stmt|;
name|String
name|src
init|=
literal|"/test-addmounttable"
decl_stmt|;
name|String
name|dest
init|=
literal|"/addmounttable"
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|src
block|,
name|nsId
block|,
name|dest
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|MountTable
name|mountTable
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|destinations
init|=
name|mountTable
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|destinations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|src
argument_list|,
name|mountTable
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nsId
argument_list|,
name|destinations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
argument_list|,
name|destinations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mountTable
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// test mount table update behavior
name|dest
operator|=
name|dest
operator|+
literal|"-new"
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|src
block|,
name|nsId
block|,
name|dest
block|,
literal|"-readonly"
block|}
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|mountTable
operator|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nsId
argument_list|,
name|mountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
argument_list|,
name|mountTable
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mountTable
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListMountTable ()
specifier|public
name|void
name|testListMountTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsId
init|=
literal|"ns0"
decl_stmt|;
name|String
name|src
init|=
literal|"/test-lsmounttable"
decl_stmt|;
name|String
name|dest
init|=
literal|"/lsmounttable"
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|src
block|,
name|nsId
block|,
name|dest
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-set system out for testing
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
name|src
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
comment|// Test ls command without input path, it will list
comment|// mount table under root path.
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|outStr
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// verify if all the mount table are listed
for|for
control|(
name|MountTable
name|entry
range|:
name|getResponse
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRemoveMountTable ()
specifier|public
name|void
name|testRemoveMountTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsId
init|=
literal|"ns0"
decl_stmt|;
name|String
name|src
init|=
literal|"/test-rmmounttable"
decl_stmt|;
name|String
name|dest
init|=
literal|"/rmmounttable"
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|src
block|,
name|nsId
block|,
name|dest
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
comment|// ensure mount table added successfully
name|MountTable
name|mountTable
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|src
argument_list|,
name|mountTable
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|src
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove an invalid mount table
name|String
name|invalidPath
init|=
literal|"/invalid"
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|invalidPath
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot remove mount point "
operator|+
name|invalidPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMountTableDefaultACL ()
specifier|public
name|void
name|testMountTableDefaultACL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"/testpath0"
block|,
literal|"ns0"
block|,
literal|"/testdir0"
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/testpath0"
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|MountTable
name|mountTable
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|ugi
operator|.
name|getShortUserName
argument_list|()
else|:
name|ugi
operator|.
name|getPrimaryGroupName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|mountTable
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|mountTable
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|,
name|mountTable
operator|.
name|getMode
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMountTablePermissions ()
specifier|public
name|void
name|testMountTablePermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// re-set system out for testing
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
comment|// use superuser to add new mount table with only read permission
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"/testpath2-1"
block|,
literal|"ns0"
block|,
literal|"/testdir2-1"
block|,
literal|"-owner"
block|,
name|TEST_USER
block|,
literal|"-group"
block|,
name|TEST_USER
block|,
literal|"-mode"
block|,
literal|"0455"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|superUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
comment|// use normal user as current user to test
name|UserGroupInformation
name|remoteUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TEST_USER
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
comment|// verify read permission by executing other commands
name|verifyExecutionResult
argument_list|(
literal|"/testpath2-1"
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add new mount table with only write permission
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"/testpath2-2"
block|,
literal|"ns0"
block|,
literal|"/testdir2-2"
block|,
literal|"-owner"
block|,
name|TEST_USER
block|,
literal|"-group"
block|,
name|TEST_USER
block|,
literal|"-mode"
block|,
literal|"0255"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|verifyExecutionResult
argument_list|(
literal|"/testpath2-2"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set mount table entry with read and write permission
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"/testpath2-3"
block|,
literal|"ns0"
block|,
literal|"/testdir2-3"
block|,
literal|"-owner"
block|,
name|TEST_USER
block|,
literal|"-group"
block|,
name|TEST_USER
block|,
literal|"-mode"
block|,
literal|"0755"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|verifyExecutionResult
argument_list|(
literal|"/testpath2-3"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set back login user
name|remoteUser
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|superUser
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify router admin commands execution result.    *    * @param mount    *          target mount table    * @param canRead    *          whether can list mount tables under specified mount    * @param addCommandCode    *          expected return code of add command executed for specified mount    * @param rmCommandCode    *          expected return code of rm command executed for specified mount    * @throws Exception    */
DECL|method|verifyExecutionResult (String mount, boolean canRead, int addCommandCode, int rmCommandCode)
specifier|private
name|void
name|verifyExecutionResult
parameter_list|(
name|String
name|mount
parameter_list|,
name|boolean
name|canRead
parameter_list|,
name|int
name|addCommandCode
parameter_list|,
name|int
name|rmCommandCode
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|argv
init|=
literal|null
decl_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// execute ls command
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
name|mount
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canRead
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|mount
argument_list|)
argument_list|)
expr_stmt|;
comment|// execute add/update command
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|mount
block|,
literal|"ns0"
block|,
name|mount
operator|+
literal|"newdir"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
name|addCommandCode
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// execute remove command
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|mount
block|}
expr_stmt|;
name|assertEquals
argument_list|(
name|rmCommandCode
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetAndClearQuota ()
specifier|public
name|void
name|testSetAndClearQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsId
init|=
literal|"ns0"
decl_stmt|;
name|String
name|src
init|=
literal|"/test-QuotaMounttable"
decl_stmt|;
name|String
name|dest
init|=
literal|"/QuotaMounttable"
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
name|src
block|,
name|nsId
block|,
name|dest
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|MountTable
name|mountTable
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RouterQuotaUsage
name|quotaUsage
init|=
name|mountTable
operator|.
name|getQuota
argument_list|()
decl_stmt|;
comment|// verify the default quota set
name|assertEquals
argument_list|(
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
argument_list|,
name|quotaUsage
operator|.
name|getFileAndDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|quotaUsage
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RouterQuotaUsage
operator|.
name|QUOTA_USAGE_COUNT_DEFAULT
argument_list|,
name|quotaUsage
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|quotaUsage
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nsQuota
init|=
literal|50
decl_stmt|;
name|long
name|ssQuota
init|=
literal|100
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
name|src
block|,
literal|"-nsQuota"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nsQuota
argument_list|)
block|,
literal|"-ssQuota"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|ssQuota
argument_list|)
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|mountTable
operator|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|quotaUsage
operator|=
name|mountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
comment|// verify if the quota is set
name|assertEquals
argument_list|(
name|nsQuota
argument_list|,
name|quotaUsage
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ssQuota
argument_list|,
name|quotaUsage
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// use quota string for setting ss quota
name|String
name|newSsQuota
init|=
literal|"2m"
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setQuota"
block|,
name|src
block|,
literal|"-ssQuota"
block|,
name|newSsQuota
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|mountTable
operator|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|quotaUsage
operator|=
name|mountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
comment|// verify if ss quota is correctly set
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|quotaUsage
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// test clrQuota command
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-clrQuota"
block|,
name|src
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadCache
argument_list|(
name|MountTableStoreImpl
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
operator|.
name|getMountTableManager
argument_list|()
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|mountTable
operator|=
name|getResponse
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|quotaUsage
operator|=
name|mountTable
operator|.
name|getQuota
argument_list|()
expr_stmt|;
comment|// verify if quota unset successfully
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|quotaUsage
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|quotaUsage
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

