begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPacketReceiver
specifier|public
class|class
name|TestPacketReceiver
block|{
DECL|field|OFFSET_IN_BLOCK
specifier|private
specifier|static
specifier|final
name|long
name|OFFSET_IN_BLOCK
init|=
literal|12345L
decl_stmt|;
DECL|field|SEQNO
specifier|private
specifier|static
specifier|final
name|int
name|SEQNO
init|=
literal|54321
decl_stmt|;
DECL|method|prepareFakePacket (byte[] data, byte[] sums)
specifier|private
name|byte
index|[]
name|prepareFakePacket
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|byte
index|[]
name|sums
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|int
name|packetLen
init|=
name|data
operator|.
name|length
operator|+
name|sums
operator|.
name|length
operator|+
literal|4
decl_stmt|;
name|PacketHeader
name|header
init|=
operator|new
name|PacketHeader
argument_list|(
name|packetLen
argument_list|,
name|OFFSET_IN_BLOCK
argument_list|,
name|SEQNO
argument_list|,
literal|false
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|sums
argument_list|)
expr_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|remainingAsArray (ByteBuffer buf)
specifier|private
specifier|static
name|byte
index|[]
name|remainingAsArray
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
DECL|method|testReceiveAndMirror ()
specifier|public
name|void
name|testReceiveAndMirror
parameter_list|()
throws|throws
name|IOException
block|{
name|PacketReceiver
name|pr
init|=
operator|new
name|PacketReceiver
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Test three different lengths, to force reallocing
comment|// the buffer as it grows.
name|doTestReceiveAndMirror
argument_list|(
name|pr
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|doTestReceiveAndMirror
argument_list|(
name|pr
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|doTestReceiveAndMirror
argument_list|(
name|pr
argument_list|,
literal|150
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|pr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doTestReceiveAndMirror (PacketReceiver pr, int dataLen, int checksumsLen)
specifier|private
name|void
name|doTestReceiveAndMirror
parameter_list|(
name|PacketReceiver
name|pr
parameter_list|,
name|int
name|dataLen
parameter_list|,
name|int
name|checksumsLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|DATA
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|dataLen
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|CHECKSUMS
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|checksumsLen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|packet
init|=
name|prepareFakePacket
argument_list|(
name|DATA
argument_list|,
name|CHECKSUMS
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|pr
operator|.
name|receiveNextPacket
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|ByteBuffer
name|parsedData
init|=
name|pr
operator|.
name|getDataSlice
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|DATA
argument_list|,
name|remainingAsArray
argument_list|(
name|parsedData
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBuffer
name|parsedChecksums
init|=
name|pr
operator|.
name|getChecksumSlice
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|CHECKSUMS
argument_list|,
name|remainingAsArray
argument_list|(
name|parsedChecksums
argument_list|)
argument_list|)
expr_stmt|;
name|PacketHeader
name|header
init|=
name|pr
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SEQNO
argument_list|,
name|header
operator|.
name|getSeqno
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OFFSET_IN_BLOCK
argument_list|,
name|header
operator|.
name|getOffsetInBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mirror the packet to an output stream and make sure it matches
comment|// the packet we sent.
name|ByteArrayOutputStream
name|mirrored
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|mirrored
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mirrored
argument_list|)
expr_stmt|;
name|pr
operator|.
name|mirrorPacketTo
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|mirrored
argument_list|)
argument_list|)
expr_stmt|;
comment|// The write should be done in a single call. Otherwise we may hit
comment|// nasty interactions with nagling (eg HDFS-4049).
name|Mockito
operator|.
name|verify
argument_list|(
name|mirrored
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|packet
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|mirrored
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|packet
argument_list|,
name|mirrored
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

