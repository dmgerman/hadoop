begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|FileWithSnapshot
operator|.
name|FileDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
operator|.
name|ChildrenDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
operator|.
name|DirectoryDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|ListType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/** Testing rename with snapshots. */
end_comment

begin_class
DECL|class|TestRenameWithSnapshots
specifier|public
class|class
name|TestRenameWithSnapshots
block|{
block|{
name|SnapshotTestHelper
operator|.
name|disableLogs
parameter_list|()
constructor_decl|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRenameWithSnapshots
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0
decl_stmt|;
DECL|field|REPL
specifier|private
specifier|static
specifier|final
name|short
name|REPL
init|=
literal|3
decl_stmt|;
DECL|field|REPL_1
specifier|private
specifier|static
specifier|final
name|short
name|REPL_1
init|=
literal|2
decl_stmt|;
DECL|field|REPL_2
specifier|private
specifier|static
specifier|final
name|short
name|REPL_2
init|=
literal|1
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|private
specifier|static
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsdir
specifier|private
specifier|static
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
DECL|field|dir
specifier|static
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testRenameWithSnapshots"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|static
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|file1
specifier|static
specifier|private
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|file2
specifier|static
specifier|private
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|file3
specifier|static
specifier|private
specifier|final
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
DECL|field|snap1
specifier|static
specifier|private
specifier|final
name|String
name|snap1
init|=
literal|"snap1"
decl_stmt|;
DECL|field|snap2
specifier|static
specifier|private
specifier|final
name|String
name|snap2
init|=
literal|"snap2"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRenameFromSDir2NonSDir ()
specifier|public
name|void
name|testRenameFromSDir2NonSDir
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|dirStr
init|=
literal|"/testRenameWithSnapshot"
decl_stmt|;
specifier|final
name|String
name|abcStr
init|=
name|dirStr
operator|+
literal|"/abc"
decl_stmt|;
specifier|final
name|Path
name|abc
init|=
operator|new
name|Path
argument_list|(
name|abcStr
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|abc
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|abc
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|abc
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|abc
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|rename
argument_list|(
name|abc
argument_list|,
operator|new
name|Path
argument_list|(
name|dirStr
argument_list|,
literal|"tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception since "
operator|+
name|abc
operator|+
literal|" is snapshottable and already has snapshots"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|abcStr
operator|+
literal|" is snapshottable and already has snapshots"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|xyzStr
init|=
name|dirStr
operator|+
literal|"/xyz"
decl_stmt|;
specifier|final
name|Path
name|xyz
init|=
operator|new
name|Path
argument_list|(
name|xyzStr
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|xyz
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|xyz
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|fooRef
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|abc
argument_list|,
literal|"s0"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fooRef
operator|.
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fooRef
operator|.
name|asReference
argument_list|()
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
init|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|fooRef
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|withCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|barRef
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|barRef
operator|.
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|withCount
argument_list|,
name|barRef
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|bar
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|withCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|existsInDiffReport (List<DiffReportEntry> entries, DiffType type, String relativePath)
specifier|private
specifier|static
name|boolean
name|existsInDiffReport
parameter_list|(
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
parameter_list|,
name|DiffType
name|type
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
for|for
control|(
name|DiffReportEntry
name|entry
range|:
name|entries
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DiffEntry is:"
operator|+
name|entry
operator|.
name|getType
argument_list|()
operator|+
literal|"\""
operator|+
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getRelativePath
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|type
operator|)
operator|&&
operator|(
operator|(
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getRelativePath
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|relativePath
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Rename a file under a snapshottable directory, file does not exist    * in a snapshot.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFileNotInSnapshot ()
specifier|public
name|void
name|testRenameFileNotInSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// Query the diff report and make sure it looks as expected.
name|SnapshotDiffReport
name|diffReport
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|file2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a file under a snapshottable directory, file exists    * in a snapshot.    */
annotation|@
name|Test
DECL|method|testRenameFileInSnapshot ()
specifier|public
name|void
name|testRenameFileInSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// Query the diff report and make sure it looks as expected.
name|SnapshotDiffReport
name|diffReport
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DiffList is "
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|file2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameTwiceInSnapshot ()
specifier|public
name|void
name|testRenameTwiceInSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snap2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|file2
argument_list|,
name|file3
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|diffReport
decl_stmt|;
comment|// Query the diff report and make sure it looks as expected.
name|diffReport
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|,
name|snap2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DiffList is "
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|file2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diffReport
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|snap2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DiffList is "
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|file3
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|file2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diffReport
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|snap1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DiffList is "
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|file3
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|file1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFileInSubDirOfDirWithSnapshot ()
specifier|public
name|void
name|testRenameFileInSubDirOfDirWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub2file1
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"sub2file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub2file2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"sub2file2"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sub1snap1
init|=
literal|"sub1snap1"
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub2file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub1
argument_list|,
name|sub1snap1
argument_list|)
expr_stmt|;
comment|// Rename the file in the subdirectory.
name|hdfs
operator|.
name|rename
argument_list|(
name|sub2file1
argument_list|,
name|sub2file2
argument_list|)
expr_stmt|;
comment|// Query the diff report and make sure it looks as expected.
name|SnapshotDiffReport
name|diffReport
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|sub1snap1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DiffList is \n\""
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|sub2file2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|sub2file1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameDirectoryInSnapshot ()
specifier|public
name|void
name|testRenameDirectoryInSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub3
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"sub3"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub2file1
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"sub2file1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sub1snap1
init|=
literal|"sub1snap1"
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub2file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub1
argument_list|,
name|sub1snap1
argument_list|)
expr_stmt|;
comment|// First rename the sub-directory.
name|hdfs
operator|.
name|rename
argument_list|(
name|sub2
argument_list|,
name|sub3
argument_list|)
expr_stmt|;
comment|// Query the diff report and make sure it looks as expected.
name|SnapshotDiffReport
name|diffReport
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|sub1snap1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DiffList is \n\""
operator|+
name|diffReport
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|entries
init|=
name|diffReport
operator|.
name|getDiffList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|MODIFY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|CREATE
argument_list|,
name|sub3
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existsInDiffReport
argument_list|(
name|entries
argument_list|,
name|DiffType
operator|.
name|DELETE
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * After the following steps:    *<pre>    * 1. Take snapshot s1 on /dir1 at time t1.    * 2. Take snapshot s2 on /dir2 at time t2.    * 3. Modify the subtree of /dir2/foo/ to make it a dir with snapshots.    * 4. Take snapshot s3 on /dir1 at time t3.    * 5. Rename /dir2/foo/ to /dir1/foo/.    *</pre>    * When changes happening on foo, the diff should be recorded in snapshot s2.     */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameDirAcrossSnapshottableDirs ()
specifier|public
name|void
name|testRenameDirAcrossSnapshottableDirs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar2
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|bar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
comment|// still can visit the snapshot copy of bar through
comment|// /dir2/.snapshot/s2/foo/bar
specifier|final
name|Path
name|snapshotBar
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|snapshotBar
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete bar2
specifier|final
name|Path
name|newBar2
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|newBar2
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|newBar2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// /dir2/.snapshot/s2/foo/bar2 should still work
specifier|final
name|Path
name|bar2_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_s2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a single file across snapshottable dirs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFileAcrossSnapshottableDirs ()
specifier|public
name|void
name|testRenameFileAcrossSnapshottableDirs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
comment|// change the replication factor of foo
name|hdfs
operator|.
name|setReplication
argument_list|(
name|newfoo
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
comment|// /dir2/.snapshot/s2/foo should still work
specifier|final
name|Path
name|foo_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s2
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|foo_s2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s3
argument_list|)
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|sfoo
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|newfoo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|sfoo
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLastSnapshot
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test renaming a dir and then delete snapshots.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_1 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newbar
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
name|bar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newbar2
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
name|bar2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|newbar3
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
literal|"bar3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newbar3
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|newbar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|newbar3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|newbar3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar3_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo/bar3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3_s4
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|newbar2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_s5
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s5
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshot s5. The diff of s5 should be combined to s4
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s5
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s4
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshot s4. The diff of s4 should be combined to s2 instead of
comment|// s3.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s4
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|bar_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s3
argument_list|)
argument_list|)
expr_stmt|;
name|bar_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s4
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|bar2_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
name|bar2_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3_s4
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|bar3_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar3"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3_s3
argument_list|)
argument_list|)
expr_stmt|;
name|bar3_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar3"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3_s3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar3_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar3"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3_s2
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// delete snapshot s2.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
DECL|method|restartClusterAndCheckImage ()
specifier|private
name|void
name|restartClusterAndCheckImage
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|fsnBefore
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"dumptree_before"
argument_list|)
decl_stmt|;
name|File
name|fsnMiddle
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"dumptree_middle"
argument_list|)
decl_stmt|;
name|File
name|fsnAfter
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"dumptree_after"
argument_list|)
decl_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnBefore
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// later check fsnMiddle to see if the edit log is applied correctly
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnMiddle
argument_list|)
expr_stmt|;
comment|// save namespace and restart cluster
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// dump the namespace loaded from fsimage
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnAfter
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|compareDumpedTreeInFile
argument_list|(
name|fsnBefore
argument_list|,
name|fsnMiddle
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|compareDumpedTreeInFile
argument_list|(
name|fsnBefore
argument_list|,
name|fsnAfter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test renaming a file and then delete snapshots.    */
annotation|@
name|Test
DECL|method|testRenameFileAndDeleteSnapshot ()
specifier|public
name|void
name|testRenameFileAndDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|newfoo
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|newfoo
argument_list|,
name|REPL_2
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|newfoo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|foo_s4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s5
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|foo_s5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete snapshot s5.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s5"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s5
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|foo_s4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete snapshot s4.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s4
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|foo_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s3
argument_list|)
argument_list|)
expr_stmt|;
name|foo_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s3
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s2
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|foo_s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|snode
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|newfoo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snode
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|snode
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLastSnapshot
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart cluster
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// delete snapshot s2.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s2
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test rename a dir and a file multiple times across snapshottable     * directories: /dir1/foo -> /dir2/foo -> /dir3/foo -> /dir2/foo -> /dir1/foo    *     * Only create snapshots in the beginning (before the rename).    */
annotation|@
name|Test
DECL|method|testRenameMoreThanOnceAcrossSnapDirs ()
specifier|public
name|void
name|testRenameMoreThanOnceAcrossSnapDirs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir3
init|=
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_dir1
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1_dir1
init|=
operator|new
name|Path
argument_list|(
name|foo_dir1
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2_dir1
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar1_dir1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2_dir1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir3
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// 1. /dir1/foo -> /dir2/foo, /dir1/bar -> /dir2/bar
specifier|final
name|Path
name|foo_dir2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir1
argument_list|,
name|foo_dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_dir2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2_dir1
argument_list|,
name|bar2_dir2
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// modification on /dir2/foo and /dir2/bar
specifier|final
name|Path
name|bar1_dir2
init|=
operator|new
name|Path
argument_list|(
name|foo_dir2
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir2
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar2_dir2
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|Path
name|bar1_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|statusBar1
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|statusBar2
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2. /dir2/foo -> /dir3/foo, /dir2/bar -> /dir3/bar
specifier|final
name|Path
name|foo_dir3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_dir3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2_dir2
argument_list|,
name|bar2_dir3
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// modification on /dir3/foo and /dir3/bar
specifier|final
name|Path
name|bar1_dir3
init|=
operator|new
name|Path
argument_list|(
name|foo_dir3
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir3
argument_list|,
name|REPL_2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar2_dir3
argument_list|,
name|REPL_2
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|Path
name|bar1_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir3
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir3
argument_list|,
literal|"s3"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_dir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_dir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. /dir3/foo -> /dir2/foo, /dir3/bar -> /dir2/bar
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir3
argument_list|,
name|foo_dir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2_dir3
argument_list|,
name|bar2_dir2
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// modification on /dir2/foo
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir2
argument_list|,
name|REPL
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar2_dir2
argument_list|,
name|REPL
argument_list|)
expr_stmt|;
comment|// check
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4. /dir2/foo -> /dir1/foo, /dir2/bar -> /dir1/bar
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2_dir2
argument_list|,
name|bar2_dir1
argument_list|)
expr_stmt|;
comment|// check the internal details
name|INodeReference
name|fooRef
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|INodeReference
operator|.
name|WithCount
name|fooWithCount
init|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
comment|// only 2 references: one in deleted list of sdir1, one in created list of
comment|// sdir1
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fooWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|foo
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooWithCount
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|foo
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|foo
operator|.
name|getLastSnapshot
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|bar1
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar1_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar1
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|bar1
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLastSnapshot
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|INodeReference
name|barRef
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar2_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|INodeReference
operator|.
name|WithCount
name|barWithCount
init|=
operator|(
name|WithCount
operator|)
name|barRef
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|barWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|bar
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|barWithCount
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|bar
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLastSnapshot
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// delete foo
name|hdfs
operator|.
name|delete
argument_list|(
name|foo_dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|bar2_dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// check
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_dir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_dir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_dir1
argument_list|)
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar2
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar2_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fooRef
operator|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
expr_stmt|;
name|fooWithCount
operator|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fooWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|barRef
operator|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar2_s1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
expr_stmt|;
name|barWithCount
operator|=
operator|(
name|WithCount
operator|)
name|barRef
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|barWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rename a dir multiple times across snapshottable directories:     * /dir1/foo -> /dir2/foo -> /dir3/foo -> /dir2/foo -> /dir1/foo    *     * Create snapshots after each rename.    */
annotation|@
name|Test
DECL|method|testRenameMoreThanOnceAcrossSnapDirs_2 ()
specifier|public
name|void
name|testRenameMoreThanOnceAcrossSnapDirs_2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir3
init|=
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_dir1
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1_dir1
init|=
operator|new
name|Path
argument_list|(
name|foo_dir1
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_dir1
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar1_dir1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar_dir1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir3
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// 1. /dir1/foo -> /dir2/foo, /dir1/bar -> /dir2/bar
specifier|final
name|Path
name|foo_dir2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir1
argument_list|,
name|foo_dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_dir2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar_dir1
argument_list|,
name|bar_dir2
argument_list|)
expr_stmt|;
comment|// modification on /dir2/foo and /dir2/bar
specifier|final
name|Path
name|bar1_dir2
init|=
operator|new
name|Path
argument_list|(
name|foo_dir2
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir2
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar_dir2
argument_list|,
name|REPL_1
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// create snapshots
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s11"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s22"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir3
argument_list|,
literal|"s33"
argument_list|)
expr_stmt|;
comment|// 2. /dir2/foo -> /dir3/foo
specifier|final
name|Path
name|foo_dir3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_dir3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar_dir2
argument_list|,
name|bar_dir3
argument_list|)
expr_stmt|;
comment|// modification on /dir3/foo
specifier|final
name|Path
name|bar1_dir3
init|=
operator|new
name|Path
argument_list|(
name|foo_dir3
argument_list|,
literal|"bar1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir3
argument_list|,
name|REPL_2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar_dir3
argument_list|,
name|REPL_2
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// create snapshots
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s111"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s222"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir3
argument_list|,
literal|"s333"
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|Path
name|bar1_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1_s22
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s22"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar1_s333
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir3
argument_list|,
literal|"s333"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_s22
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s22"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_s333
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir3
argument_list|,
literal|"s333"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s333
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s333
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|statusBar1
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_dir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s333
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|statusBar
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_dir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s333
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. /dir3/foo -> /dir2/foo
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir3
argument_list|,
name|foo_dir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar_dir3
argument_list|,
name|bar_dir2
argument_list|)
expr_stmt|;
comment|// modification on /dir2/foo
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar1_dir2
argument_list|,
name|REPL
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|bar_dir2
argument_list|,
name|REPL
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// create snapshots
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1111"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2222"
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|Path
name|bar1_s2222
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2222"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_s2222
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2222"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s333
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2222
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s333
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2222
argument_list|)
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s333
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar1
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar1_s2222
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar1
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_dir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_1
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s333
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL_2
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|statusBar
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|bar_s2222
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPL
argument_list|,
name|statusBar
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4. /dir2/foo -> /dir1/foo
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar_dir2
argument_list|,
name|bar_dir1
argument_list|)
expr_stmt|;
comment|// check the internal details
name|INodeReference
name|fooRef
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|INodeReference
operator|.
name|WithCount
name|fooWithCount
init|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
comment|// 5 references: s1, s22, s333, s2222, current tree of sdir1
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fooWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|foo
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooWithCount
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|fooDiffs
init|=
name|foo
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fooDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2222"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s333"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s22"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|bar1
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar1_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileDiff
argument_list|>
name|bar1Diffs
init|=
name|bar1
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bar1Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s333"
argument_list|,
name|bar1Diffs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s22"
argument_list|,
name|bar1Diffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|bar1Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|INodeReference
name|barRef
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar_dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|INodeReference
operator|.
name|WithCount
name|barWithCount
init|=
operator|(
name|WithCount
operator|)
name|barRef
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
comment|// 5 references: s1, s22, s333, s2222, current tree of sdir1
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|barWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|bar
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|barWithCount
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileDiff
argument_list|>
name|barDiffs
init|=
name|bar
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|barDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2222"
argument_list|,
name|barDiffs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s333"
argument_list|,
name|barDiffs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s22"
argument_list|,
name|barDiffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|barDiffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// delete foo
name|hdfs
operator|.
name|delete
argument_list|(
name|foo_dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|bar_dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// check
specifier|final
name|Path
name|bar1_s1111
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1111"
argument_list|,
literal|"foo/bar1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar_s1111
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1111"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s333
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s2222
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar1_s1111
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s22
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s333
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2222
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s1111
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s2222
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2222"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|fooRef
operator|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s2222
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
expr_stmt|;
name|fooWithCount
operator|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fooWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|foo
operator|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooWithCount
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|fooDiffs
operator|=
name|foo
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fooDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2222"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|bar1Diffs
operator|=
name|bar1
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bar1Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s333"
argument_list|,
name|bar1Diffs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|barRef
operator|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|bar_s2222
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
expr_stmt|;
name|barWithCount
operator|=
operator|(
name|WithCount
operator|)
name|barRef
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|barWithCount
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|bar
operator|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|barWithCount
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|barDiffs
operator|=
name|bar
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|barDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2222"
argument_list|,
name|barDiffs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rename from a non-snapshottable dir to a snapshottable dir    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFromNonSDir2SDir ()
specifier|public
name|void
name|testRenameFromNonSDir2SDir
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|newfoo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeDirectory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rename where the src/dst directories are both snapshottable     * directories without snapshots. In such case we need to update the     * snapshottable dir list in SnapshotManager.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameAndUpdateSnapshottableDirs ()
specifier|public
name|void
name|testRenameAndUpdateSnapshottableDirs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fsn
operator|.
name|getSnapshottableDirListing
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|INodeDirectory
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|long
name|fooId
init|=
name|fooNode
operator|.
name|getId
argument_list|()
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception since "
operator|+
name|bar
operator|+
literal|" is snapshottable and already has snapshots"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|bar
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|bar
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|dirs
init|=
name|fsn
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fooId
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * After rename, delete the snapshot in src    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_2 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|newfoo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar2_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s4
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_s4
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s4
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshot s4. The diff of s4 should be combined to s3
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s4"
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|Path
name|bar_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s3
argument_list|)
argument_list|)
expr_stmt|;
name|bar_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s3
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|bar2_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
name|bar2_s3
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo/bar2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar2_s3
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshot s3
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check internal details
specifier|final
name|Path
name|foo_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|INodeReference
name|fooRef
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|INodeReference
operator|.
name|WithCount
name|fooWC
init|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fooWC
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|fooDir
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooWC
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffs
init|=
name|fooDir
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the cluster and check fsimage
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// delete snapshot s2.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar_s2
argument_list|)
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
comment|// make sure the whole referred subtree has been destroyed
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|fsdir
operator|.
name|getRoot
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsdir
operator|.
name|getRoot
argument_list|()
operator|.
name|getDiskspace
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fsdir
operator|.
name|getRoot
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsdir
operator|.
name|getRoot
argument_list|()
operator|.
name|getDiskspace
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a file and then append the same file.     */
annotation|@
name|Test
DECL|method|testRenameAndAppend ()
specifier|public
name|void
name|testRenameAndAppend
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
name|INode
name|fooRef
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|append
argument_list|(
name|foo2
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
operator|(
operator|new
name|Random
argument_list|()
operator|)
operator|.
name|nextBytes
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|fooRef
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fooRef
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeFileUnderConstructionWithSnapshot
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|fooRef
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fooRef
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeFileWithSnapshot
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the undo section of rename. Before the rename, we create the renamed     * file/dir before taking the snapshot.    */
annotation|@
name|Test
DECL|method|testRenameUndo_1 ()
specifier|public
name|void
name|testRenameUndo_1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dir2file
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|dir2file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir2
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|INodeDirectory
name|mockDir2
init|=
name|spy
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|mockDir2
argument_list|)
operator|.
name|addChild
argument_list|(
operator|(
name|INode
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
operator|(
name|Snapshot
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|INodeMap
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectory
name|root
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
literal|"/"
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|root
operator|.
name|replaceChild
argument_list|(
name|dir2
argument_list|,
name|mockDir2
argument_list|,
name|fsdir
operator|.
name|getINodeMap
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// check the current internal details
name|INodeDirectorySnapshottable
name|dir1Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|dir1Children
init|=
name|dir1Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir1Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
operator|.
name|getName
argument_list|()
argument_list|,
name|dir1Children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|dir1Diffs
init|=
name|dir1Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir1Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|dir1Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the undo of rename, both the created and deleted list of sdir1
comment|// should be empty
name|ChildrenDiff
name|childrenDiff
init|=
name|dir1Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeDirectoryWithSnapshot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|fooDiffs
init|=
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooNode
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fooDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|INode
name|fooNode_s1
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode_s1
operator|==
name|fooNode
argument_list|)
expr_stmt|;
comment|// check sdir2
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|newfoo
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|dir2Node
operator|instanceof
name|INodeDirectoryWithSnapshot
argument_list|)
expr_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|dir2Children
init|=
name|dir2Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir2Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2file
operator|.
name|getName
argument_list|()
argument_list|,
name|dir2Children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the undo section of rename. Before the rename, we create the renamed     * file/dir after taking the snapshot.    */
annotation|@
name|Test
DECL|method|testRenameUndo_2 ()
specifier|public
name|void
name|testRenameUndo_2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dir2file
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|dir2file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// create foo after taking snapshot
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir2
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|INodeDirectory
name|mockDir2
init|=
name|spy
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|mockDir2
argument_list|)
operator|.
name|addChild
argument_list|(
operator|(
name|INode
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
operator|(
name|Snapshot
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|INodeMap
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectory
name|root
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
literal|"/"
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|root
operator|.
name|replaceChild
argument_list|(
name|dir2
argument_list|,
name|mockDir2
argument_list|,
name|fsdir
operator|.
name|getINodeMap
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// check the current internal details
name|INodeDirectorySnapshottable
name|dir1Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|dir1Children
init|=
name|dir1Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir1Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
operator|.
name|getName
argument_list|()
argument_list|,
name|dir1Children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|dir1Diffs
init|=
name|dir1Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir1Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|dir1Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the undo of rename, the created list of sdir1 should contain
comment|// 1 element
name|ChildrenDiff
name|childrenDiff
init|=
name|dir1Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeDirectory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|fooNode
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check sdir2
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|newfoo
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|dir2Node
operator|instanceof
name|INodeDirectoryWithSnapshot
argument_list|)
expr_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|dir2Children
init|=
name|dir2Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir2Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2file
operator|.
name|getName
argument_list|()
argument_list|,
name|dir2Children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the undo section of the second-time rename.    */
annotation|@
name|Test
DECL|method|testRenameUndo_3 ()
specifier|public
name|void
name|testRenameUndo_3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir3
init|=
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir3
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|INodeDirectory
name|mockDir3
init|=
name|spy
argument_list|(
name|dir3
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|mockDir3
argument_list|)
operator|.
name|addChild
argument_list|(
operator|(
name|INode
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
operator|(
name|Snapshot
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|INodeMap
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectory
name|root
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
literal|"/"
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|root
operator|.
name|replaceChild
argument_list|(
name|dir3
argument_list|,
name|mockDir3
argument_list|,
name|fsdir
operator|.
name|getINodeMap
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_dir2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo_dir3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo_dir2
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir3
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// check the current internal details
name|INodeDirectorySnapshottable
name|dir2Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|dir2Children
init|=
name|dir2Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir2Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|dir2Diffs
init|=
name|dir2Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir2Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|ChildrenDiff
name|childrenDiff
init|=
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s2
argument_list|)
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo_dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|fooNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|fooDiffs
init|=
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooNode
operator|.
name|asDirectory
argument_list|()
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fooDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// create snapshot on sdir2 and rename again
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|result
operator|=
name|hdfs
operator|.
name|rename
argument_list|(
name|foo_dir2
argument_list|,
name|foo_dir3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// check internal details again
name|dir2Node
operator|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fooNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo_dir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dir2Children
operator|=
name|dir2Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir2Children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dir2Diffs
operator|=
name|dir2Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dir2Diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s3"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|childrenDiff
operator|=
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|fooNode
argument_list|)
expr_stmt|;
name|childrenDiff
operator|=
name|dir2Diffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|childrenDiff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s3
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|fooDiffs
operator|=
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooNode
operator|.
name|asDirectory
argument_list|()
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fooDiffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s3"
argument_list|,
name|fooDiffs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test undo where dst node being overwritten is a reference node    */
annotation|@
name|Test
DECL|method|testRenameUndo_4 ()
specifier|public
name|void
name|testRenameUndo_4
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir3
init|=
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|foo2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// rename foo2 to foo3, so that foo3 will be a reference node
specifier|final
name|Path
name|foo3
init|=
operator|new
name|Path
argument_list|(
name|sdir3
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo2
argument_list|,
name|foo3
argument_list|)
expr_stmt|;
name|INode
name|foo3Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|foo3Node
operator|.
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir3
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir3
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|INodeDirectory
name|mockDir3
init|=
name|spy
argument_list|(
name|dir3
argument_list|)
decl_stmt|;
comment|// fail the rename but succeed in undo
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|mockDir3
argument_list|)
operator|.
name|addChild
argument_list|(
operator|(
name|INode
operator|)
name|Mockito
operator|.
name|isNull
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
operator|(
name|Snapshot
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|INodeMap
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockDir3
operator|.
name|addChild
argument_list|(
operator|(
name|INode
operator|)
name|Mockito
operator|.
name|isNotNull
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
operator|(
name|Snapshot
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|INodeMap
operator|)
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|INodeDirectory
name|root
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
literal|"/"
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|root
operator|.
name|replaceChild
argument_list|(
name|dir3
argument_list|,
name|mockDir3
argument_list|,
name|fsdir
operator|.
name|getINodeMap
argument_list|()
argument_list|)
expr_stmt|;
name|foo3Node
operator|.
name|setParent
argument_list|(
name|mockDir3
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo3
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"the rename from "
operator|+
name|foo
operator|+
literal|" to "
operator|+
name|foo3
operator|+
literal|" should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"rename from "
operator|+
name|foo
operator|+
literal|" to "
operator|+
name|foo3
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// make sure the undo is correct
specifier|final
name|INode
name|foo3Node_undo
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|foo3Node
argument_list|,
name|foo3Node_undo
argument_list|)
expr_stmt|;
name|INodeReference
operator|.
name|WithCount
name|foo3_wc
init|=
operator|(
name|WithCount
operator|)
name|foo3Node
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|foo3_wc
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|foo3Node
argument_list|,
name|foo3_wc
operator|.
name|getParentReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rename while the rename operation will exceed the quota in the dst    * tree.    */
annotation|@
name|Test
DECL|method|testRenameUndo_5 ()
specifier|public
name|void
name|testRenameUndo_5
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subdir2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subdir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// set ns quota of dir2 to 5, so the current remaining is 2 (already has
comment|// dir2, subdir2, and s2)
name|hdfs
operator|.
name|setQuota
argument_list|(
name|dir2
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|subdir2
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// rename /test/dir1/foo to /test/dir2/subdir2/foo.
comment|// FSDirectory#verifyQuota4Rename will pass since foo/bar only be counted
comment|// as 2 in NS quota. However, the rename operation will fail when adding
comment|// foo to subdir2, since we will create a snapshot diff for subdir2.
name|boolean
name|rename
init|=
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rename
argument_list|)
expr_stmt|;
comment|// check the undo
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir1Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir1Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|childrenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectoryWithSnapshot
operator|.
name|class
argument_list|)
expr_stmt|;
name|INode
name|barNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|barNode
operator|.
name|getClass
argument_list|()
operator|==
name|INodeFile
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|fooNode
argument_list|,
name|barNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir1Node
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check dir2
name|INode
name|dir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir2Node
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectorySnapshottable
operator|.
name|class
argument_list|)
expr_stmt|;
name|Quota
operator|.
name|Counts
name|counts
init|=
name|dir2Node
operator|.
name|computeQuotaUsage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
name|childrenList
operator|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir2Node
operator|.
name|asDirectory
argument_list|()
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|subdir2Node
init|=
name|childrenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|dir2Node
argument_list|,
name|subdir2Node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|subdir2Node
argument_list|,
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|subdir2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diffList
operator|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir2Node
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the rename undo when removing dst node fails    */
annotation|@
name|Test
DECL|method|testRenameUndo_6 ()
specifier|public
name|void
name|testRenameUndo_6
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub_dir2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subsub_dir2
init|=
operator|new
name|Path
argument_list|(
name|sub_dir2
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subsub_dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// set ns quota of dir2 to 4, so the current remaining is 0 (already has
comment|// dir2, sub_dir2, subsub_dir2, and s2)
name|hdfs
operator|.
name|setQuota
argument_list|(
name|dir2
argument_list|,
literal|4
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// rename /test/dir1/foo to /test/dir2/sub_dir2/subsub_dir2.
comment|// FSDirectory#verifyQuota4Rename will pass since foo only be counted
comment|// as 1 in NS quota. However, the rename operation will fail when removing
comment|// subsub_dir2 since this step tries to add a snapshot diff in sub_dir2.
try|try
block|{
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|subsub_dir2
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect QuotaExceedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaExceededException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to record modification for snapshot: "
operator|+
literal|"The NameSpace quota (directories and files)"
operator|+
literal|" is exceeded: quota=4 file count=5"
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// check the undo
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dir1Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir1Node
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|fooNode
init|=
name|childrenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectoryWithSnapshot
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dir1Node
argument_list|,
name|fooNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir1Node
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check dir2
name|INode
name|dir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir2Node
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectorySnapshottable
operator|.
name|class
argument_list|)
expr_stmt|;
name|Quota
operator|.
name|Counts
name|counts
init|=
name|dir2Node
operator|.
name|computeQuotaUsage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
name|childrenList
operator|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir2Node
operator|.
name|asDirectory
argument_list|()
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childrenList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|subdir2Node
init|=
name|childrenList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|subdir2Node
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectoryWithSnapshot
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dir2Node
argument_list|,
name|subdir2Node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|subdir2Node
argument_list|,
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sub_dir2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|INode
name|subsubdir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|subsub_dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|subsubdir2Node
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectory
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|subdir2Node
argument_list|,
name|subsubdir2Node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|diffList
operator|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir2Node
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|diff
operator|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|diffList
operator|=
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|subdir2Node
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the rename undo when quota of dst tree is exceeded after rename.    */
annotation|@
name|Test
DECL|method|testRenameExceedQuota ()
specifier|public
name|void
name|testRenameExceedQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sub_dir2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subfile_dir2
init|=
operator|new
name|Path
argument_list|(
name|sub_dir2
argument_list|,
literal|"subfile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile_dir2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// set ns quota of dir2 to 4, so the current remaining is 1 (already has
comment|// dir2, sub_dir2, subfile_dir2, and s2)
name|hdfs
operator|.
name|setQuota
argument_list|(
name|dir2
argument_list|,
literal|5
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// rename /test/dir1/foo to /test/dir2/sub_dir2/subfile_dir2.
comment|// FSDirectory#verifyQuota4Rename will pass since foo only be counted
comment|// as 1 in NS quota. The rename operation will succeed while the real quota
comment|// of dir2 will become 7 (dir2, s2 in dir2, sub_dir2, s2 in sub_dir2,
comment|// subfile_dir2 in deleted list, new subfile, s1 in new subfile).
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|subfile_dir2
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// check dir2
name|INode
name|dir2Node
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir2Node
operator|.
name|getClass
argument_list|()
operator|==
name|INodeDirectorySnapshottable
operator|.
name|class
argument_list|)
expr_stmt|;
name|Quota
operator|.
name|Counts
name|counts
init|=
name|dir2Node
operator|.
name|computeQuotaUsage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCKSIZE
operator|*
name|REPL
operator|*
literal|2
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRename2PreDescendant ()
specifier|public
name|void
name|testRename2PreDescendant
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
name|snap1
argument_list|)
expr_stmt|;
comment|// /dir1/foo/bar -> /dir2/bar
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar2
argument_list|)
expr_stmt|;
comment|// /dir1/foo -> /dir2/bar/foo
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|bar2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * After the following operations:    * Rename a dir -> create a snapshot s on dst tree -> delete the renamed dir    * -> delete snapshot s on dst tree    *     * Make sure we destroy everything created after the rename under the renamed    * dir.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_3 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
comment|// create two new files under foo2
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar3
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar3
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create a new snapshot on sdir2
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// delete foo2
name|hdfs
operator|.
name|delete
argument_list|(
name|foo2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// delete s3
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|INodeDirectorySnapshottable
name|dir1Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dir1Node
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectorySnapshottable
name|dir2Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dir2Node
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|fooRef
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|INodeReference
operator|.
name|WithCount
name|wc
init|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wc
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|fooNode
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|wc
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|fooNode
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
operator|.
name|getName
argument_list|()
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|fooNode
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * After the following operations:    * Rename a dir -> create a snapshot s on dst tree -> rename the renamed dir    * again -> delete snapshot s on dst tree    *     * Make sure we only delete the snapshot s under the renamed dir.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_4 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_4
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sdir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
comment|// create two new files under foo2
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar3
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar3
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create a new snapshot on sdir2
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// rename foo2 again
name|hdfs
operator|.
name|rename
argument_list|(
name|foo2
argument_list|,
name|foo
argument_list|)
expr_stmt|;
comment|// delete snapshot s3
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sdir2
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// check
specifier|final
name|INodeDirectorySnapshottable
name|dir1Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// sdir1 + s1 + foo_s1 (foo) + foo (foo + s1 + bar~bar3)
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|dir1Node
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectorySnapshottable
name|dir2Node
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|sdir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dir2Node
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sdir1
argument_list|,
literal|"s1"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|INode
name|fooRef
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRef
operator|instanceof
name|INodeReference
operator|.
name|WithName
argument_list|)
expr_stmt|;
name|INodeReference
operator|.
name|WithCount
name|wc
init|=
operator|(
name|WithCount
operator|)
name|fooRef
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wc
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|fooNode
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|wc
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|fooNode
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
operator|.
name|getName
argument_list|()
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar2
operator|.
name|getName
argument_list|()
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar3
operator|.
name|getName
argument_list|()
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|fooNode
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
decl_stmt|;
comment|// bar2 and bar3 in the created list
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|fooRef2
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRef2
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|INodeReference
operator|.
name|WithCount
name|wc2
init|=
operator|(
name|WithCount
operator|)
name|fooRef2
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|wc
argument_list|,
name|wc2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|fooRef2
argument_list|,
name|wc
operator|.
name|getParentReference
argument_list|()
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test demonstrates that     * {@link INodeDirectoryWithSnapshot#removeChild(INode, Snapshot, INodeMap)}    * and     * {@link INodeDirectoryWithSnapshot#addChild(INode, boolean, Snapshot, INodeMap)}    * should use {@link INode#isInLatestSnapshot(Snapshot)} to check if the     * added/removed child should be recorded in snapshots.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_5 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_5
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir3
init|=
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
comment|// create file bar, and foo will become an INodeDirectoryWithSnapshot
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// delete snapshot s1. now foo is not in any snapshot
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// rename /dir1/foo to /dir2/foo
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
comment|// rename /dir2/foo/bar to /dir3/foo/bar
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar3
init|=
operator|new
name|Path
argument_list|(
name|dir3
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2
argument_list|,
name|bar3
argument_list|)
expr_stmt|;
comment|// delete /dir2/foo. Since it is not in any snapshot, we will call its
comment|// destroy function. If we do not use isInLatestSnapshot in removeChild and
comment|// addChild methods in INodeDirectoryWithSnapshot, the file bar will be
comment|// stored in the deleted list of foo, and will be destroyed.
name|hdfs
operator|.
name|delete
argument_list|(
name|foo2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check if /dir3/bar still exists
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|bar3
argument_list|)
argument_list|)
expr_stmt|;
name|INodeFile
name|barNode
init|=
operator|(
name|INodeFile
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|bar3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir3
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|barNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename and deletion snapshot under the same the snapshottable directory.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_6 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_6
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// take a snapshot on /test
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|test
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// delete /test/dir2/foo/bar/file after snapshot s0, so that there is a
comment|// snapshot copy recorded in bar
name|hdfs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// rename foo from dir2 to dir1
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s0
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|test
argument_list|,
literal|"s0"
argument_list|,
literal|"dir2/foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"the snapshot path "
operator|+
name|foo_s0
operator|+
literal|" should exist"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s0
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshot s0. The deletion will first go down through dir1, and
comment|// find foo in the created list of dir1. Then it will use null as the prior
comment|// snapshot and continue the snapshot deletion process in the subtree of
comment|// foo. We need to make sure the snapshot s0 can be deleted cleanly in the
comment|// foo subtree.
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|test
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// check the internal
name|assertFalse
argument_list|(
literal|"after deleting s0, "
operator|+
name|foo_s0
operator|+
literal|" should not exist"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|foo_s0
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectoryWithSnapshot
name|dir2Node
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"the diff list of "
operator|+
name|dir2
operator|+
literal|" should be empty after deleting s0"
argument_list|,
name|dir2Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|newfoo
argument_list|)
argument_list|)
expr_stmt|;
name|INode
name|fooRefNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|newfoo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fooRefNode
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|INodeDirectory
name|fooNode
init|=
name|fooRefNode
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
comment|// fooNode should be still INodeDirectoryWithSnapshot since we call
comment|// recordModification before the rename
name|assertTrue
argument_list|(
name|fooNode
operator|instanceof
name|INodeDirectoryWithSnapshot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fooNode
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectory
name|barNode
init|=
name|fooNode
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
comment|// bar should also be an INodeDirectoryWithSnapshot, and both of its diff
comment|// list and children list are empty
name|assertTrue
argument_list|(
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|barNode
operator|)
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barNode
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
comment|/**    * Unit test for HDFS-4842.    */
annotation|@
name|Test
DECL|method|testRenameDirAndDeleteSnapshot_7 ()
specifier|public
name|void
name|testRenameDirAndDeleteSnapshot_7
parameter_list|()
throws|throws
name|Exception
block|{
name|fsn
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setAllowNestedSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|test
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|test
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPL
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// take a snapshot s0 and s1 on /test
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|test
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|test
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// delete file so we have a snapshot copy for s1 in bar
name|hdfs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create another snapshot on dir2
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// rename foo from dir2 to dir1
specifier|final
name|Path
name|newfoo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newfoo
argument_list|)
expr_stmt|;
comment|// delete snapshot s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|test
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// make sure the snapshot copy of file in s1 is merged to s0. For
comment|// HDFS-4842, we need to make sure that we do not wrongly use s2 as the
comment|// prior snapshot of s1.
specifier|final
name|Path
name|file_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir2
argument_list|,
literal|"s2"
argument_list|,
literal|"foo/bar/file"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file_s2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file_s0
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|test
argument_list|,
literal|"s0"
argument_list|,
literal|"dir2/foo/bar/file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file_s0
argument_list|)
argument_list|)
expr_stmt|;
comment|// check dir1: foo should be in the created list of s0
name|INodeDirectoryWithSnapshot
name|dir1Node
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|dir1DiffList
init|=
name|dir1Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dir1DiffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|dList
init|=
name|dir1DiffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|cList
init|=
name|dir1DiffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|cNode
init|=
name|cList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|INode
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|newfoo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|cNode
argument_list|,
name|fooNode
argument_list|)
expr_stmt|;
comment|// check foo and its subtree
specifier|final
name|Path
name|newbar
init|=
operator|new
name|Path
argument_list|(
name|newfoo
argument_list|,
name|bar
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INodeDirectoryWithSnapshot
name|barNode
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|newbar
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fooNode
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|barNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|// bar should only have a snapshot diff for s0
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|barDiffList
init|=
name|barNode
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|barDiffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryDiff
name|diff
init|=
name|barDiffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"s0"
argument_list|,
name|Snapshot
operator|.
name|getSnapshotName
argument_list|(
name|diff
operator|.
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
comment|// and file should be stored in the deleted list of this snapshot diff
name|assertEquals
argument_list|(
literal|"file"
argument_list|,
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check dir2: a WithName instance for foo should be in the deleted list
comment|// of the snapshot diff for s2
name|INodeDirectoryWithSnapshot
name|dir2Node
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|dir2DiffList
init|=
name|dir2Node
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
comment|// dir2Node should contain 2 snapshot diffs, one for s2, and the other was
comment|// originally s1 (created when dir2 was transformed to a snapshottable dir),
comment|// and currently is s0
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dir2DiffList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dList
operator|=
name|dir2DiffList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cList
operator|=
name|dir2DiffList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir2
argument_list|,
literal|"s2"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INodeReference
operator|.
name|WithName
name|fooNode_s2
init|=
operator|(
name|INodeReference
operator|.
name|WithName
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|foo_s2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|dList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fooNode_s2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|fooNode
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
argument_list|,
name|fooNode_s2
operator|.
name|getReferredINode
argument_list|()
argument_list|)
expr_stmt|;
name|restartClusterAndCheckImage
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

