begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This is a unit test, which tests {@link Util#stringAsURI(String)}  * for Windows and Unix style file paths.  */
end_comment

begin_class
DECL|class|TestGetUriFromString
specifier|public
class|class
name|TestGetUriFromString
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestGetUriFromString
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RELATIVE_FILE_PATH
specifier|private
specifier|static
specifier|final
name|String
name|RELATIVE_FILE_PATH
init|=
literal|"relativeFilePath"
decl_stmt|;
DECL|field|ABSOLUTE_PATH_UNIX
specifier|private
specifier|static
specifier|final
name|String
name|ABSOLUTE_PATH_UNIX
init|=
literal|"/tmp/file1"
decl_stmt|;
DECL|field|ABSOLUTE_PATH_WINDOWS
specifier|private
specifier|static
specifier|final
name|String
name|ABSOLUTE_PATH_WINDOWS
init|=
literal|"C:\\Documents and Settings\\All Users"
decl_stmt|;
DECL|field|URI_FILE_SCHEMA
specifier|private
specifier|static
specifier|final
name|String
name|URI_FILE_SCHEMA
init|=
literal|"file"
decl_stmt|;
DECL|field|URI_PATH_UNIX
specifier|private
specifier|static
specifier|final
name|String
name|URI_PATH_UNIX
init|=
literal|"/var/www"
decl_stmt|;
DECL|field|URI_PATH_WINDOWS
specifier|private
specifier|static
specifier|final
name|String
name|URI_PATH_WINDOWS
init|=
literal|"/C:/Documents%20and%20Settings/All%20Users"
decl_stmt|;
DECL|field|URI_UNIX
specifier|private
specifier|static
specifier|final
name|String
name|URI_UNIX
init|=
name|URI_FILE_SCHEMA
operator|+
literal|"://"
operator|+
name|URI_PATH_UNIX
decl_stmt|;
DECL|field|URI_WINDOWS
specifier|private
specifier|static
specifier|final
name|String
name|URI_WINDOWS
init|=
name|URI_FILE_SCHEMA
operator|+
literal|"://"
operator|+
name|URI_PATH_WINDOWS
decl_stmt|;
comment|/**    * Test for a relative path, os independent    * @throws IOException     */
annotation|@
name|Test
DECL|method|testRelativePathAsURI ()
specifier|public
name|void
name|testRelativePathAsURI
parameter_list|()
throws|throws
name|IOException
block|{
name|URI
name|u
init|=
name|Util
operator|.
name|stringAsURI
argument_list|(
name|RELATIVE_FILE_PATH
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uri: "
operator|+
name|u
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for an OS dependent absolute paths.    * @throws IOException     */
annotation|@
name|Test
DECL|method|testAbsolutePathAsURI ()
specifier|public
name|void
name|testAbsolutePathAsURI
parameter_list|()
throws|throws
name|IOException
block|{
name|URI
name|u
init|=
literal|null
decl_stmt|;
name|u
operator|=
name|Util
operator|.
name|stringAsURI
argument_list|(
name|ABSOLUTE_PATH_WINDOWS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Uri should not be null for Windows path"
operator|+
name|ABSOLUTE_PATH_WINDOWS
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_FILE_SCHEMA
argument_list|,
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|u
operator|=
name|Util
operator|.
name|stringAsURI
argument_list|(
name|ABSOLUTE_PATH_UNIX
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Uri should not be null for Unix path"
operator|+
name|ABSOLUTE_PATH_UNIX
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_FILE_SCHEMA
argument_list|,
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for a URI    * @throws IOException     */
annotation|@
name|Test
DECL|method|testURI ()
specifier|public
name|void
name|testURI
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing correct Unix URI: "
operator|+
name|URI_UNIX
argument_list|)
expr_stmt|;
name|URI
name|u
init|=
name|Util
operator|.
name|stringAsURI
argument_list|(
name|URI_UNIX
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uri: "
operator|+
name|u
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Uri should not be null at this point"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_FILE_SCHEMA
argument_list|,
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_PATH_UNIX
argument_list|,
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing correct windows URI: "
operator|+
name|URI_WINDOWS
argument_list|)
expr_stmt|;
name|u
operator|=
name|Util
operator|.
name|stringAsURI
argument_list|(
name|URI_WINDOWS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uri: "
operator|+
name|u
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Uri should not be null at this point"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_FILE_SCHEMA
argument_list|,
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|URI_PATH_WINDOWS
operator|.
name|replace
argument_list|(
literal|"%20"
argument_list|,
literal|" "
argument_list|)
argument_list|,
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

