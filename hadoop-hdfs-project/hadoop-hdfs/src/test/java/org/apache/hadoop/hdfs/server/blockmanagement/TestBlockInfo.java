begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
operator|.
name|INVALID_INODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
operator|.
name|AddBlockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This class provides tests for BlockInfo class, which is used in BlocksMap.  * The test covers BlockList.listMoveToHead, used for faster block report  * processing in DatanodeDescriptor.reportDiff.  */
end_comment

begin_class
DECL|class|TestBlockInfo
specifier|public
class|class
name|TestBlockInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestBlockInfo"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testIsDeleted ()
specifier|public
name|void
name|testIsDeleted
parameter_list|()
block|{
name|BlockInfo
name|blockInfo
init|=
operator|new
name|BlockInfoContiguous
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
name|BlockCollection
name|bc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|blockInfo
operator|.
name|setBlockCollectionId
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|blockInfo
operator|.
name|isDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|blockInfo
operator|.
name|setBlockCollectionId
argument_list|(
name|INVALID_INODE_ID
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockInfo
operator|.
name|isDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddStorage ()
specifier|public
name|void
name|testAddStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockInfo
name|blockInfo
init|=
operator|new
name|BlockInfoContiguous
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeStorageInfo
name|storage
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfo
argument_list|(
literal|"storageID"
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
name|blockInfo
operator|.
name|addStorage
argument_list|(
name|storage
argument_list|,
name|blockInfo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|added
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storage
argument_list|,
name|blockInfo
operator|.
name|getStorageInfo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceStorage ()
specifier|public
name|void
name|testReplaceStorage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create two dummy storages.
specifier|final
name|DatanodeStorageInfo
name|storage1
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfo
argument_list|(
literal|"storageID1"
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeStorageInfo
name|storage2
init|=
operator|new
name|DatanodeStorageInfo
argument_list|(
name|storage1
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
operator|new
name|DatanodeStorage
argument_list|(
literal|"storageID2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|10
decl_stmt|;
name|BlockInfo
index|[]
name|blockInfos
init|=
operator|new
name|BlockInfo
index|[
name|NUM_BLOCKS
index|]
decl_stmt|;
comment|// Create a few dummy blocks and add them to the first storage.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_BLOCKS
condition|;
operator|++
name|i
control|)
block|{
name|blockInfos
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfoContiguous
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|storage1
operator|.
name|addBlock
argument_list|(
name|blockInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Try to move one of the blocks to a different storage.
name|boolean
name|added
init|=
name|storage2
operator|.
name|addBlock
argument_list|(
name|blockInfos
index|[
name|NUM_BLOCKS
operator|/
literal|2
index|]
argument_list|)
operator|==
name|AddBlockResult
operator|.
name|ADDED
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|added
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|blockInfos
index|[
name|NUM_BLOCKS
operator|/
literal|2
index|]
operator|.
name|getStorageInfo
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|storage2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

