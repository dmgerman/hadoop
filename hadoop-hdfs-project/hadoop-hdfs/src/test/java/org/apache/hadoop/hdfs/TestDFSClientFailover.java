begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ConfiguredFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDFSClientFailover
specifier|public
class|class
name|TestDFSClientFailover
block|{
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/failover-test-file"
argument_list|)
decl_stmt|;
DECL|field|FILE_LENGTH_TO_VERIFY
specifier|private
specifier|static
specifier|final
name|int
name|FILE_LENGTH_TO_VERIFY
init|=
literal|100
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCluster ()
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDownCluster ()
specifier|public
name|void
name|tearDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// TODO(HA): This test should probably be made to fail if a client fails over
comment|// to talk to an NN with a different block pool id. Once failover between
comment|// active/standy in a single block pool is implemented, this test should be
comment|// changed to exercise that.
annotation|@
name|Test
DECL|method|testDfsClientFailover ()
specifier|public
name|void
name|testDfsClientFailover
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|InetSocketAddress
name|nnAddr1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|nnAddr2
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
decl_stmt|;
name|ClientProtocol
name|nn1
init|=
name|DFSUtil
operator|.
name|createNamenode
argument_list|(
name|nnAddr1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ClientProtocol
name|nn2
init|=
name|DFSUtil
operator|.
name|createNamenode
argument_list|(
name|nnAddr2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSClient
name|dfsClient1
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|nn1
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DFSClient
name|dfsClient2
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|nn2
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OutputStream
name|out1
init|=
name|dfsClient1
operator|.
name|create
argument_list|(
name|TEST_FILE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OutputStream
name|out2
init|=
name|dfsClient2
operator|.
name|create
argument_list|(
name|TEST_FILE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out1
argument_list|,
literal|0
argument_list|,
name|FILE_LENGTH_TO_VERIFY
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out2
argument_list|,
literal|0
argument_list|,
name|FILE_LENGTH_TO_VERIFY
argument_list|)
expr_stmt|;
name|out1
operator|.
name|close
argument_list|()
expr_stmt|;
name|out2
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
name|FILE_LENGTH_TO_VERIFY
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|AppendTestUtil
operator|.
name|check
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
argument_list|,
name|FILE_LENGTH_TO_VERIFY
argument_list|)
expr_stmt|;
comment|// Check that it functions even if the URL becomes canonicalized
comment|// to include a port number.
name|Path
name|withPort
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://"
operator|+
name|HATestUtil
operator|.
name|getLogicalHostname
argument_list|(
name|cluster
argument_list|)
operator|+
literal|":"
operator|+
name|NameNode
operator|.
name|DEFAULT_PORT
operator|+
literal|"/"
operator|+
name|TEST_FILE
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|withPort
operator|.
name|getFileSystem
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|withPort
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-2683.    */
annotation|@
name|Test
DECL|method|testLogicalUriShouldNotHavePorts ()
specifier|public
name|void
name|testLogicalUriShouldNotHavePorts
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX
operator|+
literal|".foo"
argument_list|,
name|ConfiguredFailoverProxyProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://foo:12345/"
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail with fake FS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"does not use port information"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

