begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
operator|.
name|DeleteOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
operator|.
name|OpInstanceCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This tests data recovery mode for the NameNode.  */
end_comment

begin_class
DECL|class|TestNameNodeRecovery
specifier|public
class|class
name|TestNameNodeRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNameNodeRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recoverStartOpt
specifier|private
specifier|static
name|StartupOption
name|recoverStartOpt
init|=
name|StartupOption
operator|.
name|RECOVER
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|recoverStartOpt
operator|.
name|setForce
argument_list|(
name|MetaRecoveryContext
operator|.
name|FORCE_ALL
argument_list|)
expr_stmt|;
name|EditLogFileOutputStream
operator|.
name|setShouldSkipFsyncForTesting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runEditLogTest (EditLogTestSetup elts)
specifier|static
name|void
name|runEditLogTest
parameter_list|(
name|EditLogTestSetup
name|elts
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|File
name|TEST_LOG_NAME
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test_edit_log"
argument_list|)
decl_stmt|;
specifier|final
name|OpInstanceCache
name|cache
init|=
operator|new
name|OpInstanceCache
argument_list|()
decl_stmt|;
name|EditLogFileOutputStream
name|elfos
init|=
literal|null
decl_stmt|;
name|EditLogFileInputStream
name|elfis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|elfos
operator|=
operator|new
name|EditLogFileOutputStream
argument_list|(
name|TEST_LOG_NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|elfos
operator|.
name|create
argument_list|()
expr_stmt|;
name|elts
operator|.
name|addTransactionsToLog
argument_list|(
name|elfos
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|elfos
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|elfos
operator|.
name|flushAndSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|elfos
operator|.
name|close
argument_list|()
expr_stmt|;
name|elfos
operator|=
literal|null
expr_stmt|;
name|elfis
operator|=
operator|new
name|EditLogFileInputStream
argument_list|(
name|TEST_LOG_NAME
argument_list|)
expr_stmt|;
comment|// reading through normally will get you an exception
name|Set
argument_list|<
name|Long
argument_list|>
name|validTxIds
init|=
name|elts
operator|.
name|getValidTxIds
argument_list|()
decl_stmt|;
name|FSEditLogOp
name|op
init|=
literal|null
decl_stmt|;
name|long
name|prevTxId
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|op
operator|=
name|elfis
operator|.
name|nextOp
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"read txid "
operator|+
name|op
operator|.
name|txid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validTxIds
operator|.
name|contains
argument_list|(
name|op
operator|.
name|getTransactionId
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"read txid "
operator|+
name|op
operator|.
name|getTransactionId
argument_list|()
operator|+
literal|", which we did not expect to find."
argument_list|)
expr_stmt|;
block|}
name|validTxIds
operator|.
name|remove
argument_list|(
name|op
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|prevTxId
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|elts
operator|.
name|getLastValidTxId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"failed to throw IoException as expected"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|elts
operator|.
name|getLastValidTxId
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"expected all transactions to be valid, but got exception "
operator|+
literal|"on txid "
operator|+
name|prevTxId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|prevTxId
argument_list|,
name|elts
operator|.
name|getLastValidTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|elts
operator|.
name|getLastValidTxId
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// let's skip over the bad transaction
name|op
operator|=
literal|null
expr_stmt|;
name|prevTxId
operator|=
literal|0
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|op
operator|=
name|elfis
operator|.
name|nextValidOp
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|prevTxId
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|validTxIds
operator|.
name|remove
argument_list|(
name|op
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"caught IOException while trying to skip over bad "
operator|+
literal|"transaction.   message was "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\nstack trace\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We should have read every valid transaction.
name|assertTrue
argument_list|(
name|validTxIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|elfos
argument_list|,
name|elfis
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A test scenario for the edit log    */
DECL|interface|EditLogTestSetup
specifier|private
interface|interface
name|EditLogTestSetup
block|{
comment|/**       * Set up the edit log.      */
DECL|method|addTransactionsToLog (EditLogOutputStream elos, OpInstanceCache cache)
specifier|abstract
specifier|public
name|void
name|addTransactionsToLog
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|OpInstanceCache
name|cache
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the transaction ID right before the transaction which causes the      * normal edit log loading process to bail out-- or -1 if the first      * transaction should be bad.      */
DECL|method|getLastValidTxId ()
specifier|abstract
specifier|public
name|long
name|getLastValidTxId
parameter_list|()
function_decl|;
comment|/**      * Get the transaction IDs which should exist and be valid in this      * edit log.      **/
DECL|method|getValidTxIds ()
specifier|abstract
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getValidTxIds
parameter_list|()
function_decl|;
block|}
DECL|method|padEditLog (EditLogOutputStream elos, int paddingLength)
specifier|static
name|void
name|padEditLog
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|int
name|paddingLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|paddingLength
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|pad
init|=
name|paddingLength
decl_stmt|;
while|while
condition|(
name|pad
operator|>
literal|0
condition|)
block|{
name|int
name|toWrite
init|=
name|pad
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
name|pad
decl_stmt|;
name|elos
operator|.
name|writeRaw
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|pad
operator|-=
name|toWrite
expr_stmt|;
block|}
block|}
DECL|method|addDeleteOpcode (EditLogOutputStream elos, OpInstanceCache cache)
specifier|static
name|void
name|addDeleteOpcode
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|OpInstanceCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteOp
name|op
init|=
name|DeleteOp
operator|.
name|getInstance
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
literal|0x0
argument_list|)
expr_stmt|;
name|op
operator|.
name|setPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setTimestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|elos
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the scenario where we have an empty edit log.    *    * This class is also useful in testing whether we can correctly handle    * various amounts of padding bytes at the end of the log.  We should be    * able to handle any amount of padding (including no padding) without    * throwing an exception.    */
DECL|class|EltsTestEmptyLog
specifier|private
specifier|static
class|class
name|EltsTestEmptyLog
implements|implements
name|EditLogTestSetup
block|{
DECL|field|paddingLength
specifier|private
name|int
name|paddingLength
decl_stmt|;
DECL|method|EltsTestEmptyLog (int paddingLength)
specifier|public
name|EltsTestEmptyLog
parameter_list|(
name|int
name|paddingLength
parameter_list|)
block|{
name|this
operator|.
name|paddingLength
operator|=
name|paddingLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addTransactionsToLog (EditLogOutputStream elos, OpInstanceCache cache)
specifier|public
name|void
name|addTransactionsToLog
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|OpInstanceCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|padEditLog
argument_list|(
name|elos
argument_list|,
name|paddingLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastValidTxId ()
specifier|public
name|long
name|getLastValidTxId
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getValidTxIds ()
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getValidTxIds
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
return|;
block|}
block|}
comment|/** Test an empty edit log */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testEmptyLog ()
specifier|public
name|void
name|testEmptyLog
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestEmptyLog
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test an empty edit log with padding */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testEmptyPaddedLog ()
specifier|public
name|void
name|testEmptyPaddedLog
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestEmptyLog
argument_list|(
name|EditLogFileOutputStream
operator|.
name|MIN_PREALLOCATION_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test an empty edit log with extra-long padding */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testEmptyExtraPaddedLog ()
specifier|public
name|void
name|testEmptyExtraPaddedLog
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestEmptyLog
argument_list|(
literal|3
operator|*
name|EditLogFileOutputStream
operator|.
name|MIN_PREALLOCATION_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the scenario where an edit log contains some padding (0xff) bytes    * followed by valid opcode data.    *    * These edit logs are corrupt, but all the opcodes should be recoverable    * with recovery mode.    */
DECL|class|EltsTestOpcodesAfterPadding
specifier|private
specifier|static
class|class
name|EltsTestOpcodesAfterPadding
implements|implements
name|EditLogTestSetup
block|{
DECL|field|paddingLength
specifier|private
name|int
name|paddingLength
decl_stmt|;
DECL|method|EltsTestOpcodesAfterPadding (int paddingLength)
specifier|public
name|EltsTestOpcodesAfterPadding
parameter_list|(
name|int
name|paddingLength
parameter_list|)
block|{
name|this
operator|.
name|paddingLength
operator|=
name|paddingLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addTransactionsToLog (EditLogOutputStream elos, OpInstanceCache cache)
specifier|public
name|void
name|addTransactionsToLog
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|OpInstanceCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|padEditLog
argument_list|(
name|elos
argument_list|,
name|paddingLength
argument_list|)
expr_stmt|;
name|addDeleteOpcode
argument_list|(
name|elos
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastValidTxId ()
specifier|public
name|long
name|getLastValidTxId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getValidTxIds ()
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getValidTxIds
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|0L
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testOpcodesAfterPadding ()
specifier|public
name|void
name|testOpcodesAfterPadding
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestOpcodesAfterPadding
argument_list|(
name|EditLogFileOutputStream
operator|.
name|MIN_PREALLOCATION_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testOpcodesAfterExtraPadding ()
specifier|public
name|void
name|testOpcodesAfterExtraPadding
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestOpcodesAfterPadding
argument_list|(
literal|3
operator|*
name|EditLogFileOutputStream
operator|.
name|MIN_PREALLOCATION_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|EltsTestGarbageInEditLog
specifier|private
specifier|static
class|class
name|EltsTestGarbageInEditLog
implements|implements
name|EditLogTestSetup
block|{
DECL|field|BAD_TXID
specifier|final
specifier|private
name|long
name|BAD_TXID
init|=
literal|4
decl_stmt|;
DECL|field|MAX_TXID
specifier|final
specifier|private
name|long
name|MAX_TXID
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|addTransactionsToLog (EditLogOutputStream elos, OpInstanceCache cache)
specifier|public
name|void
name|addTransactionsToLog
parameter_list|(
name|EditLogOutputStream
name|elos
parameter_list|,
name|OpInstanceCache
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|txid
init|=
literal|1
init|;
name|txid
operator|<=
name|MAX_TXID
condition|;
name|txid
operator|++
control|)
block|{
if|if
condition|(
name|txid
operator|==
name|BAD_TXID
condition|)
block|{
name|byte
name|garbage
index|[]
init|=
block|{
literal|0x1
block|,
literal|0x2
block|,
literal|0x3
block|}
decl_stmt|;
name|elos
operator|.
name|writeRaw
argument_list|(
name|garbage
argument_list|,
literal|0
argument_list|,
name|garbage
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DeleteOp
name|op
decl_stmt|;
name|op
operator|=
name|DeleteOp
operator|.
name|getInstance
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|op
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|op
operator|.
name|setPath
argument_list|(
literal|"/foo."
operator|+
name|txid
argument_list|)
expr_stmt|;
name|op
operator|.
name|setTimestamp
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|elos
operator|.
name|write
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getLastValidTxId ()
specifier|public
name|long
name|getLastValidTxId
parameter_list|()
block|{
return|return
name|BAD_TXID
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getValidTxIds ()
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getValidTxIds
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|,
literal|5L
argument_list|,
literal|6L
argument_list|,
literal|7L
argument_list|,
literal|8L
argument_list|,
literal|9L
argument_list|,
literal|10L
argument_list|)
return|;
block|}
block|}
comment|/** Test that we can successfully recover from a situation where there is    * garbage in the middle of the edit log file output stream. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testSkipEdit ()
specifier|public
name|void
name|testSkipEdit
parameter_list|()
throws|throws
name|IOException
block|{
name|runEditLogTest
argument_list|(
operator|new
name|EltsTestGarbageInEditLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * An algorithm for corrupting an edit log.    */
DECL|interface|Corruptor
specifier|static
interface|interface
name|Corruptor
block|{
comment|/*      * Corrupt an edit log file.      *      * @param editFile   The edit log file      */
DECL|method|corrupt (File editFile)
specifier|public
name|void
name|corrupt
parameter_list|(
name|File
name|editFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*      * Explain whether we need to read the log in recovery mode      *      * @param finalized  True if the edit log in question is finalized.      *                   We're a little more lax about reading unfinalized      *                   logs.  We will allow a small amount of garbage at      *                   the end.  In a finalized log, every byte must be      *                   perfect.      *      * @return           Whether we need to read the log in recovery mode      */
DECL|method|needRecovery (boolean finalized)
specifier|public
name|boolean
name|needRecovery
parameter_list|(
name|boolean
name|finalized
parameter_list|)
function_decl|;
comment|/*      * Get the name of this corruptor      *      * @return           The Corruptor name      */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
function_decl|;
block|}
DECL|class|TruncatingCorruptor
specifier|static
class|class
name|TruncatingCorruptor
implements|implements
name|Corruptor
block|{
annotation|@
name|Override
DECL|method|corrupt (File editFile)
specifier|public
name|void
name|corrupt
parameter_list|(
name|File
name|editFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Corrupt the last edit
name|long
name|fileLen
init|=
name|editFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|RandomAccessFile
name|rwf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|editFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|rwf
operator|.
name|setLength
argument_list|(
name|fileLen
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needRecovery (boolean finalized)
specifier|public
name|boolean
name|needRecovery
parameter_list|(
name|boolean
name|finalized
parameter_list|)
block|{
return|return
name|finalized
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"truncated"
return|;
block|}
block|}
DECL|class|PaddingCorruptor
specifier|static
class|class
name|PaddingCorruptor
implements|implements
name|Corruptor
block|{
annotation|@
name|Override
DECL|method|corrupt (File editFile)
specifier|public
name|void
name|corrupt
parameter_list|(
name|File
name|editFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add junk to the end of the file
name|RandomAccessFile
name|rwf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|editFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|rwf
operator|.
name|seek
argument_list|(
name|editFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|129
condition|;
name|i
operator|++
control|)
block|{
name|rwf
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|rwf
operator|.
name|write
argument_list|(
literal|0xd
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|write
argument_list|(
literal|0xe
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|write
argument_list|(
literal|0xa
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|write
argument_list|(
literal|0xd
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needRecovery (boolean finalized)
specifier|public
name|boolean
name|needRecovery
parameter_list|(
name|boolean
name|finalized
parameter_list|)
block|{
comment|// With finalized edit logs, we ignore what's at the end as long as we
comment|// can make it to the correct transaction ID.
comment|// With unfinalized edit logs, the finalization process ignores garbage
comment|// at the end.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"padFatal"
return|;
block|}
block|}
DECL|class|SafePaddingCorruptor
specifier|static
class|class
name|SafePaddingCorruptor
implements|implements
name|Corruptor
block|{
DECL|field|padByte
specifier|private
name|byte
name|padByte
decl_stmt|;
DECL|method|SafePaddingCorruptor (byte padByte)
specifier|public
name|SafePaddingCorruptor
parameter_list|(
name|byte
name|padByte
parameter_list|)
block|{
name|this
operator|.
name|padByte
operator|=
name|padByte
expr_stmt|;
assert|assert
operator|(
operator|(
name|this
operator|.
name|padByte
operator|==
literal|0
operator|)
operator|||
operator|(
name|this
operator|.
name|padByte
operator|==
operator|-
literal|1
operator|)
operator|)
assert|;
block|}
annotation|@
name|Override
DECL|method|corrupt (File editFile)
specifier|public
name|void
name|corrupt
parameter_list|(
name|File
name|editFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add junk to the end of the file
name|RandomAccessFile
name|rwf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|editFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|rwf
operator|.
name|seek
argument_list|(
name|editFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|rwf
operator|.
name|write
argument_list|(
name|padByte
argument_list|)
expr_stmt|;
block|}
name|rwf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needRecovery (boolean finalized)
specifier|public
name|boolean
name|needRecovery
parameter_list|(
name|boolean
name|finalized
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"pad"
operator|+
operator|(
operator|(
name|int
operator|)
name|padByte
operator|)
return|;
block|}
block|}
comment|/**    * Create a test configuration that will exercise the initializeGenericKeys    * code path.  This is a regression test for HDFS-4279.    */
DECL|method|setupRecoveryTestConf (Configuration conf)
specifier|static
name|void
name|setupRecoveryTestConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|MiniDFSCluster
operator|.
name|PROP_TEST_BUILD_DATA
argument_list|,
literal|"build/test/data"
argument_list|)
operator|+
literal|"/dfs/"
decl_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"nameR"
argument_list|)
decl_stmt|;
name|File
name|secondaryDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"namesecondaryR"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|nameDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
literal|"ns1"
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|secondaryDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|nameDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nameDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to make directory "
operator|+
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|secondaryDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|secondaryDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to make directory "
operator|+
name|secondaryDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|testNameNodeRecoveryImpl (Corruptor corruptor, boolean finalize)
specifier|static
name|void
name|testNameNodeRecoveryImpl
parameter_list|(
name|Corruptor
name|corruptor
parameter_list|,
name|boolean
name|finalize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|TEST_PATH
init|=
literal|"/test/path/dir"
decl_stmt|;
specifier|final
name|String
name|TEST_PATH2
init|=
literal|"/second/dir"
decl_stmt|;
specifier|final
name|boolean
name|needRecovery
init|=
name|corruptor
operator|.
name|needRecovery
argument_list|(
name|finalize
argument_list|)
decl_stmt|;
comment|// start a cluster
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|setupRecoveryTestConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|StorageDirectory
name|sd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|finalize
condition|)
block|{
comment|// Normally, the in-progress edit log would be finalized by
comment|// FSEditLog#endCurrentLogSegment.  For testing purposes, we
comment|// disable that here.
name|FSEditLog
name|spyLog
init|=
name|spy
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyLog
argument_list|)
operator|.
name|endCurrentLogSegment
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|setEditLogForTesting
argument_list|(
name|spyLog
argument_list|)
expr_stmt|;
block|}
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_PATH2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|=
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|editFile
init|=
name|FSImageTestUtil
operator|.
name|findLatestEditsLog
argument_list|(
name|sd
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should exist: "
operator|+
name|editFile
argument_list|,
name|editFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Corrupt the edit log
name|LOG
operator|.
name|info
argument_list|(
literal|"corrupting edit log file '"
operator|+
name|editFile
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|corruptor
operator|.
name|corrupt
argument_list|(
name|editFile
argument_list|)
expr_stmt|;
comment|// If needRecovery == true, make sure that we can't start the
comment|// cluster normally before recovery
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"trying to start normally (this should fail)..."
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|enableManagedDfsDirsRedundancy
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|needRecovery
condition|)
block|{
name|fail
argument_list|(
literal|"expected the corrupted edit log to prevent normal startup"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|needRecovery
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got unexpected failure with "
operator|+
name|corruptor
operator|.
name|getName
argument_list|()
operator|+
name|corruptor
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"got unexpected exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Perform NameNode recovery.
comment|// Even if there was nothing wrong previously (needRecovery == false),
comment|// this should still work fine.
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"running recovery..."
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|enableManagedDfsDirsRedundancy
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|recoverStartOpt
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"caught IOException while trying to recover. "
operator|+
literal|"message was "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\nstack trace\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Make sure that we can start the cluster normally after recovery
name|cluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"starting cluster normally after recovery..."
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|enableManagedDfsDirsRedundancy
argument_list|(
literal|false
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully recovered the "
operator|+
name|corruptor
operator|.
name|getName
argument_list|()
operator|+
literal|" corrupted edit log"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed to recover.  Error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Test that we can successfully recover from a situation where the last    * entry in the edit log has been truncated. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRecoverTruncatedEditLog ()
specifier|public
name|void
name|testRecoverTruncatedEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|TruncatingCorruptor
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|TruncatingCorruptor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Test that we can successfully recover from a situation where the last    * entry in the edit log has been padded with garbage. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRecoverPaddedEditLog ()
specifier|public
name|void
name|testRecoverPaddedEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|PaddingCorruptor
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|PaddingCorruptor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Test that don't need to recover from a situation where the last    * entry in the edit log has been padded with 0. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRecoverZeroPaddedEditLog ()
specifier|public
name|void
name|testRecoverZeroPaddedEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|SafePaddingCorruptor
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|SafePaddingCorruptor
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Test that don't need to recover from a situation where the last    * entry in the edit log has been padded with 0xff bytes. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRecoverNegativeOnePaddedEditLog ()
specifier|public
name|void
name|testRecoverNegativeOnePaddedEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|SafePaddingCorruptor
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testNameNodeRecoveryImpl
argument_list|(
operator|new
name|SafePaddingCorruptor
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

