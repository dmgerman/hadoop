begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Simple tests to verify that container persistence works as expected.  */
end_comment

begin_class
DECL|class|TestContainerPersistence
specifier|public
class|class
name|TestContainerPersistence
block|{
DECL|field|path
specifier|static
name|String
name|path
decl_stmt|;
DECL|field|containerManager
specifier|static
name|ContainerManagerImpl
name|containerManager
decl_stmt|;
DECL|field|conf
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|fsDataSet
specifier|static
name|FsDatasetSpi
name|fsDataSet
decl_stmt|;
DECL|field|cluster
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|pathLists
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|pathLists
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|URL
name|p
init|=
name|conf
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|path
operator|=
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|TestContainerPersistence
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_LOCAL_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_LOCAL_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_LOCAL_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_OBJECTSTORE_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_HANDLER_TYPE_KEY
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsDataSet
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
expr_stmt|;
name|containerManager
operator|=
operator|new
name|ContainerManagerImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupPaths ()
specifier|public
name|void
name|setupPaths
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|pathLists
operator|.
name|clear
argument_list|()
expr_stmt|;
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pathLists
operator|.
name|add
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|pathLists
argument_list|,
name|fsDataSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupDir ()
specifier|public
name|void
name|cleanupDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateContainer ()
specifier|public
name|void
name|testCreateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
operator|.
name|ContainerStatus
name|status
init|=
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|get
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getDBPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|containerPathString
init|=
name|ContainerUtils
operator|.
name|getContainerNameFromFile
argument_list|(
operator|new
name|File
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|meta
init|=
name|Paths
operator|.
name|get
argument_list|(
name|containerPathString
argument_list|)
decl_stmt|;
name|String
name|metadataFile
init|=
name|meta
operator|.
name|toString
argument_list|()
operator|+
name|OzoneConsts
operator|.
name|CONTAINER_META
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|metadataFile
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dbPath
init|=
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getDBPath
argument_list|()
decl_stmt|;
name|LevelDBStore
name|store
init|=
literal|null
decl_stmt|;
try|try
block|{
name|store
operator|=
operator|new
name|LevelDBStore
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
operator|.
name|getDB
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateDuplicateContainer ()
specifier|public
name|void
name|testCreateDuplicateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected Exception not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteContainer ()
specifier|public
name|void
name|testDeleteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName1
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|containerName2
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName1
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ContainerData
argument_list|(
name|containerName2
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName2
argument_list|)
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|deleteContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|containerName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let us make sure that we are able to re-use a container name after
comment|// delete.
name|data
operator|=
operator|new
name|ContainerData
argument_list|(
name|containerName1
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// Assert we still have both containers.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test creates 1000 containers and reads them back 5 containers at a    * time and verifies that we did get back all containers.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testListContainer ()
specifier|public
name|void
name|testListContainer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|step
init|=
literal|5
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerData
argument_list|>
name|testMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|put
argument_list|(
name|containerName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|String
name|prevKey
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|ContainerData
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|count
condition|)
block|{
name|containerManager
operator|.
name|listContainer
argument_list|(
name|prevKey
argument_list|,
name|step
argument_list|,
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|testMap
operator|.
name|remove
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|counter
operator|+=
name|step
expr_stmt|;
name|String
name|nextKey
init|=
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
comment|//Assert that container is returning results in a sorted fashion.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|prevKey
operator|.
name|compareTo
argument_list|(
name|nextKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|nextKey
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Assert that we listed all the keys that we had put into
comment|// container.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

