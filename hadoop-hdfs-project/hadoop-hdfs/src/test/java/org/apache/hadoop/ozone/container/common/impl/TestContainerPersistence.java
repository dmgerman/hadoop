begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getChunk
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|setDataChecksum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Simple tests to verify that container persistence works as expected.  */
end_comment

begin_class
DECL|class|TestContainerPersistence
specifier|public
class|class
name|TestContainerPersistence
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
specifier|static
name|String
name|path
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|static
name|ContainerManagerImpl
name|containerManager
decl_stmt|;
DECL|field|chunkManager
specifier|private
specifier|static
name|ChunkManagerImpl
name|chunkManager
decl_stmt|;
DECL|field|keyManager
specifier|private
specifier|static
name|KeyManagerImpl
name|keyManager
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|pathLists
specifier|private
specifier|static
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|pathLists
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Throwable
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|URL
name|p
init|=
name|conf
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|path
operator|=
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|concat
argument_list|(
name|TestContainerPersistence
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|File
name|containerDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|containerManager
operator|=
operator|new
name|ContainerManagerImpl
argument_list|()
expr_stmt|;
name|chunkManager
operator|=
operator|new
name|ChunkManagerImpl
argument_list|(
name|containerManager
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|setChunkManager
argument_list|(
name|chunkManager
argument_list|)
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|containerManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|setKeyManager
argument_list|(
name|keyManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupPaths ()
specifier|public
name|void
name|setupPaths
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|exists
argument_list|()
operator|&&
operator|!
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create paths. "
operator|+
name|path
argument_list|)
throw|;
block|}
name|pathLists
operator|.
name|clear
argument_list|()
expr_stmt|;
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pathLists
operator|.
name|add
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|pathLists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupDir ()
specifier|public
name|void
name|cleanupDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateContainer ()
specifier|public
name|void
name|testCreateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerManagerImpl
operator|.
name|ContainerStatus
name|status
init|=
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|get
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getDBPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|meta
init|=
name|Paths
operator|.
name|get
argument_list|(
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getDBPath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dbPath
init|=
name|status
operator|.
name|getContainer
argument_list|()
operator|.
name|getDBPath
argument_list|()
decl_stmt|;
name|LevelDBStore
name|store
init|=
literal|null
decl_stmt|;
try|try
block|{
name|store
operator|=
operator|new
name|LevelDBStore
argument_list|(
operator|new
name|File
argument_list|(
name|dbPath
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
operator|.
name|getDB
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateDuplicateContainer ()
specifier|public
name|void
name|testCreateDuplicateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected Exception not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteContainer ()
specifier|public
name|void
name|testDeleteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName1
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|containerName2
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName1
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName1
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|closeContainer
argument_list|(
name|containerName1
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ContainerData
argument_list|(
name|containerName2
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName2
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|closeContainer
argument_list|(
name|containerName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName2
argument_list|)
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|deleteContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName1
argument_list|)
argument_list|,
name|containerName1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let us make sure that we are able to re-use a container name after
comment|// delete.
name|data
operator|=
operator|new
name|ContainerData
argument_list|(
name|containerName1
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName1
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|closeContainer
argument_list|(
name|containerName1
argument_list|)
expr_stmt|;
comment|// Assert we still have both containers.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add some key to a container and then delete.
comment|// Delete should fail because the container is no longer empty.
name|KeyData
name|someKey
init|=
operator|new
name|KeyData
argument_list|(
name|containerName1
argument_list|,
literal|"someKey"
argument_list|)
decl_stmt|;
name|someKey
operator|.
name|setChunks
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName1
argument_list|)
argument_list|,
name|someKey
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Container cannot be deleted because it is not empty."
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|deleteContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName1
argument_list|)
argument_list|,
name|containerName1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReports ()
specifier|public
name|void
name|testGetContainerReports
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|containerNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// Close a bunch of containers.
comment|// Put closed container names to a list.
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|containerManager
operator|.
name|closeContainer
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|containerNames
operator|.
name|add
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The container report only returns reports of closed containers.
name|List
argument_list|<
name|ContainerData
argument_list|>
name|reports
init|=
name|containerManager
operator|.
name|getContainerReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|reports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerData
name|report
range|:
name|reports
control|)
block|{
name|String
name|actualName
init|=
name|report
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerNames
operator|.
name|remove
argument_list|(
name|actualName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test creates 1000 containers and reads them back 5 containers at a    * time and verifies that we did get back all containers.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testListContainer ()
specifier|public
name|void
name|testListContainer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|step
init|=
literal|5
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerData
argument_list|>
name|testMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|put
argument_list|(
name|containerName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|String
name|prevKey
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|ContainerData
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|count
condition|)
block|{
name|containerManager
operator|.
name|listContainer
argument_list|(
literal|null
argument_list|,
name|step
argument_list|,
name|prevKey
argument_list|,
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|testMap
operator|.
name|remove
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|counter
operator|+=
name|step
expr_stmt|;
name|String
name|nextKey
init|=
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
comment|//Assert that container is returning results in a sorted fashion.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|prevKey
operator|.
name|compareTo
argument_list|(
name|nextKey
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|nextKey
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Assert that we listed all the keys that we had put into
comment|// container.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeChunkHelper (String containerName, String keyName, Pipeline pipeline)
specifier|private
name|ChunkInfo
name|writeChunkHelper
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ContainerData
name|cData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName
argument_list|)
condition|)
block|{
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
block|}
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Writes a single chunk.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testWriteChunk ()
specifier|public
name|void
name|testWriteChunk
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes many chunks of the same key into different chunk files and verifies    * that we have that data in many files.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testWritReadManyChunks ()
specifier|public
name|void
name|testWritReadManyChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|chunkCount
init|=
literal|1024
decl_stmt|;
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ChunkInfo
argument_list|>
name|fileHashMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ContainerData
name|cData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.%d"
argument_list|,
name|keyName
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|fileHashMap
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|ContainerData
name|cNewData
init|=
name|containerManager
operator|.
name|readContainer
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cNewData
argument_list|)
expr_stmt|;
name|Path
name|dataDir
init|=
name|ContainerUtils
operator|.
name|getDataDirectory
argument_list|(
name|cNewData
argument_list|)
decl_stmt|;
name|String
name|globFormat
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.*"
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|MessageDigest
name|sha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
comment|// Read chunk via file system and verify.
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dataDir
argument_list|,
name|globFormat
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|fname
range|:
name|stream
control|)
block|{
name|sha
operator|.
name|update
argument_list|(
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|fname
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileHashMap
operator|.
name|get
argument_list|(
name|fname
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chunkCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Read chunk via ReadChunk call.
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|fileName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.%d"
argument_list|,
name|keyName
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|fileHashMap
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|sha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes a single chunk and tries to overwrite that chunk without over write    * flag then re-tries with overwrite flag.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testOverWrite ()
specifier|public
name|void
name|testOverWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ContainerData
name|cData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Rejecting write chunk request. OverWrite flag required."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// With the overwrite flag it should work now.
name|info
operator|.
name|addMetadata
argument_list|(
name|OzoneConsts
operator|.
name|CHUNK_OVERWRITE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test writes data as many small writes and tries to read back the data    * in a single large read.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testMultipleWriteSingleRead ()
specifier|public
name|void
name|testMultipleWriteSingleRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|chunkCount
init|=
literal|1024
decl_stmt|;
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ContainerData
name|cData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
name|MessageDigest
name|oldSha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
comment|// we are writing to the same chunk file but at different offsets.
name|long
name|offset
init|=
name|x
operator|*
name|datalen
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|oldSha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|// Request to read the whole data in a single go.
name|ChunkInfo
name|largeChunk
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
operator|*
name|chunkCount
argument_list|)
decl_stmt|;
name|byte
index|[]
name|newdata
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|largeChunk
argument_list|)
decl_stmt|;
name|MessageDigest
name|newSha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|newSha
operator|.
name|update
argument_list|(
name|newdata
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|oldSha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|newSha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes a chunk and deletes it, re-reads to make sure it is gone.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteChunk ()
specifier|public
name|void
name|testDeleteChunk
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|ContainerData
name|cData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|cData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|deleteChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the chunk file."
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a put key and read key.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testPutKey ()
specifier|public
name|void
name|testPutKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|pipeline
argument_list|,
name|keyData
argument_list|)
expr_stmt|;
name|KeyData
name|readKeyData
init|=
name|keyManager
operator|.
name|getKey
argument_list|(
name|keyData
argument_list|)
decl_stmt|;
name|ChunkInfo
name|readChunk
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|readKeyData
operator|.
name|getChunks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|readChunk
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a put key and read key.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testPutKeyWithLotsOfChunks ()
specifier|public
name|void
name|testPutKeyWithLotsOfChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|chunkCount
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|info
operator|=
name|getChunk
argument_list|(
name|keyName
argument_list|,
name|x
argument_list|,
name|x
operator|*
name|datalen
argument_list|,
name|datalen
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkProtoList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChunkInfo
name|i
range|:
name|chunkList
control|)
block|{
name|chunkProtoList
operator|.
name|add
argument_list|(
name|i
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyData
operator|.
name|setChunks
argument_list|(
name|chunkProtoList
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|pipeline
argument_list|,
name|keyData
argument_list|)
expr_stmt|;
name|KeyData
name|readKeyData
init|=
name|keyManager
operator|.
name|getKey
argument_list|(
name|keyData
argument_list|)
decl_stmt|;
name|ChunkInfo
name|lastChunk
init|=
name|chunkList
operator|.
name|get
argument_list|(
name|chunkList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ChunkInfo
name|readChunk
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|readKeyData
operator|.
name|getChunks
argument_list|()
operator|.
name|get
argument_list|(
name|readKeyData
operator|.
name|getChunks
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|lastChunk
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|readChunk
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes a key and tries to read it back.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|pipeline
argument_list|,
name|keyData
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the key."
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|getKey
argument_list|(
name|keyData
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to Deletes a key twice.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteKeyTwice ()
specifier|public
name|void
name|testDeleteKeyTwice
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|pipeline
argument_list|,
name|keyData
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the key."
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to update an existing and non-existing container.    * Verifies container map and persistent data both updated.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testUpdateContainer ()
specifier|public
name|void
name|testUpdateContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|containerName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|ContainerData
name|data
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|createContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|File
name|orgContainerFile
init|=
name|containerManager
operator|.
name|getContainerFile
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|orgContainerFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerData
name|newData
init|=
operator|new
name|ContainerData
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|newData
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire_new"
argument_list|)
expr_stmt|;
name|newData
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo_new"
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|updateContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
argument_list|,
name|containerName
argument_list|,
name|newData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify in-memory map
name|ContainerData
name|actualNewData
init|=
name|containerManager
operator|.
name|getContainerMap
argument_list|()
operator|.
name|get
argument_list|(
name|containerName
argument_list|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualNewData
operator|.
name|getAllMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|,
literal|"shire_new"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualNewData
operator|.
name|getAllMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"owner)"
argument_list|)
argument_list|,
literal|"bilbo_new"
argument_list|)
expr_stmt|;
comment|// Verify container data on disk
name|File
name|newContainerFile
init|=
name|containerManager
operator|.
name|getContainerFile
argument_list|(
name|actualNewData
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Container file should exist."
argument_list|,
name|newContainerFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Container file should be in same location."
argument_list|,
name|orgContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|newContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|newIn
init|=
operator|new
name|FileInputStream
argument_list|(
name|newContainerFile
argument_list|)
init|)
block|{
name|ContainerProtos
operator|.
name|ContainerData
name|actualContainerDataProto
init|=
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|parseDelimitedFrom
argument_list|(
name|newIn
argument_list|)
decl_stmt|;
name|ContainerData
name|actualContainerData
init|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|actualContainerDataProto
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualContainerData
operator|.
name|getAllMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|,
literal|"shire_new"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actualContainerData
operator|.
name|getAllMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"owner)"
argument_list|)
argument_list|,
literal|"bilbo_new"
argument_list|)
expr_stmt|;
block|}
comment|// Update a non-existing container
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Container doesn't exist."
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|updateContainer
argument_list|(
name|createSingleNodePipeline
argument_list|(
literal|"non_exist_container"
argument_list|)
argument_list|,
literal|"non_exist_container"
argument_list|,
name|newData
argument_list|)
expr_stmt|;
block|}
DECL|method|writeKeyHelper (Pipeline pipeline, String containerName, String keyName)
specifier|private
name|KeyData
name|writeKeyHelper
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|String
name|containerName
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
return|return
name|keyData
return|;
block|}
annotation|@
name|Test
DECL|method|testListKey ()
specifier|public
name|void
name|testListKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
init|=
literal|"c-0"
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
literal|"k"
operator|+
name|i
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|KeyData
name|kd
init|=
name|writeKeyHelper
argument_list|(
name|pipeline
argument_list|,
name|containerName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|keyManager
operator|.
name|putKey
argument_list|(
name|pipeline
argument_list|,
name|kd
argument_list|)
expr_stmt|;
block|}
comment|// List all keys
name|List
argument_list|<
name|KeyData
argument_list|>
name|result
init|=
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|KeyData
name|data
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerName
argument_list|,
name|data
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|data
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|// List key with prefix
name|result
operator|=
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|"k1"
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// There is only one key with prefix k1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedKeys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// List key with preKev filter
name|String
name|k6
init|=
name|expectedKeys
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|result
operator|=
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|null
argument_list|,
name|k6
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|7
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
operator|-
literal|7
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// List key with both prefix and preKey filter
name|String
name|k7
init|=
name|expectedKeys
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|result
operator|=
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|"k3"
argument_list|,
name|k7
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// k3 is after k7, enhance we get an empty result
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set a pretty small cap for the key count
name|result
operator|=
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Count must be>0
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Count must be a positive number."
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|listKey
argument_list|(
name|pipeline
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

