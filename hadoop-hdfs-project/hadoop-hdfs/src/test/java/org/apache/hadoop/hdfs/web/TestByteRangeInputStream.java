begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|CALLS_REAL_METHODS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|ByteRangeInputStream
operator|.
name|InputStreamAndFileLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_class
DECL|class|TestByteRangeInputStream
specifier|public
class|class
name|TestByteRangeInputStream
block|{
DECL|class|ByteRangeInputStreamImpl
specifier|private
class|class
name|ByteRangeInputStreamImpl
extends|extends
name|ByteRangeInputStream
block|{
DECL|method|ByteRangeInputStreamImpl (URLOpener o, URLOpener r)
specifier|public
name|ByteRangeInputStreamImpl
parameter_list|(
name|URLOpener
name|o
parameter_list|,
name|URLOpener
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|o
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResolvedUrl (HttpURLConnection connection)
specifier|protected
name|URL
name|getResolvedUrl
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|URL
argument_list|(
literal|"http://resolvedurl/"
argument_list|)
return|;
block|}
block|}
DECL|method|getMockURLOpener (URL url)
specifier|private
name|ByteRangeInputStream
operator|.
name|URLOpener
name|getMockURLOpener
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteRangeInputStream
operator|.
name|URLOpener
name|opener
init|=
name|mock
argument_list|(
name|ByteRangeInputStream
operator|.
name|URLOpener
operator|.
name|class
argument_list|,
name|CALLS_REAL_METHODS
argument_list|)
decl_stmt|;
name|opener
operator|.
name|setURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|getMockConnection
argument_list|(
literal|"65535"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|opener
argument_list|)
operator|.
name|connect
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|opener
return|;
block|}
DECL|method|getMockConnection (String length)
specifier|private
name|HttpURLConnection
name|getMockConnection
parameter_list|(
name|String
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|mockConnection
init|=
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"asdf"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockConnection
argument_list|)
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|length
argument_list|)
operator|.
name|when
argument_list|(
name|mockConnection
argument_list|)
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|)
expr_stmt|;
return|return
name|mockConnection
return|;
block|}
annotation|@
name|Test
DECL|method|testByteRange ()
specifier|public
name|void
name|testByteRange
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteRangeInputStream
operator|.
name|URLOpener
name|oMock
init|=
name|getMockURLOpener
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://test"
argument_list|)
argument_list|)
decl_stmt|;
name|ByteRangeInputStream
operator|.
name|URLOpener
name|rMock
init|=
name|getMockURLOpener
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ByteRangeInputStream
name|bris
init|=
operator|new
name|ByteRangeInputStreamImpl
argument_list|(
name|oMock
argument_list|,
name|rMock
argument_list|)
decl_stmt|;
name|bris
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos wrong"
argument_list|,
literal|0
argument_list|,
name|bris
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Initial call made incorrectly (offset check)"
argument_list|,
literal|0
argument_list|,
name|bris
operator|.
name|startPos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should return 1 after reading one byte"
argument_list|,
literal|1
argument_list|,
name|bris
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|oMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|connect
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should return 2 after reading two bytes"
argument_list|,
literal|2
argument_list|,
name|bris
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// No additional connections should have been made (no seek)
name|verify
argument_list|(
name|oMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|connect
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rMock
operator|.
name|setURL
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://resolvedurl/"
argument_list|)
argument_list|)
expr_stmt|;
name|bris
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seek to 100 bytes made incorrectly (offset Check)"
argument_list|,
literal|100
argument_list|,
name|bris
operator|.
name|startPos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPos should return 101 after reading one byte"
argument_list|,
literal|101
argument_list|,
name|bris
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|connect
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bris
operator|.
name|seek
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// Seek to 101 should not result in another request
name|verify
argument_list|(
name|rMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|connect
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rMock
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|connect
argument_list|(
literal|101
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bris
operator|.
name|seek
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Seek to 2500 bytes made incorrectly (offset Check)"
argument_list|,
literal|2500
argument_list|,
name|bris
operator|.
name|startPos
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|getMockConnection
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|rMock
argument_list|)
operator|.
name|connect
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|bris
operator|.
name|seek
argument_list|(
literal|500
argument_list|)
expr_stmt|;
try|try
block|{
name|bris
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown when content-length is not given"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect response message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
operator|+
literal|" is missing: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropagatedClose ()
specifier|public
name|void
name|testPropagatedClose
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteRangeInputStream
name|bris
init|=
name|mock
argument_list|(
name|ByteRangeInputStream
operator|.
name|class
argument_list|,
name|CALLS_REAL_METHODS
argument_list|)
decl_stmt|;
name|InputStreamAndFileLength
name|mockStream
init|=
operator|new
name|InputStreamAndFileLength
argument_list|(
literal|1L
argument_list|,
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|mockStream
argument_list|)
operator|.
name|when
argument_list|(
name|bris
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|bris
argument_list|,
literal|"status"
argument_list|,
name|ByteRangeInputStream
operator|.
name|StreamStatus
operator|.
name|SEEK
argument_list|)
expr_stmt|;
name|int
name|brisOpens
init|=
literal|0
decl_stmt|;
name|int
name|brisCloses
init|=
literal|0
decl_stmt|;
name|int
name|isCloses
init|=
literal|0
decl_stmt|;
comment|// first open, shouldn't close underlying stream
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
operator|++
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// stream is open, shouldn't close underlying stream
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// seek forces a reopen, should close underlying stream
name|bris
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
operator|++
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
operator|++
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that the underlying stream isn't closed after a seek
comment|// ie. the state was correctly updated
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// seeking to same location should be a no-op
name|bris
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close should of course close
name|bris
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
operator|++
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
operator|++
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// it's already closed, underlying stream should not close
name|bris
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
operator|++
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// it's closed, don't reopen it
name|boolean
name|errored
init|=
literal|false
decl_stmt|;
try|try
block|{
name|bris
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|errored
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stream closed"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Read a closed steam"
argument_list|,
name|errored
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisOpens
argument_list|)
argument_list|)
operator|.
name|openInputStream
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bris
argument_list|,
name|times
argument_list|(
name|brisCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockStream
operator|.
name|in
argument_list|,
name|times
argument_list|(
name|isCloses
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

