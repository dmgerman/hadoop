begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LastBlockWithStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|FailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRetryCacheWithHA
specifier|public
class|class
name|TestRetryCacheWithHA
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRetryCacheWithHA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BlockSize
specifier|private
specifier|static
specifier|final
name|int
name|BlockSize
init|=
literal|1024
decl_stmt|;
DECL|field|DataNodes
specifier|private
specifier|static
specifier|final
name|short
name|DataNodes
init|=
literal|3
decl_stmt|;
DECL|field|CHECKTIMES
specifier|private
specifier|static
specifier|final
name|int
name|CHECKTIMES
init|=
literal|10
decl_stmt|;
DECL|field|ResponseSize
specifier|private
specifier|static
specifier|final
name|int
name|ResponseSize
init|=
literal|3
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|/**     * A dummy invocation handler extending RetryInvocationHandler. We can use    * a boolean flag to control whether the method invocation succeeds or not.     */
DECL|class|DummyRetryInvocationHandler
specifier|private
specifier|static
class|class
name|DummyRetryInvocationHandler
extends|extends
name|RetryInvocationHandler
argument_list|<
name|ClientProtocol
argument_list|>
block|{
DECL|field|block
specifier|static
specifier|final
name|AtomicBoolean
name|block
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|DummyRetryInvocationHandler ( FailoverProxyProvider<ClientProtocol> proxyProvider, RetryPolicy retryPolicy)
name|DummyRetryInvocationHandler
parameter_list|(
name|FailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|proxyProvider
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invokeMethod (Method method, Object[] args)
specifier|protected
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|result
init|=
name|super
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"Fake Exception"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES
argument_list|,
name|ResponseSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
name|ResponseSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// setup the configuration
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * 1. Run a set of operations    * 2. Trigger the NN failover    * 3. Check the retry cache on the original standby NN    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRetryCacheOnStandbyNN ()
specifier|public
name|void
name|testRetryCacheOnStandbyNN
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. run operations
name|DFSTestUtil
operator|.
name|runOperations
argument_list|(
name|cluster
argument_list|,
name|dfs
argument_list|,
name|conf
argument_list|,
name|BlockSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check retry cache in NN1
name|FSNamesystem
name|fsn0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|cacheSet
init|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|fsn0
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|oldEntries
init|=
operator|new
name|HashMap
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CacheEntry
argument_list|>
name|iter
init|=
name|cacheSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|oldEntries
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// 2. Failover the current standby to active.
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 3. check the retry cache on the new active NN
name|FSNamesystem
name|fsn1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cacheSet
operator|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|fsn1
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|cacheSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|oldEntries
operator|.
name|containsKey
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|genClientWithDummyHandler ()
specifier|private
name|DFSClient
name|genClientWithDummyHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|URI
name|nnUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|FailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|failoverProxyProvider
init|=
name|NameNodeProxies
operator|.
name|createFailoverProxyProvider
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|InvocationHandler
name|dummyHandler
init|=
operator|new
name|DummyRetryInvocationHandler
argument_list|(
name|failoverProxyProvider
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|SLEEPTIME_BASE_DEFAULT
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|SLEEPTIME_MAX_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy
init|=
operator|(
name|ClientProtocol
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|failoverProxyProvider
operator|.
name|getInterface
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ClientProtocol
operator|.
name|class
block|}
argument_list|,
name|dummyHandler
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|proxy
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|client
return|;
block|}
DECL|class|AtMostOnceOp
specifier|abstract
class|class
name|AtMostOnceOp
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|client
specifier|final
name|DFSClient
name|client
decl_stmt|;
DECL|field|expectedUpdateCount
name|int
name|expectedUpdateCount
init|=
literal|0
decl_stmt|;
DECL|method|AtMostOnceOp (String name, DFSClient client)
name|AtMostOnceOp
parameter_list|(
name|String
name|name
parameter_list|,
name|DFSClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|prepare ()
specifier|abstract
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|invoke ()
specifier|abstract
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|checkNamenodeBeforeReturn ()
specifier|abstract
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|getResult ()
specifier|abstract
name|Object
name|getResult
parameter_list|()
function_decl|;
DECL|method|getExpectedCacheUpdateCount ()
name|int
name|getExpectedCacheUpdateCount
parameter_list|()
block|{
return|return
name|expectedUpdateCount
return|;
block|}
block|}
comment|/** createSnapshot operaiton */
DECL|class|CreateSnapshotOp
class|class
name|CreateSnapshotOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|snapshotPath
specifier|private
name|String
name|snapshotPath
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|snapshotName
specifier|private
specifier|final
name|String
name|snapshotName
decl_stmt|;
DECL|method|CreateSnapshotOp (DFSClient client, String dir, String snapshotName)
name|CreateSnapshotOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|super
argument_list|(
literal|"createSnapshot"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|snapshotPath
operator|=
name|client
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|boolean
name|snapshotCreated
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|snapshotCreated
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|snapshotCreated
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotCreated
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|snapshotPath
return|;
block|}
block|}
comment|/** deleteSnapshot */
DECL|class|DeleteSnapshotOp
class|class
name|DeleteSnapshotOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|dir
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|snapshotName
specifier|private
specifier|final
name|String
name|snapshotName
decl_stmt|;
DECL|method|DeleteSnapshotOp (DFSClient client, String dir, String snapshotName)
name|DeleteSnapshotOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|super
argument_list|(
literal|"deleteSnapshot"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|snapshotName
operator|=
name|snapshotName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
name|Path
name|sPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|dirPath
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|dirPath
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|boolean
name|snapshotNotDeleted
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
name|snapshotNotDeleted
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|snapshotNotDeleted
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|snapshotNotDeleted
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** renameSnapshot */
DECL|class|RenameSnapshotOp
class|class
name|RenameSnapshotOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|dir
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|oldName
specifier|private
specifier|final
name|String
name|oldName
decl_stmt|;
DECL|field|newName
specifier|private
specifier|final
name|String
name|newName
decl_stmt|;
DECL|method|RenameSnapshotOp (DFSClient client, String dir, String oldName, String newName)
name|RenameSnapshotOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|super
argument_list|(
literal|"renameSnapshot"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
name|Path
name|sPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|dirPath
argument_list|,
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|dirPath
argument_list|,
name|oldName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|sPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|boolean
name|snapshotRenamed
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|snapshotRenamed
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|snapshotRenamed
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|sPath
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotRenamed
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** create file operation (without OverWrite) */
DECL|class|CreateOp
class|class
name|CreateOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|status
specifier|private
name|HdfsFileStatus
name|status
decl_stmt|;
DECL|method|CreateOp (DFSClient client, String fileName)
name|CreateOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|super
argument_list|(
literal|"create"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|fileParent
init|=
name|filePath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|fileParent
argument_list|)
condition|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|fileParent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|this
operator|.
name|status
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|client
operator|.
name|getClientName
argument_list|()
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|createFlag
argument_list|)
argument_list|,
literal|false
argument_list|,
name|DataNodes
argument_list|,
name|BlockSize
argument_list|,
operator|new
name|CryptoProtocolVersion
index|[]
block|{
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|boolean
name|fileCreated
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|fileCreated
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|fileCreated
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
return|return
name|fileCreated
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
comment|/** append operation */
DECL|class|AppendOp
class|class
name|AppendOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|lbk
specifier|private
name|LastBlockWithStatus
name|lbk
decl_stmt|;
DECL|method|AppendOp (DFSClient client, String fileName)
name|AppendOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|super
argument_list|(
literal|"append"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BlockSize
operator|/
literal|2
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|lbk
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|append
argument_list|(
name|fileName
argument_list|,
name|client
operator|.
name|getClientName
argument_list|()
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if the inode of the file is under construction
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|INodeFile
name|fileNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|fileName
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|boolean
name|fileIsUC
init|=
name|fileNode
operator|.
name|isUnderConstruction
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|fileIsUC
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|fileNode
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|fileName
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|fileIsUC
operator|=
name|fileNode
operator|.
name|isUnderConstruction
argument_list|()
expr_stmt|;
block|}
return|return
name|fileIsUC
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|lbk
return|;
block|}
block|}
comment|/** rename */
DECL|class|RenameOp
class|class
name|RenameOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|oldName
specifier|private
specifier|final
name|String
name|oldName
decl_stmt|;
DECL|field|newName
specifier|private
specifier|final
name|String
name|newName
decl_stmt|;
DECL|field|renamed
specifier|private
name|boolean
name|renamed
decl_stmt|;
DECL|method|RenameOp (DFSClient client, String oldName, String newName)
name|RenameOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|super
argument_list|(
literal|"rename"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|renamed
operator|=
name|client
operator|.
name|rename
argument_list|(
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|newName
argument_list|)
decl_stmt|;
name|boolean
name|renamed
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|renamed
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|renamed
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
return|return
name|renamed
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|renamed
argument_list|)
return|;
block|}
block|}
comment|/** rename2 */
DECL|class|Rename2Op
class|class
name|Rename2Op
extends|extends
name|AtMostOnceOp
block|{
DECL|field|oldName
specifier|private
specifier|final
name|String
name|oldName
decl_stmt|;
DECL|field|newName
specifier|private
specifier|final
name|String
name|newName
decl_stmt|;
DECL|method|Rename2Op (DFSClient client, String oldName, String newName)
name|Rename2Op
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|oldName
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|super
argument_list|(
literal|"rename2"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldName
operator|=
name|oldName
expr_stmt|;
name|this
operator|.
name|newName
operator|=
name|newName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|rename
argument_list|(
name|oldName
argument_list|,
name|newName
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|newName
argument_list|)
decl_stmt|;
name|boolean
name|renamed
init|=
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|renamed
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|renamed
operator|=
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
return|return
name|renamed
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** concat */
DECL|class|ConcatOp
class|class
name|ConcatOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|target
specifier|private
specifier|final
name|String
name|target
decl_stmt|;
DECL|field|srcs
specifier|private
specifier|final
name|String
index|[]
name|srcs
decl_stmt|;
DECL|field|srcPaths
specifier|private
specifier|final
name|Path
index|[]
name|srcPaths
decl_stmt|;
DECL|method|ConcatOp (DFSClient client, Path target, int numSrc)
name|ConcatOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|Path
name|target
parameter_list|,
name|int
name|numSrc
parameter_list|)
block|{
name|super
argument_list|(
literal|"concat"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|srcs
operator|=
operator|new
name|String
index|[
name|numSrc
index|]
expr_stmt|;
name|this
operator|.
name|srcPaths
operator|=
operator|new
name|Path
index|[
name|numSrc
index|]
expr_stmt|;
name|Path
name|parent
init|=
name|target
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSrc
condition|;
name|i
operator|++
control|)
block|{
name|srcPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"srcfile"
operator|+
name|i
argument_list|)
expr_stmt|;
name|srcs
index|[
name|i
index|]
operator|=
name|srcPaths
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|targetPath
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|srcPaths
index|[
name|i
index|]
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|BlockSize
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
name|BlockSize
operator|*
operator|(
name|srcs
operator|.
name|length
operator|+
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|done
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|done
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetPath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
name|BlockSize
operator|*
operator|(
name|srcs
operator|.
name|length
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|done
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** delete */
DECL|class|DeleteOp
class|class
name|DeleteOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|target
specifier|private
specifier|final
name|String
name|target
decl_stmt|;
DECL|field|deleted
specifier|private
name|boolean
name|deleted
decl_stmt|;
DECL|method|DeleteOp (DFSClient client, String target)
name|DeleteOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|super
argument_list|(
literal|"delete"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|deleted
operator|=
name|client
operator|.
name|delete
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|boolean
name|del
init|=
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
operator|!
name|del
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|del
operator|=
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
return|return
name|del
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|deleted
argument_list|)
return|;
block|}
block|}
comment|/** createSymlink */
DECL|class|CreateSymlinkOp
class|class
name|CreateSymlinkOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|target
specifier|private
specifier|final
name|String
name|target
decl_stmt|;
DECL|field|link
specifier|private
specifier|final
name|String
name|link
decl_stmt|;
DECL|method|CreateSymlinkOp (DFSClient client, String target, String link)
specifier|public
name|CreateSymlinkOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|)
block|{
name|super
argument_list|(
literal|"createSymlink"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|linkPath
init|=
operator|new
name|Path
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|FileStatus
name|linkStatus
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
name|linkStatus
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|linkStatus
operator|=
name|dfs
operator|.
name|getFileLinkStatus
argument_list|(
name|linkPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
comment|// Ignoring, this can be legitimate.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|linkStatus
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** updatePipeline */
DECL|class|UpdatePipelineOp
class|class
name|UpdatePipelineOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|file
specifier|private
specifier|final
name|String
name|file
decl_stmt|;
DECL|field|oldBlock
specifier|private
name|ExtendedBlock
name|oldBlock
decl_stmt|;
DECL|field|newBlock
specifier|private
name|ExtendedBlock
name|newBlock
decl_stmt|;
DECL|field|nodes
specifier|private
name|DatanodeInfo
index|[]
name|nodes
decl_stmt|;
DECL|field|out
specifier|private
name|FSDataOutputStream
name|out
decl_stmt|;
DECL|method|UpdatePipelineOp (DFSClient client, String file)
specifier|public
name|UpdatePipelineOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|super
argument_list|(
literal|"updatePipeline"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// append to the file and leave the last block under construction
name|out
operator|=
name|this
operator|.
name|client
operator|.
name|append
argument_list|(
name|file
argument_list|,
name|BlockSize
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|appendContent
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|appendContent
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|appendContent
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HdfsDataOutputStream
operator|)
name|out
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|blks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
name|BlockSize
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|oldBlock
operator|=
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|LocatedBlock
name|newLbk
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|updateBlockForPipeline
argument_list|(
name|oldBlock
argument_list|,
name|client
operator|.
name|getClientName
argument_list|()
argument_list|)
decl_stmt|;
name|newBlock
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|oldBlock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|newLbk
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeInfo
index|[]
name|newNodes
init|=
operator|new
name|DatanodeInfo
index|[
literal|2
index|]
decl_stmt|;
name|newNodes
index|[
literal|0
index|]
operator|=
name|nodes
index|[
literal|0
index|]
expr_stmt|;
name|newNodes
index|[
literal|1
index|]
operator|=
name|nodes
index|[
literal|1
index|]
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|String
name|storageID1
init|=
name|dm
operator|.
name|getDatanode
argument_list|(
name|newNodes
index|[
literal|0
index|]
argument_list|)
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStorageID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|storageID2
init|=
name|dm
operator|.
name|getDatanode
argument_list|(
name|newNodes
index|[
literal|1
index|]
argument_list|)
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStorageID
argument_list|()
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
block|{
name|storageID1
block|,
name|storageID2
block|}
decl_stmt|;
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|updatePipeline
argument_list|(
name|client
operator|.
name|getClientName
argument_list|()
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|,
name|storageIDs
argument_list|)
expr_stmt|;
comment|// close can fail if the out.close() commit the block after block received
comment|// notifications from Datanode.
comment|// Since datanodes and output stream have still old genstamps, these
comment|// blocks will be marked as corrupt after HDFS-5723 if RECEIVED
comment|// notifications reaches namenode first and close() will fail.
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|INodeFile
name|fileNode
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|file
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|BlockInfo
name|blkUC
init|=
operator|(
name|fileNode
operator|.
name|getBlocks
argument_list|()
operator|)
index|[
literal|1
index|]
decl_stmt|;
name|int
name|datanodeNum
init|=
name|blkUC
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
operator|&&
name|datanodeNum
operator|!=
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|datanodeNum
operator|=
name|blkUC
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
return|return
name|datanodeNum
operator|==
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** addCacheDirective */
DECL|class|AddCacheDirectiveInfoOp
class|class
name|AddCacheDirectiveInfoOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|directive
specifier|private
specifier|final
name|CacheDirectiveInfo
name|directive
decl_stmt|;
DECL|field|result
specifier|private
name|Long
name|result
decl_stmt|;
DECL|method|AddCacheDirectiveInfoOp (DFSClient client, CacheDirectiveInfo directive)
name|AddCacheDirectiveInfoOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|CacheDirectiveInfo
name|directive
parameter_list|)
block|{
name|super
argument_list|(
literal|"addCacheDirective"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|directive
operator|=
name|directive
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|result
operator|=
name|client
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
block|}
comment|/** modifyCacheDirective */
DECL|class|ModifyCacheDirectiveInfoOp
class|class
name|ModifyCacheDirectiveInfoOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|directive
specifier|private
specifier|final
name|CacheDirectiveInfo
name|directive
decl_stmt|;
DECL|field|newReplication
specifier|private
specifier|final
name|short
name|newReplication
decl_stmt|;
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|method|ModifyCacheDirectiveInfoOp (DFSClient client, CacheDirectiveInfo directive, short newReplication)
name|ModifyCacheDirectiveInfoOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|short
name|newReplication
parameter_list|)
block|{
name|super
argument_list|(
literal|"modifyCacheDirective"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|directive
operator|=
name|directive
expr_stmt|;
name|this
operator|.
name|newReplication
operator|=
name|newReplication
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectedUpdateCount
operator|++
expr_stmt|;
name|id
operator|=
name|client
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
name|newReplication
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheDirectiveInfo
name|result
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|.
name|getId
argument_list|()
operator|==
name|id
operator|)
operator|&&
operator|(
name|result
operator|.
name|getReplication
argument_list|()
operator|.
name|shortValue
argument_list|()
operator|==
name|newReplication
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** removeCacheDirective */
DECL|class|RemoveCacheDirectiveInfoOp
class|class
name|RemoveCacheDirectiveInfoOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|directive
specifier|private
specifier|final
name|CacheDirectiveInfo
name|directive
decl_stmt|;
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|method|RemoveCacheDirectiveInfoOp (DFSClient client, String pool, String path)
name|RemoveCacheDirectiveInfoOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|pool
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"removeCacheDirective"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|directive
operator|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectedUpdateCount
operator|++
expr_stmt|;
name|id
operator|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** addCachePool */
DECL|class|AddCachePoolOp
class|class
name|AddCachePoolOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|pool
specifier|private
specifier|final
name|String
name|pool
decl_stmt|;
DECL|method|AddCachePoolOp (DFSClient client, String pool)
name|AddCachePoolOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|super
argument_list|(
literal|"addCachePool"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** modifyCachePool */
DECL|class|ModifyCachePoolOp
class|class
name|ModifyCachePoolOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|pool
specifier|final
name|String
name|pool
decl_stmt|;
DECL|method|ModifyCachePoolOp (DFSClient client, String pool)
name|ModifyCachePoolOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|super
argument_list|(
literal|"modifyCachePool"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
operator|.
name|setLimit
argument_list|(
literal|99l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|==
literal|99
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** removeCachePool */
DECL|class|RemoveCachePoolOp
class|class
name|RemoveCachePoolOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|pool
specifier|private
specifier|final
name|String
name|pool
decl_stmt|;
DECL|method|RemoveCachePoolOp (DFSClient client, String pool)
name|RemoveCachePoolOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|super
argument_list|(
literal|"removeCachePool"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|removeCachePool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** setXAttr */
DECL|class|SetXAttrOp
class|class
name|SetXAttrOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|src
specifier|private
specifier|final
name|String
name|src
decl_stmt|;
DECL|method|SetXAttrOp (DFSClient client, String src)
name|SetXAttrOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|)
block|{
name|super
argument_list|(
literal|"setXAttr"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
literal|"user.key"
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|iter
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|keySet
operator|.
name|contains
argument_list|(
literal|"user.key"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** removeXAttr */
DECL|class|RemoveXAttrOp
class|class
name|RemoveXAttrOp
extends|extends
name|AtMostOnceOp
block|{
DECL|field|src
specifier|private
specifier|final
name|String
name|src
decl_stmt|;
DECL|method|RemoveXAttrOp (DFSClient client, String src)
name|RemoveXAttrOp
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|src
parameter_list|)
block|{
name|super
argument_list|(
literal|"removeXAttr"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
name|void
name|prepare
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|BlockSize
argument_list|,
name|DataNodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
literal|"user.key"
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|void
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedUpdateCount
operator|++
expr_stmt|;
name|client
operator|.
name|removeXAttr
argument_list|(
name|src
argument_list|,
literal|"user.key"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkNamenodeBeforeReturn ()
name|boolean
name|checkNamenodeBeforeReturn
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKTIMES
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|iter
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|keySet
operator|.
name|contains
argument_list|(
literal|"user.key"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResult ()
name|Object
name|getResult
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateSnapshot ()
specifier|public
name|void
name|testCreateSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|CreateSnapshotOp
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteSnapshot ()
specifier|public
name|void
name|testDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|DeleteSnapshotOp
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameSnapshot ()
specifier|public
name|void
name|testRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|RenameSnapshotOp
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|CreateOp
argument_list|(
name|client
argument_list|,
literal|"/testfile"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|AppendOp
argument_list|(
name|client
argument_list|,
literal|"/testfile"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|RenameOp
argument_list|(
name|client
argument_list|,
literal|"/file1"
argument_list|,
literal|"/file2"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRename2 ()
specifier|public
name|void
name|testRename2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|Rename2Op
argument_list|(
name|client
argument_list|,
literal|"/file1"
argument_list|,
literal|"/file2"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|ConcatOp
argument_list|(
name|client
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/file"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|DeleteOp
argument_list|(
name|client
argument_list|,
literal|"/testfile"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateSymlink ()
specifier|public
name|void
name|testCreateSymlink
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|CreateSymlinkOp
argument_list|(
name|client
argument_list|,
literal|"/testfile"
argument_list|,
literal|"/testlink"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdatePipeline ()
specifier|public
name|void
name|testUpdatePipeline
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|UpdatePipelineOp
argument_list|(
name|client
argument_list|,
literal|"/testfile"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddCacheDirectiveInfo ()
specifier|public
name|void
name|testAddCacheDirectiveInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|AddCacheDirectiveInfoOp
argument_list|(
name|client
argument_list|,
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool"
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testModifyCacheDirectiveInfo ()
specifier|public
name|void
name|testModifyCacheDirectiveInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|ModifyCacheDirectiveInfoOp
argument_list|(
name|client
argument_list|,
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
literal|"pool"
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|555
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveCacheDescriptor ()
specifier|public
name|void
name|testRemoveCacheDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|RemoveCacheDirectiveInfoOp
argument_list|(
name|client
argument_list|,
literal|"pool"
argument_list|,
literal|"/path"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddCachePool ()
specifier|public
name|void
name|testAddCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|AddCachePoolOp
argument_list|(
name|client
argument_list|,
literal|"pool"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testModifyCachePool ()
specifier|public
name|void
name|testModifyCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|ModifyCachePoolOp
argument_list|(
name|client
argument_list|,
literal|"pool"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveCachePool ()
specifier|public
name|void
name|testRemoveCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|RemoveCachePoolOp
argument_list|(
name|client
argument_list|,
literal|"pool"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSetXAttr ()
specifier|public
name|void
name|testSetXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|SetXAttrOp
argument_list|(
name|client
argument_list|,
literal|"/setxattr"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveXAttr ()
specifier|public
name|void
name|testRemoveXAttr
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
name|AtMostOnceOp
name|op
init|=
operator|new
name|RemoveXAttrOp
argument_list|(
name|client
argument_list|,
literal|"/removexattr"
argument_list|)
decl_stmt|;
name|testClientRetryWithFailover
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**    * When NN failover happens, if the client did not receive the response and    * send a retry request to the other NN, the same response should be recieved    * based on the retry cache.    */
DECL|method|testClientRetryWithFailover (final AtMostOnceOp op)
specifier|public
name|void
name|testClientRetryWithFailover
parameter_list|(
specifier|final
name|AtMostOnceOp
name|op
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|op
operator|.
name|prepare
argument_list|()
expr_stmt|;
comment|// set DummyRetryInvocationHandler#block to true
name|DummyRetryInvocationHandler
operator|.
name|block
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|op
operator|.
name|invoke
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
name|op
operator|.
name|getResult
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operation "
operator|+
name|op
operator|.
name|name
operator|+
literal|" finished"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|TestRetryCacheWithHA
operator|.
name|this
init|)
block|{
name|results
operator|.
name|put
argument_list|(
name|op
operator|.
name|name
argument_list|,
name|result
operator|==
literal|null
condition|?
literal|"SUCCESS"
else|:
name|result
argument_list|)
expr_stmt|;
name|TestRetryCacheWithHA
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got Exception while calling "
operator|+
name|op
operator|.
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|op
operator|.
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// make sure the client's call has actually been handled by the active NN
name|assertTrue
argument_list|(
literal|"After waiting the operation "
operator|+
name|op
operator|.
name|name
operator|+
literal|" still has not taken effect on NN yet"
argument_list|,
name|op
operator|.
name|checkNamenodeBeforeReturn
argument_list|()
argument_list|)
expr_stmt|;
comment|// force the failover
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// disable the block in DummyHandler
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting block to false"
argument_list|)
expr_stmt|;
name|DummyRetryInvocationHandler
operator|.
name|block
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|results
operator|.
name|containsKey
argument_list|(
name|op
operator|.
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got the result of "
operator|+
name|op
operator|.
name|name
operator|+
literal|": "
operator|+
name|results
operator|.
name|get
argument_list|(
name|op
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Waiting for failover.
while|while
condition|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|isInStandbyState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|long
name|hitNN0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getMetricsForTests
argument_list|()
operator|.
name|getCacheHit
argument_list|()
decl_stmt|;
name|long
name|hitNN1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getMetricsForTests
argument_list|()
operator|.
name|getCacheHit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"CacheHit: "
operator|+
name|hitNN0
operator|+
literal|", "
operator|+
name|hitNN1
argument_list|,
name|hitNN0
operator|+
name|hitNN1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|updatedNN0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getMetricsForTests
argument_list|()
operator|.
name|getCacheUpdated
argument_list|()
decl_stmt|;
name|long
name|updatedNN1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getMetricsForTests
argument_list|()
operator|.
name|getCacheUpdated
argument_list|()
decl_stmt|;
comment|// Cache updated metrics on NN0 should be>0 since the op was process on NN0
name|assertTrue
argument_list|(
literal|"CacheUpdated on NN0: "
operator|+
name|updatedNN0
argument_list|,
name|updatedNN0
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Cache updated metrics on NN0 should be>0 since NN1 applied the editlog
name|assertTrue
argument_list|(
literal|"CacheUpdated on NN1: "
operator|+
name|updatedNN1
argument_list|,
name|updatedNN1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|expectedUpdateCount
init|=
name|op
operator|.
name|getExpectedCacheUpdateCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedUpdateCount
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"CacheUpdated on NN0: "
operator|+
name|updatedNN0
argument_list|,
name|expectedUpdateCount
argument_list|,
name|updatedNN0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CacheUpdated on NN0: "
operator|+
name|updatedNN1
argument_list|,
name|expectedUpdateCount
argument_list|,
name|updatedNN1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a list of cache pools, list cache pools,    * switch active NN, and list cache pools again.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListCachePools ()
specifier|public
name|void
name|testListCachePools
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|poolCount
init|=
literal|7
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|poolNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|poolCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|poolName
init|=
literal|"testListCachePools-"
operator|+
name|i
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
argument_list|)
expr_stmt|;
name|poolNames
operator|.
name|add
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
block|}
name|listCachePools
argument_list|(
name|poolNames
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|listCachePools
argument_list|(
name|poolNames
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a list of cache directives, list cache directives,    * switch active NN, and list cache directives again.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListCacheDirectives ()
specifier|public
name|void
name|testListCacheDirectives
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|poolCount
init|=
literal|7
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|poolNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|poolCount
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/p"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|poolName
init|=
literal|"testListCacheDirectives-"
operator|+
name|i
decl_stmt|;
name|CacheDirectiveInfo
name|directiveInfo
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPool
argument_list|(
name|poolName
argument_list|)
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|directiveInfo
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
argument_list|)
expr_stmt|;
name|poolNames
operator|.
name|add
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
block|}
name|listCacheDirectives
argument_list|(
name|poolNames
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|listCacheDirectives
argument_list|(
name|poolNames
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|listCachePools ( HashSet<String> poolNames, int active)
specifier|private
name|void
name|listCachePools
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|poolNames
parameter_list|,
name|int
name|active
parameter_list|)
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|tmpNames
init|=
operator|(
name|HashSet
argument_list|<
name|String
argument_list|>
operator|)
name|poolNames
operator|.
name|clone
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|pools
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|int
name|poolCount
init|=
name|poolNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolCount
condition|;
name|i
operator|++
control|)
block|{
name|CachePoolEntry
name|pool
init|=
name|pools
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pollName
init|=
name|pool
operator|.
name|getInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The pool name should be expected"
argument_list|,
name|tmpNames
operator|.
name|remove
argument_list|(
name|pollName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|int
name|standby
init|=
name|active
decl_stmt|;
name|active
operator|=
operator|(
name|standby
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|standby
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"All pools must be found"
argument_list|,
name|tmpNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|listCacheDirectives ( HashSet<String> poolNames, int active)
specifier|private
name|void
name|listCacheDirectives
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|poolNames
parameter_list|,
name|int
name|active
parameter_list|)
throws|throws
name|Exception
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|tmpNames
init|=
operator|(
name|HashSet
argument_list|<
name|String
argument_list|>
operator|)
name|poolNames
operator|.
name|clone
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|directives
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|poolCount
init|=
name|poolNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolCount
condition|;
name|i
operator|++
control|)
block|{
name|CacheDirectiveEntry
name|directive
init|=
name|directives
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pollName
init|=
name|directive
operator|.
name|getInfo
argument_list|()
operator|.
name|getPool
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The pool name should be expected"
argument_list|,
name|tmpNames
operator|.
name|remove
argument_list|(
name|pollName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|int
name|standby
init|=
name|active
decl_stmt|;
name|active
operator|=
operator|(
name|standby
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|standby
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"All pools must be found"
argument_list|,
name|tmpNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

