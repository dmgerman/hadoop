begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|FailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRetryCacheWithHA
specifier|public
class|class
name|TestRetryCacheWithHA
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRetryCacheWithHA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|BlockSize
specifier|private
specifier|static
specifier|final
name|int
name|BlockSize
init|=
literal|1024
decl_stmt|;
DECL|field|DataNodes
specifier|private
specifier|static
specifier|final
name|short
name|DataNodes
init|=
literal|3
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**     * A dummy invocation handler extending RetryInvocationHandler. We can use    * a boolean flag to control whether the method invocation succeeds or not.     */
DECL|class|DummyRetryInvocationHandler
specifier|private
specifier|static
class|class
name|DummyRetryInvocationHandler
extends|extends
name|RetryInvocationHandler
block|{
DECL|field|block
specifier|static
name|AtomicBoolean
name|block
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|DummyRetryInvocationHandler ( FailoverProxyProvider<ClientProtocol> proxyProvider, RetryPolicy retryPolicy)
name|DummyRetryInvocationHandler
parameter_list|(
name|FailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|proxyProvider
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invokeMethod (Method method, Object[] args)
specifier|protected
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|result
init|=
name|super
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"Fake Exception"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BlockSize
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// setup the configuration
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * 1. Run a set of operations    * 2. Trigger the NN failover    * 3. Check the retry cache on the original standby NN    */
annotation|@
name|Test
DECL|method|testRetryCacheOnStandbyNN ()
specifier|public
name|void
name|testRetryCacheOnStandbyNN
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. run operations
name|DFSTestUtil
operator|.
name|runOperations
argument_list|(
name|cluster
argument_list|,
name|dfs
argument_list|,
name|conf
argument_list|,
name|BlockSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check retry cache in NN1
name|FSNamesystem
name|fsn0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|cacheSet
init|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|fsn0
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|oldEntries
init|=
operator|new
name|HashMap
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CacheEntry
argument_list|>
name|iter
init|=
name|cacheSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|oldEntries
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// 2. Failover the current standby to active.
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 3. check the retry cache on the new active NN
name|FSNamesystem
name|fsn1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cacheSet
operator|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|fsn1
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|cacheSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|oldEntries
operator|.
name|containsKey
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|genClientWithDummyHandler ()
specifier|private
name|DFSClient
name|genClientWithDummyHandler
parameter_list|()
throws|throws
name|IOException
block|{
name|URI
name|nnUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|FailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|failoverProxyProviderClass
init|=
name|NameNodeProxies
operator|.
name|getFailoverProxyProviderClass
argument_list|(
name|conf
argument_list|,
name|nnUri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|FailoverProxyProvider
argument_list|<
name|ClientProtocol
argument_list|>
name|failoverProxyProvider
init|=
name|NameNodeProxies
operator|.
name|createFailoverProxyProvider
argument_list|(
name|conf
argument_list|,
name|failoverProxyProviderClass
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|nnUri
argument_list|)
decl_stmt|;
name|InvocationHandler
name|dummyHandler
init|=
operator|new
name|DummyRetryInvocationHandler
argument_list|(
name|failoverProxyProvider
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_BASE_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|ClientProtocol
name|proxy
init|=
operator|(
name|ClientProtocol
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|failoverProxyProvider
operator|.
name|getInterface
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ClientProtocol
operator|.
name|class
block|}
argument_list|,
name|dummyHandler
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|proxy
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|client
return|;
block|}
comment|/**    * When NN failover happens, if the client did not receive the response and    * send a retry request to the other NN, the same response should be recieved    * based on the retry cache.    *     * TODO: currently we only test the createSnapshot from the client side. We     * may need to cover all the calls with "@AtMostOnce" annotation.    */
annotation|@
name|Test
DECL|method|testClientRetryWithFailover ()
specifier|public
name|void
name|testClientRetryWithFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|dir
init|=
literal|"/test"
decl_stmt|;
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sName
init|=
literal|"s1"
decl_stmt|;
specifier|final
name|String
name|dirSnapshot
init|=
name|dir
operator|+
name|HdfsConstants
operator|.
name|SEPARATOR_DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|sName
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|genClientWithDummyHandler
argument_list|()
decl_stmt|;
comment|// set DummyRetryInvocationHandler#block to true
name|DummyRetryInvocationHandler
operator|.
name|block
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|String
name|snapshotPath
init|=
name|client
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dirSnapshot
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created snapshot "
operator|+
name|snapshotPath
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|TestRetryCacheWithHA
operator|.
name|this
init|)
block|{
name|results
operator|.
name|put
argument_list|(
literal|"createSnapshot"
argument_list|,
name|snapshotPath
argument_list|)
expr_stmt|;
name|TestRetryCacheWithHA
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got IOException "
operator|+
name|e
operator|+
literal|" while creating snapshot"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// make sure the client's createSnapshot call has actually been handled by
comment|// the active NN
name|boolean
name|snapshotCreated
init|=
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dirSnapshot
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|snapshotCreated
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|snapshotCreated
operator|=
name|dfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dirSnapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// force the failover
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// disable the block in DummyHandler
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting block to false"
argument_list|)
expr_stmt|;
name|DummyRetryInvocationHandler
operator|.
name|block
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|results
operator|.
name|containsKey
argument_list|(
literal|"createSnapshot"
argument_list|)
condition|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got the result of createSnapshot: "
operator|+
name|results
operator|.
name|get
argument_list|(
literal|"createSnapshot"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

