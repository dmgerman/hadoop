begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestDFSClientRetries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestFileCreation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeWebHdfsMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
operator|.
name|WebHdfsInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|LengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|NoRedirectParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
operator|.
name|RetryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|type
operator|.
name|MapType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/** Test WebHDFS */
end_comment

begin_class
DECL|class|TestWebHDFS
specifier|public
class|class
name|TestWebHDFS
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWebHDFS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|systemStartTime
specifier|static
specifier|final
name|long
name|systemStartTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|/** A timer for measuring performance. */
DECL|class|Ticker
specifier|static
class|class
name|Ticker
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
DECL|field|previousTick
specifier|private
name|long
name|previousTick
init|=
name|startTime
decl_stmt|;
DECL|method|Ticker (final String name, String format, Object... args)
name|Ticker
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s START: %s\n"
argument_list|,
name|name
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tick (final long nBytes, String format, Object... args)
name|void
name|tick
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|previousTick
operator|>
literal|10000000000L
condition|)
block|{
name|previousTick
operator|=
name|now
expr_stmt|;
specifier|final
name|double
name|mintues
init|=
operator|(
name|now
operator|-
name|systemStartTime
operator|)
operator|/
literal|60000000000.0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s %.2f min) %s %s\n"
argument_list|,
name|name
argument_list|,
name|mintues
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|,
name|toMpsString
argument_list|(
name|nBytes
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|end (final long nBytes)
name|void
name|end
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|double
name|seconds
init|=
operator|(
name|now
operator|-
name|startTime
operator|)
operator|/
literal|1000000000.0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s END: duration=%.2fs %s\n"
argument_list|,
name|name
argument_list|,
name|seconds
argument_list|,
name|toMpsString
argument_list|(
name|nBytes
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toMpsString (final long nBytes, final long now)
name|String
name|toMpsString
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
specifier|final
name|double
name|mb
init|=
name|nBytes
operator|/
call|(
name|double
call|)
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|double
name|mps
init|=
name|mb
operator|*
literal|1000000000.0
operator|/
operator|(
name|now
operator|-
name|startTime
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[nBytes=%.2fMB, speed=%.2fMB/s]"
argument_list|,
name|mb
argument_list|,
name|mps
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLargeFile ()
specifier|public
name|void
name|testLargeFile
parameter_list|()
throws|throws
name|Exception
block|{
name|largeFileTest
argument_list|(
literal|200L
operator|<<
literal|20
argument_list|)
expr_stmt|;
comment|//200MB file length
block|}
comment|/** Test read and write large files. */
DECL|method|largeFileTest (final long fileLength)
specifier|static
name|void
name|largeFileTest
parameter_list|(
specifier|final
name|long
name|fileLength
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/largeFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|20
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|data
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"WRITE"
argument_list|,
literal|"fileLength="
operator|+
name|fileLength
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|remaining
init|=
name|fileLength
decl_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|fileLength
operator|-
name|remaining
argument_list|,
literal|"remaining=%d"
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|t
operator|.
name|end
argument_list|(
name|fileLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|smallOffset
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
operator|+
operator|(
literal|1
operator|<<
literal|20
operator|)
decl_stmt|;
specifier|final
name|long
name|largeOffset
init|=
name|fileLength
operator|-
name|smallOffset
decl_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
name|verifySeek
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|largeOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|verifySeek
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|smallOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|verifyPread
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|largeOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkData (long offset, long remaining, int n, byte[] actual, byte[] expected)
specifier|static
name|void
name|checkData
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|remaining
parameter_list|,
name|int
name|n
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
block|{
if|if
condition|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|0
condition|)
block|{
name|int
name|j
init|=
call|(
name|int
call|)
argument_list|(
name|offset
operator|%
name|actual
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|j
index|]
operator|!=
name|actual
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|expected
index|[
name|j
index|]
operator|+
literal|" != actual["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|actual
index|[
name|i
index|]
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
operator|+
literal|", n="
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/** test seek */
DECL|method|verifySeek (FileSystem fs, Path p, long offset, long length, byte[] buf, byte[] expected)
specifier|static
name|void
name|verifySeek
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|length
operator|-
name|offset
decl_stmt|;
name|long
name|checked
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XXX SEEK: offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"SEEK"
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|,
literal|64
operator|<<
literal|10
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|checked
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|offset
argument_list|,
name|remaining
argument_list|,
name|n
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|n
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
name|checked
operator|+=
name|n
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|end
argument_list|(
name|checked
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPread (FileSystem fs, Path p, long offset, long length, byte[] buf, byte[] expected)
specifier|static
name|void
name|verifyPread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|length
operator|-
name|offset
decl_stmt|;
name|long
name|checked
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XXX PREAD: offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"PREAD"
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|,
literal|64
operator|<<
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|checked
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|offset
argument_list|,
name|remaining
argument_list|,
name|n
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|n
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
name|checked
operator|+=
name|n
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|end
argument_list|(
name|checked
argument_list|)
expr_stmt|;
block|}
comment|/** Test client retry with namenode restarting. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testNamenodeRestart ()
specifier|public
name|void
name|testNamenodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NamenodeWebHdfsMethods
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|TestDFSClientRetries
operator|.
name|namenodeRestartTest
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLargeDirectory ()
specifier|public
name|void
name|testLargeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|listLimit
init|=
literal|2
decl_stmt|;
comment|// force small chunking of directory listing
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
name|listLimit
argument_list|)
expr_stmt|;
comment|// force paths to be only owner-accessible to ensure ugi isn't changing
comment|// during listStatus
name|FsPermission
operator|.
name|setUMask
argument_list|(
name|conf
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0077
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
comment|// trick the NN into not believing it's not the superuser so we can
comment|// tell if the correct user is used by listStatus
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"not-superuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"not-supergroup"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"me"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"my-group"
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
operator|new
name|Path
argument_list|(
literal|"/my-dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Iterator should have no items when dir is empty
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|it
init|=
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|d
argument_list|,
literal|"file-"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// Iterator should have an item when dir is not empty
name|it
operator|=
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|listLimit
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|d
argument_list|,
literal|"file-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check the FileStatus[] listing
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|listLimit
operator|*
literal|3
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check the iterator-based listing
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|WebHdfsFileSystem
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NamenodeWebHdfsMethods
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|it
operator|=
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|stat
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatuses not equal"
argument_list|,
name|statuses
index|[
name|count
index|]
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Different # of statuses!"
argument_list|,
name|statuses
operator|.
name|length
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Do some more basic iterator tests
name|it
operator|=
name|fs
operator|.
name|listStatusIterator
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// Try advancing the iterator without calling hasNext()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|statuses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
name|stat
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatuses not equal"
argument_list|,
name|statuses
index|[
name|i
index|]
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"No more items expected"
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try doing next when out of items
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Iterator should error if out of elements."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// pass
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCustomizedUserAndGroupNames ()
specifier|public
name|void
name|testCustomizedUserAndGroupNames
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Modify username pattern to allow numeric usernames
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_USER_PATTERN_KEY
argument_list|,
literal|"^[A-Za-z0-9_][A-Za-z0-9"
operator|+
literal|"._-]*[$]?$"
argument_list|)
expr_stmt|;
comment|// Modify acl pattern to allow numeric and "@" characters user/groups in ACL spec
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY
argument_list|,
literal|"^(default:)?(user|group|mask|other):"
operator|+
literal|"[[0-9A-Za-z_][@A-Za-z0-9._-]]*:([rwx-]{3})?(,(default:)?"
operator|+
literal|"(user|group|mask|other):[[0-9A-Za-z_][@A-Za-z0-9._-]]*:([rwx-]{3})?)*$"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test a numeric username
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"123"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"my-group"
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
operator|new
name|Path
argument_list|(
literal|"/my-dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test also specifying a default ACL with a numeric username
comment|// and another of a groupname with '@'
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|d
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"11010"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setName
argument_list|(
literal|"foo@bar"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test for catching "no datanode" IOException, when to create a file    * but datanode is not running for some reason.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCreateWithNoDN ()
specifier|public
name|void
name|testCreateWithNoDN
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testnodatanode"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"No exception was thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to find datanode"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test allow and disallow snapshot through WebHdfs. Verifying webhdfs with    * Distributed filesystem methods.    */
annotation|@
name|Test
DECL|method|testWebHdfsAllowandDisallowSnapshots ()
specifier|public
name|void
name|testWebHdfsAllowandDisallowSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// allow snapshots on /bar using webhdfs
name|webHdfs
operator|.
name|allowSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// check if snapshot status is enabled
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|bar
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|bar
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|snapshottableDirs
init|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshottableDirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
argument_list|,
name|snapshottableDirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|bar
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|disallowSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// check if snapshot status is disabled
name|assertFalse
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|snapshottableDirs
operator|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|snapshottableDirs
argument_list|)
expr_stmt|;
comment|// disallow snapshots on /bar using webhdfs
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// check if snapshot status is enabled, again
name|assertTrue
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|snapshottableDirs
operator|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshottableDirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bar
argument_list|,
name|snapshottableDirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|disallowSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|// check if snapshot status is disabled, again
name|assertFalse
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|bar
argument_list|)
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|snapshottableDirs
operator|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|snapshottableDirs
argument_list|)
expr_stmt|;
try|try
block|{
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot create snapshot on a non-snapshottable directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testWebHdfsErasureCodingFiles ()
specifier|public
name|void
name|testWebHdfsErasureCodingFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"ec-file.log"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
literal|1024
operator|*
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|normalDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|normalDir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|normalFile
init|=
operator|new
name|Path
argument_list|(
name|normalDir
argument_list|,
literal|"file.log"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|normalFile
argument_list|,
literal|1024
operator|*
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|FileStatus
name|expectedECDirStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|ecDir
argument_list|)
decl_stmt|;
name|FileStatus
name|actualECDirStatus
init|=
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|ecDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedECDirStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|actualECDirStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertErasureCoded
argument_list|(
name|dfs
argument_list|,
name|ecDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ecDir
operator|+
literal|" should have erasure coding set in "
operator|+
literal|"FileStatus#toString(): "
operator|+
name|actualECDirStatus
argument_list|,
name|actualECDirStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"isErasureCoded=true"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|expectedECFileStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|ecFile
argument_list|)
decl_stmt|;
name|FileStatus
name|actualECFileStatus
init|=
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|ecFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedECFileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|actualECFileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertErasureCoded
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ecFile
operator|+
literal|" should have erasure coding set in "
operator|+
literal|"FileStatus#toString(): "
operator|+
name|actualECFileStatus
argument_list|,
name|actualECFileStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"isErasureCoded=true"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|expectedNormalDirStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|normalDir
argument_list|)
decl_stmt|;
name|FileStatus
name|actualNormalDirStatus
init|=
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|normalDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNormalDirStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|actualNormalDirStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertNotErasureCoded
argument_list|(
name|dfs
argument_list|,
name|normalDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|normalDir
operator|+
literal|" should have erasure coding unset in "
operator|+
literal|"FileStatus#toString(): "
operator|+
name|actualNormalDirStatus
argument_list|,
name|actualNormalDirStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"isErasureCoded=false"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|expectedNormalFileStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|normalFile
argument_list|)
decl_stmt|;
name|FileStatus
name|actualNormalFileStatus
init|=
name|webHdfs
operator|.
name|getFileStatus
argument_list|(
name|normalDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNormalFileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|actualNormalFileStatus
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertNotErasureCoded
argument_list|(
name|dfs
argument_list|,
name|normalFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|normalFile
operator|+
literal|" should have erasure coding unset in "
operator|+
literal|"FileStatus#toString(): "
operator|+
name|actualNormalFileStatus
argument_list|,
name|actualNormalFileStatus
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"isErasureCoded=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot creation through WebHdfs.    */
annotation|@
name|Test
DECL|method|testWebHdfsCreateSnapshot ()
specifier|public
name|void
name|testWebHdfsCreateSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
try|try
block|{
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot create snapshot on a non-snapshottable directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// allow snapshots on /foo
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// create snapshots on foo using WebHdfs
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// create snapshot without specifying name
specifier|final
name|Path
name|spath
init|=
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot deletion through WebHdfs.    */
annotation|@
name|Test
DECL|method|testWebHdfsDeleteSnapshot ()
specifier|public
name|void
name|testWebHdfsDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|spath
init|=
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete operation snapshot name as null
try|try
block|{
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Required param snapshotname for "
operator|+
literal|"op: DELETESNAPSHOT is null or empty"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// delete the two snapshots
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
name|spath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot diff through WebHdfs.    */
annotation|@
name|Test
DECL|method|testWebHdfsSnapshotDiff ()
specifier|public
name|void
name|testWebHdfsSnapshotDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file0
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file2
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file3
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|file0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|file2
argument_list|,
name|file4
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|SnapshotDiffReport
name|diffReport
init|=
name|webHdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
name|diffReport
operator|.
name|getSnapshotRoot
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|diffReport
operator|.
name|getFromSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|diffReport
operator|.
name|getLaterSnapshotName
argument_list|()
argument_list|)
expr_stmt|;
name|DiffReportEntry
name|entry0
init|=
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|DiffReportEntry
name|entry1
init|=
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file0"
argument_list|)
argument_list|)
decl_stmt|;
name|DiffReportEntry
name|entry2
init|=
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file1"
argument_list|)
argument_list|)
decl_stmt|;
name|DiffReportEntry
name|entry3
init|=
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file2"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file4"
argument_list|)
argument_list|)
decl_stmt|;
name|DiffReportEntry
name|entry4
init|=
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file3"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Test with fromSnapshot and toSnapshot as null.
name|diffReport
operator|=
name|webHdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|diffReport
operator|=
name|webHdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diffReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshottable directory list through WebHdfs.    */
annotation|@
name|Test
DECL|method|testWebHdfsSnapshottableDirectoryList ()
specifier|public
name|void
name|testWebHdfsSnapshottableDirectoryList
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|statuses
init|=
name|webHdfs
operator|.
name|getSnapshottableDirectoryList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file0
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|webHdfs
operator|.
name|getSnapshottableDirectoryList
argument_list|()
expr_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|dfsStatuses
init|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dfsStatuses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statuses
index|[
name|i
index|]
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|,
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|statuses
index|[
name|i
index|]
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|,
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|statuses
index|[
name|i
index|]
operator|.
name|getParentFullPath
argument_list|()
argument_list|,
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getParentFullPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getChildrenNum
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getChildrenNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isDir
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getGroup
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|hasAcl
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isEncrypted
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dfsStatuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|,
name|statuses
index|[
name|i
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|isSnapshotEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsCreateNonRecursive ()
specifier|public
name|void
name|testWebHdfsCreateNonRecursive
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|WebHdfsFileSystem
name|webHdfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|webHdfs
operator|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
expr_stmt|;
name|TestFileCreation
operator|.
name|testFileCreationNonRecursive
argument_list|(
name|webHdfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|webHdfs
operator|!=
literal|null
condition|)
block|{
name|webHdfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot rename through WebHdfs.    */
annotation|@
name|Test
DECL|method|testWebHdfsRenameSnapshot ()
specifier|public
name|void
name|testWebHdfsRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename s1 to s2 with oldsnapshotName as null
try|try
block|{
name|webHdfs
operator|.
name|renameSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Required param oldsnapshotname for "
operator|+
literal|"op: RENAMESNAPSHOT is null or empty"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rename s1 to s2
name|webHdfs
operator|.
name|renameSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s2path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s2path
argument_list|)
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s2path
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure a RetriableException is thrown when rpcServer is null in    * NamenodeWebHdfsMethods.    */
annotation|@
name|Test
DECL|method|testRaceWhileNNStartup ()
specifier|public
name|void
name|testRaceWhileNNStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|rpcServer
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|namenode
argument_list|,
literal|"rpcServer"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
block|{
name|webHdfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RetriableException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriableException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Namenode is in startup mode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|namenode
argument_list|,
literal|"rpcServer"
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDTInInsecureClusterWithFallback ()
specifier|public
name|void
name|testDTInInsecureClusterWithFallback
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|webHdfs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDTInInsecureCluster ()
specifier|public
name|void
name|testDTInInsecureCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|webHdfs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No exception is thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ace
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WebHdfsFileSystem
operator|.
name|CANT_FALLBACK_TO_INSECURE_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsOffsetAndLength ()
specifier|public
name|void
name|testWebHdfsOffsetAndLength
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|OFFSET
init|=
literal|42
decl_stmt|;
specifier|final
name|int
name|LENGTH
init|=
literal|512
decl_stmt|;
specifier|final
name|String
name|PATH
init|=
literal|"/foo"
decl_stmt|;
name|byte
index|[]
name|CONTENTS
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|PATH
argument_list|)
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LENGTH
argument_list|,
name|conn
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|subContents
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|byte
index|[]
name|realContents
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|CONTENTS
argument_list|,
name|OFFSET
argument_list|,
name|subContents
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|realContents
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|subContents
argument_list|,
name|realContents
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testContentSummary ()
specifier|public
name|void
name|testContentSummary
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/QuotaDir"
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|path
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|ContentSummary
name|contentSummary
init|=
name|webHdfs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|contentSummary
operator|.
name|getTypeQuota
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|==
literal|100000
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsPread ()
specifier|public
name|void
name|testWebHdfsPread
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|content
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|foo
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
comment|// pread
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|foo
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
literal|1020
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"EOF expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ignored
parameter_list|)
block|{}
comment|// mix pread with stateful read
name|int
name|length
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|100
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|preadLen
init|=
name|in
operator|.
name|read
argument_list|(
literal|200
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preadLen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
name|length
argument_list|,
literal|1024
operator|-
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|content
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetHomeDirectory ()
specifier|public
name|void
name|testGetHomeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
operator|+
literal|"://"
operator|+
name|cluster
operator|.
name|getHttpUri
argument_list|(
literal|0
argument_list|)
operator|.
name|replace
argument_list|(
literal|"http://"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|confTemp
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|confTemp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webhdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|webhdfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
name|createWebHDFSAsTestUser
argument_list|(
name|confTemp
argument_list|,
name|uri
argument_list|,
literal|"XXX"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webhdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|webhdfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsGetBlockLocationsWithStorageType ()
specifier|public
name|void
name|testWebHdfsGetBlockLocationsWithStorageType
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|OFFSET
init|=
literal|42
decl_stmt|;
specifier|final
name|int
name|LENGTH
init|=
literal|512
decl_stmt|;
specifier|final
name|Path
name|PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|CONTENTS
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|PATH
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
block|}
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|PATH
argument_list|,
name|OFFSET
argument_list|,
name|LENGTH
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|location
range|:
name|locations
control|)
block|{
name|StorageType
index|[]
name|storageTypes
init|=
name|location
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|storageTypes
operator|!=
literal|null
operator|&&
name|storageTypes
operator|.
name|length
operator|>
literal|0
operator|&&
name|storageTypes
index|[
literal|0
index|]
operator|==
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsGetBlockLocations ()
specifier|public
name|void
name|testWebHdfsGetBlockLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
literal|42
decl_stmt|;
specifier|final
name|int
name|length
init|=
literal|512
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|contents
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
comment|// Query webhdfs REST API to get block locations
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
comment|// Case 1
comment|// URL without length or offset parameters
name|URL
name|url1
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/foo?op=GETFILEBLOCKLOCATIONS"
argument_list|)
decl_stmt|;
name|String
name|response1
init|=
name|getResponse
argument_list|(
name|url1
argument_list|,
literal|"GET"
argument_list|)
decl_stmt|;
comment|// Parse BlockLocation array from json output using object mapper
name|BlockLocation
index|[]
name|locationArray1
init|=
name|toBlockLocationArray
argument_list|(
name|response1
argument_list|)
decl_stmt|;
comment|// Verify the result from rest call is same as file system api
name|verifyEquals
argument_list|(
name|locations
argument_list|,
name|locationArray1
argument_list|)
expr_stmt|;
comment|// Case 2
comment|// URL contains length and offset parameters
name|URL
name|url2
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/foo?op=GETFILEBLOCKLOCATIONS"
operator|+
literal|"&length="
operator|+
name|length
operator|+
literal|"&offset="
operator|+
name|offset
argument_list|)
decl_stmt|;
name|String
name|response2
init|=
name|getResponse
argument_list|(
name|url2
argument_list|,
literal|"GET"
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locationArray2
init|=
name|toBlockLocationArray
argument_list|(
name|response2
argument_list|)
decl_stmt|;
name|verifyEquals
argument_list|(
name|locations
argument_list|,
name|locationArray2
argument_list|)
expr_stmt|;
comment|// Case 3
comment|// URL contains length parameter but without offset parameters
name|URL
name|url3
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/foo?op=GETFILEBLOCKLOCATIONS"
operator|+
literal|"&length="
operator|+
name|length
argument_list|)
decl_stmt|;
name|String
name|response3
init|=
name|getResponse
argument_list|(
name|url3
argument_list|,
literal|"GET"
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locationArray3
init|=
name|toBlockLocationArray
argument_list|(
name|response3
argument_list|)
decl_stmt|;
name|verifyEquals
argument_list|(
name|locations
argument_list|,
name|locationArray3
argument_list|)
expr_stmt|;
comment|// Case 4
comment|// URL contains offset parameter but without length parameter
name|URL
name|url4
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/foo?op=GETFILEBLOCKLOCATIONS"
operator|+
literal|"&offset="
operator|+
name|offset
argument_list|)
decl_stmt|;
name|String
name|response4
init|=
name|getResponse
argument_list|(
name|url4
argument_list|,
literal|"GET"
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locationArray4
init|=
name|toBlockLocationArray
argument_list|(
name|response4
argument_list|)
decl_stmt|;
name|verifyEquals
argument_list|(
name|locations
argument_list|,
name|locationArray4
argument_list|)
expr_stmt|;
comment|// Case 5
comment|// URL specifies offset exceeds the file length
name|URL
name|url5
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/foo?op=GETFILEBLOCKLOCATIONS"
operator|+
literal|"&offset=1200"
argument_list|)
decl_stmt|;
name|String
name|response5
init|=
name|getResponse
argument_list|(
name|url5
argument_list|,
literal|"GET"
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locationArray5
init|=
name|toBlockLocationArray
argument_list|(
name|response5
argument_list|)
decl_stmt|;
comment|// Expected an empty array of BlockLocation
name|verifyEquals
argument_list|(
operator|new
name|BlockLocation
index|[]
block|{}
argument_list|,
name|locationArray5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|toBlockLocationArray (String json)
specifier|private
name|BlockLocation
index|[]
name|toBlockLocationArray
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|MapType
name|subType
init|=
name|mapper
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|constructMapType
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|BlockLocation
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|MapType
name|rootType
init|=
name|mapper
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|constructMapType
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|mapper
operator|.
name|constructType
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|mapper
operator|.
name|constructType
argument_list|(
name|subType
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BlockLocation
index|[]
argument_list|>
argument_list|>
name|jsonMap
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|rootType
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BlockLocation
index|[]
argument_list|>
name|locationMap
init|=
name|jsonMap
operator|.
name|get
argument_list|(
literal|"BlockLocations"
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locationArray
init|=
name|locationMap
operator|.
name|get
argument_list|(
name|BlockLocation
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|locationArray
return|;
block|}
DECL|method|verifyEquals (BlockLocation[] locations1, BlockLocation[] locations2)
specifier|private
name|void
name|verifyEquals
parameter_list|(
name|BlockLocation
index|[]
name|locations1
parameter_list|,
name|BlockLocation
index|[]
name|locations2
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlockLocation
name|location1
init|=
name|locations1
index|[
name|i
index|]
decl_stmt|;
name|BlockLocation
name|location2
init|=
name|locations2
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location1
operator|.
name|getLength
argument_list|()
argument_list|,
name|location2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location1
operator|.
name|getOffset
argument_list|()
argument_list|,
name|location2
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|location1
operator|.
name|getCachedHosts
argument_list|()
argument_list|,
name|location2
operator|.
name|getCachedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|location1
operator|.
name|getHosts
argument_list|()
argument_list|,
name|location2
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|location1
operator|.
name|getNames
argument_list|()
argument_list|,
name|location2
operator|.
name|getNames
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|location1
operator|.
name|getTopologyPaths
argument_list|()
argument_list|,
name|location2
operator|.
name|getTopologyPaths
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|location1
operator|.
name|getStorageTypes
argument_list|()
argument_list|,
name|location2
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getResponse (URL url, String httpRequestType)
specifier|private
specifier|static
name|String
name|getResponse
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|httpRequestType
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|httpRequestType
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createWebHDFSAsTestUser (final Configuration conf, final URI uri, final String userName)
specifier|private
name|WebHdfsFileSystem
name|createWebHDFSAsTestUser
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|WebHdfsFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WebHdfsFileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|webhdfs
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testWebHdfsReadRetries ()
specifier|public
name|void
name|testWebHdfsReadRetries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ((Log4JLogger)DFSClient.LOG).getLogger().setLevel(Level.ALL);
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testWebHdfsReadRetries"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1024
operator|*
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|short
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
comment|//create a file
specifier|final
name|long
name|length
init|=
literal|1L
operator|<<
literal|20
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|length
argument_list|,
name|numDatanodes
argument_list|,
literal|20120406L
argument_list|)
expr_stmt|;
comment|//get file status and check that it was written properly.
specifier|final
name|FileStatus
name|s1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Write failed for file "
operator|+
name|file1
argument_list|,
name|length
argument_list|,
name|s1
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure file can be read through WebHdfsInputStream
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Input stream is not an instance of class WebHdfsInputStream"
argument_list|,
name|in
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|WebHdfsInputStream
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|;
name|count
operator|++
control|)
empty_stmt|;
name|assertEquals
argument_list|(
literal|"Read failed for file "
operator|+
name|file1
argument_list|,
name|s1
operator|.
name|getLen
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sghould not be able to read beyond end of file"
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Read after close should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{ }
name|WebHdfsFileSystem
name|wfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Read should not be retried if AccessControlException is encountered.
name|String
name|msg
init|=
literal|"ReadRetries: Test Access Control Exception"
decl_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|wfs
argument_list|,
name|file1
argument_list|,
operator|new
name|AccessControlException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Retry policy should be invoked if IOExceptions are thrown.
name|msg
operator|=
literal|"ReadRetries: Test SocketTimeoutException"
expr_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|wfs
argument_list|,
name|file1
argument_list|,
operator|new
name|SocketTimeoutException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"ReadRetries: Test SocketException"
expr_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|wfs
argument_list|,
name|file1
argument_list|,
operator|new
name|SocketException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"ReadRetries: Test EOFException"
expr_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|wfs
argument_list|,
name|file1
argument_list|,
operator|new
name|EOFException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"ReadRetries: Test Generic IO Exception"
expr_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|wfs
argument_list|,
name|file1
argument_list|,
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// If InvalidToken exception occurs, WebHdfs only retries if the
comment|// delegation token was replaced. Do that twice, then verify by checking
comment|// the number of times it tried.
name|WebHdfsFileSystem
name|spyfs
init|=
name|spy
argument_list|(
name|wfs
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyfs
operator|.
name|replaceExpiredDelegationToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"ReadRetries: Test Invalid Token Exception"
expr_stmt|;
name|testReadRetryExceptionHelper
argument_list|(
name|spyfs
argument_list|,
name|file1
argument_list|,
operator|new
name|InvalidToken
argument_list|(
name|msg
argument_list|)
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|attemptedRetry
specifier|public
name|boolean
name|attemptedRetry
decl_stmt|;
DECL|method|testReadRetryExceptionHelper (WebHdfsFileSystem fs, Path fn, final IOException ex, String msg, boolean shouldAttemptRetry, int numTimesTried)
specifier|private
name|void
name|testReadRetryExceptionHelper
parameter_list|(
name|WebHdfsFileSystem
name|fs
parameter_list|,
name|Path
name|fn
parameter_list|,
specifier|final
name|IOException
name|ex
parameter_list|,
name|String
name|msg
parameter_list|,
name|boolean
name|shouldAttemptRetry
parameter_list|,
name|int
name|numTimesTried
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Ovverride WebHdfsInputStream#getInputStream so that it returns
comment|// an input stream that throws the specified exception when read
comment|// is called.
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// Connection is made only when the first read() occurs.
specifier|final
name|WebHdfsInputStream
name|webIn
init|=
call|(
name|WebHdfsInputStream
call|)
argument_list|(
name|in
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|spyInputStream
init|=
name|spy
argument_list|(
name|webIn
operator|.
name|getReadRunner
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|ex
argument_list|)
operator|.
name|when
argument_list|(
name|spyInputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|any
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
operator|.
name|ReadRunner
name|rr
init|=
name|spy
argument_list|(
name|webIn
operator|.
name|getReadRunner
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|spyInputStream
argument_list|)
operator|.
name|when
argument_list|(
name|rr
argument_list|)
operator|.
name|initializeInputStream
argument_list|(
operator|(
name|HttpURLConnection
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|rr
operator|.
name|setInputStream
argument_list|(
name|spyInputStream
argument_list|)
expr_stmt|;
name|webIn
operator|.
name|setReadRunner
argument_list|(
name|rr
argument_list|)
expr_stmt|;
comment|// Override filesystem's retry policy in order to verify that
comment|// WebHdfsInputStream is calling shouldRetry for the appropriate
comment|// exceptions.
specifier|final
name|RetryAction
name|retryAction
init|=
operator|new
name|RetryAction
argument_list|(
name|RetryDecision
operator|.
name|RETRY
argument_list|)
decl_stmt|;
specifier|final
name|RetryAction
name|failAction
init|=
operator|new
name|RetryAction
argument_list|(
name|RetryDecision
operator|.
name|FAIL
argument_list|)
decl_stmt|;
name|RetryPolicy
name|rp
init|=
operator|new
name|RetryPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|isIdempotentOrAtMostOnce
parameter_list|)
throws|throws
name|Exception
block|{
name|attemptedRetry
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|retries
operator|>
literal|3
condition|)
block|{
return|return
name|failAction
return|;
block|}
else|else
block|{
return|return
name|retryAction
return|;
block|}
block|}
block|}
decl_stmt|;
name|fs
operator|.
name|setRetryPolicy
argument_list|(
name|rp
argument_list|)
expr_stmt|;
comment|// If the retry logic is exercised, attemptedRetry will be true. Some
comment|// exceptions should exercise the retry logic and others should not.
comment|// Either way, the value of attemptedRetry should match shouldAttemptRetry.
name|attemptedRetry
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|webIn
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|msg
operator|+
literal|": Read should have thrown exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
operator|+
literal|": Read should "
operator|+
operator|(
name|shouldAttemptRetry
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"have called shouldRetry. "
argument_list|,
name|attemptedRetry
argument_list|,
name|shouldAttemptRetry
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rr
argument_list|,
name|times
argument_list|(
name|numTimesTried
argument_list|)
argument_list|)
operator|.
name|getResponse
argument_list|(
operator|(
name|HttpURLConnection
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|webIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkResponseContainsLocation (URL url, String TYPE)
specifier|private
name|void
name|checkResponseContainsLocation
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|TYPE
parameter_list|)
throws|throws
name|JSONException
throws|,
name|IOException
block|{
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Response was : "
operator|+
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Response wasn't "
operator|+
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|responseJson
init|=
operator|new
name|JSONObject
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Response didn't give us a location. "
operator|+
name|response
argument_list|,
name|responseJson
operator|.
name|has
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test that the DN allows CORS on Create
if|if
condition|(
name|TYPE
operator|.
name|equals
argument_list|(
literal|"CREATE"
argument_list|)
condition|)
block|{
name|URL
name|dnLocation
init|=
operator|new
name|URL
argument_list|(
name|responseJson
operator|.
name|getString
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|dnConn
init|=
operator|(
name|HttpURLConnection
operator|)
name|dnLocation
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|dnConn
operator|.
name|setRequestMethod
argument_list|(
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Datanode url : "
operator|+
name|dnLocation
operator|+
literal|" didn't allow "
operator|+
literal|"CORS"
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|dnConn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|/**    * Test that when "&noredirect=true" is added to operations CREATE, APPEND,    * OPEN, and GETFILECHECKSUM the response (which is usually a 307 temporary    * redirect) is a 200 with JSON that contains the redirected location    */
DECL|method|testWebHdfsNoRedirect ()
specifier|public
name|void
name|testWebHdfsNoRedirect
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started cluster"
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/testWebHdfsNoRedirectCreate"
operator|+
literal|"?op=CREATE"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NoRedirectParam
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending create request "
operator|+
name|url
argument_list|)
expr_stmt|;
name|checkResponseContainsLocation
argument_list|(
name|url
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
comment|//Write a file that we can read
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|PATH
init|=
literal|"/testWebHdfsNoRedirect"
decl_stmt|;
name|byte
index|[]
name|CONTENTS
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|PATH
argument_list|)
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/testWebHdfsNoRedirect"
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NoRedirectParam
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending open request "
operator|+
name|url
argument_list|)
expr_stmt|;
name|checkResponseContainsLocation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/testWebHdfsNoRedirect"
operator|+
literal|"?op=GETFILECHECKSUM"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NoRedirectParam
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending getfilechecksum request "
operator|+
name|url
argument_list|)
expr_stmt|;
name|checkResponseContainsLocation
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/testWebHdfsNoRedirect"
operator|+
literal|"?op=APPEND"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|NoRedirectParam
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending append request "
operator|+
name|url
argument_list|)
expr_stmt|;
name|checkResponseContainsLocation
argument_list|(
name|url
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGetTrashRoot ()
specifier|public
name|void
name|testGetTrashRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|String
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webFS
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Path
name|trashPath
init|=
name|webFS
operator|.
name|getTrashRoot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|expectedPath
init|=
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|USER_HOME_PREFIX
argument_list|,
operator|new
name|Path
argument_list|(
name|currentUser
argument_list|,
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|trashPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testStoragePolicy ()
specifier|public
name|void
name|testStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
comment|// test getAllStoragePolicies
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|dfs
operator|.
name|getAllStoragePolicies
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|webHdfs
operator|.
name|getAllStoragePolicies
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test get/set/unset policies
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// get defaultPolicy
name|BlockStoragePolicySpi
name|defaultdfsPolicy
init|=
name|dfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// set policy through webhdfs
name|webHdfs
operator|.
name|setStoragePolicy
argument_list|(
name|path
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// get policy from dfs
name|BlockStoragePolicySpi
name|dfsPolicy
init|=
name|dfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// get policy from webhdfs
name|BlockStoragePolicySpi
name|webHdfsPolicy
init|=
name|webHdfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
operator|.
name|toString
argument_list|()
argument_list|,
name|webHdfsPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|webHdfsPolicy
argument_list|,
name|dfsPolicy
argument_list|)
expr_stmt|;
comment|// unset policy
name|webHdfs
operator|.
name|unsetStoragePolicy
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultdfsPolicy
argument_list|,
name|webHdfs
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSetStoragePolicyWhenPolicyDisabled ()
specifier|public
name|void
name|testSetStoragePolicyWhenPolicyDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|webHdfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception, when storage policy disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to set storage policy since"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkECPolicyState (Collection<ErasureCodingPolicyInfo> policies, String ecpolicy, String state)
specifier|private
name|void
name|checkECPolicyState
parameter_list|(
name|Collection
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
name|policies
parameter_list|,
name|String
name|ecpolicy
parameter_list|,
name|String
name|state
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
name|itr
init|=
name|policies
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|policies
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ErasureCodingPolicyInfo
name|policy
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecpolicy
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
literal|"disable"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|policy
operator|.
name|isDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
literal|"enable"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|policy
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
comment|// Test For Enable/Disable EC Policy in DFS.
annotation|@
name|Test
DECL|method|testECPolicyCommands ()
specifier|public
name|void
name|testECPolicyCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|String
name|policy
init|=
literal|"RS-10-4-1024k"
decl_stmt|;
comment|// Check for Enable EC policy via WEBHDFS.
name|dfs
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|checkECPolicyState
argument_list|(
name|dfs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
argument_list|,
name|policy
argument_list|,
literal|"disable"
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|enableECPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|checkECPolicyState
argument_list|(
name|dfs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
argument_list|,
name|policy
argument_list|,
literal|"enable"
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Check for Set EC policy via WEBHDFS
name|assertNull
argument_list|(
name|dfs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|dfs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for Get EC policy via WEBHDFS
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|webHdfs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for Unset EC policy via WEBHDFS
name|webHdfs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dfs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check for Disable EC policy via WEBHDFS.
name|webHdfs
operator|.
name|disableECPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|checkECPolicyState
argument_list|(
name|dfs
operator|.
name|getAllErasureCodingPolicies
argument_list|()
argument_list|,
name|policy
argument_list|,
literal|"disable"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsAppend ()
specifier|public
name|void
name|testWebHdfsAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dnNumber
init|=
literal|3
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dnNumber
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webFS
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|appendFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testAppend.txt"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"hello world"
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|appendFile
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|dnNumber
operator|-
literal|1
condition|;
name|index
operator|++
control|)
block|{
name|cluster
operator|.
name|shutdownDataNode
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|webFS
argument_list|,
name|appendFile
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail to append file since "
operator|+
literal|"datanode number is 1 and replication is 3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
name|String
name|resultContent
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|appendFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultContent
operator|.
name|equals
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test fsserver defaults response from {@link DistributedFileSystem} and    * {@link WebHdfsFileSystem} are the same.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFsserverDefaults ()
specifier|public
name|void
name|testFsserverDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
comment|// Here we override all the default values so that we can verify that it
comment|// doesn't pick up the default value.
name|long
name|blockSize
init|=
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|bytesPerChecksum
init|=
literal|256
decl_stmt|;
name|int
name|writePacketSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|0
decl_stmt|;
name|int
name|bufferSize
init|=
literal|1024
decl_stmt|;
name|boolean
name|encryptDataTransfer
init|=
literal|true
decl_stmt|;
name|long
name|trashInterval
init|=
literal|1
decl_stmt|;
name|String
name|checksumType
init|=
literal|"CRC32"
decl_stmt|;
comment|// Setting policy to a special value 7 because BlockManager will
comment|// create defaultSuite with policy id 7.
name|byte
name|policyId
init|=
operator|(
name|byte
operator|)
literal|7
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|bytesPerChecksum
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|writePacketSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
name|encryptDataTransfer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|trashInterval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CHECKSUM_TYPE_KEY
argument_list|,
name|checksumType
argument_list|)
expr_stmt|;
name|FsServerDefaults
name|originalServerDefaults
init|=
operator|new
name|FsServerDefaults
argument_list|(
name|blockSize
argument_list|,
name|bytesPerChecksum
argument_list|,
name|writePacketSize
argument_list|,
operator|(
name|short
operator|)
name|replicationFactor
argument_list|,
name|bufferSize
argument_list|,
name|encryptDataTransfer
argument_list|,
name|trashInterval
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|checksumType
argument_list|)
argument_list|,
literal|""
argument_list|,
name|policyId
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|FsServerDefaults
name|dfsServerDefaults
init|=
name|dfs
operator|.
name|getServerDefaults
argument_list|()
decl_stmt|;
name|FsServerDefaults
name|webfsServerDefaults
init|=
name|webfs
operator|.
name|getServerDefaults
argument_list|()
decl_stmt|;
comment|// Verify whether server defaults value that we override is equal to
comment|// dfsServerDefaults.
name|compareFsServerDefaults
argument_list|(
name|originalServerDefaults
argument_list|,
name|dfsServerDefaults
argument_list|)
expr_stmt|;
comment|// Verify whether dfs serverdefaults is equal to
comment|// webhdfsServerDefaults.
name|compareFsServerDefaults
argument_list|(
name|dfsServerDefaults
argument_list|,
name|webfsServerDefaults
argument_list|)
expr_stmt|;
name|webfs
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|compareFsServerDefaults (FsServerDefaults serverDefaults1, FsServerDefaults serverDefaults2)
specifier|private
name|void
name|compareFsServerDefaults
parameter_list|(
name|FsServerDefaults
name|serverDefaults1
parameter_list|,
name|FsServerDefaults
name|serverDefaults2
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Block size is different"
argument_list|,
name|serverDefaults1
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bytes per checksum are different"
argument_list|,
name|serverDefaults1
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Write packet size is different"
argument_list|,
name|serverDefaults1
operator|.
name|getWritePacketSize
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default replication is different"
argument_list|,
name|serverDefaults1
operator|.
name|getReplication
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File buffer size are different"
argument_list|,
name|serverDefaults1
operator|.
name|getFileBufferSize
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Encrypt data transfer key is different"
argument_list|,
name|serverDefaults1
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Trash interval is different"
argument_list|,
name|serverDefaults1
operator|.
name|getTrashInterval
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getTrashInterval
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Checksum type is different"
argument_list|,
name|serverDefaults1
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key provider uri is different"
argument_list|,
name|serverDefaults1
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Default storage policy is different"
argument_list|,
name|serverDefaults1
operator|.
name|getDefaultStoragePolicyId
argument_list|()
argument_list|,
name|serverDefaults2
operator|.
name|getDefaultStoragePolicyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the case when client is upgraded to return {@link FsServerDefaults}    * but then namenode is not upgraded.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFsserverDefaultsBackwardsCompatible ()
specifier|public
name|void
name|testFsserverDefaultsBackwardsCompatible
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|webfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|FSNamesystem
name|fsnSpy
init|=
name|NameNodeAdapter
operator|.
name|spyOnNamesystem
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsnSpy
operator|.
name|getServerDefaults
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|webfs
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have thrown UnSupportedOperationException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
comment|//Expected exception.
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests that {@link WebHdfsFileSystem.AbstractRunner} propagates original    * exception's stacktrace and cause during runWithRetry attempts.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testExceptionPropogationInAbstractRunner ()
specifier|public
name|void
name|testExceptionPropogationInAbstractRunner
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testExceptionPropogationInAbstractRunner"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|short
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
comment|//create a file
specifier|final
name|long
name|length
init|=
literal|1L
operator|<<
literal|20
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|length
argument_list|,
name|numDatanodes
argument_list|,
literal|20120406L
argument_list|)
expr_stmt|;
comment|//get file status and check that it was written properly.
specifier|final
name|FileStatus
name|s1
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Write failed for file "
operator|+
name|file1
argument_list|,
name|length
argument_list|,
name|s1
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// Connection is made only when the first read() occurs.
specifier|final
name|WebHdfsInputStream
name|webIn
init|=
call|(
name|WebHdfsInputStream
call|)
argument_list|(
name|in
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Throwing dummy exception"
decl_stmt|;
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
operator|new
name|DummyThrowable
argument_list|()
argument_list|)
decl_stmt|;
name|WebHdfsFileSystem
operator|.
name|ReadRunner
name|readRunner
init|=
name|spy
argument_list|(
name|webIn
operator|.
name|getReadRunner
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|ioe
argument_list|)
operator|.
name|when
argument_list|(
name|readRunner
argument_list|)
operator|.
name|getResponse
argument_list|(
name|any
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|webIn
operator|.
name|setReadRunner
argument_list|(
name|readRunner
argument_list|)
expr_stmt|;
try|try
block|{
name|webIn
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Read should have thrown IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DummyThrowable
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that the LISTSTATUS ang GETFILESTATUS WebHDFS calls return the    * ecPolicy for EC files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testECPolicyInFileStatus ()
specifier|public
name|void
name|testECPolicyInFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ecPolicyName
init|=
name|ecPolicy
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create an EC dir and write a test file in it
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"ec_file.txt"
argument_list|)
decl_stmt|;
name|Path
name|nonEcFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"non_ec_file.txt"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
comment|// Create a non-EC file before enabling ec policy
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|nonEcFile
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
comment|// Create a EC file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFile
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Query webhdfs REST API to list statuses of files/directories in ecDir
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|listStatusUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|ecDir
operator|.
name|toString
argument_list|()
operator|+
literal|"?op=LISTSTATUS"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|listStatusUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|listStatusResponse
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Response wasn't "
operator|+
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that ecPolicy is set in the ListStatus response for ec file
name|String
name|ecpolicyForECfile
init|=
name|getECPolicyFromFileStatusJson
argument_list|(
name|getFileStatusJson
argument_list|(
name|listStatusResponse
argument_list|,
name|ecFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EC policy for ecFile should match the set EC policy"
argument_list|,
name|ecpolicyForECfile
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
comment|// Verify that ecPolicy is not set in the ListStatus response for non-ec
comment|// file
name|String
name|ecPolicyForNonECfile
init|=
name|getECPolicyFromFileStatusJson
argument_list|(
name|getFileStatusJson
argument_list|(
name|listStatusResponse
argument_list|,
name|nonEcFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EC policy for nonEcFile should be null (not set)"
argument_list|,
name|ecPolicyForNonECfile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Query webhdfs REST API to get fileStatus for ecFile
name|URL
name|getFileStatusUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|ecFile
operator|.
name|toString
argument_list|()
operator|+
literal|"?op=GETFILESTATUS"
argument_list|)
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|getFileStatusUrl
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|getFileStatusResponse
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Response wasn't "
operator|+
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that ecPolicy is set in getFileStatus response for ecFile
name|JSONObject
name|fileStatusObject
init|=
operator|new
name|JSONObject
argument_list|(
name|getFileStatusResponse
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"FileStatus"
argument_list|)
decl_stmt|;
name|ecpolicyForECfile
operator|=
name|getECPolicyFromFileStatusJson
argument_list|(
name|fileStatusObject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EC policy for ecFile should match the set EC policy"
argument_list|,
name|ecpolicyForECfile
argument_list|,
name|ecPolicyName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get FileStatus JSONObject from ListStatus response.    */
DECL|method|getFileStatusJson (String response, String fileName)
specifier|private
name|JSONObject
name|getFileStatusJson
parameter_list|(
name|String
name|response
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|listStatusResponseJson
init|=
operator|new
name|JSONObject
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|JSONArray
name|fileStatusArray
init|=
name|listStatusResponseJson
operator|.
name|getJSONObject
argument_list|(
literal|"FileStatuses"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"FileStatus"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatusArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|fileStatusJsonObject
init|=
name|fileStatusArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|fileStatusJsonObject
operator|.
name|get
argument_list|(
literal|"pathSuffix"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|fileStatusJsonObject
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get ECPolicy name from FileStatus JSONObject.    */
DECL|method|getECPolicyFromFileStatusJson (JSONObject fileStatusJsonObject)
specifier|private
name|String
name|getECPolicyFromFileStatusJson
parameter_list|(
name|JSONObject
name|fileStatusJsonObject
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|fileStatusJsonObject
operator|.
name|has
argument_list|(
literal|"ecPolicy"
argument_list|)
condition|)
block|{
return|return
name|fileStatusJsonObject
operator|.
name|getString
argument_list|(
literal|"ecPolicy"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|DummyThrowable
specifier|final
specifier|static
class|class
name|DummyThrowable
extends|extends
name|Throwable
block|{   }
block|}
end_class

end_unit

