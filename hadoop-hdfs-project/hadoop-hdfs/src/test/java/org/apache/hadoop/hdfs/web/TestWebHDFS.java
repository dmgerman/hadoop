begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestDFSClientRetries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeWebHdfsMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|LengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_comment
comment|/** Test WebHDFS */
end_comment

begin_class
DECL|class|TestWebHDFS
specifier|public
class|class
name|TestWebHDFS
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebHDFS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|systemStartTime
specifier|static
specifier|final
name|long
name|systemStartTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|/** A timer for measuring performance. */
DECL|class|Ticker
specifier|static
class|class
name|Ticker
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
DECL|field|previousTick
specifier|private
name|long
name|previousTick
init|=
name|startTime
decl_stmt|;
DECL|method|Ticker (final String name, String format, Object... args)
name|Ticker
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s START: %s\n"
argument_list|,
name|name
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tick (final long nBytes, String format, Object... args)
name|void
name|tick
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|previousTick
operator|>
literal|10000000000L
condition|)
block|{
name|previousTick
operator|=
name|now
expr_stmt|;
specifier|final
name|double
name|mintues
init|=
operator|(
name|now
operator|-
name|systemStartTime
operator|)
operator|/
literal|60000000000.0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s %.2f min) %s %s\n"
argument_list|,
name|name
argument_list|,
name|mintues
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|,
name|toMpsString
argument_list|(
name|nBytes
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|end (final long nBytes)
name|void
name|end
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|double
name|seconds
init|=
operator|(
name|now
operator|-
name|startTime
operator|)
operator|/
literal|1000000000.0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\n\n%s END: duration=%.2fs %s\n"
argument_list|,
name|name
argument_list|,
name|seconds
argument_list|,
name|toMpsString
argument_list|(
name|nBytes
argument_list|,
name|now
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|toMpsString (final long nBytes, final long now)
name|String
name|toMpsString
parameter_list|(
specifier|final
name|long
name|nBytes
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
specifier|final
name|double
name|mb
init|=
name|nBytes
operator|/
call|(
name|double
call|)
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|double
name|mps
init|=
name|mb
operator|*
literal|1000000000.0
operator|/
operator|(
name|now
operator|-
name|startTime
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"[nBytes=%.2fMB, speed=%.2fMB/s]"
argument_list|,
name|mb
argument_list|,
name|mps
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLargeFile ()
specifier|public
name|void
name|testLargeFile
parameter_list|()
throws|throws
name|Exception
block|{
name|largeFileTest
argument_list|(
literal|200L
operator|<<
literal|20
argument_list|)
expr_stmt|;
comment|//200MB file length
block|}
comment|/** Test read and write large files. */
DECL|method|largeFileTest (final long fileLength)
specifier|static
name|void
name|largeFileTest
parameter_list|(
specifier|final
name|long
name|fileLength
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/largeFile"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|20
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|data
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"WRITE"
argument_list|,
literal|"fileLength="
operator|+
name|fileLength
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|remaining
init|=
name|fileLength
decl_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|fileLength
operator|-
name|remaining
argument_list|,
literal|"remaining=%d"
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|t
operator|.
name|end
argument_list|(
name|fileLength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileLength
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|smallOffset
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
operator|+
operator|(
literal|1
operator|<<
literal|20
operator|)
decl_stmt|;
specifier|final
name|long
name|largeOffset
init|=
name|fileLength
operator|-
name|smallOffset
decl_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
name|verifySeek
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|largeOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|verifySeek
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|smallOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|verifyPread
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|largeOffset
argument_list|,
name|fileLength
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkData (long offset, long remaining, int n, byte[] actual, byte[] expected)
specifier|static
name|void
name|checkData
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|remaining
parameter_list|,
name|int
name|n
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
block|{
if|if
condition|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|==
literal|0
condition|)
block|{
name|int
name|j
init|=
call|(
name|int
call|)
argument_list|(
name|offset
operator|%
name|actual
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|j
index|]
operator|!=
name|actual
index|[
name|i
index|]
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|expected
index|[
name|j
index|]
operator|+
literal|" != actual["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|actual
index|[
name|i
index|]
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
operator|+
literal|", n="
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/** test seek */
DECL|method|verifySeek (FileSystem fs, Path p, long offset, long length, byte[] buf, byte[] expected)
specifier|static
name|void
name|verifySeek
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|length
operator|-
name|offset
decl_stmt|;
name|long
name|checked
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XXX SEEK: offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"SEEK"
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|,
literal|64
operator|<<
literal|10
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|checked
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|offset
argument_list|,
name|remaining
argument_list|,
name|n
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|n
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
name|checked
operator|+=
name|n
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|end
argument_list|(
name|checked
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPread (FileSystem fs, Path p, long offset, long length, byte[] buf, byte[] expected)
specifier|static
name|void
name|verifyPread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|length
operator|-
name|offset
decl_stmt|;
name|long
name|checked
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XXX PREAD: offset="
operator|+
name|offset
operator|+
literal|", remaining="
operator|+
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|Ticker
name|t
init|=
operator|new
name|Ticker
argument_list|(
literal|"PREAD"
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|,
literal|64
operator|<<
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|remaining
operator|>
literal|0
condition|;
control|)
block|{
name|t
operator|.
name|tick
argument_list|(
name|checked
argument_list|,
literal|"offset=%d, remaining=%d"
argument_list|,
name|offset
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
specifier|final
name|int
name|n
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|checkData
argument_list|(
name|offset
argument_list|,
name|remaining
argument_list|,
name|n
argument_list|,
name|buf
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|n
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
name|checked
operator|+=
name|n
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|end
argument_list|(
name|checked
argument_list|)
expr_stmt|;
block|}
comment|/** Test client retry with namenode restarting. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testNamenodeRestart ()
specifier|public
name|void
name|testNamenodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NamenodeWebHdfsMethods
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|TestDFSClientRetries
operator|.
name|namenodeRestartTest
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLargeDirectory ()
specifier|public
name|void
name|testLargeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|listLimit
init|=
literal|2
decl_stmt|;
comment|// force small chunking of directory listing
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
name|listLimit
argument_list|)
expr_stmt|;
comment|// force paths to be only owner-accessible to ensure ugi isn't changing
comment|// during listStatus
name|FsPermission
operator|.
name|setUMask
argument_list|(
name|conf
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0077
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
comment|// trick the NN into not believing it's not the superuser so we can
comment|// tell if the correct user is used by listStatus
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"not-superuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"not-supergroup"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"me"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"my-group"
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
operator|new
name|Path
argument_list|(
literal|"/my-dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listLimit
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|d
argument_list|,
literal|"file-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|createNewFile
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|listLimit
operator|*
literal|3
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|d
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testNumericalUserName ()
specifier|public
name|void
name|testNumericalUserName
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_USER_PATTERN_KEY
argument_list|,
literal|"^[A-Za-z0-9_][A-Za-z0-9"
operator|+
literal|"._-]*[$]?$"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"123"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"my-group"
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
operator|new
name|Path
argument_list|(
literal|"/my-dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test for catching "no datanode" IOException, when to create a file    * but datanode is not running for some reason.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCreateWithNoDN ()
specifier|public
name|void
name|testCreateWithNoDN
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testnodatanode"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"No exception was thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to find datanode"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot creation through WebHdfs    */
annotation|@
name|Test
DECL|method|testWebHdfsCreateSnapshot ()
specifier|public
name|void
name|testWebHdfsCreateSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
try|try
block|{
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot create snapshot on a non-snapshottable directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// allow snapshots on /foo
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
comment|// create snapshots on foo using WebHdfs
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// create snapshot without specifying name
specifier|final
name|Path
name|spath
init|=
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot deletion through WebHdfs    */
annotation|@
name|Test
DECL|method|testWebHdfsDeleteSnapshot ()
specifier|public
name|void
name|testWebHdfsDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|spath
init|=
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the two snapshots
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
name|spath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|spath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test snapshot rename through WebHdfs    */
annotation|@
name|Test
DECL|method|testWebHdfsRenameSnapshot ()
specifier|public
name|void
name|testWebHdfsRenameSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|createSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s1path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename s1 to s2
name|webHdfs
operator|.
name|renameSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s1path
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|s2path
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s2path
argument_list|)
argument_list|)
expr_stmt|;
name|webHdfs
operator|.
name|deleteSnapshot
argument_list|(
name|foo
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|webHdfs
operator|.
name|exists
argument_list|(
name|s2path
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure a RetriableException is thrown when rpcServer is null in    * NamenodeWebHdfsMethods.    */
annotation|@
name|Test
DECL|method|testRaceWhileNNStartup ()
specifier|public
name|void
name|testRaceWhileNNStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|rpcServer
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|namenode
argument_list|,
literal|"rpcServer"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
block|{
name|webHdfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RetriableException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriableException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Namenode is in startup mode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|namenode
argument_list|,
literal|"rpcServer"
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDTInInsecureClusterWithFallback ()
specifier|public
name|void
name|testDTInInsecureClusterWithFallback
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|webHdfs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDTInInsecureCluster ()
specifier|public
name|void
name|testDTInInsecureCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|webHdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|webHdfs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No exception is thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ace
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WebHdfsFileSystem
operator|.
name|CANT_FALLBACK_TO_INSECURE_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsOffsetAndLength ()
specifier|public
name|void
name|testWebHdfsOffsetAndLength
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
specifier|final
name|int
name|OFFSET
init|=
literal|42
decl_stmt|;
specifier|final
name|int
name|LENGTH
init|=
literal|512
decl_stmt|;
specifier|final
name|String
name|PATH
init|=
literal|"/foo"
decl_stmt|;
name|byte
index|[]
name|CONTENTS
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|PATH
argument_list|)
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|CONTENTS
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|PATH
operator|+
literal|"?op=OPEN"
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
operator|new
name|OffsetParam
argument_list|(
operator|(
name|long
operator|)
name|OFFSET
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
operator|(
name|long
operator|)
name|LENGTH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LENGTH
argument_list|,
name|conn
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|subContents
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|byte
index|[]
name|realContents
init|=
operator|new
name|byte
index|[
name|LENGTH
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|CONTENTS
argument_list|,
name|OFFSET
argument_list|,
name|subContents
argument_list|,
literal|0
argument_list|,
name|LENGTH
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|realContents
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|subContents
argument_list|,
name|realContents
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testWebHdfsPread ()
specifier|public
name|void
name|testWebHdfsPread
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|RANDOM
operator|.
name|nextBytes
argument_list|(
name|content
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|foo
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
comment|// pread
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|foo
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
literal|1020
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"EOF expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|ignored
parameter_list|)
block|{}
comment|// mix pread with stateful read
name|int
name|length
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|100
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|preadLen
init|=
name|in
operator|.
name|read
argument_list|(
literal|200
argument_list|,
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|preadLen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
name|length
argument_list|,
literal|1024
operator|-
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|content
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetHomeDirectory ()
specifier|public
name|void
name|testGetHomeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
operator|+
literal|"://"
operator|+
name|cluster
operator|.
name|getHttpUri
argument_list|(
literal|0
argument_list|)
operator|.
name|replace
argument_list|(
literal|"http://"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|confTemp
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|confTemp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webhdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|webhdfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
name|createWebHDFSAsTestUser
argument_list|(
name|confTemp
argument_list|,
name|uri
argument_list|,
literal|"XXX"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webhdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|webhdfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createWebHDFSAsTestUser (final Configuration conf, final URI uri, final String userName)
specifier|private
name|WebHdfsFileSystem
name|createWebHDFSAsTestUser
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|WebHdfsFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WebHdfsFileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|webhdfs
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

