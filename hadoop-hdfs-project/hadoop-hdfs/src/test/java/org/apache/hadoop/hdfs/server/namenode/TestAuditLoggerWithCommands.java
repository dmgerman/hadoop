begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_class
DECL|class|TestAuditLoggerWithCommands
specifier|public
class|class
name|TestAuditLoggerWithCommands
block|{
DECL|field|NUM_DATA_NODES
specifier|static
specifier|final
name|int
name|NUM_DATA_NODES
init|=
literal|2
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
specifier|private
specifier|static
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|fs2
specifier|private
specifier|static
name|FileSystem
name|fs2
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|auditlog
specifier|private
specifier|static
name|LogCapturer
name|auditlog
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|user1
specifier|static
name|UserGroupInformation
name|user1
decl_stmt|;
DECL|field|user2
specifier|static
name|UserGroupInformation
name|user2
decl_stmt|;
DECL|field|proto
specifier|private
specifier|static
name|NamenodeProtocols
name|proto
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initialize ()
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|user1
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"theDoctor"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tardis"
block|}
argument_list|)
expr_stmt|;
name|user2
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"theEngineer"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hadoop"
block|}
argument_list|)
expr_stmt|;
name|auditlog
operator|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|FSNamesystem
operator|.
name|auditLog
argument_list|)
expr_stmt|;
name|proto
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs2
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs2
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContentSummary ()
specifier|public
name|void
name|testGetContentSummary
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|String
name|acePattern
init|=
literal|".*allowed=false.*ugi=theEngineer.*cmd=contentSummary.*"
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0600
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|dir1
argument_list|,
name|user1
operator|.
name|getUserName
argument_list|()
argument_list|,
name|user1
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|dir2
argument_list|,
name|user2
operator|.
name|getUserName
argument_list|()
argument_list|,
name|user2
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fs2
operator|.
name|getContentSummary
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|acePattern
argument_list|)
decl_stmt|;
try|try
block|{
name|fs2
operator|.
name|getContentSummary
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir3"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log from getContentSummary"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetQuota ()
specifier|public
name|void
name|testSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testdir/testdir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
literal|10l
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|acePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=setQuota.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|acePattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
literal|10l
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ace
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log from getContentSummary"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
decl_stmt|;
name|Path
name|targetDir
init|=
operator|new
name|Path
argument_list|(
literal|"/target"
argument_list|)
decl_stmt|;
name|String
name|acePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=concat.*"
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|concat
argument_list|(
name|targetDir
argument_list|,
operator|new
name|Path
index|[]
block|{
name|file1
block|,
name|file2
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|acePattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|concat
argument_list|(
name|targetDir
argument_list|,
operator|new
name|Path
index|[]
block|{
name|file1
block|,
name|file2
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log from Concat"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateRenameSnapShot ()
specifier|public
name|void
name|testCreateRenameSnapShot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
literal|"/src"
argument_list|)
decl_stmt|;
name|String
name|aceCreatePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=createSnapshot.*"
decl_stmt|;
name|String
name|aceRenamePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=renameSnapshot.*"
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|allowSnapshot
argument_list|(
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|createSnapshot
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|verifyAuditLogs
argument_list|(
name|aceCreatePattern
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|s1
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|renameSnapshot
argument_list|(
name|srcDir
argument_list|,
name|s1
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
decl_stmt|;
name|verifyAuditLogs
argument_list|(
name|aceRenamePattern
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|fs
operator|.
name|renameSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
argument_list|,
literal|"abc"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteSnapshot ()
specifier|public
name|void
name|testDeleteSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
literal|"/src"
argument_list|)
decl_stmt|;
name|Path
name|s1
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|allowSnapshot
argument_list|(
name|srcDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s1
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|deleteSnapshot
argument_list|(
name|srcDir
argument_list|,
name|s1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceDeletePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=deleteSnapshot.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceDeletePattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|s1
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|deleteSnapshot
argument_list|(
name|srcDir
argument_list|,
name|s1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|+
literal|1
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddCacheDirective ()
specifier|public
name|void
name|testAddCacheDirective
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|alpha
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|addCacheDirective
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceAddCachePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=addCache.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceAddCachePattern
argument_list|)
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|addCacheDirective
argument_list|(
name|alpha
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyCacheDirective ()
specifier|public
name|void
name|testModifyCacheDirective
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|alpha
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Long
name|id
init|=
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|addCacheDirective
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceModifyCachePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=modifyCache.*"
decl_stmt|;
name|verifyAuditLogs
argument_list|(
name|aceModifyCachePattern
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|modifyCacheDirective
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testRemoveCacheDirective ()
specifier|public
name|void
name|testRemoveCacheDirective
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CacheDirectiveInfo
name|alpha
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|aceRemoveCachePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=removeCache.*"
decl_stmt|;
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
name|Long
name|id
init|=
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|addCacheDirective
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should have failed with an AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|length
operator|=
name|verifyAuditLogs
argument_list|(
name|aceRemoveCachePattern
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSnapshotDiffReport ()
specifier|public
name|void
name|testGetSnapshotDiffReport
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|snapshotDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|snapshotDirPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|allowSnapshot
argument_list|(
name|snapshotDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|s1
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshotDirPath
argument_list|)
decl_stmt|;
name|Path
name|s2
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshotDirPath
argument_list|)
decl_stmt|;
name|int
name|length
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|getSnapshotDiffReport
argument_list|(
name|snapshotDirPath
argument_list|,
name|s1
operator|.
name|getName
argument_list|()
argument_list|,
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceSnapshotDiffPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=computeSnapshotDiff.*"
decl_stmt|;
name|length
operator|=
name|verifyAuditLogs
argument_list|(
name|aceSnapshotDiffPattern
argument_list|)
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|getSnapshotDiffReport
argument_list|(
name|snapshotDirPath
argument_list|,
name|s1
operator|.
name|getName
argument_list|()
argument_list|,
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQuotaUsage ()
specifier|public
name|void
name|testGetQuotaUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|aceGetQuotaUsagePattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=quotaUsage.*"
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getQuotaUsage
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceGetQuotaUsagePattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getQuotaUsage
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddCachePool ()
specifier|public
name|void
name|testAddCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|cacheInfo
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|addCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceAddCachePoolPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=addCachePool.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceAddCachePoolPattern
argument_list|)
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|addCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyCachePool ()
specifier|public
name|void
name|testModifyCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|cacheInfo
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|addCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|modifyCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceModifyCachePoolPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=modifyCachePool.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceModifyCachePoolPattern
argument_list|)
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|modifyCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveCachePool ()
specifier|public
name|void
name|testRemoveCachePool
parameter_list|()
throws|throws
name|Exception
block|{
name|removeExistingCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|cacheInfo
init|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|addCachePool
argument_list|(
name|cacheInfo
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|removeCachePool
argument_list|(
literal|"pool1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|String
name|aceRemoveCachePoolPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=removeCachePool.*"
decl_stmt|;
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceRemoveCachePoolPattern
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|removeCachePool
argument_list|(
literal|"pool1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetEZForPath ()
specifier|public
name|void
name|testGetEZForPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|aceGetEzForPathPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=getEZForPath.*"
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|getEZForPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceGetEzForPathPattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|getEZForPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameTo ()
specifier|public
name|void
name|testRenameTo
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|aceRenameToPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=rename.*"
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceRenameToPattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetXattrs ()
specifier|public
name|void
name|testGetXattrs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|aceGetXattrsPattern
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=getXAttrs.*"
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceGetXattrsPattern
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListXattrs ()
specifier|public
name|void
name|testListXattrs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|user1
operator|.
name|getUserName
argument_list|()
argument_list|,
name|user1
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|aceListXattrsPattern
init|=
literal|".*allowed=true.*ugi=theDoctor.*cmd=listXAttrs.*"
decl_stmt|;
name|fileSys
operator|.
name|listXAttrs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|verifyAuditLogs
argument_list|(
name|aceListXattrsPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAclStatus ()
specifier|public
name|void
name|testGetAclStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|user1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|user1
operator|.
name|getUserName
argument_list|()
argument_list|,
name|user1
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FSDirectory
name|dir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|FSDirectory
name|mockedDir
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|AccessControlException
name|ex
init|=
operator|new
name|AccessControlException
argument_list|()
decl_stmt|;
name|doThrow
argument_list|(
name|ex
argument_list|)
operator|.
name|when
argument_list|(
name|mockedDir
argument_list|)
operator|.
name|getPermissionChecker
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|setFSDirectory
argument_list|(
name|mockedDir
argument_list|)
expr_stmt|;
name|String
name|aceGetAclStatus
init|=
literal|".*allowed=false.*ugi=theDoctor.*cmd=getAclStatus.*"
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{     }
name|int
name|length
init|=
name|verifyAuditLogs
argument_list|(
name|aceGetAclStatus
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fileSys
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|verifyAuditLogs
argument_list|(
name|aceGetAclStatus
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The operation should have failed with IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ace
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|length
operator|==
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|setFSDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAuditLogs (String pattern)
specifier|private
name|int
name|verifyAuditLogs
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|int
name|length
init|=
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
decl_stmt|;
name|String
name|lastAudit
init|=
name|auditlog
operator|.
name|getOutput
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected log!"
argument_list|,
name|lastAudit
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
DECL|method|removeExistingCachePools (String prevPool)
specifier|private
name|void
name|removeExistingCachePools
parameter_list|(
name|String
name|prevPool
parameter_list|)
throws|throws
name|Exception
block|{
name|BatchedRemoteIterator
operator|.
name|BatchedEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|entries
init|=
name|proto
operator|.
name|listCachePools
argument_list|(
name|prevPool
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

