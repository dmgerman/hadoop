begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * An internal-facing only collection of test utilities for the DataNode. This  * is to ensure that test-scope dependencies aren't inadvertently leaked  * to clients, e.g. Mockito.  */
end_comment

begin_class
DECL|class|InternalDataNodeTestUtils
specifier|public
class|class
name|InternalDataNodeTestUtils
block|{
DECL|field|TEST_CLUSTER_ID
specifier|public
specifier|final
specifier|static
name|String
name|TEST_CLUSTER_ID
init|=
literal|"testClusterID"
decl_stmt|;
DECL|field|TEST_POOL_ID
specifier|public
specifier|final
specifier|static
name|String
name|TEST_POOL_ID
init|=
literal|"BP-TEST"
decl_stmt|;
specifier|public
specifier|static
name|DatanodeRegistration
DECL|method|getDNRegistrationForBP (DataNode dn, String bpid)
name|getDNRegistrationForBP
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|bpid
argument_list|)
return|;
block|}
comment|/**    * Insert a Mockito spy object between the given DataNode and    * the given NameNode. This can be used to delay or wait for    * RPC calls on the datanode->NN path.    */
DECL|method|spyOnBposToNN ( DataNode dn, NameNode nn)
specifier|public
specifier|static
name|DatanodeProtocolClientSideTranslatorPB
name|spyOnBposToNN
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|NameNode
name|nn
parameter_list|)
block|{
name|String
name|bpid
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|BPOfferService
name|bpos
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BPOfferService
name|thisBpos
range|:
name|dn
operator|.
name|getAllBpOs
argument_list|()
control|)
block|{
if|if
condition|(
name|thisBpos
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
name|bpos
operator|=
name|thisBpos
expr_stmt|;
break|break;
block|}
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bpos
operator|!=
literal|null
argument_list|,
literal|"No such bpid: %s"
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
name|BPServiceActor
name|bpsa
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BPServiceActor
name|thisBpsa
range|:
name|bpos
operator|.
name|getBPServiceActors
argument_list|()
control|)
block|{
if|if
condition|(
name|thisBpsa
operator|.
name|getNNSocketAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
argument_list|)
condition|)
block|{
name|bpsa
operator|=
name|thisBpsa
expr_stmt|;
break|break;
block|}
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bpsa
operator|!=
literal|null
argument_list|,
literal|"No service actor to NN at %s"
argument_list|,
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|origNN
init|=
name|bpsa
operator|.
name|getNameNodeProxy
argument_list|()
decl_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|spy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|origNN
argument_list|)
decl_stmt|;
name|bpsa
operator|.
name|setNameNode
argument_list|(
name|spy
argument_list|)
expr_stmt|;
return|return
name|spy
return|;
block|}
comment|/**    * Starts an instance of DataNode with NN mocked. Called should ensure to    * shutdown the DN    *    * @throws IOException    */
DECL|method|startDNWithMockNN (Configuration conf, final InetSocketAddress nnSocketAddr, final String dnDataDir)
specifier|public
specifier|static
name|DataNode
name|startDNWithMockNN
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|nnSocketAddr
parameter_list|,
specifier|final
name|String
name|dnDataDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
operator|+
name|nnSocketAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|nnSocketAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageLocation
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|dnDataDir
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|dataDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeProtocolClientSideTranslatorPB
name|namenode
init|=
name|mock
argument_list|(
name|DatanodeProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|DatanodeRegistration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DatanodeRegistration
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|(
name|DatanodeRegistration
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|namenode
argument_list|)
operator|.
name|registerDatanode
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|versionRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
name|TEST_CLUSTER_ID
argument_list|,
name|TEST_POOL_ID
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|sendHeartbeat
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|StorageReport
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|VolumeFailureSummary
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|SlowPeerReports
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HeartbeatResponse
argument_list|(
operator|new
name|DatanodeCommand
index|[
literal|0
index|]
argument_list|,
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
operator||
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
operator|new
name|DataNode
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|DatanodeProtocolClientSideTranslatorPB
name|connectToNN
parameter_list|(
name|InetSocketAddress
name|nnAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nnSocketAddr
argument_list|,
name|nnAddr
argument_list|)
expr_stmt|;
return|return
name|namenode
return|;
block|}
block|}
decl_stmt|;
comment|// Trigger a heartbeat so that it acknowledges the NN as active.
name|dn
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|triggerHeartbeatForTests
argument_list|()
expr_stmt|;
return|return
name|dn
return|;
block|}
block|}
end_class

end_unit

