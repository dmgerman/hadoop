begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.security.token.block
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|ClientDatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetReplicaVisibleLengthRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetReplicaVisibleLengthResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientDatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_comment
comment|/** Unit tests for block tokens */
end_comment

begin_class
DECL|class|TestBlockToken
specifier|public
class|class
name|TestBlockToken
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockToken
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|Client
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|Server
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|SaslRpcClient
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|SaslRpcServer
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|SaslInputStream
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Directory where we can count our open file descriptors under Linux    */
DECL|field|FD_DIR
specifier|static
specifier|final
name|File
name|FD_DIR
init|=
operator|new
name|File
argument_list|(
literal|"/proc/self/fd/"
argument_list|)
decl_stmt|;
DECL|field|blockKeyUpdateInterval
specifier|final
name|long
name|blockKeyUpdateInterval
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 10 mins
DECL|field|blockTokenLifetime
specifier|final
name|long
name|blockTokenLifetime
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 2 mins
DECL|field|block1
specifier|final
name|ExtendedBlock
name|block1
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"0"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
DECL|field|block2
specifier|final
name|ExtendedBlock
name|block2
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"10"
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
DECL|field|block3
specifier|final
name|ExtendedBlock
name|block3
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"-10"
argument_list|,
operator|-
literal|108L
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|disableKerberos ()
specifier|public
name|void
name|disableKerberos
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|GetLengthAnswer
specifier|private
specifier|static
class|class
name|GetLengthAnswer
implements|implements
name|Answer
argument_list|<
name|GetReplicaVisibleLengthResponseProto
argument_list|>
block|{
DECL|field|sm
specifier|final
name|BlockTokenSecretManager
name|sm
decl_stmt|;
DECL|field|ident
specifier|final
name|BlockTokenIdentifier
name|ident
decl_stmt|;
DECL|method|GetLengthAnswer (BlockTokenSecretManager sm, BlockTokenIdentifier ident)
specifier|public
name|GetLengthAnswer
parameter_list|(
name|BlockTokenSecretManager
name|sm
parameter_list|,
name|BlockTokenIdentifier
name|ident
parameter_list|)
block|{
name|this
operator|.
name|sm
operator|=
name|sm
expr_stmt|;
name|this
operator|.
name|ident
operator|=
name|ident
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer ( InvocationOnMock invocation)
specifier|public
name|GetReplicaVisibleLengthResponseProto
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|args
index|[]
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|GetReplicaVisibleLengthRequestProto
name|req
init|=
operator|(
name|GetReplicaVisibleLengthRequestProto
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|TokenIdentifier
argument_list|>
name|tokenIds
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one BlockTokenIdentifier expected"
argument_list|,
literal|1
argument_list|,
name|tokenIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TokenIdentifier
name|tokenId
range|:
name|tokenIds
control|)
block|{
name|BlockTokenIdentifier
name|id
init|=
operator|(
name|BlockTokenIdentifier
operator|)
name|tokenId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Received BlockTokenIdentifier is wrong"
argument_list|,
name|ident
operator|.
name|equals
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|id
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
block|}
return|return
name|GetReplicaVisibleLengthResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
DECL|method|generateTokenId (BlockTokenSecretManager sm, ExtendedBlock block, EnumSet<BlockTokenIdentifier.AccessMode> accessModes, StorageType[] storageTypes, String[] storageIds)
specifier|private
name|BlockTokenIdentifier
name|generateTokenId
parameter_list|(
name|BlockTokenSecretManager
name|sm
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|EnumSet
argument_list|<
name|BlockTokenIdentifier
operator|.
name|AccessMode
argument_list|>
name|accessModes
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|String
index|[]
name|storageIds
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|sm
operator|.
name|generateToken
argument_list|(
name|block
argument_list|,
name|accessModes
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
decl_stmt|;
name|BlockTokenIdentifier
name|id
init|=
name|sm
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|method|testWritable (boolean enableProtobuf)
specifier|private
name|void
name|testWritable
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|Exception
block|{
name|TestWritable
operator|.
name|testWritable
argument_list|(
operator|new
name|BlockTokenIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block1
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// We must be backwards compatible when adding storageType
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWritableLegacy ()
specifier|public
name|void
name|testWritableLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|testWritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWritableProtobuf ()
specifier|public
name|void
name|testWritableProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|testWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccess (BlockTokenSecretManager m, Token<BlockTokenIdentifier> t, ExtendedBlock blk, BlockTokenIdentifier.AccessMode mode, StorageType[] storageTypes, String[] storageIds)
specifier|private
specifier|static
name|void
name|checkAccess
parameter_list|(
name|BlockTokenSecretManager
name|m
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|t
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|BlockTokenIdentifier
operator|.
name|AccessMode
name|mode
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|String
index|[]
name|storageIds
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageIds
operator|==
literal|null
condition|)
block|{
comment|// Test overloaded checkAccess method.
name|m
operator|.
name|checkAccess
argument_list|(
name|t
operator|.
name|decodeIdentifier
argument_list|()
argument_list|,
literal|null
argument_list|,
name|blk
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageTypes
operator|==
literal|null
condition|)
block|{
comment|// Test overloaded checkAccess method.
name|m
operator|.
name|checkAccess
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|blk
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|checkAccess
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|blk
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
block|}
DECL|method|tokenGenerationAndVerification (BlockTokenSecretManager master, BlockTokenSecretManager slave, StorageType[] storageTypes, String[] storageIds)
specifier|private
name|void
name|tokenGenerationAndVerification
parameter_list|(
name|BlockTokenSecretManager
name|master
parameter_list|,
name|BlockTokenSecretManager
name|slave
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|String
index|[]
name|storageIds
parameter_list|)
throws|throws
name|Exception
block|{
comment|// single-mode tokens
for|for
control|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
name|mode
range|:
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|values
argument_list|()
control|)
block|{
comment|// generated by master
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token1
init|=
name|master
operator|.
name|generateToken
argument_list|(
name|block1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|master
argument_list|,
name|token1
argument_list|,
name|block1
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|(
name|slave
argument_list|,
name|token1
argument_list|,
name|block1
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
comment|// generated by slave
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token2
init|=
name|slave
operator|.
name|generateToken
argument_list|(
name|block2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|master
argument_list|,
name|token2
argument_list|,
name|block2
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|(
name|slave
argument_list|,
name|token2
argument_list|,
name|block2
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
block|}
comment|// multi-mode tokens
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|mtoken
init|=
name|master
operator|.
name|generateToken
argument_list|(
name|block3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
name|mode
range|:
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|values
argument_list|()
control|)
block|{
name|checkAccess
argument_list|(
name|master
argument_list|,
name|mtoken
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|(
name|slave
argument_list|,
name|mtoken
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test block key and token handling */
DECL|method|testBlockTokenSecretManager (boolean enableProtobuf)
specifier|private
name|void
name|testBlockTokenSecretManager
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|Exception
block|{
name|BlockTokenSecretManager
name|masterHandler
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|BlockTokenSecretManager
name|slaveHandler
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|ExportedBlockKeys
name|keys
init|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
decl_stmt|;
name|slaveHandler
operator|.
name|addKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// key updating
name|masterHandler
operator|.
name|updateKeys
argument_list|()
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|keys
operator|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
expr_stmt|;
name|slaveHandler
operator|.
name|addKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenSecretManagerLegacy ()
specifier|public
name|void
name|testBlockTokenSecretManagerLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenSecretManager
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenSecretManagerProtobuf ()
specifier|public
name|void
name|testBlockTokenSecretManagerProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenSecretManager
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createMockDatanode (BlockTokenSecretManager sm, Token<BlockTokenIdentifier> token, Configuration conf)
specifier|private
specifier|static
name|Server
name|createMockDatanode
parameter_list|(
name|BlockTokenSecretManager
name|sm
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServiceException
block|{
name|ClientDatanodeProtocolPB
name|mockDN
init|=
name|mock
argument_list|(
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|BlockTokenIdentifier
name|id
init|=
name|sm
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|GetLengthAnswer
argument_list|(
name|sm
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockDN
argument_list|)
operator|.
name|getReplicaVisibleLength
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|BlockingService
name|service
init|=
name|ClientDatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|mockDN
argument_list|)
decl_stmt|;
return|return
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|service
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|sm
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testBlockTokenRpc (boolean enableProtobuf)
specifier|private
name|void
name|testBlockTokenRpc
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|sm
operator|.
name|generateToken
argument_list|(
name|block3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|createMockDatanode
argument_list|(
name|sm
argument_list|,
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ticket
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|block3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ticket
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|ClientDatanodeProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|DFSUtilClient
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block3
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|proxy
operator|.
name|getReplicaVisibleLength
argument_list|(
name|block3
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockTokenRpcLegacy ()
specifier|public
name|void
name|testBlockTokenRpcLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenRpc
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenRpcProtobuf ()
specifier|public
name|void
name|testBlockTokenRpcProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenRpc
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that fast repeated invocations of createClientDatanodeProtocolProxy    * will not end up using up thousands of sockets. This is a regression test    * for HDFS-1965.    */
DECL|method|testBlockTokenRpcLeak (boolean enableProtobuf)
specifier|private
name|void
name|testBlockTokenRpcLeak
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FD_DIR
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|sm
operator|.
name|generateToken
argument_list|(
name|block3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|createMockDatanode
argument_list|(
name|sm
argument_list|,
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|DatanodeID
name|fakeDnId
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeID
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"fake-pool"
argument_list|,
operator|new
name|Block
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|LocatedBlock
name|fakeBlock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
operator|new
name|DatanodeInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|fakeBlock
operator|.
name|setBlockToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Create another RPC proxy with the same configuration - this will never
comment|// attempt to connect anywhere -- but it causes the refcount on the
comment|// RPC "Client" object to stay above 0 such that RPC.stopProxy doesn't
comment|// actually close the TCP connections to the real target DN.
name|ClientDatanodeProtocol
name|proxyToNoWhere
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|ClientDatanodeProtocol
operator|.
name|class
argument_list|,
name|ClientDatanodeProtocol
operator|.
name|versionID
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"junk"
argument_list|)
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|ClientDatanodeProtocol
name|proxy
init|=
literal|null
decl_stmt|;
name|int
name|fdsAtStart
init|=
name|countOpenFileDescriptors
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|endTime
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|3000
decl_stmt|;
while|while
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|proxy
operator|=
name|DFSUtilClient
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|fakeDnId
argument_list|,
name|conf
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|,
name|fakeBlock
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block3
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|proxy
operator|.
name|getReplicaVisibleLength
argument_list|(
name|block3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Num open fds:"
operator|+
name|countOpenFileDescriptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|fdsAtEnd
init|=
name|countOpenFileDescriptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|fdsAtEnd
operator|-
name|fdsAtStart
operator|>
literal|50
condition|)
block|{
name|fail
argument_list|(
literal|"Leaked "
operator|+
operator|(
name|fdsAtEnd
operator|-
name|fdsAtStart
operator|)
operator|+
literal|" fds!"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxyToNoWhere
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenRpcLeakLegacy ()
specifier|public
name|void
name|testBlockTokenRpcLeakLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenRpcLeak
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenRpcLeakProtobuf ()
specifier|public
name|void
name|testBlockTokenRpcLeakProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockTokenRpcLeak
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the current number of file descriptors open by this process.    */
DECL|method|countOpenFileDescriptors ()
specifier|private
specifier|static
name|int
name|countOpenFileDescriptors
parameter_list|()
block|{
return|return
name|FD_DIR
operator|.
name|list
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**    * Test {@link BlockPoolTokenSecretManager}    */
DECL|method|testBlockPoolTokenSecretManager (boolean enableProtobuf)
specifier|private
name|void
name|testBlockPoolTokenSecretManager
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|Exception
block|{
name|BlockPoolTokenSecretManager
name|bpMgr
init|=
operator|new
name|BlockPoolTokenSecretManager
argument_list|()
decl_stmt|;
comment|// Test BlockPoolSecretManager with upto 10 block pools
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bpid
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlockTokenSecretManager
name|masterHandler
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|BlockTokenSecretManager
name|slaveHandler
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|bpMgr
operator|.
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|slaveHandler
argument_list|)
expr_stmt|;
name|ExportedBlockKeys
name|keys
init|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
decl_stmt|;
name|bpMgr
operator|.
name|addKeys
argument_list|(
name|bpid
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|String
index|[]
name|storageIds
init|=
operator|new
name|String
index|[]
block|{
literal|"DS-9001"
block|}
decl_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Test key updating
name|masterHandler
operator|.
name|updateKeys
argument_list|()
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|keys
operator|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
expr_stmt|;
name|bpMgr
operator|.
name|addKeys
argument_list|(
name|bpid
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"DS-9001"
block|}
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|bpMgr
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockPoolTokenSecretManagerLegacy ()
specifier|public
name|void
name|testBlockPoolTokenSecretManagerLegacy
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockPoolTokenSecretManager
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockPoolTokenSecretManagerProtobuf ()
specifier|public
name|void
name|testBlockPoolTokenSecretManagerProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|testBlockPoolTokenSecretManager
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test writes a file and gets the block locations without closing the    * file, and tests the block token in the last block. Block token is verified    * by ensuring it is of correct kind.    *    * @throws IOException    * @throws InterruptedException    */
DECL|method|testBlockTokenInLastLocatedBlock (boolean enableProtobuf)
specifier|private
name|void
name|testBlockTokenInLastLocatedBlock
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE
argument_list|,
name|enableProtobuf
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
literal|"/testBlockTokenInLastLocatedBlock"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|1000
index|]
argument_list|)
expr_stmt|;
comment|// ensure that the first block is written out (see FSOutputSummer#flush)
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
while|while
condition|(
name|locatedBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|locatedBlocks
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|locatedBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlockToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BlockTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockTokenInLastLocatedBlockLegacy ()
specifier|public
name|void
name|testBlockTokenInLastLocatedBlockLegacy
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testBlockTokenInLastLocatedBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenInLastLocatedBlockProtobuf ()
specifier|public
name|void
name|testBlockTokenInLastLocatedBlockProtobuf
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testBlockTokenInLastLocatedBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyBlockTokenBytesIsLegacy ()
specifier|public
name|void
name|testLegacyBlockTokenBytesIsLegacy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|useProto
init|=
literal|false
decl_stmt|;
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|useProto
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|sm
operator|.
name|generateToken
argument_list|(
name|block1
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tokenBytes
init|=
name|token
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|legacyToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|protobufToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|readToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|legacyToken
operator|.
name|readFieldsLegacy
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|boolean
name|invalidProtobufMessage
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|protobufToken
operator|.
name|readFieldsProtobuf
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|invalidProtobufMessage
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invalidProtobufMessage
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readToken
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
comment|// Using legacy, the token parses as a legacy block token and not a protobuf
name|assertEquals
argument_list|(
name|legacyToken
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|protobufToken
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyLegacyBlockTokenBytesIsLegacy ()
specifier|public
name|void
name|testEmptyLegacyBlockTokenBytesIsLegacy
parameter_list|()
throws|throws
name|IOException
block|{
name|BlockTokenIdentifier
name|emptyIdent
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|emptyIdent
operator|.
name|writeLegacy
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|byte
index|[]
name|emptyIdentBytes
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|BlockTokenIdentifier
name|legacyToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|protobufToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|readToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|emptyIdentBytes
argument_list|,
name|emptyIdentBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|legacyToken
operator|.
name|readFieldsLegacy
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|boolean
name|invalidProtobufMessage
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dib
operator|.
name|reset
argument_list|(
name|emptyIdentBytes
argument_list|,
name|emptyIdentBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|protobufToken
operator|.
name|readFieldsProtobuf
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|invalidProtobufMessage
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invalidProtobufMessage
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|emptyIdentBytes
argument_list|,
name|emptyIdentBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readToken
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProtobufBlockTokenBytesIsProtobuf ()
specifier|public
name|void
name|testProtobufBlockTokenBytesIsProtobuf
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|useProto
init|=
literal|true
decl_stmt|;
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|useProto
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|sm
operator|.
name|generateToken
argument_list|(
name|block1
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tokenBytes
init|=
name|token
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|legacyToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|protobufToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|readToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
comment|/* We receive NegativeArraySizeException because we didn't call      * readFields and instead try to parse this directly as a legacy      * BlockTokenIdentifier.      *      * Note: because the parsing depends on the expiryDate which is based on      * `Time.now()` it can sometimes fail with IOException and sometimes with      * NegativeArraySizeException.      */
name|boolean
name|invalidLegacyMessage
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|legacyToken
operator|.
name|readFieldsLegacy
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NegativeArraySizeException
name|e
parameter_list|)
block|{
name|invalidLegacyMessage
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invalidLegacyMessage
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|protobufToken
operator|.
name|readFieldsProtobuf
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readToken
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
comment|// Using protobuf, the token parses as a protobuf and not a legacy block
comment|// token
name|assertNotEquals
argument_list|(
name|legacyToken
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|protobufToken
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
block|}
DECL|method|testCraftedProtobufBlockTokenIdentifier ( BlockTokenIdentifier identifier, boolean expectIOE, boolean expectRTE)
specifier|private
name|void
name|testCraftedProtobufBlockTokenIdentifier
parameter_list|(
name|BlockTokenIdentifier
name|identifier
parameter_list|,
name|boolean
name|expectIOE
parameter_list|,
name|boolean
name|expectRTE
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|writeProtobuf
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|byte
index|[]
name|identBytes
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|BlockTokenIdentifier
name|legacyToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|protobufToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|readToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|boolean
name|invalidLegacyMessage
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dib
operator|.
name|reset
argument_list|(
name|identBytes
argument_list|,
name|identBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|legacyToken
operator|.
name|readFieldsLegacy
argument_list|(
name|dib
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectIOE
condition|)
block|{
name|fail
argument_list|(
literal|"Received IOException but it was not expected."
argument_list|)
expr_stmt|;
block|}
name|invalidLegacyMessage
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectRTE
condition|)
block|{
name|fail
argument_list|(
literal|"Received RuntimeException but it was not expected."
argument_list|)
expr_stmt|;
block|}
name|invalidLegacyMessage
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|invalidLegacyMessage
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|identBytes
argument_list|,
name|identBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|protobufToken
operator|.
name|readFieldsProtobuf
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|identBytes
argument_list|,
name|identBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readToken
operator|.
name|readFieldsProtobuf
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|protobufToken
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|identifier
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyProtobufBlockTokenBytesIsProtobuf ()
specifier|public
name|void
name|testEmptyProtobufBlockTokenBytesIsProtobuf
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Empty BlockTokenIdentifiers throw IOException
name|BlockTokenIdentifier
name|identifier
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|testCraftedProtobufBlockTokenIdentifier
argument_list|(
name|identifier
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCraftedProtobufBlockTokenBytesIsProtobuf ()
specifier|public
name|void
name|testCraftedProtobufBlockTokenBytesIsProtobuf
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* Parsing BlockTokenIdentifier with expiryDate      * 2017-02-09 00:12:35,072+0100 will throw IOException.      * However, expiryDate of      * 2017-02-09 00:12:35,071+0100 will throw NegativeArraySizeException.      */
name|BlockTokenIdentifier
name|identifier
init|=
operator|new
name|BlockTokenIdentifier
argument_list|(
literal|"user"
argument_list|,
literal|"blockpool"
argument_list|,
literal|123
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fake-storage-id"
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2017
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|long
name|datetime
init|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|datetime
operator|=
operator|(
operator|(
name|datetime
operator|/
literal|1000
operator|)
operator|*
literal|1000
operator|)
expr_stmt|;
comment|// strip milliseconds.
name|datetime
operator|=
name|datetime
operator|+
literal|71
expr_stmt|;
comment|// 2017-02-09 00:12:35,071+0100
name|identifier
operator|.
name|setExpiryDate
argument_list|(
name|datetime
argument_list|)
expr_stmt|;
name|testCraftedProtobufBlockTokenIdentifier
argument_list|(
name|identifier
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|datetime
operator|+=
literal|1
expr_stmt|;
comment|// 2017-02-09 00:12:35,072+0100
name|identifier
operator|.
name|setExpiryDate
argument_list|(
name|datetime
argument_list|)
expr_stmt|;
name|testCraftedProtobufBlockTokenIdentifier
argument_list|(
name|identifier
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAndReadBlockToken ( BlockTokenIdentifier identifier)
specifier|private
name|BlockTokenIdentifier
name|writeAndReadBlockToken
parameter_list|(
name|BlockTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|byte
index|[]
name|identBytes
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|BlockTokenIdentifier
name|readToken
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|identBytes
argument_list|,
name|identBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|readToken
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|identifier
argument_list|,
name|readToken
argument_list|)
expr_stmt|;
return|return
name|readToken
return|;
block|}
annotation|@
name|Test
DECL|method|testEmptyBlockTokenSerialization ()
specifier|public
name|void
name|testEmptyBlockTokenSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|BlockTokenIdentifier
name|ident
init|=
operator|new
name|BlockTokenIdentifier
argument_list|()
decl_stmt|;
name|BlockTokenIdentifier
name|ret
init|=
name|writeAndReadBlockToken
argument_list|(
name|ident
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getKeyId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getUserId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getAccessModes
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ret
operator|.
name|getStorageTypes
argument_list|()
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
block|}
DECL|method|testBlockTokenSerialization (boolean useProto)
specifier|private
name|void
name|testBlockTokenSerialization
parameter_list|(
name|boolean
name|useProto
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|BlockTokenIdentifier
operator|.
name|AccessMode
argument_list|>
name|accessModes
init|=
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
decl_stmt|;
name|BlockTokenIdentifier
name|ident
init|=
operator|new
name|BlockTokenIdentifier
argument_list|(
literal|"user"
argument_list|,
literal|"bpool"
argument_list|,
literal|123
argument_list|,
name|accessModes
argument_list|,
name|storageTypes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fake-storage-id"
block|}
argument_list|,
name|useProto
argument_list|)
decl_stmt|;
name|ident
operator|.
name|setExpiryDate
argument_list|(
literal|1487080345L
argument_list|)
expr_stmt|;
name|BlockTokenIdentifier
name|ret
init|=
name|writeAndReadBlockToken
argument_list|(
name|ident
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
literal|1487080345L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getKeyId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getUserId
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
literal|"bpool"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ret
operator|.
name|getAccessModes
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ret
operator|.
name|getStorageTypes
argument_list|()
argument_list|,
name|storageTypes
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ret
operator|.
name|getStorageIds
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fake-storage-id"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockTokenSerialization ()
specifier|public
name|void
name|testBlockTokenSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|testBlockTokenSerialization
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testBlockTokenSerialization
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testBadStorageIDCheckAccess (boolean enableProtobuf)
specifier|private
name|void
name|testBadStorageIDCheckAccess
parameter_list|(
name|boolean
name|enableProtobuf
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
name|enableProtobuf
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
decl_stmt|;
name|String
index|[]
name|storageIds
init|=
operator|new
name|String
index|[]
block|{
literal|"fake-storage-id"
block|}
decl_stmt|;
name|String
index|[]
name|badStorageIds
init|=
operator|new
name|String
index|[]
block|{
literal|"BAD-STORAGE-ID"
block|}
decl_stmt|;
name|String
index|[]
name|emptyStorageIds
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|BlockTokenIdentifier
operator|.
name|AccessMode
name|mode
init|=
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|READ
decl_stmt|;
name|BlockTokenIdentifier
name|id
init|=
name|generateTokenId
argument_list|(
name|sm
argument_list|,
name|block3
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
decl_stmt|;
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
expr_stmt|;
try|try
block|{
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|badStorageIds
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected strict BlockTokenSecretManager to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecretManager
operator|.
name|InvalidToken
name|e
parameter_list|)
block|{     }
comment|// We allow empty storageId tokens for backwards compatibility. i.e. old
comment|// clients may not have known to pass the storageId parameter to the
comment|// writeBlock api.
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
name|emptyStorageIds
argument_list|)
expr_stmt|;
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|,
name|storageTypes
argument_list|)
expr_stmt|;
name|sm
operator|.
name|checkAccess
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|block3
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadStorageIDCheckAccess ()
specifier|public
name|void
name|testBadStorageIDCheckAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|testBadStorageIDCheckAccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testBadStorageIDCheckAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that block token serialNo is always within the range designated to    * to the NameNode.    */
annotation|@
name|Test
DECL|method|testBlockTokenRanges ()
specifier|public
name|void
name|testBlockTokenRanges
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|interval
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|numNNs
init|=
name|Integer
operator|.
name|MAX_VALUE
operator|/
name|interval
decl_stmt|;
for|for
control|(
name|int
name|nnIdx
init|=
literal|0
init|;
name|nnIdx
operator|<
literal|64
condition|;
name|nnIdx
operator|++
control|)
block|{
name|BlockTokenSecretManager
name|sm
init|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|blockKeyUpdateInterval
argument_list|,
name|blockTokenLifetime
argument_list|,
name|nnIdx
argument_list|,
name|numNNs
argument_list|,
literal|"fake-pool"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|rangeStart
init|=
name|nnIdx
operator|*
name|interval
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interval
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|int
name|serialNo
init|=
name|sm
operator|.
name|getSerialNoForTesting
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"serialNo "
operator|+
name|serialNo
operator|+
literal|" is not in the designated range: ["
operator|+
name|rangeStart
operator|+
literal|", "
operator|+
operator|(
name|rangeStart
operator|+
name|interval
operator|)
operator|+
literal|")"
argument_list|,
name|serialNo
operator|>=
name|rangeStart
operator|&&
name|serialNo
operator|<
operator|(
name|rangeStart
operator|+
name|interval
operator|)
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateKeys
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

