begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestDFSAdminWithHA
specifier|public
class|class
name|TestDFSAdminWithHA
block|{
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniQJMHACluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|admin
specifier|private
name|DFSAdmin
name|admin
decl_stmt|;
DECL|field|originOut
specifier|private
name|PrintStream
name|originOut
decl_stmt|;
DECL|field|originErr
specifier|private
name|PrintStream
name|originErr
decl_stmt|;
DECL|field|NSID
specifier|private
specifier|static
specifier|final
name|String
name|NSID
init|=
literal|"ns1"
decl_stmt|;
DECL|method|assertOutputMatches (String string)
specifier|private
name|void
name|assertOutputMatches
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|String
name|errOutput
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|output
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errOutput
operator|.
name|matches
argument_list|(
name|string
argument_list|)
operator|&&
operator|!
name|output
operator|.
name|matches
argument_list|(
name|string
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expected output to match '"
operator|+
name|string
operator|+
literal|"' but err_output was:\n"
operator|+
name|errOutput
operator|+
literal|"\n and output was: \n"
operator|+
name|output
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|setHAConf (Configuration conf, String nn1Addr, String nn2Addr)
specifier|private
name|void
name|setHAConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nn1Addr
parameter_list|,
name|String
name|nn2Addr
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://"
operator|+
name|NSID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
name|NSID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
argument_list|,
name|NSID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|NSID
argument_list|)
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|NSID
argument_list|,
literal|"nn1"
argument_list|)
argument_list|,
name|nn1Addr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|NSID
argument_list|,
literal|"nn2"
argument_list|)
argument_list|,
name|nn2Addr
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpHaCluster (boolean security)
specifier|private
name|void
name|setUpHaCluster
parameter_list|(
name|boolean
name|security
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
name|security
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|setHAConf
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|DFSAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
name|originOut
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|originErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|originOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|originErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetSafeMode ()
specifier|public
name|void
name|testSetSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Enter safemode
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"enter"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Safe mode is ON in.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Get safemode
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"get"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"Safe mode is ON in.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Leave safemode
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"leave"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"Safe mode is OFF in.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Get safemode
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"get"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"Safe mode is OFF in.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSaveNamespace ()
specifier|public
name|void
name|testSaveNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Safe mode should be turned ON in order to create namespace image.
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-safemode"
block|,
literal|"enter"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Safe mode is ON in.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-saveNamespace"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"Save namespace successful for.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRestoreFailedStorage ()
specifier|public
name|void
name|testRestoreFailedStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-restoreFailedStorage"
block|,
literal|"check"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"restoreFailedStorage is set to false for.*"
decl_stmt|;
comment|// Default is false
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-restoreFailedStorage"
block|,
literal|"true"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"restoreFailedStorage is set to true for.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-restoreFailedStorage"
block|,
literal|"false"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"restoreFailedStorage is set to false for.*"
expr_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRefreshNodes ()
specifier|public
name|void
name|testRefreshNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshNodes"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Refresh nodes successful for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetBalancerBandwidth ()
specifier|public
name|void
name|testSetBalancerBandwidth
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"10"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Balancer bandwidth is set to 10 for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMetaSave ()
specifier|public
name|void
name|testMetaSave
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-metasave"
block|,
literal|"dfs.meta"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Created metasave file dfs.meta in the log directory"
operator|+
literal|" of namenode.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRefreshServiceAcl ()
specifier|public
name|void
name|testRefreshServiceAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshServiceAcl"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Refresh service acl successful for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRefreshUserToGroupsMappings ()
specifier|public
name|void
name|testRefreshUserToGroupsMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshUserToGroupsMappings"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Refresh user to groups mapping successful for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRefreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Refresh super user groups configuration successful for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRefreshCallQueue ()
specifier|public
name|void
name|testRefreshCallQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpHaCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshCallQueue"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Refresh call queue successful for.*"
decl_stmt|;
name|assertOutputMatches
argument_list|(
name|message
operator|+
literal|"\n"
operator|+
name|message
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

