begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This tests BlockReaderRemote.  */
end_comment

begin_class
DECL|class|TestBlockReaderRemote
specifier|public
class|class
name|TestBlockReaderRemote
block|{
DECL|field|util
specifier|private
name|BlockReaderTestUtil
name|util
decl_stmt|;
DECL|field|blockData
specifier|private
name|byte
index|[]
name|blockData
decl_stmt|;
DECL|field|reader
specifier|private
name|BlockReader
name|reader
decl_stmt|;
comment|/**    * if override this, make sure return array length is less than    * block size.    */
DECL|method|getBlockData ()
name|byte
index|[]
name|getBlockData
parameter_list|()
block|{
name|int
name|length
init|=
literal|1
operator|<<
literal|22
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|133
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|getBlockReader (LocatedBlock block)
specifier|private
name|BlockReader
name|getBlockReader
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|util
operator|.
name|getBlockReader
argument_list|(
name|block
argument_list|,
literal|0
argument_list|,
name|blockData
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|BlockReaderTestUtil
argument_list|(
literal|1
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|=
name|getBlockData
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|util
operator|.
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testfile
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|testfile
argument_list|)
decl_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|blockData
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|LocatedBlock
name|blk
init|=
name|util
operator|.
name|getFileBlocks
argument_list|(
name|testfile
argument_list|,
name|blockData
operator|.
name|length
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|reader
operator|=
name|getBlockReader
argument_list|(
name|blk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSkip ()
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|blockData
operator|.
name|length
condition|;
control|)
block|{
name|long
name|skip
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|1
decl_stmt|;
name|long
name|skipped
init|=
name|reader
operator|.
name|skip
argument_list|(
name|skip
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|+
name|skip
operator|>=
name|blockData
operator|.
name|length
condition|)
block|{
name|assertEquals
argument_list|(
name|blockData
operator|.
name|length
argument_list|,
name|pos
operator|+
name|skipped
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|skip
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|skipped
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockData
index|[
name|pos
index|]
argument_list|,
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

