begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the replication related parameters in the namenode can  * be refreshed dynamically, without a namenode restart.  */
end_comment

begin_class
DECL|class|TestRefreshNamenodeReplicationConfig
specifier|public
class|class
name|TestRefreshNamenodeReplicationConfig
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleSingleNN
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|bm
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests to ensure each of the block replication parameters can be passed    * updated successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testParamsCanBeReconfigured ()
specifier|public
name|void
name|testParamsCanBeReconfigured
parameter_list|()
throws|throws
name|ReconfigurationException
block|{
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|bm
operator|.
name|getMaxReplicationStreams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|bm
operator|.
name|getReplicationStreamsHardLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|bm
operator|.
name|getBlocksReplWorkMultiplier
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY
argument_list|,
literal|"22"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|bm
operator|.
name|getMaxReplicationStreams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|bm
operator|.
name|getReplicationStreamsHardLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|bm
operator|.
name|getBlocksReplWorkMultiplier
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests to ensure reconfiguration fails with a negative, zero or string value    * value for each parameter.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testReconfigureFailsWithInvalidValues ()
specifier|public
name|void
name|testReconfigureFailsWithInvalidValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[]
block|{
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
block|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY
block|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
block|}
decl_stmt|;
comment|// Ensure we cannot set any of the parameters negative
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|ReconfigurationException
name|e
init|=
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|ReconfigurationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|key
argument_list|,
literal|"-20"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|+
literal|" = '-20' is invalid. It should be a "
operator|+
literal|"positive, non-zero integer value."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure none of the values were updated from the defaults
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|bm
operator|.
name|getMaxReplicationStreams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|bm
operator|.
name|getReplicationStreamsHardLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|bm
operator|.
name|getBlocksReplWorkMultiplier
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|ReconfigurationException
name|e
init|=
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|ReconfigurationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|key
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
operator|+
literal|" = '0' is invalid. It should be a "
operator|+
literal|"positive, non-zero integer value."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure none of the values were updated from the defaults
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|bm
operator|.
name|getMaxReplicationStreams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|bm
operator|.
name|getReplicationStreamsHardLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|bm
operator|.
name|getBlocksReplWorkMultiplier
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure none of the parameters can be set to a string value
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|ReconfigurationException
name|e
init|=
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|ReconfigurationException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|key
argument_list|,
literal|"str"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NumberFormatException
argument_list|)
expr_stmt|;
block|}
comment|// Ensure none of the values were updated from the defaults
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|bm
operator|.
name|getMaxReplicationStreams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|bm
operator|.
name|getReplicationStreamsHardLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|bm
operator|.
name|getBlocksReplWorkMultiplier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

