begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for permission */
end_comment

begin_class
DECL|class|TestPermission
specifier|public
class|class
name|TestPermission
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPermission
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_PATH
specifier|final
specifier|private
specifier|static
name|Path
name|ROOT_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
decl_stmt|;
DECL|field|CHILD_DIR1
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_DIR1
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"child1"
argument_list|)
decl_stmt|;
DECL|field|CHILD_DIR2
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_DIR2
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"child2"
argument_list|)
decl_stmt|;
DECL|field|CHILD_DIR3
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_DIR3
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"child3"
argument_list|)
decl_stmt|;
DECL|field|CHILD_FILE1
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_FILE1
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|CHILD_FILE2
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_FILE2
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|CHILD_FILE3
specifier|final
specifier|private
specifier|static
name|Path
name|CHILD_FILE3
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
DECL|field|FILE_LEN
specifier|final
specifier|private
specifier|static
name|int
name|FILE_LEN
init|=
literal|100
decl_stmt|;
DECL|field|RAN
specifier|final
specifier|private
specifier|static
name|Random
name|RAN
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|USER_NAME
specifier|final
specifier|private
specifier|static
name|String
name|USER_NAME
init|=
literal|"user"
operator|+
name|RAN
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|final
specifier|private
specifier|static
name|String
index|[]
name|GROUP_NAMES
init|=
block|{
literal|"group1"
block|,
literal|"group2"
block|}
decl_stmt|;
DECL|field|NOUSER
specifier|final
specifier|private
specifier|static
name|String
name|NOUSER
init|=
literal|"nouser"
decl_stmt|;
DECL|field|NOGROUP
specifier|final
specifier|private
specifier|static
name|String
name|NOGROUP
init|=
literal|"nogroup"
decl_stmt|;
DECL|field|nnfs
specifier|private
name|FileSystem
name|nnfs
decl_stmt|;
DECL|field|userfs
specifier|private
name|FileSystem
name|userfs
decl_stmt|;
DECL|method|checkPermission (FileSystem fs, String path, FsPermission expected)
specifier|static
name|FsPermission
name|checkPermission
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|,
name|FsPermission
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
operator|+
literal|": "
operator|+
name|s
operator|.
name|isDirectory
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getPermission
argument_list|()
operator|+
literal|":"
operator|+
name|s
operator|.
name|getOwner
argument_list|()
operator|+
literal|":"
operator|+
name|s
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|s
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|toShort
argument_list|()
argument_list|,
name|s
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|getPermission
argument_list|()
return|;
block|}
DECL|method|createFile (FileSystem fs, String filename)
specifier|static
name|Path
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
comment|/**    * Tests backward compatibility. Configuration can be    * either set with old param dfs.umask that takes decimal umasks    * or dfs.umaskmode that takes symbolic or octal umask.    */
annotation|@
name|Test
DECL|method|testBackwardCompatibility ()
specifier|public
name|void
name|testBackwardCompatibility
parameter_list|()
block|{
comment|// Test 1 - old configuration key with decimal
comment|// umask value should be handled when set using
comment|// FSPermission.setUMask() API
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|18
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FsPermission
operator|.
name|setUMask
argument_list|(
name|conf
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 2 - new configuration key is handled
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"022"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 3 - equivalent valid umask
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"0022"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 4 - invalid umask
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"1222"
argument_list|)
expr_stmt|;
try|try
block|{
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect IllegalArgumentException happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//pass, exception successfully trigger
block|}
comment|// Test 5 - invalid umask
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"01222"
argument_list|)
expr_stmt|;
try|try
block|{
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect IllegalArgumentException happen"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//pass, exception successfully trigger
block|}
block|}
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FsPermission
name|rootPerm
init|=
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FsPermission
name|inheritPerm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
call|(
name|short
call|)
argument_list|(
name|rootPerm
operator|.
name|toShort
argument_list|()
operator||
literal|0300
argument_list|)
argument_list|)
decl_stmt|;
name|FsPermission
name|dirPerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a1/a2/a3"
argument_list|)
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/a1"
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/a1/a2"
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/a1/a2/a3"
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|dirPerm
operator|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0123
argument_list|)
expr_stmt|;
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
call|(
name|short
call|)
argument_list|(
name|dirPerm
operator|.
name|toShort
argument_list|()
operator||
literal|0300
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/aa/1/aa/2/aa/3"
argument_list|)
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/aa/1"
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/aa/1/aa/2"
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/aa/1/aa/2/aa/3"
argument_list|,
name|dirPerm
argument_list|)
expr_stmt|;
name|FsPermission
name|filePerm
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0444
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/b1/b2/b3.txt"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|filePerm
argument_list|,
literal|true
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|p
argument_list|)
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|p
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/b1"
argument_list|,
name|inheritPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/b1/b2"
argument_list|,
name|inheritPerm
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/b1/b2/b3.txt"
argument_list|,
name|filePerm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"022"
argument_list|)
expr_stmt|;
name|permission
operator|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0666
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/c1"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/c1/c2.txt"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/c1"
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|checkPermission
argument_list|(
name|fs
argument_list|,
literal|"/c1/c2.txt"
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFilePermission ()
specifier|public
name|void
name|testFilePermission
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|nnfs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// test permissions on files that do not exist
name|assertFalse
argument_list|(
name|nnfs
operator|.
name|exists
argument_list|(
name|CHILD_FILE1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: got "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// make sure nn can take user specified permission (with default fs
comment|// permission umask applied)
name|FSDataOutputStream
name|out
init|=
name|nnfs
operator|.
name|create
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_FILE1
argument_list|)
decl_stmt|;
comment|// FS_PERMISSIONS_UMASK_DEFAULT is 0022
name|assertTrue
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|delete
argument_list|(
name|CHILD_FILE1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// following dir/file creations are legal
name|nnfs
operator|.
name|mkdirs
argument_list|(
name|CHILD_DIR1
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_DIR1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Expect 755 = 777 (default dir) - 022 (default umask)"
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
name|nnfs
operator|.
name|create
argument_list|(
name|CHILD_FILE1
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_FILE1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rw-r--r--"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|FILE_LEN
index|]
decl_stmt|;
name|RAN
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_FILE1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rwx------"
argument_list|)
argument_list|)
expr_stmt|;
comment|// mkdirs with null permission
name|nnfs
operator|.
name|mkdirs
argument_list|(
name|CHILD_DIR3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_DIR3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Expect 755 = 777 (default dir) - 022 (default umask)"
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
expr_stmt|;
comment|// following read is legal
name|byte
name|dataIn
index|[]
init|=
operator|new
name|byte
index|[
name|FILE_LEN
index|]
decl_stmt|;
name|FSDataInputStream
name|fin
init|=
name|nnfs
operator|.
name|open
argument_list|(
name|CHILD_FILE1
argument_list|)
decl_stmt|;
name|int
name|bytesRead
init|=
name|fin
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bytesRead
operator|==
name|FILE_LEN
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILE_LEN
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|dataIn
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// test execution bit support for files
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_FILE1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"744"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|CHILD_FILE1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rwxr--r--"
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE1
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////
comment|// test illegal file/dir creation
name|UserGroupInformation
name|userGroupInfo
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|userfs
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|userGroupInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// make sure mkdir of a existing directory that is not owned by
comment|// this user does not throw an exception.
name|userfs
operator|.
name|mkdirs
argument_list|(
name|CHILD_DIR1
argument_list|)
expr_stmt|;
comment|// illegal mkdir
name|assertTrue
argument_list|(
operator|!
name|canMkdirs
argument_list|(
name|userfs
argument_list|,
name|CHILD_DIR2
argument_list|)
argument_list|)
expr_stmt|;
comment|// illegal file creation
name|assertTrue
argument_list|(
operator|!
name|canCreate
argument_list|(
name|userfs
argument_list|,
name|CHILD_FILE2
argument_list|)
argument_list|)
expr_stmt|;
comment|// illegal file open
name|assertTrue
argument_list|(
operator|!
name|canOpen
argument_list|(
name|userfs
argument_list|,
name|CHILD_FILE1
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|ROOT_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|CHILD_DIR1
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|RENAME_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|userfs
operator|.
name|mkdirs
argument_list|(
name|RENAME_PATH
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|canRename
argument_list|(
name|userfs
argument_list|,
name|RENAME_PATH
argument_list|,
name|CHILD_DIR1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test permissions on files that do not exist
name|assertFalse
argument_list|(
name|userfs
operator|.
name|exists
argument_list|(
name|CHILD_FILE3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|userfs
operator|.
name|setPermission
argument_list|(
name|CHILD_FILE3
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setPermission should fail for non-exist file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|ignored
parameter_list|)
block|{       }
comment|// Make sure any user can create file in root.
name|nnfs
operator|.
name|setPermission
argument_list|(
name|ROOT_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|testSuperCanChangeOwnerGroup
argument_list|()
expr_stmt|;
name|testNonSuperCanChangeToOwnGroup
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeToOtherGroup
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeGroupForOtherFile
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeGroupForNonExistentFile
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeOwner
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeOwnerForOtherFile
argument_list|()
expr_stmt|;
name|testNonSuperCannotChangeOwnerForNonExistentFile
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSuperCanChangeOwnerGroup ()
specifier|private
name|void
name|testSuperCanChangeOwnerGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|userfs
argument_list|,
literal|"testSuperCanChangeOwnerGroup"
argument_list|)
decl_stmt|;
name|nnfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
name|NOUSER
argument_list|,
name|NOGROUP
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"A super user can change owner"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|,
name|is
argument_list|(
name|NOUSER
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"A super user can change group"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|,
name|is
argument_list|(
name|NOGROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonSuperCanChangeToOwnGroup ()
specifier|private
name|void
name|testNonSuperCanChangeToOwnGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|userfs
argument_list|,
literal|"testNonSuperCanChangeToOwnGroup"
argument_list|)
decl_stmt|;
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
name|GROUP_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"A non-super user can change a file to own group"
argument_list|,
name|nnfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|,
name|is
argument_list|(
name|GROUP_NAMES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonSuperCannotChangeToOtherGroup ()
specifier|private
name|void
name|testNonSuperCannotChangeToOtherGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|userfs
argument_list|,
literal|"testNonSuperCannotChangeToOtherGroup"
argument_list|)
decl_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
name|NOGROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ACE when a non-super user tries to change a file to a "
operator|+
literal|"group where the user does not belong."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"User "
operator|+
name|userfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|+
literal|" does not belong to"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonSuperCannotChangeGroupForOtherFile ()
specifier|private
name|void
name|testNonSuperCannotChangeGroupForOtherFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|nnfs
argument_list|,
literal|"testNonSuperCannotChangeGroupForOtherFile"
argument_list|)
decl_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|file
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
name|GROUP_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ACE when a non-super user tries to set group for a file "
operator|+
literal|"not owned"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Permission denied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonSuperCannotChangeGroupForNonExistentFile ()
specifier|private
name|void
name|testNonSuperCannotChangeGroupForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testNonSuperCannotChangeGroupForNonExistentFile"
argument_list|)
decl_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
name|GROUP_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect FNFE when a non-super user tries to change group for a "
operator|+
literal|"non-existent file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|testNonSuperCannotChangeOwner ()
specifier|private
name|void
name|testNonSuperCannotChangeOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|userfs
argument_list|,
literal|"testNonSuperCannotChangeOwner"
argument_list|)
decl_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
name|NOUSER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ACE when a non-super user tries to change owner"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"User "
operator|+
name|userfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|+
literal|" is not a super user (non-super user cannot change owner)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonSuperCannotChangeOwnerForOtherFile ()
specifier|private
name|void
name|testNonSuperCannotChangeOwnerForOtherFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|createFile
argument_list|(
name|nnfs
argument_list|,
literal|"testNonSuperCannotChangeOwnerForOtherFile"
argument_list|)
decl_stmt|;
name|nnfs
operator|.
name|setPermission
argument_list|(
name|file
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
name|USER_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ACE when a non-super user tries to own a file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Permission denied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNonSuperCannotChangeOwnerForNonExistentFile ()
specifier|private
name|void
name|testNonSuperCannotChangeOwnerForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testNonSuperCannotChangeOwnerForNonExistentFile"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|userfs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|userfs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
name|NOUSER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ACE or FNFE when a non-super user tries to change owner "
operator|+
literal|"for a non-existent file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"User "
operator|+
name|userfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|+
literal|" is not a super user (non-super user cannot change owner)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{     }
block|}
DECL|method|canMkdirs (FileSystem fs, Path p)
specifier|static
name|boolean
name|canMkdirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// We check that AccessControlExceptions contain absolute paths.
name|Path
name|parent
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|isUriPathAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|canCreate (FileSystem fs, Path p)
specifier|static
name|boolean
name|canCreate
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|Path
name|parent
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|isUriPathAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|canOpen (FileSystem fs, Path p)
specifier|static
name|boolean
name|canOpen
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|p
operator|.
name|isUriPathAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|canRename (FileSystem fs, Path src, Path dst )
specifier|static
name|boolean
name|canRename
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|Path
name|parent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parent
operator|.
name|isUriPathAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

