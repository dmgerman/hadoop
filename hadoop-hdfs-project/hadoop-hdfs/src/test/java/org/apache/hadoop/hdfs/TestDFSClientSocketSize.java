begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_SEND_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_SEND_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestDFSClientSocketSize
specifier|public
class|class
name|TestDFSClientSocketSize
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDFSClientSocketSize
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DataStreamer
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|socket
specifier|private
name|Socket
name|socket
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultSendBufferSize ()
specifier|public
name|void
name|testDefaultSendBufferSize
parameter_list|()
throws|throws
name|IOException
block|{
name|socket
operator|=
name|createSocket
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Send buffer size should be the default value."
argument_list|,
name|DFS_CLIENT_SOCKET_SEND_BUFFER_SIZE_DEFAULT
argument_list|,
name|socket
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedSendBufferSize ()
specifier|public
name|void
name|testSpecifiedSendBufferSize
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|mySendBufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|// 64 KB
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_SOCKET_SEND_BUFFER_SIZE_KEY
argument_list|,
name|mySendBufferSize
argument_list|)
expr_stmt|;
name|socket
operator|=
name|createSocket
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Send buffer size should be the customized value."
argument_list|,
name|mySendBufferSize
argument_list|,
name|socket
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAutoTuningSendBufferSize ()
specifier|public
name|void
name|testAutoTuningSendBufferSize
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_SOCKET_SEND_BUFFER_SIZE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|=
name|createSocket
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The auto tuned send buffer size is: {}"
argument_list|,
name|socket
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Send buffer size should be non-negative value which is "
operator|+
literal|"determined by system (kernel)."
argument_list|,
name|socket
operator|.
name|getSendBufferSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing the DFSClient socket."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down MiniDFSCluster."
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createSocket ()
specifier|private
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster started."
argument_list|)
expr_stmt|;
return|return
name|DataStreamer
operator|.
name|createSocketForPipeline
argument_list|(
operator|new
name|DatanodeInfo
argument_list|(
name|cluster
operator|.
name|dataNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|datanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

