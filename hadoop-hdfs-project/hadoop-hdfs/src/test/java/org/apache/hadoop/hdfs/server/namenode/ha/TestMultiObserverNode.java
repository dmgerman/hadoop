begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests multiple ObserverNodes.  */
end_comment

begin_class
DECL|class|TestMultiObserverNode
specifier|public
class|class
name|TestMultiObserverNode
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjmhaCluster
specifier|private
specifier|static
name|MiniQJMHACluster
name|qjmhaCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|testPath
specifier|private
specifier|final
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestMultiObserverNode"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUpCluster ()
specifier|public
specifier|static
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// disable block scanner
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|qjmhaCluster
operator|=
name|HATestUtil
operator|.
name|setUpObserverCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
name|qjmhaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|HATestUtil
operator|.
name|configureObserverReadFs
argument_list|(
name|dfsCluster
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDownCluster ()
specifier|public
specifier|static
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|qjmhaCluster
operator|!=
literal|null
condition|)
block|{
name|qjmhaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testObserverFailover ()
specifier|public
name|void
name|testObserverFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Transition observer #2 to standby, request should go to the #3.
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Transition observer #3 to standby, request should go to active
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Transition #2 back to observer, request should go to #2
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Transition #3 back to observer, request should go to either #2 or #3
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiObserver ()
specifier|public
name|void
name|testMultiObserver
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath2
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|Path
name|testPath3
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test3"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Shutdown first observer, request should go to the second one
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath2
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Restart the first observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath3
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Now shutdown the second observer, request should go to the first one
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Shutdown both, request should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSentTo (int... nnIndices)
specifier|private
name|void
name|assertSentTo
parameter_list|(
name|int
modifier|...
name|nnIndices
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Request was not sent to any of the expected namenodes."
argument_list|,
name|HATestUtil
operator|.
name|isSentToAnyOfNameNodes
argument_list|(
name|dfs
argument_list|,
name|dfsCluster
argument_list|,
name|nnIndices
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

