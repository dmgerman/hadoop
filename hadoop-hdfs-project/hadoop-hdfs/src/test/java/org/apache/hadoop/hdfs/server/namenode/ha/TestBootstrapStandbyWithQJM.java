begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Test BootstrapStandby when QJM is used for shared edits.   */
end_comment

begin_class
DECL|class|TestBootstrapStandbyWithQJM
specifier|public
class|class
name|TestBootstrapStandbyWithQJM
block|{
DECL|field|miniQjmHaCluster
specifier|private
name|MiniQJMHACluster
name|miniQjmHaCluster
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|jCluster
specifier|private
name|MiniJournalCluster
name|jCluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Turn off IPC client caching, so that the suite can handle
comment|// the restart of the daemons between test cases.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|miniQjmHaCluster
operator|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|miniQjmHaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
name|jCluster
operator|=
name|miniQjmHaCluster
operator|.
name|getJournalCluster
argument_list|()
expr_stmt|;
comment|// make nn0 active
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// do sth to generate in-progress edit log data
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jCluster
operator|!=
literal|null
condition|)
block|{
name|jCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** BootstrapStandby when the existing NN is standby */
annotation|@
name|Test
DECL|method|testBootstrapStandbyWithStandbyNN ()
specifier|public
name|void
name|testBootstrapStandbyWithStandbyNN
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make the first NN in standby state
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Configuration
name|confNN1
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// shut down nn1
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|confNN1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Should have copied over the namespace from the standby
name|FSImageTestUtil
operator|.
name|assertNNHasCheckpoints
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|FSImageTestUtil
operator|.
name|assertNNFilesMatch
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|/** BootstrapStandby when the existing NN is active */
annotation|@
name|Test
DECL|method|testBootstrapStandbyWithActiveNN ()
specifier|public
name|void
name|testBootstrapStandbyWithActiveNN
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make the first NN in active state
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Configuration
name|confNN1
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// shut down nn1
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|confNN1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Should have copied over the namespace from the standby
name|FSImageTestUtil
operator|.
name|assertNNHasCheckpoints
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|FSImageTestUtil
operator|.
name|assertNNFilesMatch
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

