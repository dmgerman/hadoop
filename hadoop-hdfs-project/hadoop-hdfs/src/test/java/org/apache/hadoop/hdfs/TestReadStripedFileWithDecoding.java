begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestReadStripedFileWithDecoding
specifier|public
class|class
name|TestReadStripedFileWithDecoding
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReadStripedFileWithDecoding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|createErasureCodingZone
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadWithDNFailure1 ()
specifier|public
name|void
name|testReadWithDNFailure1
parameter_list|()
throws|throws
name|IOException
block|{
name|testReadWithDNFailure
argument_list|(
literal|"/foo"
argument_list|,
name|cellSize
operator|*
operator|(
name|dataBlocks
operator|+
literal|2
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWithDNFailure2 ()
specifier|public
name|void
name|testReadWithDNFailure2
parameter_list|()
throws|throws
name|IOException
block|{
name|testReadWithDNFailure
argument_list|(
literal|"/foo"
argument_list|,
name|cellSize
operator|*
operator|(
name|dataBlocks
operator|+
literal|2
operator|)
argument_list|,
name|cellSize
operator|*
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWithDNFailure3 ()
specifier|public
name|void
name|testReadWithDNFailure3
parameter_list|()
throws|throws
name|IOException
block|{
name|testReadWithDNFailure
argument_list|(
literal|"/foo"
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a data block before reading. Verify the decoding works correctly.    */
annotation|@
name|Test
DECL|method|testReadCorruptedData ()
specifier|public
name|void
name|testReadCorruptedData
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create file
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/partially_deleted"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|cellSize
operator|*
name|dataBlocks
operator|*
literal|2
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// corrupt the first data block
comment|// find the corresponding data node
name|int
name|dnIndex
init|=
name|findFirstDataNode
argument_list|(
name|file
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|dnIndex
argument_list|)
expr_stmt|;
comment|// find the target block
name|LocatedStripedBlock
name|slb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|slb
argument_list|,
name|cellSize
argument_list|,
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// find the target block file
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|dnIndex
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|blkFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Block file does not exist"
argument_list|,
name|blkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the block file
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|blkFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cannot remove file"
argument_list|,
name|blkFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|file
argument_list|,
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Corrupt the content of the data block before reading.    */
annotation|@
name|Test
DECL|method|testReadCorruptedData2 ()
specifier|public
name|void
name|testReadCorruptedData2
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create file
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/partially_corrupted"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|cellSize
operator|*
name|dataBlocks
operator|*
literal|2
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// corrupt the first data block
comment|// find the first data node
name|int
name|dnIndex
init|=
name|findFirstDataNode
argument_list|(
name|file
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|dnIndex
argument_list|)
expr_stmt|;
comment|// find the first data block
name|LocatedStripedBlock
name|slb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|slb
argument_list|,
name|cellSize
argument_list|,
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// find the first block file
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|dnIndex
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|blkFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Block file does not exist"
argument_list|,
name|blkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// corrupt the block file
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately corrupting file "
operator|+
name|blkFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|blkFile
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"corruption"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifyRead
argument_list|(
name|file
argument_list|,
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|findFirstDataNode (Path file, long length)
specifier|private
name|int
name|findFirstDataNode
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockLocation
index|[]
name|locs
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|locs
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|int
name|dnIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|int
name|port
init|=
name|dn
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|dnIndex
return|;
block|}
name|dnIndex
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|verifyRead (Path file, int length, byte[] expected)
specifier|private
name|void
name|verifyRead
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
comment|// pread
try|try
init|(
name|FSDataInputStream
name|fsdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
init|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|readLen
init|=
name|fsdis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The fileSize of file should be the same to write size"
argument_list|,
name|length
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|// stateful read
name|ByteBuffer
name|result
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|readLen
operator|+=
name|ret
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The length of file should be the same to write size"
argument_list|,
name|length
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadWithDNFailure (String file, int fileSize, int startOffsetInFile)
specifier|private
name|void
name|testReadWithDNFailure
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|fileSize
parameter_list|,
name|int
name|startOffsetInFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|failedDNIdx
init|=
literal|2
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileSize
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// shut down the DN that holds an internal data block
name|BlockLocation
index|[]
name|locs
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|testPath
argument_list|,
name|cellSize
operator|*
literal|5
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|locs
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
operator|)
index|[
name|failedDNIdx
index|]
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|int
name|port
init|=
name|dn
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
condition|)
block|{
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// pread
try|try
init|(
name|FSDataInputStream
name|fsdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
init|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|int
name|readLen
init|=
name|fsdis
operator|.
name|read
argument_list|(
name|startOffsetInFile
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The fileSize of file should be the same to write size"
argument_list|,
name|fileSize
operator|-
name|startOffsetInFile
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|readLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|startOffsetInFile
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|fileSize
operator|-
name|startOffsetInFile
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startOffsetInFile
init|;
name|i
operator|<
name|fileSize
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Byte at "
operator|+
name|i
operator|+
literal|" should be the same"
argument_list|,
name|expected
index|[
name|i
operator|-
name|startOffsetInFile
index|]
argument_list|,
name|buf
index|[
name|i
operator|-
name|startOffsetInFile
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// stateful read
name|ByteBuffer
name|result
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|fileSize
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|readLen
operator|+=
name|ret
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The length of file should be the same to write size"
argument_list|,
name|fileSize
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|result
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * After reading a corrupted block, make sure the client can correctly report    * the corruption to the NameNode.    */
annotation|@
name|Test
DECL|method|testReportBadBlock ()
specifier|public
name|void
name|testReportBadBlock
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create file
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/corrupted"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
literal|10
decl_stmt|;
comment|// length of "corruption"
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// corrupt the first data block
name|int
name|dnIndex
init|=
name|findFirstDataNode
argument_list|(
name|file
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|dnIndex
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|slb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|slb
argument_list|,
name|cellSize
argument_list|,
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// find the first block file
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|dnIndex
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|blkFile
init|=
name|MiniDFSCluster
operator|.
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Block file does not exist"
argument_list|,
name|blkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// corrupt the block file
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately corrupting file "
operator|+
name|blkFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|blkFile
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"corruption"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disable the heartbeat from DN so that the corrupted block record is kept
comment|// in NameNode
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// do stateful read
name|ByteBuffer
name|result
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|readLen
operator|+=
name|ret
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The length of file should be the same to write size"
argument_list|,
name|length
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|result
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
comment|// check whether the corruption has been reported to the NameNode
specifier|final
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
operator|(
name|ns
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
operator|.
name|getBlocks
argument_list|()
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|blockInfo
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

