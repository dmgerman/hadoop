begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileTruncate
specifier|public
class|class
name|TestFileTruncate
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|stateChangeLog
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSEditLogLoader
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileTruncate
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|DATANODE_NUM
specifier|static
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|3
decl_stmt|;
DECL|field|SUCCESS_ATTEMPTS
specifier|static
specifier|final
name|int
name|SUCCESS_ATTEMPTS
init|=
literal|300
decl_stmt|;
DECL|field|RECOVERY_ATTEMPTS
specifier|static
specifier|final
name|int
name|RECOVERY_ATTEMPTS
init|=
literal|600
decl_stmt|;
DECL|field|SLEEP
specifier|static
specifier|final
name|long
name|SLEEP
init|=
literal|100L
decl_stmt|;
DECL|field|LOW_SOFTLIMIT
specifier|static
specifier|final
name|long
name|LOW_SOFTLIMIT
init|=
literal|100L
decl_stmt|;
DECL|field|LOW_HARDLIMIT
specifier|static
specifier|final
name|long
name|LOW_HARDLIMIT
init|=
literal|200L
decl_stmt|;
DECL|field|SHORT_HEARTBEAT
specifier|static
specifier|final
name|int
name|SHORT_HEARTBEAT
init|=
literal|1
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|static
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|parent
specifier|private
name|Path
name|parent
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|SHORT_HEARTBEAT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|parent
operator|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Truncate files of different sizes byte by byte.    */
annotation|@
name|Test
DECL|method|testBasicTruncate ()
specifier|public
name|void
name|testBasicTruncate
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|parent
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileLength
init|=
name|startingFileSize
init|;
name|fileLength
operator|>
literal|0
condition|;
name|fileLength
operator|-=
name|BLOCK_SIZE
operator|-
literal|1
control|)
block|{
for|for
control|(
name|int
name|toTruncate
init|=
literal|0
init|;
name|toTruncate
operator|<=
name|fileLength
condition|;
name|toTruncate
operator|++
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testBasicTruncate"
operator|+
name|fileLength
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|fileLength
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|fileLength
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fileLength="
operator|+
name|fileLength
operator|+
literal|", newLength="
operator|+
name|newLength
operator|+
literal|", toTruncate="
operator|+
name|toTruncate
operator|+
literal|", isReady="
operator|+
name|isReady
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File must be closed for zero truncate"
operator|+
literal|" or truncating at the block boundary"
argument_list|,
name|isReady
argument_list|,
name|toTruncate
operator|==
literal|0
operator|||
name|newLength
operator|%
name|BLOCK_SIZE
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isReady
condition|)
block|{
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ContentSummary
name|cs
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad disk space usage"
argument_list|,
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|newLength
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// validate the file content
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Truncate the same file multiple times until its size is zero. */
annotation|@
name|Test
DECL|method|testMultipleTruncate ()
specifier|public
name|void
name|testMultipleTruncate
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testMultipleTruncate"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|100
operator|*
name|BLOCK_SIZE
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writeContents
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|data
operator|.
name|length
init|;
name|n
operator|>
literal|0
condition|;
control|)
block|{
specifier|final
name|int
name|newLength
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newLength="
operator|+
name|newLength
operator|+
literal|", isReady="
operator|+
name|isReady
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File must be closed for truncating at the block boundary"
argument_list|,
name|isReady
argument_list|,
name|newLength
operator|%
name|BLOCK_SIZE
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Truncate is not idempotent"
argument_list|,
name|isReady
argument_list|,
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isReady
condition|)
block|{
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|n
operator|=
name|newLength
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Truncate the same file multiple times until its size is zero. */
annotation|@
name|Test
DECL|method|testSnapshotTruncateThenDeleteSnapshot ()
specifier|public
name|void
name|testSnapshotTruncateThenDeleteSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testSnapshotTruncateThenDeleteSnapshot"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writeContents
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|p
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot
init|=
literal|"s0"
decl_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|Block
name|lastBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newLength
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
assert|assert
name|newLength
operator|%
name|BLOCK_SIZE
operator|!=
literal|0
operator|:
literal|" newLength must not be multiple of BLOCK_SIZE"
assert|;
specifier|final
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newLength="
operator|+
name|newLength
operator|+
literal|", isReady="
operator|+
name|isReady
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File must be closed for truncating at the block boundary"
argument_list|,
name|isReady
argument_list|,
name|newLength
operator|%
name|BLOCK_SIZE
operator|==
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isReady
condition|)
block|{
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|lastBlock
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Truncate files and then run other operations such as    * rename, set replication, set permission, etc.    */
annotation|@
name|Test
DECL|method|testTruncateWithOtherOperations ()
specifier|public
name|void
name|testTruncateWithOtherOperations
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testTruncateOtherOperations"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|BLOCK_SIZE
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writeContents
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|p
argument_list|)
expr_stmt|;
specifier|final
name|int
name|newLength
init|=
name|data
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|p
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0444
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|q
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|q
argument_list|,
name|newLength
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|checkFullFile
argument_list|(
name|q
argument_list|,
name|newLength
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSnapshotWithAppendTruncate ()
specifier|public
name|void
name|testSnapshotWithAppendTruncate
parameter_list|()
throws|throws
name|IOException
block|{
name|testSnapshotWithAppendTruncate
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSnapshotWithAppendTruncate
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSnapshotWithAppendTruncate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSnapshotWithAppendTruncate
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testSnapshotWithAppendTruncate
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSnapshotWithAppendTruncate
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create three snapshots with appended and truncated file.    * Delete snapshots in the specified order and verify that    * remaining snapshots are still readable.    */
DECL|method|testSnapshotWithAppendTruncate (int ... deleteOrder)
name|void
name|testSnapshotWithAppendTruncate
parameter_list|(
name|int
modifier|...
name|deleteOrder
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsDir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|parent
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|truncateFile
init|=
literal|"testSnapshotWithAppendTruncate"
decl_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|truncateFile
argument_list|)
decl_stmt|;
name|int
index|[]
name|length
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
name|length
index|[
literal|0
index|]
operator|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
literal|64
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|Block
name|firstBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|Path
index|[]
name|snapshotFiles
init|=
operator|new
name|Path
index|[
literal|4
index|]
decl_stmt|;
comment|// Diskspace consumed should be 10 bytes * 3. [blk 1,2,3]
name|ContentSummary
name|contentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add file to snapshot and append
name|String
index|[]
name|ss
init|=
operator|new
name|String
index|[]
block|{
literal|"ss0"
block|,
literal|"ss1"
block|,
literal|"ss2"
block|,
literal|"ss3"
block|}
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|snapshotFiles
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
name|length
index|[
literal|1
index|]
operator|=
name|length
index|[
literal|2
index|]
operator|=
name|length
index|[
literal|0
index|]
operator|+
name|BLOCK_SIZE
operator|+
literal|1
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|BLOCK_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Block
name|lastBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
comment|// Diskspace consumed should be 15 bytes * 3. [blk 1,2,3,4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|45L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another snapshot without changes
name|snapshotDir
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|snapshotFiles
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
comment|// Create another snapshot and append
name|snapshotDir
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|snapshotFiles
index|[
literal|2
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
name|BLOCK_SIZE
operator|-
literal|1
operator|+
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|Block
name|appendedBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
comment|// Diskspace consumed should be 20 bytes * 3. [blk 1,2,3,4,5]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|60L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Truncate to block boundary
name|int
name|newLength
init|=
name|length
index|[
literal|0
index|]
operator|+
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery is not expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|2
index|]
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|1
index|]
argument_list|,
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|appendedBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 16 bytes * 3. [blk 1,2,3 SS:4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|48L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Truncate full block again
name|newLength
operator|=
name|length
index|[
literal|0
index|]
operator|-
name|BLOCK_SIZE
operator|/
literal|2
expr_stmt|;
name|isReady
operator|=
name|fs
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery is not expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|2
index|]
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|1
index|]
argument_list|,
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 16 bytes * 3. [blk 1,2 SS:3,4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|48L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Truncate half of the last block
name|newLength
operator|-=
name|BLOCK_SIZE
operator|/
literal|2
expr_stmt|;
name|isReady
operator|=
name|fs
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Recovery is expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|2
index|]
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|1
index|]
argument_list|,
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Block
name|replacedBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
comment|// Diskspace consumed should be 16 bytes * 3. [blk 1,6 SS:2,3,4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|54L
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|snapshotFiles
index|[
literal|3
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
name|length
index|[
literal|3
index|]
operator|=
name|newLength
expr_stmt|;
comment|// Delete file. Should still be able to read snapshots
name|int
name|numINodes
init|=
name|fsDir
operator|.
name|getInodeMapSize
argument_list|()
decl_stmt|;
name|isReady
operator|=
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delete failed."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|3
index|]
argument_list|,
name|length
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|2
index|]
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|1
index|]
argument_list|,
name|length
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of INodes should not change"
argument_list|,
name|numINodes
argument_list|,
name|fsDir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|replacedBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 16 bytes * 3. [SS:1,2,3,4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|48L
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete snapshots in the specified order
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|0
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of INodes should not change"
argument_list|,
name|numINodes
argument_list|,
name|fsDir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 16 bytes * 3. [SS:1,2,3,4]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|48L
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Diskspace consumed should be 0 bytes * 3. [SS:1,2,3]
name|assertBlockNotPresent
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|36L
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Diskspace consumed should be 48 bytes * 3. [SS:1,2,3,4]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|48L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of INodes should not change"
argument_list|,
name|numINodes
argument_list|,
name|fsDir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 0 bytes * 3. []
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Number of INodes should change"
argument_list|,
name|numINodes
argument_list|,
name|fsDir
operator|.
name|getInodeMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create three snapshots with file truncated 3 times.    * Delete snapshots in the specified order and verify that    * remaining snapshots are still readable.    */
annotation|@
name|Test
DECL|method|testSnapshotWithTruncates ()
specifier|public
name|void
name|testSnapshotWithTruncates
parameter_list|()
throws|throws
name|IOException
block|{
name|testSnapshotWithTruncates
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSnapshotWithTruncates
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSnapshotWithTruncates
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testSnapshotWithTruncates
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testSnapshotWithTruncates
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testSnapshotWithTruncates
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSnapshotWithTruncates (int ... deleteOrder)
name|void
name|testSnapshotWithTruncates
parameter_list|(
name|int
modifier|...
name|deleteOrder
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|parent
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|truncateFile
init|=
literal|"testSnapshotWithTruncates"
decl_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|truncateFile
argument_list|)
decl_stmt|;
name|int
index|[]
name|length
init|=
operator|new
name|int
index|[
literal|3
index|]
decl_stmt|;
name|length
index|[
literal|0
index|]
operator|=
literal|3
operator|*
name|BLOCK_SIZE
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|src
argument_list|,
literal|64
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|Block
name|firstBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|Block
name|lastBlk
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|Path
index|[]
name|snapshotFiles
init|=
operator|new
name|Path
index|[
literal|3
index|]
decl_stmt|;
comment|// Diskspace consumed should be 12 bytes * 3. [blk 1,2,3]
name|ContentSummary
name|contentSummary
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|36L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add file to snapshot and append
name|String
index|[]
name|ss
init|=
operator|new
name|String
index|[]
block|{
literal|"ss0"
block|,
literal|"ss1"
block|,
literal|"ss2"
block|}
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|snapshotFiles
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
name|length
index|[
literal|1
index|]
operator|=
literal|2
operator|*
name|BLOCK_SIZE
expr_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery is not expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 12 bytes * 3. [blk 1,2 SS:3]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|36L
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|snapshotFiles
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
comment|// Create another snapshot with truncate
name|length
index|[
literal|2
index|]
operator|=
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
expr_stmt|;
name|isReady
operator|=
name|fs
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Recovery is expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|snapshotFiles
index|[
literal|2
index|]
operator|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 14 bytes * 3. [blk 1,4 SS:2,3]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|0
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|src
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Diskspace consumed should be 14 bytes * 3. [blk 1,4 SS:2,3]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Diskspace consumed should be 10 bytes * 3. [blk 1,4 SS:2]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|1
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFiles
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|,
name|length
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|src
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFiles
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Diskspace consumed should be 14 bytes * 3. [blk 1,4 SS:2,3]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFiles
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
comment|// Diskspace consumed should be 10 bytes * 3. [blk 1,4 SS:2]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Diskspace consumed should be 6 bytes * 3. [blk 1,4 SS:]
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|18L
argument_list|)
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|lastBlk
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
name|ss
index|[
name|deleteOrder
index|[
literal|2
index|]
index|]
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|src
argument_list|,
name|length
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertBlockExists
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 6 bytes * 3. [blk 1,4 SS:]
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|18L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getLength
argument_list|()
argument_list|,
name|is
argument_list|(
literal|6L
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertBlockNotPresent
argument_list|(
name|firstBlk
argument_list|)
expr_stmt|;
comment|// Diskspace consumed should be 0 bytes * 3. []
name|contentSummary
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|contentSummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Failure / recovery test for truncate.    * In this failure the DNs fail to recover the blocks and the NN triggers    * lease recovery.    * File stays in RecoveryInProgress until DataNodes report recovery.    */
annotation|@
name|Test
DECL|method|testTruncateFailure ()
specifier|public
name|void
name|testTruncateFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|startingFileSize
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|int
name|toTruncate
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testTruncateFailure"
argument_list|)
decl_stmt|;
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|startingFileSize
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail on open file."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to TRUNCATE_FILE"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for append."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to TRUNCATE_FILE"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for a negative new length."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot truncate to a negative file size"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|startingFileSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for a larger new length."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot truncate to a larger file size"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|dir
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for a directory."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Path is not a file"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"non-existing"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for a non-existing file."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0664
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|UserGroupInformation
name|fooUgi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|foofs
init|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|fooUgi
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|foofs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail for no WRITE permission."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|setLeasePeriod
argument_list|(
name|LOW_SOFTLIMIT
argument_list|,
name|LOW_HARDLIMIT
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|{
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail since a trancate is already in pregress."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to TRUNCATE_FILE"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|recoveryTriggered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECOVERY_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
name|String
name|leaseHolder
init|=
name|NameNodeAdapter
operator|.
name|getLeaseHolderForPath
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaseHolder
operator|.
name|equals
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LEASE_HOLDER
argument_list|)
condition|)
block|{
name|recoveryTriggered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
name|assertThat
argument_list|(
literal|"lease recovery should have occurred in ~"
operator|+
name|SLEEP
operator|*
name|RECOVERY_ATTEMPTS
operator|+
literal|" ms."
argument_list|,
name|recoveryTriggered
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|DATANODE_NUM
argument_list|,
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|setLeasePeriod
argument_list|(
name|HdfsConstants
operator|.
name|LEASE_SOFTLIMIT_PERIOD
argument_list|,
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * The last block is truncated at mid. (non copy-on-truncate)    * dn0 is shutdown before truncate and restart after truncate successful.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTruncateWithDataNodesRestart ()
specifier|public
name|void
name|testTruncateWithDataNodesRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testTruncateWithDataNodesRestart"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|oldBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|int
name|dn
init|=
literal|0
decl_stmt|;
name|int
name|toTruncateLength
init|=
literal|1
decl_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncateLength
decl_stmt|;
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dn
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|newBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
comment|/*      * For non copy-on-truncate, the truncated block id is the same, but the       * GS should increase.      * The truncated block will be replicated to dn0 after it restarts.      */
name|assertEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Wait replicas come to 3
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Old replica is disregarded and replaced with the truncated one
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dn
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|newBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|dn
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate the file
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * The last block is truncated at mid. (copy-on-truncate)    * dn1 is shutdown before truncate and restart after truncate successful.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCopyOnTruncateWithDataNodesRestart ()
specifier|public
name|void
name|testCopyOnTruncateWithDataNodesRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testCopyOnTruncateWithDataNodesRestart"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|oldBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
expr_stmt|;
name|int
name|dn
init|=
literal|1
decl_stmt|;
name|int
name|toTruncateLength
init|=
literal|1
decl_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncateLength
decl_stmt|;
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dn
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|newBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
comment|/*      * For copy-on-truncate, new block is made with new block id and new GS.      * The replicas of the new block is 2, then it will be replicated to dn1.      */
name|assertNotEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Wait replicas come to 3
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// New block is replicated to dn1
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dn
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|newBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Old replica exists too since there is snapshot
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dn
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|dn
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate the file
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * The last block is truncated at mid. (non copy-on-truncate)    * dn0, dn1 are restarted immediately after truncate.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTruncateWithDataNodesRestartImmediately ()
specifier|public
name|void
name|testTruncateWithDataNodesRestartImmediately
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testTruncateWithDataNodesRestartImmediately"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|oldBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|int
name|dn0
init|=
literal|0
decl_stmt|;
name|int
name|dn1
init|=
literal|1
decl_stmt|;
name|int
name|toTruncateLength
init|=
literal|1
decl_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncateLength
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LocatedBlock
name|newBlock
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
comment|/*      * For non copy-on-truncate, the truncated block id is the same, but the       * GS should increase.      */
name|assertEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|oldBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// trigger the second time BR to delete the corrupted replica if there's one
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
comment|// Wait replicas come to 3
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Old replica is disregarded and replaced with the truncated one on dn0
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dn0
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|newBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|dn0
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Old replica is disregarded and replaced with the truncated one on dn1
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getBlockFile
argument_list|(
name|dn1
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|newBlock
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
name|dn1
argument_list|,
name|newBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|newBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|".meta"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate the file
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * The last block is truncated at mid. (non copy-on-truncate)    * shutdown the datanodes immediately after truncate.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTruncateWithDataNodesShutdownImmediately ()
specifier|public
name|void
name|testTruncateWithDataNodesShutdownImmediately
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testTruncateWithDataNodesShutdownImmediately"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|int
name|toTruncateLength
init|=
literal|1
decl_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncateLength
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isReady
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|setDataNodesDead
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SUCCESS_ATTEMPTS
operator|&&
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"All DataNodes should be down."
argument_list|,
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|blocks
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blocks
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|DATANODE_NUM
argument_list|,
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * EditLogOp load test for Truncate.    */
annotation|@
name|Test
DECL|method|testTruncateEditLogLoad ()
specifier|public
name|void
name|testTruncateEditLogLoad
parameter_list|()
throws|throws
name|IOException
block|{
comment|// purge previously accumulated edits
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|int
name|startingFileSize
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|int
name|toTruncate
init|=
literal|1
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"/testTruncateEditLogLoad"
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|String
name|holder
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|recoverLease
argument_list|(
name|s
argument_list|,
name|holder
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Upgrade, RollBack, and restart test for Truncate.    */
annotation|@
name|Test
DECL|method|testUpgradeAndRestart ()
specifier|public
name|void
name|testUpgradeAndRestart
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|parent
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|truncateFile
init|=
literal|"testUpgrade"
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|truncateFile
argument_list|)
decl_stmt|;
name|int
name|startingFileSize
init|=
literal|2
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|int
name|toTruncate
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Path
name|snapshotDir
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
decl_stmt|;
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|truncateFile
argument_list|)
decl_stmt|;
name|int
name|newLengthBeforeUpgrade
init|=
name|startingFileSize
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLengthBeforeUpgrade
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLengthBeforeUpgrade
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFile
argument_list|,
name|startingFileSize
argument_list|)
expr_stmt|;
name|long
name|totalBlockBefore
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
decl_stmt|;
name|restartCluster
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"SafeMode should be OFF"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"NameNode should be performing upgrade."
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|isUpgradeFinalized
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLengthBeforeUpgrade
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|newLengthAfterUpgrade
init|=
name|newLengthBeforeUpgrade
operator|-
name|toTruncate
decl_stmt|;
name|Block
name|oldBlk
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|isReady
operator|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLengthAfterUpgrade
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLengthAfterUpgrade
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Should copy on truncate during upgrade"
argument_list|,
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
name|oldBlk
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLengthAfterUpgrade
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Total block count should be unchanged from copy-on-truncate"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
argument_list|,
name|is
argument_list|(
name|totalBlockBefore
argument_list|)
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|(
name|StartupOption
operator|.
name|ROLLBACK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"File does not exist "
operator|+
name|p
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLengthBeforeUpgrade
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLengthBeforeUpgrade
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Total block count should be unchanged from rolling back"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
argument_list|,
name|is
argument_list|(
name|totalBlockBefore
argument_list|)
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Total block count should be unchanged from start-up"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
argument_list|,
name|is
argument_list|(
name|totalBlockBefore
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLengthBeforeUpgrade
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFile
argument_list|,
name|startingFileSize
argument_list|)
expr_stmt|;
comment|// empty edits and restart
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Total block count should be unchanged from start-up"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
argument_list|,
name|is
argument_list|(
name|totalBlockBefore
argument_list|)
argument_list|)
expr_stmt|;
name|checkFullFile
argument_list|(
name|p
argument_list|,
name|newLengthBeforeUpgrade
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertFileLength
argument_list|(
name|snapshotFile
argument_list|,
name|startingFileSize
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" shouldn't exist"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check truncate recovery.    */
annotation|@
name|Test
DECL|method|testTruncateRecovery ()
specifier|public
name|void
name|testTruncateRecovery
parameter_list|()
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|String
name|client
init|=
literal|"client"
decl_stmt|;
name|String
name|clientMachine
init|=
literal|"clientMachine"
decl_stmt|;
name|String
name|src
init|=
literal|"/test/testTruncateRecovery"
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INodeFile
name|file
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|long
name|initialGenStamp
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
comment|// Test that prepareFileForTruncate sets up in-place truncate.
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|Block
name|oldBlock
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|Block
name|truncateBlock
init|=
name|FSDirTruncateOp
operator|.
name|prepareFileForTruncate
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|,
name|client
argument_list|,
name|clientMachine
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// In-place truncate uses old block id with new genStamp.
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|oldBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|is
argument_list|(
name|oldBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|is
argument_list|(
name|fsn
operator|.
name|getBlockIdManager
argument_list|()
operator|.
name|getGenerationStampV2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getBlockUCState
argument_list|()
argument_list|,
name|is
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_RECOVERY
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|blockRecoveryId
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockRecoveryId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|blockRecoveryId
argument_list|,
name|is
argument_list|(
name|initialGenStamp
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logTruncate
argument_list|(
name|src
argument_list|,
name|client
argument_list|,
name|clientMachine
argument_list|,
name|BLOCK_SIZE
operator|-
literal|1
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|truncateBlock
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
comment|// Re-create file and ensure we are ready to copy on truncate
name|writeContents
argument_list|(
name|contents
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
expr_stmt|;
name|iip
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|file
operator|=
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|file
operator|.
name|recordModification
argument_list|(
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|file
operator|.
name|isBlockInLatestSnapshot
argument_list|(
operator|(
name|BlockInfoContiguous
operator|)
name|file
operator|.
name|getLastBlock
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|initialGenStamp
operator|=
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
expr_stmt|;
comment|// Test that prepareFileForTruncate sets up copy-on-write truncate
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|Block
name|oldBlock
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|Block
name|truncateBlock
init|=
name|FSDirTruncateOp
operator|.
name|prepareFileForTruncate
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|,
name|client
argument_list|,
name|clientMachine
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Copy-on-write truncate makes new block with new id and genStamp
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
name|oldBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getNumBytes
argument_list|()
operator|<
name|oldBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|truncateBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|is
argument_list|(
name|fsn
operator|.
name|getBlockIdManager
argument_list|()
operator|.
name|getGenerationStampV2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getBlockUCState
argument_list|()
argument_list|,
name|is
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_RECOVERY
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|blockRecoveryId
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockRecoveryId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|blockRecoveryId
argument_list|,
name|is
argument_list|(
name|initialGenStamp
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logTruncate
argument_list|(
name|src
argument_list|,
name|client
argument_list|,
name|clientMachine
argument_list|,
name|BLOCK_SIZE
operator|-
literal|1
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|truncateBlock
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|checkBlockRecovery
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|parent
argument_list|,
literal|"ss0"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncateShellCommand ()
specifier|public
name|void
name|testTruncateShellCommand
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testTruncateShellCommand"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldLength
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|newLength
init|=
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-truncate"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|newLength
argument_list|)
block|,
name|src
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runTruncateShellCommand
argument_list|(
name|src
argument_list|,
name|oldLength
argument_list|,
name|argv
argument_list|)
expr_stmt|;
comment|// wait for block recovery
name|checkBlockRecovery
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncateShellCommandOnBlockBoundary ()
specifier|public
name|void
name|testTruncateShellCommandOnBlockBoundary
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testTruncateShellCommandOnBoundary"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldLength
init|=
literal|2
operator|*
name|BLOCK_SIZE
decl_stmt|;
specifier|final
name|int
name|newLength
init|=
name|BLOCK_SIZE
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-truncate"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|newLength
argument_list|)
block|,
name|src
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runTruncateShellCommand
argument_list|(
name|src
argument_list|,
name|oldLength
argument_list|,
name|argv
argument_list|)
expr_stmt|;
comment|// shouldn't need to wait for block recovery
name|assertThat
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncateShellCommandWithWaitOption ()
specifier|public
name|void
name|testTruncateShellCommandWithWaitOption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testTruncateShellCommandWithWaitOption"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldLength
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|newLength
init|=
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-truncate"
block|,
literal|"-w"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|newLength
argument_list|)
block|,
name|src
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runTruncateShellCommand
argument_list|(
name|src
argument_list|,
name|oldLength
argument_list|,
name|argv
argument_list|)
expr_stmt|;
comment|// shouldn't need to wait for block recovery
name|assertThat
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runTruncateShellCommand (Path src, int oldLength, String[] shellOpts)
specifier|private
name|void
name|runTruncateShellCommand
parameter_list|(
name|Path
name|src
parameter_list|,
name|int
name|oldLength
parameter_list|,
name|String
index|[]
name|shellOpts
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create file and write data
name|writeContents
argument_list|(
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|oldLength
argument_list|)
argument_list|,
name|oldLength
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|oldLength
argument_list|)
argument_list|)
expr_stmt|;
comment|// truncate file using shell
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
try|try
block|{
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|shellOpts
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|shell
operator|!=
literal|null
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTruncate4Symlink ()
specifier|public
name|void
name|testTruncate4Symlink
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|fileLength
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testTruncate4Symlink"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|fileLength
argument_list|,
name|file
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|newLength
init|=
name|fileLength
operator|/
literal|3
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|link
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Recovery is not expected."
argument_list|,
name|isReady
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad disk space usage"
argument_list|,
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|newLength
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// validate the file content
name|checkFullFile
argument_list|(
name|file
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeContents (byte[] contents, int fileLength, Path p)
specifier|static
name|void
name|writeContents
parameter_list|(
name|byte
index|[]
name|contents
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkBlockRecovery (Path p)
specifier|static
name|void
name|checkBlockRecovery
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|checkBlockRecovery
argument_list|(
name|p
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBlockRecovery (Path p, DistributedFileSystem dfs)
specifier|public
specifier|static
name|void
name|checkBlockRecovery
parameter_list|(
name|Path
name|p
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkBlockRecovery
argument_list|(
name|p
argument_list|,
name|dfs
argument_list|,
name|SUCCESS_ATTEMPTS
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBlockRecovery (Path p, DistributedFileSystem dfs, int attempts, long sleepMs)
specifier|public
specifier|static
name|void
name|checkBlockRecovery
parameter_list|(
name|Path
name|p
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|int
name|attempts
parameter_list|,
name|long
name|sleepMs
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlocks
name|blocks
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|,
name|dfs
argument_list|)
decl_stmt|;
name|boolean
name|noLastBlock
init|=
name|blocks
operator|.
name|getLastLocatedBlock
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|blocks
operator|.
name|isUnderConstruction
argument_list|()
operator|&&
operator|(
name|noLastBlock
operator|||
name|blocks
operator|.
name|isLastBlockComplete
argument_list|()
operator|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
name|assertThat
argument_list|(
literal|"inode should complete in ~"
operator|+
name|sleepMs
operator|*
name|attempts
operator|+
literal|" ms."
argument_list|,
name|success
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocatedBlocks (Path src)
specifier|static
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLocatedBlocks
argument_list|(
name|src
argument_list|,
name|fs
argument_list|)
return|;
block|}
DECL|method|getLocatedBlocks (Path src, DistributedFileSystem dfs)
specifier|static
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|Path
name|src
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
DECL|method|assertBlockExists (Block blk)
specifier|static
name|void
name|assertBlockExists
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"BlocksMap does not contain block: "
operator|+
name|blk
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getStoredBlock
argument_list|(
name|blk
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBlockNotPresent (Block blk)
specifier|static
name|void
name|assertBlockNotPresent
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
name|assertNull
argument_list|(
literal|"BlocksMap should not contain block: "
operator|+
name|blk
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getStoredBlock
argument_list|(
name|blk
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileLength (Path file, long length)
specifier|static
name|void
name|assertFileLength
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong data size in snapshot."
argument_list|,
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFullFile (Path p, int newLength, byte[] contents)
specifier|static
name|void
name|checkFullFile
parameter_list|(
name|Path
name|p
parameter_list|,
name|int
name|newLength
parameter_list|,
name|byte
index|[]
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|restartCluster (StartupOption o)
specifier|static
name|void
name|restartCluster
parameter_list|(
name|StartupOption
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|StartupOption
operator|.
name|ROLLBACK
operator|==
name|o
condition|)
name|NameNode
operator|.
name|doRollback
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|ServerSocketUtil
operator|.
name|getPort
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|startupOption
argument_list|(
name|o
operator|==
name|StartupOption
operator|.
name|ROLLBACK
condition|?
name|StartupOption
operator|.
name|REGULAR
else|:
name|o
argument_list|)
operator|.
name|dnStartupOption
argument_list|(
name|o
operator|!=
name|StartupOption
operator|.
name|ROLLBACK
condition|?
name|StartupOption
operator|.
name|REGULAR
else|:
name|o
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

