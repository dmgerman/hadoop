begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoUnderConstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|GenerationStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileTruncate
specifier|public
class|class
name|TestFileTruncate
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|stateChangeLog
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSEditLogLoader
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|DATANODE_NUM
specifier|static
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|3
decl_stmt|;
DECL|field|SUCCESS_ATTEMPTS
specifier|static
specifier|final
name|int
name|SUCCESS_ATTEMPTS
init|=
literal|300
decl_stmt|;
DECL|field|RECOVERY_ATTEMPTS
specifier|static
specifier|final
name|int
name|RECOVERY_ATTEMPTS
init|=
literal|600
decl_stmt|;
DECL|field|SLEEP
specifier|static
specifier|final
name|long
name|SLEEP
init|=
literal|100L
decl_stmt|;
DECL|field|LOW_SOFTLIMIT
specifier|static
specifier|final
name|long
name|LOW_SOFTLIMIT
init|=
literal|100L
decl_stmt|;
DECL|field|LOW_HARDLIMIT
specifier|static
specifier|final
name|long
name|LOW_HARDLIMIT
init|=
literal|200L
decl_stmt|;
DECL|field|SHORT_HEARTBEAT
specifier|static
specifier|final
name|int
name|SHORT_HEARTBEAT
init|=
literal|1
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|static
name|DistributedFileSystem
name|fs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUp ()
specifier|public
specifier|static
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|SHORT_HEARTBEAT
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|NameNode
operator|.
name|DEFAULT_PORT
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Truncate files of different sizes byte by byte.    */
annotation|@
name|Test
DECL|method|testBasicTruncate ()
specifier|public
name|void
name|testBasicTruncate
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|startingFileSize
init|=
literal|3
operator|*
name|BLOCK_SIZE
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setQuota
argument_list|(
name|parent
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileLength
init|=
name|startingFileSize
init|;
name|fileLength
operator|>
literal|0
condition|;
name|fileLength
operator|-=
name|BLOCK_SIZE
operator|-
literal|1
control|)
block|{
for|for
control|(
name|int
name|toTruncate
init|=
literal|0
init|;
name|toTruncate
operator|<=
name|fileLength
condition|;
name|toTruncate
operator|++
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"testBasicTruncate"
operator|+
name|fileLength
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|fileLength
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|fileLength
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isReady
condition|)
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad disk space usage"
argument_list|,
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|newLength
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// validate the file content
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Failure / recovery test for truncate.    * In this failure the DNs fail to recover the blocks and the NN triggers    * lease recovery.    * File stays in RecoveryInProgress until DataNodes report recovery.    */
annotation|@
name|Test
DECL|method|testTruncateFailure ()
specifier|public
name|void
name|testTruncateFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|startingFileSize
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|int
name|toTruncate
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testTruncateFailure"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|startingFileSize
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate must fail on open file."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|setLeasePeriod
argument_list|(
name|LOW_SOFTLIMIT
argument_list|,
name|LOW_HARDLIMIT
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|recoveryTriggered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECOVERY_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
name|String
name|leaseHolder
init|=
name|NameNodeAdapter
operator|.
name|getLeaseHolderForPath
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaseHolder
operator|.
name|equals
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LEASE_HOLDER
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|DATANODE_NUM
argument_list|,
literal|true
argument_list|,
name|HdfsServerConstants
operator|.
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|recoveryTriggered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
name|assertThat
argument_list|(
literal|"lease recovery should have occurred in ~"
operator|+
name|SLEEP
operator|*
name|RECOVERY_ATTEMPTS
operator|+
literal|" ms."
argument_list|,
name|recoveryTriggered
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|setLeasePeriod
argument_list|(
name|HdfsConstants
operator|.
name|LEASE_SOFTLIMIT_PERIOD
argument_list|,
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
argument_list|)
expr_stmt|;
name|fileStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * EditLogOp load test for Truncate.    */
annotation|@
name|Test
DECL|method|testTruncateEditLogLoad ()
specifier|public
name|void
name|testTruncateEditLogLoad
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|startingFileSize
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
name|BLOCK_SIZE
operator|/
literal|2
decl_stmt|;
name|int
name|toTruncate
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|startingFileSize
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testTruncateEditLogLoad"
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|startingFileSize
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|int
name|newLength
init|=
name|startingFileSize
operator|-
name|toTruncate
decl_stmt|;
name|boolean
name|isReady
init|=
name|fs
operator|.
name|truncate
argument_list|(
name|p
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"truncate should have triggered block recovery."
argument_list|,
name|isReady
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|checkBlockRecovery
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|newLength
argument_list|,
name|contents
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check truncate recovery.    */
annotation|@
name|Test
DECL|method|testTruncateLastBlock ()
specifier|public
name|void
name|testTruncateLastBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|String
name|src
init|=
literal|"/file"
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|writeContents
argument_list|(
name|contents
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|INodeFile
name|inode
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|src
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|long
name|oldGenstamp
init|=
name|GenerationStamp
operator|.
name|LAST_RESERVED_STAMP
decl_stmt|;
name|DatanodeDescriptor
name|dn
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeDescriptor
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
name|storage
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfo
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
decl_stmt|;
name|dn
operator|.
name|isAlive
operator|=
literal|true
expr_stmt|;
name|BlockInfoUnderConstruction
name|blockInfo
init|=
operator|new
name|BlockInfoUnderConstruction
argument_list|(
operator|new
name|Block
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|oldGenstamp
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|BEING_TRUNCATED
argument_list|,
operator|new
name|DatanodeStorageInfo
index|[]
block|{
name|storage
block|}
argument_list|)
decl_stmt|;
name|inode
operator|.
name|setBlocks
argument_list|(
operator|new
name|BlockInfo
index|[]
block|{
name|blockInfo
block|}
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|fsn
operator|.
name|initializeBlockRecovery
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inode
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getBlockUCState
argument_list|()
argument_list|,
name|is
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|BEING_TRUNCATED
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|blockRecoveryId
init|=
operator|(
operator|(
name|BlockInfoUnderConstruction
operator|)
name|inode
operator|.
name|getLastBlock
argument_list|()
operator|)
operator|.
name|getBlockRecoveryId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|blockRecoveryId
argument_list|,
name|is
argument_list|(
name|oldGenstamp
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeContents (byte[] contents, int fileLength, Path p)
specifier|static
name|void
name|writeContents
parameter_list|(
name|byte
index|[]
name|contents
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkBlockRecovery (Path p)
specifier|static
name|void
name|checkBlockRecovery
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SUCCESS_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlocks
name|blocks
init|=
name|getLocatedBlocks
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|boolean
name|noLastBlock
init|=
name|blocks
operator|.
name|getLastLocatedBlock
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|blocks
operator|.
name|isUnderConstruction
argument_list|()
operator|&&
operator|(
name|noLastBlock
operator|||
name|blocks
operator|.
name|isLastBlockComplete
argument_list|()
operator|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
name|assertThat
argument_list|(
literal|"inode should complete in ~"
operator|+
name|SLEEP
operator|*
name|SUCCESS_ATTEMPTS
operator|+
literal|" ms."
argument_list|,
name|success
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocatedBlocks (Path src)
specifier|static
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

