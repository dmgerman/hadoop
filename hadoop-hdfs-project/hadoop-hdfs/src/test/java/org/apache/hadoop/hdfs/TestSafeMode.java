begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests to verify safe mode correctness.  */
end_comment

begin_class
DECL|class|TestSafeMode
specifier|public
class|class
name|TestSafeMode
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
decl_stmt|;
DECL|field|dfs
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test verifies that if SafeMode is manually entered, name-node does not    * come out of safe mode even after the startup safe mode conditions are met.    *<ol>    *<li>Start cluster with 1 data-node.</li>    *<li>Create 2 files with replication 1.</li>    *<li>Re-start cluster with 0 data-nodes.     * Name-node should stay in automatic safe-mode.</li>    *<li>Enter safe mode manually.</li>    *<li>Start the data-node.</li>    *<li>Wait longer than<tt>dfs.namenode.safemode.extension</tt> and     * verify that the name-node is still in safe mode.</li>    *</ol>    *      * @throws IOException    */
annotation|@
name|Test
DECL|method|testManualSafeMode ()
specifier|public
name|void
name|testManualSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testManualSafeMode/file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testManualSafeMode/file2"
argument_list|)
decl_stmt|;
comment|// create two files with one block each.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1000
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
literal|2000
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// now bring up just the NameNode.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No datanode is started. Should be in SafeMode"
argument_list|,
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
argument_list|)
expr_stmt|;
comment|// manually set safemode.
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
comment|// now bring up the datanode and wait for it to be active.
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// wait longer than dfs.namenode.safemode.extension
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
name|assertTrue
argument_list|(
literal|"should still be in SafeMode"
argument_list|,
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not be in SafeMode"
argument_list|,
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|interface|FSRun
specifier|public
interface|interface
name|FSRun
block|{
DECL|method|run (FileSystem fs)
specifier|public
specifier|abstract
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Assert that the given function fails to run due to a safe     * mode exception.    */
DECL|method|runFsFun (String msg, FSRun f)
specifier|public
name|void
name|runFsFun
parameter_list|(
name|String
name|msg
parameter_list|,
name|FSRun
name|f
parameter_list|)
block|{
try|try
block|{
name|f
operator|.
name|run
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"safe mode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run various fs operations while the NN is in safe mode,    * assert that they are either allowed or fail as expected.    */
annotation|@
name|Test
DECL|method|testOperationsWhileInSafeMode ()
specifier|public
name|void
name|testOperationsWhileInSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not enter SM"
argument_list|,
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Set quota while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
operator|)
operator|.
name|setQuota
argument_list|(
name|file1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Set perm while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|file1
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Set owner while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|file1
argument_list|,
literal|"user"
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Set repl while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|setReplication
argument_list|(
name|file1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Append file while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|"new bytes"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Delete file while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|runFsFun
argument_list|(
literal|"Rename file while in SM"
argument_list|,
operator|new
name|FSRun
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|file1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Set times failed while in SM"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Set times failed while in SM"
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Could not leave SM"
argument_list|,
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

