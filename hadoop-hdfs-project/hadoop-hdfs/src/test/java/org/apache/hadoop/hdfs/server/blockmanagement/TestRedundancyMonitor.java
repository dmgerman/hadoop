begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|hdfs
operator|.
name|HDFSContract
operator|.
name|BLOCK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_comment
comment|/**  * This class tests RedundancyMonitor in BlockManager.  */
end_comment

begin_class
DECL|class|TestRedundancyMonitor
specifier|public
class|class
name|TestRedundancyMonitor
block|{
DECL|field|FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|FILENAME
init|=
literal|"/dummyfile.txt"
decl_stmt|;
comment|/**    * RedundancyMonitor invoke choose target out of global lock when    * #computeDatanodeWork. However it may result in NN terminate when choose    * target meet runtime exception(ArithmeticException) since we stop all    * DataNodes during that time.    * Verify that NN should not terminate even stop all datanodes.    */
annotation|@
name|Test
DECL|method|testChooseTargetWhenAllDataNodesStop ()
specifier|public
name|void
name|testChooseTargetWhenAllDataNodesStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|}
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[]
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|}
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|hosts
operator|.
name|length
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|miniCluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|blockManager
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockPlacementPolicyDefault
name|replicator
init|=
operator|(
name|BlockPlacementPolicyDefault
operator|)
name|blockManager
operator|.
name|getBlockPlacementPolicy
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dns
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodes
argument_list|()
decl_stmt|;
name|DelayAnswer
name|delayer
init|=
operator|new
name|DelayAnswer
argument_list|(
name|BlockPlacementPolicyDefault
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|NetworkTopology
name|clusterMap
init|=
name|replicator
operator|.
name|clusterMap
decl_stmt|;
name|NetworkTopology
name|spyClusterMap
init|=
name|spy
argument_list|(
name|clusterMap
argument_list|)
decl_stmt|;
name|replicator
operator|.
name|clusterMap
operator|=
name|spyClusterMap
expr_stmt|;
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|spyClusterMap
argument_list|)
operator|.
name|getNumOfRacks
argument_list|()
expr_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Trigger chooseTarget
name|Future
argument_list|<
name|Void
argument_list|>
name|chooseTargetFuture
init|=
name|pool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|FILENAME
argument_list|,
literal|2
argument_list|,
name|dns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Wait until chooseTarget calls NetworkTopology#getNumOfRacks
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
comment|// Remove all DataNodes
name|Future
argument_list|<
name|Void
argument_list|>
name|stopDatanodesFuture
init|=
name|pool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|dns
control|)
block|{
name|spyClusterMap
operator|.
name|remove
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Wait stopDatanodesFuture run finish
name|stopDatanodesFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Allow chooseTarget to proceed
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
try|try
block|{
name|chooseTargetFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
throw|throw
name|ee
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

