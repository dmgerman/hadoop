begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSProtos
operator|.
name|FileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Verify compatible FileStatus/HdfsFileStatus serialization.  */
end_comment

begin_class
DECL|class|TestFileStatusSerialization
specifier|public
class|class
name|TestFileStatusSerialization
block|{
DECL|method|checkFields (FileStatus expected, FileStatus actual)
specifier|private
specifier|static
name|void
name|checkFields
parameter_list|(
name|FileStatus
name|expected
parameter_list|,
name|FileStatus
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPath
argument_list|()
argument_list|,
name|actual
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|actual
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLen
argument_list|()
argument_list|,
name|actual
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPermission
argument_list|()
argument_list|,
name|actual
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOwner
argument_list|()
argument_list|,
name|actual
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroup
argument_list|()
argument_list|,
name|actual
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplication
argument_list|()
argument_list|,
name|actual
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|actual
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test API backwards-compatibility with 2.x applications w.r.t. FsPermission.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testFsPermissionCompatibility ()
specifier|public
name|void
name|testFsPermissionCompatibility
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|flagmask
init|=
literal|0x8
decl_stmt|;
comment|// flags compatible with 2.x; fixed as constant in this test to ensure
comment|// compatibility is maintained. New flags are not part of the contract this
comment|// test verifies.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flagmask
condition|;
operator|++
name|i
control|)
block|{
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0013
argument_list|)
decl_stmt|;
name|HdfsFileStatusProto
operator|.
name|Builder
name|hspb
init|=
name|HdfsFileStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFileType
argument_list|(
name|FileType
operator|.
name|IS_FILE
argument_list|)
operator|.
name|setPath
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"hdfs://foobar/dingos/zot"
argument_list|)
argument_list|)
operator|.
name|setLength
argument_list|(
literal|4344
argument_list|)
operator|.
name|setPermission
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|perm
argument_list|)
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"hadoop"
argument_list|)
operator|.
name|setGroup
argument_list|(
literal|"unqbbc"
argument_list|)
operator|.
name|setModificationTime
argument_list|(
literal|12345678L
argument_list|)
operator|.
name|setAccessTime
argument_list|(
literal|87654321L
argument_list|)
operator|.
name|setBlockReplication
argument_list|(
literal|10
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|1L
operator|<<
literal|33
argument_list|)
operator|.
name|setFlags
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|stat
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|hspb
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|stat
operator|.
name|makeQualified
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://foobar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/dingos"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://foobar/dingos/zot"
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify deprecated FsPermissionExtension methods
name|FsPermission
name|sp
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sp
operator|.
name|getAclBit
argument_list|()
argument_list|,
name|stat
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sp
operator|.
name|getEncryptedBit
argument_list|()
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sp
operator|.
name|getErasureCodedBit
argument_list|()
argument_list|,
name|stat
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify Writable contract
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|stat
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|fstat
init|=
operator|new
name|FileStatus
argument_list|()
decl_stmt|;
name|fstat
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|checkFields
argument_list|(
name|stat
argument_list|,
name|fstat
argument_list|)
expr_stmt|;
comment|// FsPermisisonExtension used for HdfsFileStatus, not FileStatus,
comment|// attribute flags should still be preserved
name|assertEquals
argument_list|(
name|sp
operator|.
name|getAclBit
argument_list|()
argument_list|,
name|fstat
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sp
operator|.
name|getEncryptedBit
argument_list|()
argument_list|,
name|fstat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sp
operator|.
name|getErasureCodedBit
argument_list|()
argument_list|,
name|fstat
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// param for LocatedFileStatus, HttpFileStatus
annotation|@
name|Test
DECL|method|testCrossSerializationProto ()
specifier|public
name|void
name|testCrossSerializationProto
parameter_list|()
throws|throws
name|Exception
block|{
name|FsPermission
name|perm
init|=
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|FileType
name|t
range|:
name|FileType
operator|.
name|values
argument_list|()
control|)
block|{
name|HdfsFileStatusProto
operator|.
name|Builder
name|hspb
init|=
name|HdfsFileStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFileType
argument_list|(
name|t
argument_list|)
operator|.
name|setPath
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"hdfs://foobar/dingos"
argument_list|)
argument_list|)
operator|.
name|setLength
argument_list|(
literal|4344
argument_list|)
operator|.
name|setPermission
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|perm
argument_list|)
argument_list|)
operator|.
name|setOwner
argument_list|(
literal|"hadoop"
argument_list|)
operator|.
name|setGroup
argument_list|(
literal|"unqbbc"
argument_list|)
operator|.
name|setModificationTime
argument_list|(
literal|12345678L
argument_list|)
operator|.
name|setAccessTime
argument_list|(
literal|87654321L
argument_list|)
operator|.
name|setBlockReplication
argument_list|(
literal|10
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|1L
operator|<<
literal|33
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileType
operator|.
name|IS_SYMLINK
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|hspb
operator|.
name|setSymlink
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"hdfs://yaks/dingos"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FileType
operator|.
name|IS_FILE
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|hspb
operator|.
name|setFileId
argument_list|(
literal|4544
argument_list|)
expr_stmt|;
block|}
name|HdfsFileStatusProto
name|hsp
init|=
name|hspb
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|src
init|=
name|hsp
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|FileStatusProto
name|fsp
init|=
name|FileStatusProto
operator|.
name|parseFrom
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getPath
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
name|fsp
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getLength
argument_list|()
argument_list|,
name|fsp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getPermission
argument_list|()
operator|.
name|getPerm
argument_list|()
argument_list|,
name|fsp
operator|.
name|getPermission
argument_list|()
operator|.
name|getPerm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fsp
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fsp
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fsp
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|fsp
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getSymlink
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
name|fsp
operator|.
name|getSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getBlockReplication
argument_list|()
argument_list|,
name|fsp
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getBlocksize
argument_list|()
argument_list|,
name|fsp
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hsp
operator|.
name|getFileType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|fsp
operator|.
name|getFileType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify unknown fields preserved
name|byte
index|[]
name|dst
init|=
name|fsp
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|HdfsFileStatusProto
name|hsp2
init|=
name|HdfsFileStatusProto
operator|.
name|parseFrom
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hsp
argument_list|,
name|hsp2
argument_list|)
expr_stmt|;
name|checkFields
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|hsp
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|hsp2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

