begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestBestEffortLongFile
specifier|public
class|class
name|TestBestEffortLongFile
block|{
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|File
name|FILE
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"TestBestEffortLongFile"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|FILE
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FILE
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSet ()
specifier|public
name|void
name|testGetSet
parameter_list|()
throws|throws
name|IOException
block|{
name|BestEffortLongFile
name|f
init|=
operator|new
name|BestEffortLongFile
argument_list|(
name|FILE
argument_list|,
literal|12345L
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Before the file exists, should return default.
name|assertEquals
argument_list|(
literal|12345L
argument_list|,
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// And first access should open it.
name|assertTrue
argument_list|(
name|FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|long
name|newVal
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
comment|// Changing the value should be reflected in the next get() call.
name|f
operator|.
name|set
argument_list|(
name|newVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newVal
argument_list|,
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// And should be reflected in a new instance (ie it actually got
comment|// written to the file)
name|BestEffortLongFile
name|f2
init|=
operator|new
name|BestEffortLongFile
argument_list|(
name|FILE
argument_list|,
literal|999L
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|newVal
argument_list|,
name|f2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|f2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTruncatedFileReturnsDefault ()
specifier|public
name|void
name|testTruncatedFileReturnsDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|FILE
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|FILE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|BestEffortLongFile
name|f
init|=
operator|new
name|BestEffortLongFile
argument_list|(
name|FILE
argument_list|,
literal|12345L
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|12345L
argument_list|,
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

