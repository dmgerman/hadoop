begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|SIMPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|IGNORE_SECURE_PORTS_FOR_TESTING_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|ConnectionConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWebHdfsTokens
specifier|public
class|class
name|TestWebHdfsTokens
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|uri
name|URI
name|uri
init|=
literal|null
decl_stmt|;
comment|//secure cluster
DECL|field|kdc
specifier|private
specifier|static
name|MiniKdc
name|kdc
init|=
literal|null
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|static
name|File
name|baseDir
decl_stmt|;
DECL|field|keytabFile
specifier|private
specifier|static
name|File
name|keytabFile
decl_stmt|;
DECL|field|username
specifier|private
specifier|static
name|String
name|username
init|=
literal|"webhdfs-tokens-test"
decl_stmt|;
DECL|field|principal
specifier|private
specifier|static
name|String
name|principal
decl_stmt|;
DECL|field|keystoresDir
specifier|private
specifier|static
name|String
name|keystoresDir
decl_stmt|;
DECL|field|sslConfDir
specifier|private
specifier|static
name|String
name|sslConfDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|cleanupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initEnv ()
specifier|private
specifier|static
name|void
name|initEnv
parameter_list|()
block|{
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"LoginUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initSecureConf (Configuration secureConf)
specifier|private
specifier|static
name|void
name|initSecureConf
parameter_list|(
name|Configuration
name|secureConf
parameter_list|)
throws|throws
name|Exception
block|{
name|baseDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestWebHdfsTokens
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|baseDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|secureConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|secureConf
argument_list|)
expr_stmt|;
name|KerberosName
operator|.
name|resetDefaultRealm
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected secureConfiguration to enable security"
argument_list|,
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|keytabFile
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|username
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
name|String
name|keytab
init|=
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// Windows will not reverse name lookup "127.0.0.1" to "localhost".
name|String
name|krbInstance
init|=
name|Path
operator|.
name|WINDOWS
condition|?
literal|"127.0.0.1"
else|:
literal|"localhost"
decl_stmt|;
name|principal
operator|=
name|username
operator|+
literal|"/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|String
name|spnegoPrincipal
init|=
literal|"HTTP/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|username
argument_list|,
name|username
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|,
literal|"HTTP/"
operator|+
name|krbInstance
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|spnegoPrincipal
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|setBoolean
argument_list|(
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTP_AND_HTTPS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|setBoolean
argument_list|(
name|IGNORE_SECURE_PORTS_FOR_TESTING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keystoresDir
operator|=
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|sslConfDir
operator|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestWebHdfsTokens
operator|.
name|class
argument_list|)
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|secureConf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getClientSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|secureConf
operator|.
name|set
argument_list|(
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getServerSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|spyWebhdfsInSecureSetup ()
specifier|private
name|WebHdfsFileSystem
name|spyWebhdfsInSecureSetup
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fsOrig
init|=
operator|new
name|WebHdfsFileSystem
argument_list|()
decl_stmt|;
name|fsOrig
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
name|fsOrig
argument_list|)
decl_stmt|;
return|return
name|fs
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTokenForNonTokenOp ()
specifier|public
name|void
name|testTokenForNonTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
name|initEnv
argument_list|()
expr_stmt|;
name|WebHdfsFileSystem
name|fs
init|=
name|spyWebhdfsInSecureSetup
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|token
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// should get/set/renew token
name|fs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// should return prior token
name|fs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNoTokenForGetToken ()
specifier|public
name|void
name|testNoTokenForGetToken
parameter_list|()
throws|throws
name|IOException
block|{
name|initEnv
argument_list|()
expr_stmt|;
name|checkNoTokenForOperation
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNoTokenForRenewToken ()
specifier|public
name|void
name|testNoTokenForRenewToken
parameter_list|()
throws|throws
name|IOException
block|{
name|initEnv
argument_list|()
expr_stmt|;
name|checkNoTokenForOperation
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNoTokenForCancelToken ()
specifier|public
name|void
name|testNoTokenForCancelToken
parameter_list|()
throws|throws
name|IOException
block|{
name|initEnv
argument_list|()
expr_stmt|;
name|checkNoTokenForOperation
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNoTokenForOperation (HttpOpParam.Op op)
specifier|private
name|void
name|checkNoTokenForOperation
parameter_list|(
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spyWebhdfsInSecureSetup
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// do not get a token!
name|fs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetOpRequireAuth ()
specifier|public
name|void
name|testGetOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|GetOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|expect
init|=
operator|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPutOpRequireAuth ()
specifier|public
name|void
name|testPutOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|PutOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|expect
init|=
operator|(
name|op
operator|==
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
operator|||
name|op
operator|==
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPostOpRequireAuth ()
specifier|public
name|void
name|testPostOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|PostOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDeleteOpRequireAuth ()
specifier|public
name|void
name|testDeleteOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|DeleteOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLazyTokenFetchForWebhdfs ()
specifier|public
name|void
name|testLazyTokenFetchForWebhdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|clusterConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|initSecureConf
argument_list|(
name|clusterConf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//test with swebhdfs
name|uri
operator|=
name|DFSUtil
operator|.
name|createUri
argument_list|(
literal|"swebhdfs"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpsAddress
argument_list|()
argument_list|)
expr_stmt|;
name|validateLazyTokenFetch
argument_list|(
name|ugi
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
comment|//test with webhdfs
name|uri
operator|=
name|DFSUtil
operator|.
name|createUri
argument_list|(
literal|"webhdfs"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|validateLazyTokenFetch
argument_list|(
name|ugi
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Reset UGI so that other tests are not affected.
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetTokenServiceAndKind ()
specifier|public
name|void
name|testSetTokenServiceAndKind
parameter_list|()
throws|throws
name|Exception
block|{
name|initEnv
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|clusterConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|SIMPLE
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// trick the NN into thinking s[ecurity is enabled w/o it trying
comment|// to login from a keytab
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|clusterConf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
specifier|final
name|WebHdfsFileSystem
name|fs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|clusterConf
argument_list|,
literal|"webhdfs"
argument_list|)
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fs
argument_list|,
literal|"canRefreshDelegationToken"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|URLConnectionFactory
name|factory
init|=
operator|new
name|URLConnectionFactory
argument_list|(
operator|new
name|ConnectionConfigurator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|configure
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|conn
return|;
block|}
block|}
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|url
operator|+
literal|"&service=foo&kind=bar"
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fs
argument_list|,
literal|"connectionFactory"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token1
init|=
name|fs
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|token1
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token2
init|=
name|fs
operator|.
expr|new
name|FsPathResponseRunner
argument_list|<
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|RenewerParam
argument_list|(
literal|null
argument_list|)
argument_list|)
block|{             @
name|Override
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|decodeResponse
argument_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
argument_list|)
throws|throws
name|IOException
block|{
return|return
name|JsonUtilClient
operator|.
name|toDelegationToken
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|token2
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|token2
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|validateLazyTokenFetch (UserGroupInformation ugi, final Configuration clusterConf)
specifier|private
name|void
name|validateLazyTokenFetch
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|Configuration
name|clusterConf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|testUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|WebHdfsFileSystem
name|fs
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|WebHdfsFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WebHdfsFileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|spy
argument_list|(
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|uri
argument_list|,
name|clusterConf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// verify token ops don't get a token
name|Assert
operator|.
name|assertNull
argument_list|(
name|fs
operator|.
name|getRenewToken
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|fs
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|fs
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|fs
operator|.
name|getRenewToken
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify first non-token op gets a token
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/f"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testUser
argument_list|,
name|getTokenOwner
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify prior token is reused
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token2
init|=
name|fs
operator|.
name|getRenewToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify renew of expired token fails w/o getting a new token
name|token
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|fs
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"wrong exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify cancel of expired token fails w/o getting a new token
try|try
block|{
name|fs
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"wrong exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify an expired token is replaced with a new token
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
comment|// first bad, then good
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testUser
argument_list|,
name|getTokenOwner
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify with open because it's a little different in how it
comment|// opens connections
name|fs
operator|.
name|cancelDelegationToken
argument_list|(
name|fs
operator|.
name|getRenewToken
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
comment|// first bad, then good
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testUser
argument_list|,
name|getTokenOwner
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify fs close cancels the token
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|cancelDelegationToken
argument_list|(
name|eq
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a token to ugi for a new fs, verify it uses that token
name|token
operator|=
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|fs
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|WebHdfsFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|WebHdfsFileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|spy
argument_list|(
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|uri
argument_list|,
name|clusterConf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|fs
operator|.
name|getRenewToken
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|eq
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify it reuses the prior ugi token
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// verify an expired ugi token is NOT replaced with a new token
name|fs
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"didn't fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"wrong exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|token2
operator|=
name|fs
operator|.
name|getRenewToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getTokenKind
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|// verify fs close does NOT cancel the ugi token
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|replaceExpiredDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|cancelDelegationToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getTokenOwner (Token<?> token)
specifier|private
name|String
name|getTokenOwner
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
comment|// webhdfs doesn't register properly with the class loader
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|Token
argument_list|<
name|?
argument_list|>
name|clone
init|=
operator|new
name|Token
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setKind
argument_list|(
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
argument_list|)
expr_stmt|;
return|return
name|clone
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

