begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DeleteOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|HttpOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWebHdfsTokens
specifier|public
class|class
name|TestWebHdfsTokens
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|ugi
specifier|static
name|UserGroupInformation
name|ugi
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testInitWithNoToken ()
specifier|public
name|void
name|testInitWithNoToken
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|WebHdfsFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|any
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// when not in ugi, don't get one
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|initDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testInitWithUGIToken ()
specifier|public
name|void
name|testInitWithUGIToken
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|WebHdfsFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|token
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|any
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// when in the ugi, store it but don't renew it
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|initDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testInternalGetDelegationToken ()
specifier|public
name|void
name|testInternalGetDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|WebHdfsFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|token
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|any
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// get token, store it, and renew it
name|Token
argument_list|<
name|?
argument_list|>
name|token2
init|=
name|fs
operator|.
name|getDelegationToken
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|token2
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// just return token, don't get/set/renew
name|token2
operator|=
name|fs
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|token2
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testTokenForNonTokenOp ()
specifier|public
name|void
name|testTokenForNonTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|WebHdfsFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|token
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|any
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// should get/set/renew token
name|fs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// should return prior token
name|fs
operator|.
name|toUrl
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNoTokenForGetToken ()
specifier|public
name|void
name|testNoTokenForGetToken
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNoTokenForOperation
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNoTokenForCanclToken ()
specifier|public
name|void
name|testNoTokenForCanclToken
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNoTokenForOperation
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testNoTokenForCancelToken ()
specifier|public
name|void
name|testNoTokenForCancelToken
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNoTokenForOperation
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|checkNoTokenForOperation (HttpOpParam.Op op)
specifier|private
name|void
name|checkNoTokenForOperation
parameter_list|(
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|WebHdfsFileSystem
name|fs
init|=
name|spy
argument_list|(
operator|new
name|WebHdfsFileSystem
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|any
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://127.0.0.1:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// do not get a token!
name|fs
operator|.
name|toUrl
argument_list|(
name|op
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setDelegationToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addRenewAction
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testGetOpRequireAuth ()
specifier|public
name|void
name|testGetOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|GetOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|expect
init|=
operator|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testPutOpRequireAuth ()
specifier|public
name|void
name|testPutOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|PutOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|expect
init|=
operator|(
name|op
operator|==
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
operator|||
name|op
operator|==
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testPostOpRequireAuth ()
specifier|public
name|void
name|testPostOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|PostOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDeleteOpRequireAuth ()
specifier|public
name|void
name|testDeleteOpRequireAuth
parameter_list|()
block|{
for|for
control|(
name|HttpOpParam
operator|.
name|Op
name|op
range|:
name|DeleteOpParam
operator|.
name|Op
operator|.
name|values
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|op
operator|.
name|getRequireAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

