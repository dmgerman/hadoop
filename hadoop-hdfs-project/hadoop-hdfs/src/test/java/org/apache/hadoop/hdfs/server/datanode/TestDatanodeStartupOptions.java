begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * This test verifies DataNode command line processing.  */
end_comment

begin_class
DECL|class|TestDatanodeStartupOptions
specifier|public
class|class
name|TestDatanodeStartupOptions
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**    * Process the given arg list as command line arguments to the DataNode    * to make sure we get the expected result. If the expected result is    * success then further validate that the parsed startup option is the    * same as what was expected.    *    * @param expectSuccess    * @param expectedOption    * @param conf    * @param arg    */
DECL|method|checkExpected (boolean expectSuccess, StartupOption expectedOption, Configuration conf, String ... arg)
specifier|private
specifier|static
name|void
name|checkExpected
parameter_list|(
name|boolean
name|expectSuccess
parameter_list|,
name|StartupOption
name|expectedOption
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|arg
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|arg
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|currentArg
range|:
name|arg
control|)
block|{
name|args
index|[
name|i
operator|++
index|]
operator|=
name|currentArg
expr_stmt|;
block|}
name|boolean
name|returnValue
init|=
name|DataNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|StartupOption
name|option
init|=
name|DataNode
operator|.
name|getStartupOption
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|returnValue
argument_list|,
name|is
argument_list|(
name|expectSuccess
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectSuccess
condition|)
block|{
name|assertThat
argument_list|(
name|option
argument_list|,
name|is
argument_list|(
name|expectedOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reinitialize configuration before every test since DN stores the    * parsed StartupOption in the configuration.    */
annotation|@
name|Before
DECL|method|initConfiguration ()
specifier|public
name|void
name|initConfiguration
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
block|}
comment|/**    * A few options that should all parse successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testStartupSuccess ()
specifier|public
name|void
name|testStartupSuccess
parameter_list|()
block|{
name|checkExpected
argument_list|(
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|conf
argument_list|,
literal|"-regular"
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|conf
argument_list|,
literal|"-REGULAR"
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
literal|true
argument_list|,
name|StartupOption
operator|.
name|ROLLBACK
argument_list|,
name|conf
argument_list|,
literal|"-rollback"
argument_list|)
expr_stmt|;
block|}
comment|/**    * A few options that should all fail to parse.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testStartupFailure ()
specifier|public
name|void
name|testStartupFailure
parameter_list|()
block|{
name|checkExpected
argument_list|(
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|conf
argument_list|,
literal|"unknownoption"
argument_list|)
expr_stmt|;
name|checkExpected
argument_list|(
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|conf
argument_list|,
literal|"-regular -rollback"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

