begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestUnderReplicatedBlockQueues
specifier|public
class|class
name|TestUnderReplicatedBlockQueues
block|{
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
DECL|method|genBlockInfo (long id)
specifier|private
name|BlockInfo
name|genBlockInfo
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
operator|new
name|BlockInfoContiguous
argument_list|(
operator|new
name|Block
argument_list|(
name|id
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
return|;
block|}
DECL|method|genStripedBlockInfo (long id, long numBytes)
specifier|private
name|BlockInfo
name|genStripedBlockInfo
parameter_list|(
name|long
name|id
parameter_list|,
name|long
name|numBytes
parameter_list|)
block|{
name|BlockInfoStriped
name|sblk
init|=
operator|new
name|BlockInfoStriped
argument_list|(
operator|new
name|Block
argument_list|(
name|id
argument_list|)
argument_list|,
name|ecPolicy
argument_list|)
decl_stmt|;
name|sblk
operator|.
name|setNumBytes
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
return|return
name|sblk
return|;
block|}
comment|/**    * Test that adding blocks with different replication counts puts them    * into different queues    * @throws Throwable if something goes wrong    */
annotation|@
name|Test
DECL|method|testBlockPriorities ()
specifier|public
name|void
name|testBlockPriorities
parameter_list|()
throws|throws
name|Throwable
block|{
name|UnderReplicatedBlocks
name|queues
init|=
operator|new
name|UnderReplicatedBlocks
argument_list|()
decl_stmt|;
name|BlockInfo
name|block1
init|=
name|genBlockInfo
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BlockInfo
name|block2
init|=
name|genBlockInfo
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BlockInfo
name|block_very_under_replicated
init|=
name|genBlockInfo
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BlockInfo
name|block_corrupt
init|=
name|genBlockInfo
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|BlockInfo
name|block_corrupt_repl_one
init|=
name|genBlockInfo
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|//add a block with a single entry
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queues
operator|.
name|getUnderReplicatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block1
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_HIGHEST_PRIORITY
argument_list|)
expr_stmt|;
comment|//repeated additions fail
name|assertFalse
argument_list|(
name|queues
operator|.
name|add
argument_list|(
name|block1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|//add a second block with two replicas
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queues
operator|.
name|getUnderReplicatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block2
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_UNDER_REPLICATED
argument_list|)
expr_stmt|;
comment|//now try to add a block that is corrupt
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block_corrupt
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queues
operator|.
name|getUnderReplicatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queues
operator|.
name|getCorruptBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block_corrupt
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_WITH_CORRUPT_BLOCKS
argument_list|)
expr_stmt|;
comment|//insert a very under-replicated block
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block_very_under_replicated
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block_very_under_replicated
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_VERY_UNDER_REPLICATED
argument_list|)
expr_stmt|;
comment|//insert a corrupt block with replication factor 1
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block_corrupt_repl_one
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queues
operator|.
name|getCorruptBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queues
operator|.
name|getCorruptReplOneBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|update
argument_list|(
name|block_corrupt_repl_one
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queues
operator|.
name|getCorruptReplOneBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|update
argument_list|(
name|block_corrupt
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queues
operator|.
name|getCorruptReplOneBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|queues
operator|.
name|update
argument_list|(
name|block_very_under_replicated
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|4
argument_list|,
operator|-
literal|24
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queues
operator|.
name|getCorruptReplOneBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripedBlockPriorities ()
specifier|public
name|void
name|testStripedBlockPriorities
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|dataBlkNum
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlkNUm
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|doTestStripedBlockPriorities
argument_list|(
literal|1
argument_list|,
name|parityBlkNUm
argument_list|)
expr_stmt|;
name|doTestStripedBlockPriorities
argument_list|(
name|dataBlkNum
argument_list|,
name|parityBlkNUm
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestStripedBlockPriorities (int dataBlkNum, int parityBlkNum)
specifier|private
name|void
name|doTestStripedBlockPriorities
parameter_list|(
name|int
name|dataBlkNum
parameter_list|,
name|int
name|parityBlkNum
parameter_list|)
throws|throws
name|Throwable
block|{
name|int
name|groupSize
init|=
name|dataBlkNum
operator|+
name|parityBlkNum
decl_stmt|;
name|long
name|numBytes
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
operator|*
name|dataBlkNum
decl_stmt|;
name|UnderReplicatedBlocks
name|queues
init|=
operator|new
name|UnderReplicatedBlocks
argument_list|()
decl_stmt|;
name|int
name|numUR
init|=
literal|0
decl_stmt|;
name|int
name|numCorrupt
init|=
literal|0
decl_stmt|;
comment|// add under replicated blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|dataBlkNum
operator|+
name|i
operator|<
name|groupSize
condition|;
name|i
operator|++
control|)
block|{
name|BlockInfo
name|block
init|=
name|genStripedBlockInfo
argument_list|(
operator|-
literal|100
operator|-
literal|100
operator|*
name|i
argument_list|,
name|numBytes
argument_list|)
decl_stmt|;
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block
argument_list|,
name|dataBlkNum
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|groupSize
argument_list|)
expr_stmt|;
name|numUR
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|numUR
argument_list|,
name|queues
operator|.
name|getUnderReplicatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numUR
operator|+
name|numCorrupt
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_HIGHEST_PRIORITY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|*
literal|3
operator|<
name|parityBlkNum
operator|+
literal|1
condition|)
block|{
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_VERY_UNDER_REPLICATED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_UNDER_REPLICATED
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add a corrupted block
name|BlockInfo
name|block_corrupt
init|=
name|genStripedBlockInfo
argument_list|(
operator|-
literal|10
argument_list|,
name|numBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numCorrupt
argument_list|,
name|queues
operator|.
name|getCorruptBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertAdded
argument_list|(
name|queues
argument_list|,
name|block_corrupt
argument_list|,
name|dataBlkNum
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|groupSize
argument_list|)
expr_stmt|;
name|numCorrupt
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|numUR
operator|+
name|numCorrupt
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numUR
argument_list|,
name|queues
operator|.
name|getUnderReplicatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numCorrupt
argument_list|,
name|queues
operator|.
name|getCorruptBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertInLevel
argument_list|(
name|queues
argument_list|,
name|block_corrupt
argument_list|,
name|UnderReplicatedBlocks
operator|.
name|QUEUE_WITH_CORRUPT_BLOCKS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAdded (UnderReplicatedBlocks queues, BlockInfo block, int curReplicas, int decomissionedReplicas, int expectedReplicas)
specifier|private
name|void
name|assertAdded
parameter_list|(
name|UnderReplicatedBlocks
name|queues
parameter_list|,
name|BlockInfo
name|block
parameter_list|,
name|int
name|curReplicas
parameter_list|,
name|int
name|decomissionedReplicas
parameter_list|,
name|int
name|expectedReplicas
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to add "
operator|+
name|block
argument_list|,
name|queues
operator|.
name|add
argument_list|(
name|block
argument_list|,
name|curReplicas
argument_list|,
literal|0
argument_list|,
name|decomissionedReplicas
argument_list|,
name|expectedReplicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine whether or not a block is in a level without changing the API.    * Instead get the per-level iterator and run though it looking for a match.    * If the block is not found, an assertion is thrown.    *    * This is inefficient, but this is only a test case.    * @param queues queues to scan    * @param block block to look for    * @param level level to select    */
DECL|method|assertInLevel (UnderReplicatedBlocks queues, Block block, int level)
specifier|private
name|void
name|assertInLevel
parameter_list|(
name|UnderReplicatedBlocks
name|queues
parameter_list|,
name|Block
name|block
parameter_list|,
name|int
name|level
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|bi
init|=
name|queues
operator|.
name|iterator
argument_list|(
name|level
argument_list|)
decl_stmt|;
while|while
condition|(
name|bi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Block
name|next
init|=
name|bi
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|equals
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Block "
operator|+
name|block
operator|+
literal|" not found in level "
operator|+
name|level
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

