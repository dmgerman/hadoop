begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestFSImageWithAcl
specifier|public
class|class
name|TestFSImageWithAcl
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testAcl (boolean persistNamespace)
specifier|private
name|void
name|testAcl
parameter_list|(
name|boolean
name|persistNamespace
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/p"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/23"
argument_list|)
argument_list|)
expr_stmt|;
name|AclEntry
name|e
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|READ_EXECUTE
argument_list|)
operator|.
name|setScope
argument_list|(
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|USER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|p
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistNamespace
condition|)
block|{
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|AclStatus
name|s
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|AclEntry
index|[]
name|returned
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|s
operator|.
name|getEntries
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|fs
operator|.
name|removeAcl
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistNamespace
condition|)
block|{
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|s
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|returned
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|s
operator|.
name|getEntries
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{ }
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|fs
operator|.
name|modifyAclEntries
argument_list|(
name|p
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getAclStatus
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|returned
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|s
operator|.
name|getEntries
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
argument_list|,
name|returned
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPersistAcl ()
specifier|public
name|void
name|testPersistAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|testAcl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclEditLog ()
specifier|public
name|void
name|testAclEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|testAcl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

