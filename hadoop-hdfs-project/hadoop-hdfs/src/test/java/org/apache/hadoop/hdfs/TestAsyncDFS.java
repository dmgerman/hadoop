begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSAclBaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AsyncCallLimitExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Unit tests for asynchronous distributed filesystem.  * */
end_comment

begin_class
DECL|class|TestAsyncDFS
specifier|public
class|class
name|TestAsyncDFS
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAsyncDFS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_TESTS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TESTS
init|=
literal|1000
decl_stmt|;
DECL|field|NUM_NN_HANDLER
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NN_HANDLER
init|=
literal|10
decl_stmt|;
DECL|field|ASYNC_CALL_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|ASYNC_CALL_LIMIT
init|=
literal|100
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// explicitly turn on acl
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// explicitly turn on ACL
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the limit of max async calls
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_ASYNC_CALLS_MAX_KEY
argument_list|,
name|ASYNC_CALL_LIMIT
argument_list|)
expr_stmt|;
comment|// set server handlers
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
name|NUM_NN_HANDLER
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|AclQueueEntry
specifier|static
class|class
name|AclQueueEntry
block|{
DECL|field|future
specifier|private
specifier|final
name|Object
name|future
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|isSetAcl
specifier|private
specifier|final
name|Boolean
name|isSetAcl
decl_stmt|;
DECL|method|AclQueueEntry (final Object future, final Path path, final Boolean isSetAcl)
name|AclQueueEntry
parameter_list|(
specifier|final
name|Object
name|future
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Boolean
name|isSetAcl
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|isSetAcl
operator|=
name|isSetAcl
expr_stmt|;
block|}
DECL|method|getFuture ()
specifier|public
specifier|final
name|Object
name|getFuture
parameter_list|()
block|{
return|return
name|future
return|;
block|}
DECL|method|getPath ()
specifier|public
specifier|final
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|isSetAcl ()
specifier|public
specifier|final
name|Boolean
name|isSetAcl
parameter_list|()
block|{
return|return
name|this
operator|.
name|isSetAcl
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBatchAsyncAcl ()
specifier|public
name|void
name|testBatchAsyncAcl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|basePath
init|=
literal|"testBatchAsyncAcl"
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/test/%s/"
argument_list|,
name|basePath
argument_list|)
argument_list|)
decl_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
comment|// prepare test
name|int
name|count
init|=
name|NUM_TESTS
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"acl"
operator|+
name|i
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
init|=
name|getAclSpec
argument_list|()
decl_stmt|;
specifier|final
name|AclEntry
index|[]
name|expectedAclSpec
init|=
name|getExpectedAclSpec
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|setAclRetFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|AclStatus
argument_list|>
argument_list|>
name|getAclRetFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|AclStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|,
name|end
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// test setAcl
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|setAcl
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|aclSpec
argument_list|)
decl_stmt|;
name|setAclRetFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|waitForAclReturnValues
argument_list|(
name|setAclRetFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|waitForAclReturnValues
argument_list|(
name|setAclRetFutures
argument_list|,
name|end
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// test getAclStatus
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|AclStatus
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|getAclStatus
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|getAclRetFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|waitForAclReturnValues
argument_list|(
name|getAclRetFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|paths
argument_list|,
name|expectedAclSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|waitForAclReturnValues
argument_list|(
name|getAclRetFutures
argument_list|,
name|end
argument_list|,
name|count
argument_list|,
name|paths
argument_list|,
name|expectedAclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|waitForAclReturnValues ( final Map<Integer, Future<Void>> aclRetFutures, final int start, final int end)
specifier|private
name|void
name|waitForAclReturnValues
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|aclRetFutures
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|aclRetFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForAclReturnValues ( final Map<Integer, Future<AclStatus>> aclRetFutures, final int start, final int end, final Path[] paths, final AclEntry[] expectedAclSpec)
specifier|private
name|void
name|waitForAclReturnValues
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|AclStatus
argument_list|>
argument_list|>
name|aclRetFutures
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|,
specifier|final
name|Path
index|[]
name|paths
parameter_list|,
specifier|final
name|AclEntry
index|[]
name|expectedAclSpec
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|AclStatus
name|aclStatus
init|=
name|aclRetFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|verifyGetAcl
argument_list|(
name|aclStatus
argument_list|,
name|expectedAclSpec
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyGetAcl (final AclStatus aclStatus, final AclEntry[] expectedAclSpec, final Path path)
specifier|private
name|void
name|verifyGetAcl
parameter_list|(
specifier|final
name|AclStatus
name|aclStatus
parameter_list|,
specifier|final
name|AclEntry
index|[]
name|expectedAclSpec
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|aclStatus
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// verify permission and acl
name|AclEntry
index|[]
name|returned
init|=
name|aclStatus
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedAclSpec
argument_list|,
name|returned
argument_list|)
expr_stmt|;
name|assertPermission
argument_list|(
name|path
argument_list|,
operator|(
name|short
operator|)
literal|010770
argument_list|)
expr_stmt|;
name|FSAclBaseTest
operator|.
name|assertAclFeature
argument_list|(
name|cluster
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getAclSpec ()
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getAclSpec
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getExpectedAclSpec ()
specifier|private
name|AclEntry
index|[]
name|getExpectedAclSpec
parameter_list|()
block|{
return|return
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|NONE
argument_list|)
block|}
return|;
block|}
DECL|method|assertPermission (final Path pathToCheck, final short perm)
specifier|private
name|void
name|assertPermission
parameter_list|(
specifier|final
name|Path
name|pathToCheck
parameter_list|,
specifier|final
name|short
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
name|AclTestHelpers
operator|.
name|assertPermission
argument_list|(
name|fs
argument_list|,
name|pathToCheck
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAsyncAPIWithException ()
specifier|public
name|void
name|testAsyncAPIWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group1
init|=
literal|"group1"
decl_stmt|;
name|String
name|group2
init|=
literal|"group2"
decl_stmt|;
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
name|UserGroupInformation
name|ugi1
decl_stmt|;
comment|// create fake mapping for the groups
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|u2gMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|u2gMap
operator|.
name|put
argument_list|(
name|user1
argument_list|,
operator|new
name|String
index|[]
block|{
name|group1
block|,
name|group2
block|}
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|updateConfWithFakeGroupMapping
argument_list|(
name|conf
argument_list|,
name|u2gMap
argument_list|)
expr_stmt|;
comment|// Initiate all four users
name|ugi1
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user1
argument_list|,
operator|new
name|String
index|[]
block|{
name|group1
block|,
name|group2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/test/async_api_exception/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|aclDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"aclDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|aclDir
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0770
argument_list|)
argument_list|)
expr_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|ugi1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|AsyncDistributedFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncDistributedFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
decl_stmt|;
comment|// test setAcl
try|try
block|{
name|retFuture
operator|=
name|adfs
operator|.
name|setAcl
argument_list|(
name|aclDir
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|retFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"setAcl should fail with permission denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|checkPermissionDenied
argument_list|(
name|e
argument_list|,
name|aclDir
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
comment|// test getAclStatus
try|try
block|{
name|Future
argument_list|<
name|AclStatus
argument_list|>
name|aclRetFuture
init|=
name|adfs
operator|.
name|getAclStatus
argument_list|(
name|aclDir
argument_list|)
decl_stmt|;
name|aclRetFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"getAclStatus should fail with permission denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|checkPermissionDenied
argument_list|(
name|e
argument_list|,
name|aclDir
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkPermissionDenied (final Exception e, final Path dir, final String user)
specifier|public
specifier|static
name|void
name|checkPermissionDenied
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|String
name|user
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry AccessControlException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AccessControlException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the username"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the name of the path"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

