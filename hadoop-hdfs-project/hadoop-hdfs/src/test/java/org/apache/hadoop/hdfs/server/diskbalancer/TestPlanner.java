begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ClusterConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|NullConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|GreedyPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|MoveStep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|NodePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestPlanner
specifier|public
class|class
name|TestPlanner
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestPlanner
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|TestGreedyPlannerBalanceVolumeSet ()
specifier|public
name|void
name|TestGreedyPlannerBalanceVolumeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|clusterJson
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/diskBalancer/data-cluster-3node-3disk.json"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|ClusterConnector
name|jsonConnector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|clusterJson
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|jsonConnector
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNodesToProcess
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|DiskBalancerDataNode
name|node
init|=
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerComputePlan ()
specifier|public
name|void
name|TestGreedyPlannerComputePlan
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|clusterJson
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/diskBalancer/data-cluster-3node-3disk.json"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|ClusterConnector
name|jsonConnector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|clusterJson
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|jsonConnector
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNodesToProcess
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodePlan
argument_list|>
name|plan
init|=
name|cluster
operator|.
name|computePlan
argument_list|(
literal|10.0f
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
DECL|method|createVolume (String path, int capacityInGB, int usedInGB)
specifier|private
name|DiskBalancerVolume
name|createVolume
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|capacityInGB
parameter_list|,
name|int
name|usedInGB
parameter_list|)
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|volume
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setCapacity
argument_list|(
name|capacityInGB
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setReserved
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setUsed
argument_list|(
name|usedInGB
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerNoNodeCluster ()
specifier|public
name|void
name|TestGreedyPlannerNoNodeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerNoVolumeTest ()
specifier|public
name|void
name|TestGreedyPlannerNoVolumeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodePlan
argument_list|>
name|planList
init|=
name|cluster
operator|.
name|computePlan
argument_list|(
literal|10.0f
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|planList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerOneVolumeNoPlanTest ()
specifier|public
name|void
name|TestGreedyPlannerOneVolumeNoPlanTest
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume30
init|=
name|createVolume
argument_list|(
literal|"volume30"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume30
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// With a single volume we should not have any plans for moves.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerTwoVolume ()
specifier|public
name|void
name|TestGreedyPlannerTwoVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume30
init|=
name|createVolume
argument_list|(
literal|"volume30"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume10
init|=
name|createVolume
argument_list|(
literal|"volume10"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume10
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume30
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// We should have only one planned move from
comment|// volume30 to volume10 of 10 GB Size.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Step
name|step
init|=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"volume30"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"volume10"
argument_list|,
name|step
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this test we pass 3 volumes with 30, 20 and 10 GB of data used. We    * expect the planner to print out 20 GB on each volume.    *<p/>    * That is the plan should say move 10 GB from volume30 to volume10.    */
annotation|@
name|Test
DECL|method|TestGreedyPlannerEqualizeData ()
specifier|public
name|void
name|TestGreedyPlannerEqualizeData
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume30
init|=
name|createVolume
argument_list|(
literal|"volume30"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume20
init|=
name|createVolume
argument_list|(
literal|"volume20"
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume10
init|=
name|createVolume
argument_list|(
literal|"volume10"
argument_list|,
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume10
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume20
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume30
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// We should have only one planned move from
comment|// volume30 to volume10 of 10 GB Size.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Step
name|step
init|=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"volume30"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"volume10"
argument_list|,
name|step
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerEqualDisksNoMoves ()
specifier|public
name|void
name|TestGreedyPlannerEqualDisksNoMoves
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// All disks have same capacity of data
name|DiskBalancerVolume
name|volume1
init|=
name|createVolume
argument_list|(
literal|"volume1"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume2
init|=
name|createVolume
argument_list|(
literal|"volume2"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume3
init|=
name|createVolume
argument_list|(
literal|"volume3"
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume2
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume3
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// since we have same size of data in all disks , we should have
comment|// no moves planned.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerMoveFromSingleDisk ()
specifier|public
name|void
name|TestGreedyPlannerMoveFromSingleDisk
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// All disks have same capacity of data
name|DiskBalancerVolume
name|volume1
init|=
name|createVolume
argument_list|(
literal|"volume100"
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume2
init|=
name|createVolume
argument_list|(
literal|"volume0-1"
argument_list|,
literal|200
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume3
init|=
name|createVolume
argument_list|(
literal|"volume0-2"
argument_list|,
literal|200
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume2
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume3
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// We should see 2 move plans. One from volume100 to volume0-1
comment|// and another from volume100 to volume0-2
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Step
name|step
init|=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"33.3 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|step
operator|=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"33.3 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerThresholdTest ()
specifier|public
name|void
name|TestGreedyPlannerThresholdTest
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume1
init|=
name|createVolume
argument_list|(
literal|"volume100"
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume2
init|=
name|createVolume
argument_list|(
literal|"volume0-1"
argument_list|,
literal|300
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume3
init|=
name|createVolume
argument_list|(
literal|"volume0-2"
argument_list|,
literal|300
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume2
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume3
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|//We should see NO moves since the total data on the volume100
comment|// is less than or equal to threashold value that we pass, which is 10%
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// for this new planner we are passing 1% as as threshold value
comment|// hence planner must move data if possible.
name|GreedyPlanner
name|newPlanner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|01.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|newPlan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|newPlanner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|newPlan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move size should say move 19 GB
comment|// Here is how the math works out.
comment|// TotalCapacity = 1000 + 300 + 300 = 1600 GB
comment|// TotolUsed = 100
comment|// Expected data% on each disk = 0.0625
comment|// On Disk (volume0-1) = 300 * 0.0625 - 18.75 -- We round it up
comment|// in the display string -- hence 18.8 GB, it will be same on volume 2 too.
comment|// since they are equal sized disks with same used capacity
name|Step
name|step
init|=
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"18.8 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|step
operator|=
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"18.8 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestGreedyPlannerPlanWithDifferentDiskSizes ()
specifier|public
name|void
name|TestGreedyPlannerPlanWithDifferentDiskSizes
parameter_list|()
throws|throws
name|Exception
block|{
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume1
init|=
name|createVolume
argument_list|(
literal|"volume100"
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume2
init|=
name|createVolume
argument_list|(
literal|"volume0-1"
argument_list|,
literal|500
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|volume3
init|=
name|createVolume
argument_list|(
literal|"volume0-2"
argument_list|,
literal|250
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume2
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|volume3
argument_list|)
expr_stmt|;
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|newPlanner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|01.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|newPlan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|newPlanner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|newPlan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move size should say move 26.6 GB and 13.3 GB
comment|// Here is how the math works out.
comment|// TotalCapacity = 1000 + 500 + 250 = 1750 GB
comment|// TotolUsed = 100
comment|// Expected data% on each disk = 0.05714
comment|// On Disk (volume0-1) = 500 * 0.05714 = 28.57
comment|// on Voulume0-2 = 300 * 0.05714 = 14.28
for|for
control|(
name|Step
name|step
range|:
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
control|)
block|{
if|if
condition|(
name|step
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"volume0-1"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"28.6 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|step
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"volume0-2"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"volume100"
argument_list|,
name|step
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"14.3 G"
argument_list|,
name|step
operator|.
name|getSizeString
argument_list|(
name|step
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Step
name|step
init|=
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.05714f
argument_list|,
name|step
operator|.
name|getIdealStorage
argument_list|()
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestLoadsCorrectClusterConnector ()
specifier|public
name|void
name|TestLoadsCorrectClusterConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnector
name|connector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/diskBalancer/data-cluster-3node-3disk.json"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"class org.apache.hadoop.hdfs.server.diskbalancer.connectors."
operator|+
literal|"JsonNodeConnector"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestPlannerScale ()
specifier|public
name|void
name|TestPlannerScale
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|diskCount
init|=
literal|256
decl_stmt|;
comment|// it is rare to see more than 48 disks
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolumeSet
name|vSet
init|=
name|util
operator|.
name|createRandomVolumeSet
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|diskCount
argument_list|)
decl_stmt|;
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|diskNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiskBalancerVolume
name|vol
range|:
name|vSet
operator|.
name|getVolumes
argument_list|()
control|)
block|{
name|vol
operator|.
name|setPath
argument_list|(
literal|"volume"
operator|+
name|diskNum
operator|++
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|GreedyPlanner
name|newPlanner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|01.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|newPlan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|newPlanner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|newPlan
argument_list|)
expr_stmt|;
comment|// Assuming that our random disks at least generated one step
name|assertTrue
argument_list|(
literal|"No Steps Generated from random disks, very unlikely"
argument_list|,
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Steps Generated less than disk count - false"
argument_list|,
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|diskCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of steps are : %d%n"
argument_list|,
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestNodePlanSerialize ()
specifier|public
name|void
name|TestNodePlanSerialize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|diskCount
init|=
literal|12
decl_stmt|;
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolumeSet
name|vSet
init|=
name|util
operator|.
name|createRandomVolumeSet
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|diskCount
argument_list|)
decl_stmt|;
name|NullConnector
name|nullConnector
init|=
operator|new
name|NullConnector
argument_list|()
decl_stmt|;
name|DiskBalancerCluster
name|cluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nullConnector
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|diskNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiskBalancerVolume
name|vol
range|:
name|vSet
operator|.
name|getVolumes
argument_list|()
control|)
block|{
name|vol
operator|.
name|setPath
argument_list|(
literal|"volume"
operator|+
name|diskNum
operator|++
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
name|nullConnector
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|GreedyPlanner
name|newPlanner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|01.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|newPlan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|newPlanner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"SSD"
argument_list|)
argument_list|,
name|newPlan
argument_list|)
expr_stmt|;
name|String
name|planString
init|=
name|newPlan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|planString
argument_list|)
expr_stmt|;
name|NodePlan
name|copy
init|=
name|NodePlan
operator|.
name|parseJson
argument_list|(
name|planString
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newPlan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|copy
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

