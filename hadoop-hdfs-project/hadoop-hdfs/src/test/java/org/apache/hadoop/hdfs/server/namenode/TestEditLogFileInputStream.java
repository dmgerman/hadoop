begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestEditLogFileInputStream
specifier|public
class|class
name|TestEditLogFileInputStream
block|{
DECL|field|FAKE_LOG_DATA
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAKE_LOG_DATA
init|=
name|TestEditLog
operator|.
name|HADOOP20_SOME_EDITS
decl_stmt|;
annotation|@
name|Test
DECL|method|testReadURL ()
specifier|public
name|void
name|testReadURL
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|FAKE_LOG_DATA
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|conn
argument_list|)
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
operator|.
name|when
argument_list|(
name|conn
argument_list|)
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|FAKE_LOG_DATA
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|conn
argument_list|)
operator|.
name|getHeaderField
argument_list|(
literal|"Content-Length"
argument_list|)
expr_stmt|;
name|URLConnectionFactory
name|factory
init|=
name|mock
argument_list|(
name|URLConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|conn
argument_list|)
operator|.
name|when
argument_list|(
name|factory
argument_list|)
operator|.
name|openConnection
argument_list|(
name|Mockito
operator|.
expr|<
name|URL
operator|>
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost/fakeLog"
argument_list|)
decl_stmt|;
name|EditLogInputStream
name|elis
init|=
name|EditLogFileInputStream
operator|.
name|fromUrl
argument_list|(
name|factory
argument_list|,
name|url
argument_list|,
name|HdfsServerConstants
operator|.
name|INVALID_TXID
argument_list|,
name|HdfsServerConstants
operator|.
name|INVALID_TXID
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Read the edit log and verify that we got all of the data.
name|EnumMap
argument_list|<
name|FSEditLogOpCodes
argument_list|,
name|Holder
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|counts
init|=
name|FSImageTestUtil
operator|.
name|countEditLogOpTypes
argument_list|(
name|elis
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_ADD
argument_list|)
operator|.
name|held
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_SET_GENSTAMP_V1
argument_list|)
operator|.
name|held
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
name|FSEditLogOpCodes
operator|.
name|OP_CLOSE
argument_list|)
operator|.
name|held
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that length header was picked up.
name|assertEquals
argument_list|(
name|FAKE_LOG_DATA
operator|.
name|length
argument_list|,
name|elis
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|elis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

