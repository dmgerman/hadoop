begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_LOGROLL_PERIOD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_STANDBY_CHECKPOINTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_EXTENSION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|RequestSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
operator|.
name|NNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FsDatasetTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FsDatasetTestUtils
operator|.
name|MaterializedReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SecureDataNodeStarter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SecureDataNodeStarter
operator|.
name|SecureResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StaticMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This class creates a single-process DFS cluster for junit testing.  * The data directories for non-simulated DFS are under the testing directory.  * For simulated data nodes, no underlying fs storage is used.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HBase"
block|,
literal|"HDFS"
block|,
literal|"Hive"
block|,
literal|"MapReduce"
block|,
literal|"Pig"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MiniDFSCluster
specifier|public
class|class
name|MiniDFSCluster
implements|implements
name|AutoCloseable
block|{
DECL|field|NAMESERVICE_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NAMESERVICE_ID_PREFIX
init|=
literal|"nameserviceId"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniDFSCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** System property to set the data dir: {@value} */
DECL|field|PROP_TEST_BUILD_DATA
specifier|public
specifier|static
specifier|final
name|String
name|PROP_TEST_BUILD_DATA
init|=
name|GenericTestUtils
operator|.
name|SYSPROP_TEST_DATA_DIR
decl_stmt|;
comment|/** Configuration option to set the data dir: {@value} */
DECL|field|HDFS_MINIDFS_BASEDIR
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_MINIDFS_BASEDIR
init|=
literal|"hdfs.minidfs.basedir"
decl_stmt|;
DECL|field|DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY
init|=
name|DFS_NAMENODE_SAFEMODE_EXTENSION_KEY
operator|+
literal|".testing"
decl_stmt|;
comment|// Changing this default may break some tests that assume it is 2.
DECL|field|DEFAULT_STORAGES_PER_DATANODE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STORAGES_PER_DATANODE
init|=
literal|2
decl_stmt|;
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getStoragesPerDatanode ()
specifier|public
name|int
name|getStoragesPerDatanode
parameter_list|()
block|{
return|return
name|storagesPerDatanode
return|;
block|}
comment|/**    * Class to construct instances of MiniDFSClusters with specific options.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|nameNodePort
specifier|private
name|int
name|nameNodePort
init|=
literal|0
decl_stmt|;
DECL|field|nameNodeHttpPort
specifier|private
name|int
name|nameNodeHttpPort
init|=
literal|0
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numDataNodes
specifier|private
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
DECL|field|storageTypes
specifier|private
name|StorageType
index|[]
index|[]
name|storageTypes
init|=
literal|null
decl_stmt|;
DECL|field|storageTypes1D
specifier|private
name|StorageType
index|[]
name|storageTypes1D
init|=
literal|null
decl_stmt|;
DECL|field|storagesPerDatanode
specifier|private
name|int
name|storagesPerDatanode
init|=
name|DEFAULT_STORAGES_PER_DATANODE
decl_stmt|;
DECL|field|format
specifier|private
name|boolean
name|format
init|=
literal|true
decl_stmt|;
DECL|field|manageNameDfsDirs
specifier|private
name|boolean
name|manageNameDfsDirs
init|=
literal|true
decl_stmt|;
DECL|field|manageNameDfsSharedDirs
specifier|private
name|boolean
name|manageNameDfsSharedDirs
init|=
literal|true
decl_stmt|;
DECL|field|enableManagedDfsDirsRedundancy
specifier|private
name|boolean
name|enableManagedDfsDirsRedundancy
init|=
literal|true
decl_stmt|;
DECL|field|manageDataDfsDirs
specifier|private
name|boolean
name|manageDataDfsDirs
init|=
literal|true
decl_stmt|;
DECL|field|option
specifier|private
name|StartupOption
name|option
init|=
literal|null
decl_stmt|;
DECL|field|dnOption
specifier|private
name|StartupOption
name|dnOption
init|=
literal|null
decl_stmt|;
DECL|field|racks
specifier|private
name|String
index|[]
name|racks
init|=
literal|null
decl_stmt|;
DECL|field|hosts
specifier|private
name|String
index|[]
name|hosts
init|=
literal|null
decl_stmt|;
DECL|field|simulatedCapacities
specifier|private
name|long
index|[]
name|simulatedCapacities
init|=
literal|null
decl_stmt|;
DECL|field|storageCapacities
specifier|private
name|long
index|[]
index|[]
name|storageCapacities
init|=
literal|null
decl_stmt|;
DECL|field|storageCapacities1D
specifier|private
name|long
index|[]
name|storageCapacities1D
init|=
literal|null
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
DECL|field|waitSafeMode
specifier|private
name|boolean
name|waitSafeMode
init|=
literal|true
decl_stmt|;
DECL|field|setupHostsFile
specifier|private
name|boolean
name|setupHostsFile
init|=
literal|false
decl_stmt|;
DECL|field|nnTopology
specifier|private
name|MiniDFSNNTopology
name|nnTopology
init|=
literal|null
decl_stmt|;
DECL|field|checkExitOnShutdown
specifier|private
name|boolean
name|checkExitOnShutdown
init|=
literal|true
decl_stmt|;
DECL|field|checkDataNodeAddrConfig
specifier|private
name|boolean
name|checkDataNodeAddrConfig
init|=
literal|false
decl_stmt|;
DECL|field|checkDataNodeHostConfig
specifier|private
name|boolean
name|checkDataNodeHostConfig
init|=
literal|false
decl_stmt|;
DECL|field|dnConfOverlays
specifier|private
name|Configuration
index|[]
name|dnConfOverlays
decl_stmt|;
DECL|field|skipFsyncForTesting
specifier|private
name|boolean
name|skipFsyncForTesting
init|=
literal|true
decl_stmt|;
DECL|field|useConfiguredTopologyMappingClass
specifier|private
name|boolean
name|useConfiguredTopologyMappingClass
init|=
literal|false
decl_stmt|;
DECL|method|Builder (Configuration conf)
specifier|public
name|Builder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|storagesPerDatanode
operator|=
name|FsDatasetTestUtils
operator|.
name|Factory
operator|.
name|getFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|getDefaultNumOfDataDirs
argument_list|()
expr_stmt|;
block|}
comment|/**      * Default: 0      */
DECL|method|nameNodePort (int val)
specifier|public
name|Builder
name|nameNodePort
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|nameNodePort
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 0      */
DECL|method|nameNodeHttpPort (int val)
specifier|public
name|Builder
name|nameNodeHttpPort
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|nameNodeHttpPort
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 1      */
DECL|method|numDataNodes (int val)
specifier|public
name|Builder
name|numDataNodes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|numDataNodes
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: DEFAULT_STORAGES_PER_DATANODE      */
DECL|method|storagesPerDatanode (int numStorages)
specifier|public
name|Builder
name|storagesPerDatanode
parameter_list|(
name|int
name|numStorages
parameter_list|)
block|{
name|this
operator|.
name|storagesPerDatanode
operator|=
name|numStorages
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the same storage type configuration for each datanode.      * If storageTypes is uninitialized or passed null then      * StorageType.DEFAULT is used.      */
DECL|method|storageTypes (StorageType[] types)
specifier|public
name|Builder
name|storageTypes
parameter_list|(
name|StorageType
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|storageTypes1D
operator|=
name|types
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set custom storage type configuration for each datanode.      * If storageTypes is uninitialized or passed null then      * StorageType.DEFAULT is used.      */
DECL|method|storageTypes (StorageType[][] types)
specifier|public
name|Builder
name|storageTypes
parameter_list|(
name|StorageType
index|[]
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|storageTypes
operator|=
name|types
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the same storage capacity configuration for each datanode.      * If storageTypes is uninitialized or passed null then      * StorageType.DEFAULT is used.      */
DECL|method|storageCapacities (long[] capacities)
specifier|public
name|Builder
name|storageCapacities
parameter_list|(
name|long
index|[]
name|capacities
parameter_list|)
block|{
name|this
operator|.
name|storageCapacities1D
operator|=
name|capacities
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set custom storage capacity configuration for each datanode.      * If storageCapacities is uninitialized or passed null then      * capacity is limited by available disk space.      */
DECL|method|storageCapacities (long[][] capacities)
specifier|public
name|Builder
name|storageCapacities
parameter_list|(
name|long
index|[]
index|[]
name|capacities
parameter_list|)
block|{
name|this
operator|.
name|storageCapacities
operator|=
name|capacities
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|format (boolean val)
specifier|public
name|Builder
name|format
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|manageNameDfsDirs (boolean val)
specifier|public
name|Builder
name|manageNameDfsDirs
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|manageNameDfsDirs
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|manageNameDfsSharedDirs (boolean val)
specifier|public
name|Builder
name|manageNameDfsSharedDirs
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|manageNameDfsSharedDirs
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|enableManagedDfsDirsRedundancy (boolean val)
specifier|public
name|Builder
name|enableManagedDfsDirsRedundancy
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|enableManagedDfsDirsRedundancy
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|manageDataDfsDirs (boolean val)
specifier|public
name|Builder
name|manageDataDfsDirs
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|manageDataDfsDirs
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|startupOption (StartupOption val)
specifier|public
name|Builder
name|startupOption
parameter_list|(
name|StartupOption
name|val
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|dnStartupOption (StartupOption val)
specifier|public
name|Builder
name|dnStartupOption
parameter_list|(
name|StartupOption
name|val
parameter_list|)
block|{
name|this
operator|.
name|dnOption
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|racks (String[] val)
specifier|public
name|Builder
name|racks
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|racks
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|hosts (String[] val)
specifier|public
name|Builder
name|hosts
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Use SimulatedFSDataset and limit the capacity of each DN per      * the values passed in val.      *      * For limiting the capacity of volumes with real storage, see      * {@link FsVolumeImpl#setCapacityForTesting}      * Default: null      */
DECL|method|simulatedCapacities (long[] val)
specifier|public
name|Builder
name|simulatedCapacities
parameter_list|(
name|long
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|simulatedCapacities
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|waitSafeMode (boolean val)
specifier|public
name|Builder
name|waitSafeMode
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|waitSafeMode
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|checkExitOnShutdown (boolean val)
specifier|public
name|Builder
name|checkExitOnShutdown
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|checkExitOnShutdown
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: false      */
DECL|method|checkDataNodeAddrConfig (boolean val)
specifier|public
name|Builder
name|checkDataNodeAddrConfig
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|checkDataNodeAddrConfig
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: false      */
DECL|method|checkDataNodeHostConfig (boolean val)
specifier|public
name|Builder
name|checkDataNodeHostConfig
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|checkDataNodeHostConfig
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|clusterId (String cid)
specifier|public
name|Builder
name|clusterId
parameter_list|(
name|String
name|cid
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|cid
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: false      * When true the hosts file/include file for the cluster is setup      */
DECL|method|setupHostsFile (boolean val)
specifier|public
name|Builder
name|setupHostsFile
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|setupHostsFile
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: a single namenode.      * See {@link MiniDFSNNTopology#simpleFederatedTopology(int)} to set up      * federated nameservices      */
DECL|method|nnTopology (MiniDFSNNTopology topology)
specifier|public
name|Builder
name|nnTopology
parameter_list|(
name|MiniDFSNNTopology
name|topology
parameter_list|)
block|{
name|this
operator|.
name|nnTopology
operator|=
name|topology
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      *       * An array of {@link Configuration} objects that will overlay the      * global MiniDFSCluster Configuration for the corresponding DataNode.      *       * Useful for setting specific per-DataNode configuration parameters.      */
DECL|method|dataNodeConfOverlays (Configuration[] dnConfOverlays)
specifier|public
name|Builder
name|dataNodeConfOverlays
parameter_list|(
name|Configuration
index|[]
name|dnConfOverlays
parameter_list|)
block|{
name|this
operator|.
name|dnConfOverlays
operator|=
name|dnConfOverlays
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      * When true, we skip fsync() calls for speed improvements.      */
DECL|method|skipFsyncForTesting (boolean val)
specifier|public
name|Builder
name|skipFsyncForTesting
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|skipFsyncForTesting
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|useConfiguredTopologyMappingClass ( boolean useConfiguredTopologyMappingClass)
specifier|public
name|Builder
name|useConfiguredTopologyMappingClass
parameter_list|(
name|boolean
name|useConfiguredTopologyMappingClass
parameter_list|)
block|{
name|this
operator|.
name|useConfiguredTopologyMappingClass
operator|=
name|useConfiguredTopologyMappingClass
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Construct the actual MiniDFSCluster      */
DECL|method|build ()
specifier|public
name|MiniDFSCluster
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniDFSCluster
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Used by builder to create and return an instance of MiniDFSCluster    */
DECL|method|MiniDFSCluster (Builder builder)
specifier|protected
name|MiniDFSCluster
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|builder
operator|.
name|nnTopology
operator|==
literal|null
condition|)
block|{
comment|// If no topology is specified, build a single NN.
name|builder
operator|.
name|nnTopology
operator|=
name|MiniDFSNNTopology
operator|.
name|simpleSingleNN
argument_list|(
name|builder
operator|.
name|nameNodePort
argument_list|,
name|builder
operator|.
name|nameNodeHttpPort
argument_list|)
expr_stmt|;
block|}
assert|assert
name|builder
operator|.
name|storageTypes
operator|==
literal|null
operator|||
name|builder
operator|.
name|storageTypes
operator|.
name|length
operator|==
name|builder
operator|.
name|numDataNodes
assert|;
specifier|final
name|int
name|numNameNodes
init|=
name|builder
operator|.
name|nnTopology
operator|.
name|countNameNodes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting cluster: numNameNodes="
operator|+
name|numNameNodes
operator|+
literal|", numDataNodes="
operator|+
name|builder
operator|.
name|numDataNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|storagesPerDatanode
operator|=
name|builder
operator|.
name|storagesPerDatanode
expr_stmt|;
comment|// Duplicate the storageType setting for each DN.
if|if
condition|(
name|builder
operator|.
name|storageTypes
operator|==
literal|null
operator|&&
name|builder
operator|.
name|storageTypes1D
operator|!=
literal|null
condition|)
block|{
assert|assert
name|builder
operator|.
name|storageTypes1D
operator|.
name|length
operator|==
name|storagesPerDatanode
assert|;
name|builder
operator|.
name|storageTypes
operator|=
operator|new
name|StorageType
index|[
name|builder
operator|.
name|numDataNodes
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builder
operator|.
name|numDataNodes
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|storageTypes
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|storageTypes1D
expr_stmt|;
block|}
block|}
comment|// Duplicate the storageCapacity setting for each DN.
if|if
condition|(
name|builder
operator|.
name|storageCapacities
operator|==
literal|null
operator|&&
name|builder
operator|.
name|storageCapacities1D
operator|!=
literal|null
condition|)
block|{
assert|assert
name|builder
operator|.
name|storageCapacities1D
operator|.
name|length
operator|==
name|storagesPerDatanode
assert|;
name|builder
operator|.
name|storageCapacities
operator|=
operator|new
name|long
index|[
name|builder
operator|.
name|numDataNodes
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builder
operator|.
name|numDataNodes
condition|;
operator|++
name|i
control|)
block|{
name|builder
operator|.
name|storageCapacities
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|storageCapacities1D
expr_stmt|;
block|}
block|}
name|initMiniDFSCluster
argument_list|(
name|builder
operator|.
name|conf
argument_list|,
name|builder
operator|.
name|numDataNodes
argument_list|,
name|builder
operator|.
name|storageTypes
argument_list|,
name|builder
operator|.
name|format
argument_list|,
name|builder
operator|.
name|manageNameDfsDirs
argument_list|,
name|builder
operator|.
name|manageNameDfsSharedDirs
argument_list|,
name|builder
operator|.
name|enableManagedDfsDirsRedundancy
argument_list|,
name|builder
operator|.
name|manageDataDfsDirs
argument_list|,
name|builder
operator|.
name|option
argument_list|,
name|builder
operator|.
name|dnOption
argument_list|,
name|builder
operator|.
name|racks
argument_list|,
name|builder
operator|.
name|hosts
argument_list|,
name|builder
operator|.
name|storageCapacities
argument_list|,
name|builder
operator|.
name|simulatedCapacities
argument_list|,
name|builder
operator|.
name|clusterId
argument_list|,
name|builder
operator|.
name|waitSafeMode
argument_list|,
name|builder
operator|.
name|setupHostsFile
argument_list|,
name|builder
operator|.
name|nnTopology
argument_list|,
name|builder
operator|.
name|checkExitOnShutdown
argument_list|,
name|builder
operator|.
name|checkDataNodeAddrConfig
argument_list|,
name|builder
operator|.
name|checkDataNodeHostConfig
argument_list|,
name|builder
operator|.
name|dnConfOverlays
argument_list|,
name|builder
operator|.
name|skipFsyncForTesting
argument_list|,
name|builder
operator|.
name|useConfiguredTopologyMappingClass
argument_list|)
expr_stmt|;
block|}
DECL|class|DataNodeProperties
specifier|public
class|class
name|DataNodeProperties
block|{
DECL|field|datanode
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dnArgs
name|String
index|[]
name|dnArgs
decl_stmt|;
DECL|field|secureResources
specifier|final
name|SecureResources
name|secureResources
decl_stmt|;
DECL|field|ipcPort
specifier|final
name|int
name|ipcPort
decl_stmt|;
DECL|method|DataNodeProperties (DataNode node, Configuration conf, String[] args, SecureResources secureResources, int ipcPort)
name|DataNodeProperties
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|SecureResources
name|secureResources
parameter_list|,
name|int
name|ipcPort
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dnArgs
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|secureResources
operator|=
name|secureResources
expr_stmt|;
name|this
operator|.
name|ipcPort
operator|=
name|ipcPort
expr_stmt|;
block|}
DECL|method|setDnArgs (String .... args)
specifier|public
name|void
name|setDnArgs
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|dnArgs
operator|=
name|args
expr_stmt|;
block|}
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|namenodes
specifier|private
name|Multimap
argument_list|<
name|String
argument_list|,
name|NameNodeInfo
argument_list|>
name|namenodes
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|numDataNodes
specifier|protected
name|int
name|numDataNodes
decl_stmt|;
DECL|field|dataNodes
specifier|protected
specifier|final
name|List
argument_list|<
name|DataNodeProperties
argument_list|>
name|dataNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DataNodeProperties
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|base_dir
specifier|private
name|File
name|base_dir
decl_stmt|;
DECL|field|data_dir
specifier|private
name|File
name|data_dir
decl_stmt|;
DECL|field|waitSafeMode
specifier|private
name|boolean
name|waitSafeMode
init|=
literal|true
decl_stmt|;
DECL|field|federation
specifier|private
name|boolean
name|federation
decl_stmt|;
DECL|field|checkExitOnShutdown
specifier|private
name|boolean
name|checkExitOnShutdown
init|=
literal|true
decl_stmt|;
DECL|field|storagesPerDatanode
specifier|protected
specifier|final
name|int
name|storagesPerDatanode
decl_stmt|;
DECL|field|fileSystems
specifier|private
name|Set
argument_list|<
name|FileSystem
argument_list|>
name|fileSystems
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|storageCap
specifier|private
name|List
argument_list|<
name|long
index|[]
argument_list|>
name|storageCap
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
comment|/**    * A unique instance identifier for the cluster. This    * is used to disambiguate HA filesystems in the case where    * multiple MiniDFSClusters are used in the same test suite.     */
DECL|field|instanceId
specifier|private
name|int
name|instanceId
decl_stmt|;
DECL|field|instanceCount
specifier|private
specifier|static
name|int
name|instanceCount
init|=
literal|0
decl_stmt|;
comment|/**    * Stores the information related to a namenode in the cluster    */
DECL|class|NameNodeInfo
specifier|public
specifier|static
class|class
name|NameNodeInfo
block|{
DECL|field|nameNode
specifier|public
name|NameNode
name|nameNode
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|nameserviceId
name|String
name|nameserviceId
decl_stmt|;
DECL|field|nnId
name|String
name|nnId
decl_stmt|;
DECL|field|startOpt
name|StartupOption
name|startOpt
decl_stmt|;
DECL|method|NameNodeInfo (NameNode nn, String nameserviceId, String nnId, StartupOption startOpt, Configuration conf)
name|NameNodeInfo
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|StartupOption
name|startOpt
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|nameNode
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|nameserviceId
operator|=
name|nameserviceId
expr_stmt|;
name|this
operator|.
name|nnId
operator|=
name|nnId
expr_stmt|;
name|this
operator|.
name|startOpt
operator|=
name|startOpt
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|setStartOpt (StartupOption startOpt)
specifier|public
name|void
name|setStartOpt
parameter_list|(
name|StartupOption
name|startOpt
parameter_list|)
block|{
name|this
operator|.
name|startOpt
operator|=
name|startOpt
expr_stmt|;
block|}
block|}
comment|/**    * This null constructor is used only when wishing to start a data node cluster    * without a name node (ie when the name node is started elsewhere).    */
DECL|method|MiniDFSCluster ()
specifier|public
name|MiniDFSCluster
parameter_list|()
block|{
name|storagesPerDatanode
operator|=
name|DEFAULT_STORAGES_PER_DATANODE
expr_stmt|;
synchronized|synchronized
init|(
name|MiniDFSCluster
operator|.
name|class
init|)
block|{
name|instanceId
operator|=
name|instanceCount
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Modify the config and start up the servers with the given operation.    * Servers will be started on free ports.    *<p>    * The caller must manage the creation of NameNode and DataNode directories    * and have already set {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and    * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} in the given conf.    *     * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param nameNodeOperation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, StartupOption nameNodeOperation)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|StartupOption
name|nameNodeOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|nameNodeOperation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the servers.  The rpc and info ports for    * servers are guaranteed to use free ports.    *<p>    * NameNode and DataNode directory creation and configuration will be    * managed by this class.    *    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param racks array of strings indicating the rack that each DataNode is on    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, boolean format, String[] racks)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the servers.  The rpc and info ports for    * servers are guaranteed to use free ports.    *<p>    * NameNode and DataNode directory creation and configuration will be    * managed by this class.    *    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostname for each DataNode    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, boolean format, String[] racks, String[] hosts)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free     * ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting     *          up    * @param manageDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and    *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in    *          the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageDfsDirs, StartupOption operation, String[] racks)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodePort
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|manageDfsDirs
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param manageDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and    *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in    *          the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param simulatedCapacities array of capacities of the simulated data nodes    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageDfsDirs, StartupOption operation, String[] racks, long[] simulatedCapacities)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodePort
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|manageDfsDirs
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param manageNameDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and    *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in    *          the conf    * @param manageDataDfsDirs if true, the data directories for datanodes will    *          be created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}    *          set to same in the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames of each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageNameDfsDirs, boolean manageDataDfsDirs, StartupOption operation, String[] racks, String hosts[], long[] simulatedCapacities)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|manageDataDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
name|hosts
index|[]
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storagesPerDatanode
operator|=
name|DEFAULT_STORAGES_PER_DATANODE
expr_stmt|;
name|initMiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|null
argument_list|,
name|format
argument_list|,
name|manageNameDfsDirs
argument_list|,
literal|true
argument_list|,
name|manageDataDfsDirs
argument_list|,
name|manageDataDfsDirs
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|MiniDFSNNTopology
operator|.
name|simpleSingleNN
argument_list|(
name|nameNodePort
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initMiniDFSCluster ( Configuration conf, int numDataNodes, StorageType[][] storageTypes, boolean format, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean manageDataDfsDirs, StartupOption startOpt, StartupOption dnStartOpt, String[] racks, String[] hosts, long[][] storageCapacities, long[] simulatedCapacities, String clusterId, boolean waitSafeMode, boolean setupHostsFile, MiniDFSNNTopology nnTopology, boolean checkExitOnShutdown, boolean checkDataNodeAddrConfig, boolean checkDataNodeHostConfig, Configuration[] dnConfOverlays, boolean skipFsyncForTesting, boolean useConfiguredTopologyMappingClass)
specifier|private
name|void
name|initMiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|manageNameDfsSharedDirs
parameter_list|,
name|boolean
name|enableManagedDfsDirsRedundancy
parameter_list|,
name|boolean
name|manageDataDfsDirs
parameter_list|,
name|StartupOption
name|startOpt
parameter_list|,
name|StartupOption
name|dnStartOpt
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
index|[]
name|storageCapacities
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|boolean
name|waitSafeMode
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|MiniDFSNNTopology
name|nnTopology
parameter_list|,
name|boolean
name|checkExitOnShutdown
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|,
name|boolean
name|checkDataNodeHostConfig
parameter_list|,
name|Configuration
index|[]
name|dnConfOverlays
parameter_list|,
name|boolean
name|skipFsyncForTesting
parameter_list|,
name|boolean
name|useConfiguredTopologyMappingClass
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
comment|// Re-enable symlinks for tests, see HADOOP-10020 and HADOOP-10052
name|FileSystem
operator|.
name|enableSymlinks
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|MiniDFSCluster
operator|.
name|class
init|)
block|{
name|instanceId
operator|=
name|instanceCount
operator|++
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|base_dir
operator|=
operator|new
name|File
argument_list|(
name|determineDfsBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|data_dir
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitSafeMode
operator|=
name|waitSafeMode
expr_stmt|;
name|this
operator|.
name|checkExitOnShutdown
operator|=
name|checkExitOnShutdown
expr_stmt|;
name|int
name|replication
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|replication
argument_list|,
name|numDataNodes
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|safemodeExtension
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_SAFEMODE_EXTENSION_KEY
argument_list|,
name|safemodeExtension
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// 3 second
if|if
condition|(
operator|!
name|useConfiguredTopologyMappingClass
condition|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|StaticMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// In an HA cluster, in order for the StandbyNode to perform checkpoints,
comment|// it needs to know the HTTP port of the Active. So, if ephemeral ports
comment|// are chosen, disable checkpoints for the test.
if|if
condition|(
operator|!
name|nnTopology
operator|.
name|allHttpPortsSpecified
argument_list|()
operator|&&
name|nnTopology
operator|.
name|isHA
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster disabling checkpointing in the Standby node "
operator|+
literal|"since no HTTP ports have been specified."
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_HA_STANDBY_CHECKPOINTS_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nnTopology
operator|.
name|allIpcPortsSpecified
argument_list|()
operator|&&
name|nnTopology
operator|.
name|isHA
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster disabling log-roll triggering in the "
operator|+
literal|"Standby node since no IPC ports have been specified."
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HA_LOGROLL_PERIOD_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|EditLogFileOutputStream
operator|.
name|setShouldSkipFsyncForTesting
argument_list|(
name|skipFsyncForTesting
argument_list|)
expr_stmt|;
name|federation
operator|=
name|nnTopology
operator|.
name|isFederated
argument_list|()
expr_stmt|;
try|try
block|{
name|createNameNodesAndSetConf
argument_list|(
name|nnTopology
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|manageNameDfsSharedDirs
argument_list|,
name|enableManagedDfsDirsRedundancy
argument_list|,
name|format
argument_list|,
name|startOpt
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOE creating namenodes. Permissions dump:\n"
operator|+
name|createPermissionsDiagnosisString
argument_list|(
name|data_dir
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
if|if
condition|(
name|format
condition|)
block|{
if|if
condition|(
name|data_dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|data_dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove data directory: "
operator|+
name|data_dir
operator|+
name|createPermissionsDiagnosisString
argument_list|(
name|data_dir
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startOpt
operator|==
name|StartupOption
operator|.
name|RECOVER
condition|)
block|{
return|return;
block|}
comment|// Start the DataNodes
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|storageTypes
argument_list|,
name|manageDataDfsDirs
argument_list|,
name|dnStartOpt
operator|!=
literal|null
condition|?
name|dnStartOpt
else|:
name|startOpt
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|storageCapacities
argument_list|,
name|simulatedCapacities
argument_list|,
name|setupHostsFile
argument_list|,
name|checkDataNodeAddrConfig
argument_list|,
name|checkDataNodeHostConfig
argument_list|,
name|dnConfOverlays
argument_list|)
expr_stmt|;
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|//make sure ProxyUsers uses the latest conf
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return a debug string which can help diagnose an error of why    * a given directory might have a permissions error in the context    * of a test case    */
DECL|method|createPermissionsDiagnosisString (File path)
specifier|private
name|String
name|createPermissionsDiagnosisString
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"path '"
operator|+
name|path
operator|+
literal|"': "
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tabsolute:"
argument_list|)
operator|.
name|append
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tpermissions: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|canRead
argument_list|(
name|path
argument_list|)
condition|?
literal|"r"
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|canWrite
argument_list|(
name|path
argument_list|)
condition|?
literal|"w"
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|path
argument_list|)
condition|?
literal|"x"
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createNameNodesAndSetConf (MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId)
specifier|private
name|void
name|createNameNodesAndSetConf
parameter_list|(
name|MiniDFSNNTopology
name|nnTopology
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|manageNameDfsSharedDirs
parameter_list|,
name|boolean
name|enableManagedDfsDirsRedundancy
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// do the basic namenode configuration
name|configureNameNodes
argument_list|(
name|nnTopology
argument_list|,
name|federation
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|nnCounter
init|=
literal|0
decl_stmt|;
name|int
name|nsCounter
init|=
literal|0
decl_stmt|;
comment|// configure each NS independently
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nameservice
range|:
name|nnTopology
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|configureNameService
argument_list|(
name|nameservice
argument_list|,
name|nsCounter
operator|++
argument_list|,
name|manageNameDfsSharedDirs
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|enableManagedDfsDirsRedundancy
argument_list|,
name|format
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|,
name|nnCounter
argument_list|)
expr_stmt|;
name|nnCounter
operator|+=
name|nameservice
operator|.
name|getNNs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|NameNodeInfo
name|nn
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
name|Configuration
name|nnConf
init|=
name|nn
operator|.
name|conf
decl_stmt|;
for|for
control|(
name|NameNodeInfo
name|nnInfo
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nn
operator|.
name|equals
argument_list|(
name|nnInfo
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|copyKeys
argument_list|(
name|conf
argument_list|,
name|nnConf
argument_list|,
name|nnInfo
operator|.
name|nameserviceId
argument_list|,
name|nnInfo
operator|.
name|nnId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|copyKeys (Configuration srcConf, Configuration destConf, String nameserviceId, String nnId)
specifier|private
specifier|static
name|void
name|copyKeys
parameter_list|(
name|Configuration
name|srcConf
parameter_list|,
name|Configuration
name|destConf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
name|String
name|key
init|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|destConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|srcConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|copyKey
argument_list|(
name|srcConf
argument_list|,
name|destConf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|copyKey
argument_list|(
name|srcConf
argument_list|,
name|destConf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|copyKey
argument_list|(
name|srcConf
argument_list|,
name|destConf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|copyKey
argument_list|(
name|srcConf
argument_list|,
name|destConf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
block|}
DECL|method|copyKey (Configuration srcConf, Configuration destConf, String nameserviceId, String nnId, String baseKey)
specifier|private
specifier|static
name|void
name|copyKey
parameter_list|(
name|Configuration
name|srcConf
parameter_list|,
name|Configuration
name|destConf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|String
name|baseKey
parameter_list|)
block|{
name|String
name|key
init|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|baseKey
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|srcConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|destConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|srcConf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do the rest of the NN configuration for things like shared edits,    * as well as directory formatting, etc. for a single nameservice    * @param nnCounter the count of the number of namenodes already configured/started. Also,    *                  acts as the<i>index</i> to the next NN to start (since indicies start at 0).    * @throws IOException    */
DECL|method|configureNameService (MiniDFSNNTopology.NSConf nameservice, int nsCounter, boolean manageNameDfsSharedDirs, boolean manageNameDfsDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, final int nnCounter)
specifier|private
name|void
name|configureNameService
parameter_list|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nameservice
parameter_list|,
name|int
name|nsCounter
parameter_list|,
name|boolean
name|manageNameDfsSharedDirs
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|enableManagedDfsDirsRedundancy
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|,
specifier|final
name|int
name|nnCounter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nsId
init|=
name|nameservice
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|lastDefaultFileSystem
init|=
literal|null
decl_stmt|;
comment|// If HA is enabled on this nameservice, enumerate all the namenodes
comment|// in the configuration. Also need to set a shared edits dir
name|int
name|numNNs
init|=
name|nameservice
operator|.
name|getNNs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numNNs
operator|>
literal|1
operator|&&
name|manageNameDfsSharedDirs
condition|)
block|{
name|URI
name|sharedEditsUri
init|=
name|getSharedEditsDir
argument_list|(
name|nnCounter
argument_list|,
name|nnCounter
operator|+
name|numNNs
operator|-
literal|1
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|,
name|sharedEditsUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean out the shared edits dir completely, including all subdirectories.
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|sharedEditsUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now format first NN and copy the storage directory from that node to the others.
name|int
name|nnIndex
init|=
name|nnCounter
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|prevNNDirs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NNConf
name|nn
range|:
name|nameservice
operator|.
name|getNNs
argument_list|()
control|)
block|{
name|initNameNodeConf
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|nsCounter
argument_list|,
name|nn
operator|.
name|getNnId
argument_list|()
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namespaceDirs
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
condition|)
block|{
comment|// delete the existing namespaces
for|for
control|(
name|URI
name|nameDirUri
range|:
name|namespaceDirs
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|nameDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not fully delete "
operator|+
name|nameDir
argument_list|)
throw|;
block|}
block|}
comment|// delete the checkpoint directories, if they exist
name|Collection
argument_list|<
name|URI
argument_list|>
name|checkpointDirs
init|=
name|Util
operator|.
name|stringCollectionAsURIs
argument_list|(
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|checkpointDirUri
range|:
name|checkpointDirs
control|)
block|{
name|File
name|checkpointDir
init|=
operator|new
name|File
argument_list|(
name|checkpointDirUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpointDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|checkpointDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not fully delete "
operator|+
name|checkpointDir
argument_list|)
throw|;
block|}
block|}
block|}
name|boolean
name|formatThisOne
init|=
name|format
decl_stmt|;
comment|// if we are looking at not the first NN
if|if
condition|(
name|nnIndex
operator|++
operator|>
name|nnCounter
operator|&&
name|format
condition|)
block|{
comment|// Don't format the second, third, etc NN in an HA setup - that
comment|// would result in it having a different clusterID,
comment|// block pool ID, etc. Instead, copy the name dirs
comment|// from the previous one.
name|formatThisOne
operator|=
literal|false
expr_stmt|;
assert|assert
operator|(
literal|null
operator|!=
name|prevNNDirs
operator|)
assert|;
name|copyNameDirs
argument_list|(
name|prevNNDirs
argument_list|,
name|namespaceDirs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|formatThisOne
condition|)
block|{
comment|// Allow overriding clusterID for specific NNs to test
comment|// misconfiguration.
if|if
condition|(
name|nn
operator|.
name|getClusterId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
name|nn
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|prevNNDirs
operator|=
name|namespaceDirs
expr_stmt|;
block|}
comment|// create all the namenodes in the namespace
name|nnIndex
operator|=
name|nnCounter
expr_stmt|;
for|for
control|(
name|NNConf
name|nn
range|:
name|nameservice
operator|.
name|getNNs
argument_list|()
control|)
block|{
name|Configuration
name|hdfsConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|initNameNodeConf
argument_list|(
name|hdfsConf
argument_list|,
name|nsId
argument_list|,
name|nsCounter
argument_list|,
name|nn
operator|.
name|getNnId
argument_list|()
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|enableManagedDfsDirsRedundancy
argument_list|,
name|nnIndex
operator|++
argument_list|)
expr_stmt|;
name|createNameNode
argument_list|(
name|hdfsConf
argument_list|,
literal|false
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|,
name|nsId
argument_list|,
name|nn
operator|.
name|getNnId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Record the last namenode uri
name|lastDefaultFileSystem
operator|=
name|hdfsConf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|federation
operator|&&
name|lastDefaultFileSystem
operator|!=
literal|null
condition|)
block|{
comment|// Set the default file system to the actual bind address of NN.
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|lastDefaultFileSystem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do the basic NN configuration for the topology. Does not configure things like the shared    * edits directories    * @param nnTopology    * @param federation    * @param conf    * @throws IOException    */
DECL|method|configureNameNodes (MiniDFSNNTopology nnTopology, boolean federation, Configuration conf)
specifier|public
specifier|static
name|void
name|configureNameNodes
parameter_list|(
name|MiniDFSNNTopology
name|nnTopology
parameter_list|,
name|boolean
name|federation
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nnTopology
operator|.
name|countNameNodes
argument_list|()
operator|>
literal|0
argument_list|,
literal|"empty NN topology: no namenodes specified!"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|federation
operator|&&
name|nnTopology
operator|.
name|countNameNodes
argument_list|()
operator|==
literal|1
condition|)
block|{
name|NNConf
name|onlyNN
init|=
name|nnTopology
operator|.
name|getOnlyNameNode
argument_list|()
decl_stmt|;
comment|// we only had one NN, set DEFAULT_NAME for it. If not explicitly
comment|// specified initially, the port will be 0 to make NN bind to any
comment|// available port. It will be set to the right address after
comment|// NN is started.
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://127.0.0.1:"
operator|+
name|onlyNN
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|allNsIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nameservice
range|:
name|nnTopology
operator|.
name|getNameservices
argument_list|()
control|)
block|{
if|if
condition|(
name|nameservice
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|allNsIds
operator|.
name|add
argument_list|(
name|nameservice
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|allNsIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|allNsIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nameservice
range|:
name|nnTopology
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|nameservice
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|federation
operator|||
name|nsId
operator|!=
literal|null
argument_list|,
literal|"if there is more than one NS, they must have names"
argument_list|)
expr_stmt|;
comment|// First set up the configuration which all of the NNs
comment|// need to have - have to do this a priori before starting
comment|// *any* of the NNs, so they know to come up in standby.
name|List
argument_list|<
name|String
argument_list|>
name|nnIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Iterate over the NNs in this nameservice
for|for
control|(
name|NNConf
name|nn
range|:
name|nameservice
operator|.
name|getNNs
argument_list|()
control|)
block|{
name|nnIds
operator|.
name|add
argument_list|(
name|nn
operator|.
name|getNnId
argument_list|()
argument_list|)
expr_stmt|;
name|initNameNodeAddress
argument_list|(
name|conf
argument_list|,
name|nameservice
operator|.
name|getId
argument_list|()
argument_list|,
name|nn
argument_list|)
expr_stmt|;
block|}
comment|// If HA is enabled on this nameservice, enumerate all the namenodes
comment|// in the configuration. Also need to set a shared edits dir
if|if
condition|(
name|nnIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
argument_list|,
name|nameservice
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|nnIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSharedEditsDir (int minNN, int maxNN)
specifier|public
name|URI
name|getSharedEditsDir
parameter_list|(
name|int
name|minNN
parameter_list|,
name|int
name|maxNN
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|formatSharedEditsDir
argument_list|(
name|base_dir
argument_list|,
name|minNN
argument_list|,
name|maxNN
argument_list|)
return|;
block|}
DECL|method|formatSharedEditsDir (File baseDir, int minNN, int maxNN)
specifier|public
specifier|static
name|URI
name|formatSharedEditsDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|int
name|minNN
parameter_list|,
name|int
name|maxNN
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"shared-edits-"
operator|+
name|minNN
operator|+
literal|"-through-"
operator|+
name|maxNN
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNameNodeInfos ()
specifier|public
name|NameNodeInfo
index|[]
name|getNameNodeInfos
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodes
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|NameNodeInfo
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * @param nsIndex index of the namespace id to check    * @return all the namenodes bound to the given namespace index    */
DECL|method|getNameNodeInfos (int nsIndex)
specifier|public
name|NameNodeInfo
index|[]
name|getNameNodeInfos
parameter_list|(
name|int
name|nsIndex
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|namenodes
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|==
name|nsIndex
condition|)
block|{
return|return
name|this
operator|.
name|namenodes
operator|.
name|get
argument_list|(
name|ns
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|NameNodeInfo
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param nameservice id of nameservice to read    * @return all the namenodes bound to the given namespace index    */
DECL|method|getNameNodeInfos (String nameservice)
specifier|public
name|NameNodeInfo
index|[]
name|getNameNodeInfos
parameter_list|(
name|String
name|nameservice
parameter_list|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|this
operator|.
name|namenodes
operator|.
name|keys
argument_list|()
control|)
block|{
if|if
condition|(
name|nameservice
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|namenodes
operator|.
name|get
argument_list|(
name|ns
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|NameNodeInfo
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|initNameNodeConf (Configuration conf, String nameserviceId, int nsIndex, String nnId, boolean manageNameDfsDirs, boolean enableManagedDfsDirsRedundancy, int nnIndex)
specifier|private
name|void
name|initNameNodeConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|String
name|nnId
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|enableManagedDfsDirsRedundancy
parameter_list|,
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nameserviceId
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nnId
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|manageNameDfsDirs
condition|)
block|{
if|if
condition|(
name|enableManagedDfsDirsRedundancy
condition|)
block|{
name|File
index|[]
name|files
init|=
name|getNameNodeDirectory
argument_list|(
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
name|files
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
name|files
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|getCheckpointDirectory
argument_list|(
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
name|files
index|[
literal|0
index|]
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
name|files
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
index|[]
name|files
init|=
name|getNameNodeDirectory
argument_list|(
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
name|files
index|[
literal|0
index|]
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|=
name|getCheckpointDirectory
argument_list|(
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
name|files
index|[
literal|0
index|]
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNameNodeDirectory (int nameserviceIndex, int nnIndex)
specifier|private
name|File
index|[]
name|getNameNodeDirectory
parameter_list|(
name|int
name|nameserviceIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNameNodeDirectory
argument_list|(
name|base_dir
argument_list|,
name|nameserviceIndex
argument_list|,
name|nnIndex
argument_list|)
return|;
block|}
DECL|method|getNameNodeDirectory (String base_dir, int nsIndex, int nnIndex)
specifier|public
specifier|static
name|File
index|[]
name|getNameNodeDirectory
parameter_list|(
name|String
name|base_dir
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNameNodeDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|)
argument_list|,
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
return|;
block|}
DECL|method|getNameNodeDirectory (File base_dir, int nsIndex, int nnIndex)
specifier|public
specifier|static
name|File
index|[]
name|getNameNodeDirectory
parameter_list|(
name|File
name|base_dir
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
literal|2
index|]
decl_stmt|;
name|files
index|[
literal|0
index|]
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name-"
operator|+
name|nsIndex
operator|+
literal|"-"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|files
index|[
literal|1
index|]
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name-"
operator|+
name|nsIndex
operator|+
literal|"-"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
DECL|method|getCheckpointDirectory (int nsIndex, int nnIndex)
specifier|public
name|File
index|[]
name|getCheckpointDirectory
parameter_list|(
name|int
name|nsIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getCheckpointDirectory
argument_list|(
name|base_dir
argument_list|,
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
return|;
block|}
DECL|method|getCheckpointDirectory (String base_dir, int nsIndex, int nnIndex)
specifier|public
specifier|static
name|File
index|[]
name|getCheckpointDirectory
parameter_list|(
name|String
name|base_dir
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getCheckpointDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|)
argument_list|,
name|nsIndex
argument_list|,
name|nnIndex
argument_list|)
return|;
block|}
DECL|method|getCheckpointDirectory (File base_dir, int nsIndex, int nnIndex)
specifier|public
specifier|static
name|File
index|[]
name|getCheckpointDirectory
parameter_list|(
name|File
name|base_dir
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
literal|2
index|]
decl_stmt|;
name|files
index|[
literal|0
index|]
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"namesecondary-"
operator|+
name|nsIndex
operator|+
literal|"-"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|files
index|[
literal|1
index|]
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"namesecondary-"
operator|+
name|nsIndex
operator|+
literal|"-"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
DECL|method|copyNameDirs (Collection<URI> srcDirs, Collection<URI> dstDirs, Configuration dstConf)
specifier|public
specifier|static
name|void
name|copyNameDirs
parameter_list|(
name|Collection
argument_list|<
name|URI
argument_list|>
name|srcDirs
parameter_list|,
name|Collection
argument_list|<
name|URI
argument_list|>
name|dstDirs
parameter_list|,
name|Configuration
name|dstConf
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|srcDir
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|srcDirs
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|dstConf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|dstDir
range|:
name|dstDirs
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|dstDir
operator|.
name|equals
argument_list|(
name|srcDir
argument_list|)
argument_list|,
literal|"src and dst are the same: "
operator|+
name|dstDir
argument_list|)
expr_stmt|;
name|File
name|dstDirF
init|=
operator|new
name|File
argument_list|(
name|dstDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstDirF
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dstDirF
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete: "
operator|+
name|dstDirF
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying namedir from primary node dir "
operator|+
name|srcDir
operator|+
literal|" to "
operator|+
name|dstDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
operator|new
name|File
argument_list|(
name|srcDir
argument_list|)
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dstDir
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dstConf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize the address and port for this NameNode. In the    * non-federated case, the nameservice and namenode ID may be    * null.    */
DECL|method|initNameNodeAddress (Configuration conf, String nameserviceId, NNConf nnConf)
specifier|private
specifier|static
name|void
name|initNameNodeAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|NNConf
name|nnConf
parameter_list|)
block|{
comment|// Set NN-specific specific key
name|String
name|key
init|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnConf
operator|.
name|getNnId
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"127.0.0.1:"
operator|+
name|nnConf
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnConf
operator|.
name|getNnId
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"127.0.0.1:"
operator|+
name|nnConf
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createArgs (StartupOption operation)
specifier|private
specifier|static
name|String
index|[]
name|createArgs
parameter_list|(
name|StartupOption
name|operation
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|==
name|StartupOption
operator|.
name|ROLLINGUPGRADE
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|operation
operator|.
name|getName
argument_list|()
block|,
name|operation
operator|.
name|getRollingUpgradeStartupOption
argument_list|()
operator|.
name|name
argument_list|()
block|}
return|;
block|}
name|String
index|[]
name|args
init|=
operator|(
name|operation
operator|==
literal|null
operator|||
name|operation
operator|==
name|StartupOption
operator|.
name|FORMAT
operator|||
name|operation
operator|==
name|StartupOption
operator|.
name|REGULAR
operator|)
condition|?
operator|new
name|String
index|[]
block|{}
else|:
operator|new
name|String
index|[]
block|{
name|operation
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
return|return
name|args
return|;
block|}
DECL|method|createNameNode (Configuration hdfsConf, boolean format, StartupOption operation, String clusterId, String nameserviceId, String nnId)
specifier|private
name|void
name|createNameNode
parameter_list|(
name|Configuration
name|hdfsConf
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Format and clean out DataNode directories
if|if
condition|(
name|format
condition|)
block|{
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|hdfsConf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|==
name|StartupOption
operator|.
name|UPGRADE
condition|)
block|{
name|operation
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
name|createArgs
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|NameNode
name|nn
init|=
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|args
argument_list|,
name|hdfsConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
name|StartupOption
operator|.
name|RECOVER
condition|)
block|{
return|return;
block|}
comment|// After the NN has started, set back the bound ports into
comment|// the conf
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|,
name|nn
operator|.
name|getNameNodeAddressHostPortString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|getHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|nn
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nn
operator|.
name|getHttpsAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|nn
operator|.
name|getHttpsAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsConf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hdfsConf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|,
name|hdfsConf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_LIFELINE_RPC_ADDRESS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|copyKeys
argument_list|(
name|hdfsConf
argument_list|,
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|setGenericConf
argument_list|(
name|hdfsConf
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|NameNodeInfo
name|info
init|=
operator|new
name|NameNodeInfo
argument_list|(
name|nn
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|,
name|operation
argument_list|,
name|hdfsConf
argument_list|)
decl_stmt|;
name|namenodes
operator|.
name|put
argument_list|(
name|nameserviceId
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return URI of the namenode from a single namenode MiniDFSCluster    */
DECL|method|getURI ()
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getURI
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * @return URI of the given namenode in MiniDFSCluster    */
DECL|method|getURI (int nnIndex)
specifier|public
name|URI
name|getURI
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|String
name|hostPort
init|=
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
operator|.
name|getNameNodeAddressHostPortString
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|hostPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"unexpected URISyntaxException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|getInstanceId ()
specifier|public
name|int
name|getInstanceId
parameter_list|()
block|{
return|return
name|instanceId
return|;
block|}
comment|/**    * @return Configuration of for the given namenode    */
DECL|method|getConfiguration (int nnIndex)
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
return|;
block|}
DECL|method|getNN (int nnIndex)
specifier|private
name|NameNodeInfo
name|getNN
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NameNodeInfo
name|nn
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|count
operator|==
name|nnIndex
condition|)
block|{
return|return
name|nn
return|;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * wait for the given namenode to get out of safemode.    */
DECL|method|waitNameNodeUp (int nnIndex)
specifier|public
name|void
name|waitNameNodeUp
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
while|while
condition|(
operator|!
name|isNameNodeUp
argument_list|(
name|nnIndex
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting for namenode at "
operator|+
name|nnIndex
operator|+
literal|" to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * wait for the cluster to get out of safemode.    */
DECL|method|waitClusterUp ()
specifier|public
name|void
name|waitClusterUp
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numDataNodes
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|isClusterUp
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting for the Mini HDFS Cluster to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
if|if
condition|(
operator|++
name|i
operator|>
literal|10
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Timed out waiting for Mini HDFS Cluster to start"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|makeDataNodeDirs (int dnIndex, StorageType[] storageTypes)
name|String
name|makeDataNodeDirs
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|(
name|storageTypes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|j
operator|>=
name|storageTypes
operator|.
name|length
operator|)
condition|)
block|{
break|break;
block|}
name|File
name|dir
init|=
name|getInstanceStorageDir
argument_list|(
name|dnIndex
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create directory for DataNode "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
literal|"["
operator|+
operator|(
name|storageTypes
operator|==
literal|null
condition|?
name|StorageType
operator|.
name|DEFAULT
else|:
name|storageTypes
index|[
name|j
index|]
operator|)
operator|+
literal|"]"
operator|+
name|fileAsURI
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set    *          in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|simulatedCapacities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be    *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    * @param setupHostsFile add new nodes to dfs hosts files    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities, boolean setupHostsFile)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|null
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|,
name|setupHostsFile
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities, boolean setupHostsFile, boolean checkDataNodeAddrConfig)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|null
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|,
name|setupHostsFile
argument_list|,
name|checkDataNodeAddrConfig
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be    *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    * @param setupHostsFile add new nodes to dfs hosts files    * @param checkDataNodeAddrConfig if true, only set DataNode port addresses if not already set in config    * @param checkDataNodeHostConfig if true, only set DataNode hostname key if not already set in config    * @param dnConfOverlays An array of {@link Configuration} objects that will overlay the    *              global MiniDFSCluster Configuration for the corresponding DataNode.    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, StorageType[][] storageTypes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[][] storageCapacities, long[] simulatedCapacities, boolean setupHostsFile, boolean checkDataNodeAddrConfig, boolean checkDataNodeHostConfig, Configuration[] dnConfOverlays)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
index|[]
name|storageCapacities
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|,
name|boolean
name|checkDataNodeHostConfig
parameter_list|,
name|Configuration
index|[]
name|dnConfOverlays
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|storageCapacities
operator|==
literal|null
operator|||
name|simulatedCapacities
operator|==
literal|null
assert|;
assert|assert
name|storageTypes
operator|==
literal|null
operator|||
name|storageTypes
operator|.
name|length
operator|==
name|numDataNodes
assert|;
assert|assert
name|storageCapacities
operator|==
literal|null
operator|||
name|storageCapacities
operator|.
name|length
operator|==
name|numDataNodes
assert|;
if|if
condition|(
name|operation
operator|==
name|StartupOption
operator|.
name|RECOVER
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|checkDataNodeHostConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
block|}
name|int
name|curDatanodesNum
init|=
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// for mincluster's the default initialDelay for BRs is 0
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// If minicluster's name node is null assume that the conf has been
comment|// set with the right address:port of the name node.
comment|//
if|if
condition|(
name|racks
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|racks
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of racks ["
operator|+
name|racks
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|hosts
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|hosts
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of hosts ["
operator|+
name|hosts
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
comment|//Generate some hostnames if required
if|if
condition|(
name|racks
operator|!=
literal|null
operator|&&
name|hosts
operator|==
literal|null
condition|)
block|{
name|hosts
operator|=
operator|new
name|String
index|[
name|numDataNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curDatanodesNum
init|;
name|i
operator|<
name|curDatanodesNum
operator|+
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
operator|=
literal|"host"
operator|+
name|i
operator|+
literal|".foo.com"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|simulatedCapacities
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|simulatedCapacities
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of simulatedCapacities ["
operator|+
name|simulatedCapacities
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dnConfOverlays
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|dnConfOverlays
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of dnConfOverlays ["
operator|+
name|dnConfOverlays
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|String
index|[]
name|dnArgs
init|=
operator|(
name|operation
operator|==
literal|null
operator|||
name|operation
operator|!=
name|StartupOption
operator|.
name|ROLLBACK
operator|)
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
name|operation
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|DataNode
index|[]
name|dns
init|=
operator|new
name|DataNode
index|[
name|numDataNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curDatanodesNum
init|;
name|i
operator|<
name|curDatanodesNum
operator|+
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|dnConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnConfOverlays
operator|!=
literal|null
condition|)
block|{
name|dnConf
operator|.
name|addResource
argument_list|(
name|dnConfOverlays
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Set up datanode address
name|setupDatanodeAddress
argument_list|(
name|dnConf
argument_list|,
name|setupHostsFile
argument_list|,
name|checkDataNodeAddrConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|manageDfsDirs
condition|)
block|{
name|String
name|dirs
init|=
name|makeDataNodeDirs
argument_list|(
name|i
argument_list|,
name|storageTypes
operator|==
literal|null
condition|?
literal|null
else|:
name|storageTypes
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
decl_stmt|;
name|dnConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simulatedCapacities
operator|!=
literal|null
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|dnConf
argument_list|)
expr_stmt|;
name|dnConf
operator|.
name|setLong
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_CAPACITY
argument_list|,
name|simulatedCapacities
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DataNode "
operator|+
name|i
operator|+
literal|" with "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
operator|+
literal|": "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|!=
literal|null
condition|)
block|{
name|dnConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DataNode "
operator|+
name|i
operator|+
literal|" with hostname set to: "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding node with hostname : "
operator|+
name|name
operator|+
literal|" to rack "
operator|+
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|name
argument_list|,
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|newconf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|dnConf
argument_list|)
decl_stmt|;
comment|// save config
if|if
condition|(
name|hosts
operator|!=
literal|null
condition|)
block|{
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
name|SecureResources
name|secureResources
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|secureResources
operator|=
name|SecureDataNodeStarter
operator|.
name|getSecureResources
argument_list|(
name|dnConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|maxRetriesOnSasl
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
argument_list|,
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|numRetries
init|=
literal|0
decl_stmt|;
name|DataNode
name|dn
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|dn
operator|=
name|DataNode
operator|.
name|instantiateDataNode
argument_list|(
name|dnArgs
argument_list|,
name|dnConf
argument_list|,
name|secureResources
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Work around issue testing security where rapidly starting multiple
comment|// DataNodes using the same principal gets rejected by the KDC as a
comment|// replay attack.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|numRetries
operator|<
name|maxRetriesOnSasl
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
operator|++
name|numRetries
expr_stmt|;
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|dn
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot start DataNode in "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
throw|;
comment|//since the HDFS does things based on host|ip:port, we need to add the
comment|//mapping for the service to rackId
name|String
name|service
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|dn
operator|.
name|getXferAddress
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding node with service : "
operator|+
name|service
operator|+
literal|" to rack "
operator|+
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|service
argument_list|,
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|dn
operator|.
name|runDatanodeDaemon
argument_list|()
expr_stmt|;
name|dataNodes
operator|.
name|add
argument_list|(
operator|new
name|DataNodeProperties
argument_list|(
name|dn
argument_list|,
name|newconf
argument_list|,
name|dnArgs
argument_list|,
name|secureResources
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dns
index|[
name|i
operator|-
name|curDatanodesNum
index|]
operator|=
name|dn
expr_stmt|;
block|}
name|this
operator|.
name|numDataNodes
operator|+=
name|numDataNodes
expr_stmt|;
name|waitActive
argument_list|()
expr_stmt|;
name|setDataNodeStorageCapacities
argument_list|(
name|curDatanodesNum
argument_list|,
name|numDataNodes
argument_list|,
name|dns
argument_list|,
name|storageCapacities
argument_list|)
expr_stmt|;
comment|/* memorize storage capacities */
if|if
condition|(
name|storageCapacities
operator|!=
literal|null
condition|)
block|{
name|storageCap
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storageCapacities
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDataNodeStorageCapacities ( final int curDatanodesNum, final int numDNs, final DataNode[] dns, long[][] storageCapacities)
specifier|private
specifier|synchronized
name|void
name|setDataNodeStorageCapacities
parameter_list|(
specifier|final
name|int
name|curDatanodesNum
parameter_list|,
specifier|final
name|int
name|numDNs
parameter_list|,
specifier|final
name|DataNode
index|[]
name|dns
parameter_list|,
name|long
index|[]
index|[]
name|storageCapacities
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageCapacities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|curDatanodesNum
init|;
name|i
operator|<
name|curDatanodesNum
operator|+
name|numDNs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
operator|-
name|curDatanodesNum
decl_stmt|;
name|setDataNodeStorageCapacities
argument_list|(
name|index
argument_list|,
name|dns
index|[
name|index
index|]
argument_list|,
name|storageCapacities
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setDataNodeStorageCapacities ( final int curDnIdx, final DataNode curDn, long[][] storageCapacities)
specifier|private
specifier|synchronized
name|void
name|setDataNodeStorageCapacities
parameter_list|(
specifier|final
name|int
name|curDnIdx
parameter_list|,
specifier|final
name|DataNode
name|curDn
parameter_list|,
name|long
index|[]
index|[]
name|storageCapacities
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageCapacities
operator|==
literal|null
operator|||
name|storageCapacities
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
try|try
block|{
name|waitDataNodeFullyStarted
argument_list|(
name|curDn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|curDn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
assert|assert
name|storageCapacities
index|[
name|curDnIdx
index|]
operator|.
name|length
operator|==
name|storagesPerDatanode
assert|;
assert|assert
name|volumes
operator|.
name|size
argument_list|()
operator|==
name|storagesPerDatanode
assert|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FsVolumeSpi
name|fvs
range|:
name|volumes
control|)
block|{
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|fvs
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setCapacityForTesting "
operator|+
name|storageCapacities
index|[
name|curDnIdx
index|]
index|[
name|j
index|]
operator|+
literal|" for ["
operator|+
name|volume
operator|.
name|getStorageType
argument_list|()
operator|+
literal|"]"
operator|+
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setCapacityForTesting
argument_list|(
name|storageCapacities
index|[
name|curDnIdx
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|curDn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be     *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks )
specifier|public
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will     *          be set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param simulatedCapacities array of capacities of the simulated data nodes    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, long[] simulatedCapacities)
specifier|public
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finalize the namenode. Block pools corresponding to the namenode are    * finalized on the datanode.    */
DECL|method|finalizeNamenode (NameNode nn, Configuration conf)
specifier|private
name|void
name|finalizeNamenode
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempting to finalize "
operator|+
literal|"Namenode but it is not running"
argument_list|)
throw|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-finalizeUpgrade"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finalize cluster for the namenode at the given index     * @see MiniDFSCluster#finalizeCluster(Configuration)    * @param nnIndex index of the namenode    * @param conf configuration    * @throws Exception    */
DECL|method|finalizeCluster (int nnIndex, Configuration conf)
specifier|public
name|void
name|finalizeCluster
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|finalizeNamenode
argument_list|(
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
argument_list|,
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the NameNode is running, attempt to finalize a previous upgrade.    * When this method return, the NameNode should be finalized, but    * DataNodes may not be since that occurs asynchronously.    *    * @throws IllegalStateException if the Namenode is not running.    */
DECL|method|finalizeCluster (Configuration conf)
specifier|public
name|void
name|finalizeCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|NameNodeInfo
name|nnInfo
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nnInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempting to finalize "
operator|+
literal|"Namenode but it is not running"
argument_list|)
throw|;
block|}
name|finalizeNamenode
argument_list|(
name|nnInfo
operator|.
name|nameNode
argument_list|,
name|nnInfo
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumNameNodes ()
specifier|public
name|int
name|getNumNameNodes
parameter_list|()
block|{
return|return
name|namenodes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Gets the started NameNode.  May be null.    */
DECL|method|getNameNode ()
specifier|public
name|NameNode
name|getNameNode
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNode
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get an instance of the NameNode's RPC handler.    */
DECL|method|getNameNodeRpc ()
specifier|public
name|NamenodeProtocols
name|getNameNodeRpc
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNodeRpc
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get an instance of the NameNode's RPC handler.    */
DECL|method|getNameNodeRpc (int nnIndex)
specifier|public
name|NamenodeProtocols
name|getNameNodeRpc
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getRpcServer
argument_list|()
return|;
block|}
comment|/**    * Gets the NameNode for the index.  May be null.    */
DECL|method|getNameNode (int nnIndex)
specifier|public
name|NameNode
name|getNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
return|;
block|}
comment|/**    * Return the {@link FSNamesystem} object.    * @return {@link FSNamesystem} object.    */
DECL|method|getNamesystem ()
specifier|public
name|FSNamesystem
name|getNamesystem
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|getNN
argument_list|(
literal|0
argument_list|)
operator|.
name|nameNode
argument_list|)
return|;
block|}
DECL|method|getNamesystem (int nnIndex)
specifier|public
name|FSNamesystem
name|getNamesystem
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
argument_list|)
return|;
block|}
comment|/**    * Gets a list of the started DataNodes.  May be empty.    */
DECL|method|getDataNodes ()
specifier|public
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|getDataNodes
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|node
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/** @return the datanode having the ipc server listen port */
DECL|method|getDataNode (int ipcPort)
specifier|public
name|DataNode
name|getDataNode
parameter_list|(
name|int
name|ipcPort
parameter_list|)
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|ipcServer
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|ipcPort
condition|)
block|{
return|return
name|dn
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the corresponding FsDatasetTestUtils for a DataNode.    * @param dnIdx the index of DataNode.    * @return a FsDatasetTestUtils for the given DataNode.    */
DECL|method|getFsDatasetTestUtils (int dnIdx)
specifier|public
name|FsDatasetTestUtils
name|getFsDatasetTestUtils
parameter_list|(
name|int
name|dnIdx
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dnIdx
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FsDatasetTestUtils
operator|.
name|Factory
operator|.
name|getFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|newInstance
argument_list|(
name|dataNodes
operator|.
name|get
argument_list|(
name|dnIdx
argument_list|)
operator|.
name|datanode
argument_list|)
return|;
block|}
comment|/**    * Returns the corresponding FsDatasetTestUtils for a DataNode.    * @param dn a DataNode    * @return a FsDatasetTestUtils for the given DataNode.    */
DECL|method|getFsDatasetTestUtils (DataNode dn)
specifier|public
name|FsDatasetTestUtils
name|getFsDatasetTestUtils
parameter_list|(
name|DataNode
name|dn
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dn
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|FsDatasetTestUtils
operator|.
name|Factory
operator|.
name|getFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|newInstance
argument_list|(
name|dn
argument_list|)
return|;
block|}
comment|/**    * Gets the rpc port used by the NameNode, because the caller    * supplied port is not necessarily the actual port used.    * Assumption: cluster has a single namenode    */
DECL|method|getNameNodePort ()
specifier|public
name|int
name|getNameNodePort
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNodePort
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Gets the rpc port used by the NameNode at the given index, because the    * caller supplied port is not necessarily the actual port used.    */
DECL|method|getNameNodePort (int nnIndex)
specifier|public
name|int
name|getNameNodePort
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * @return the service rpc port used by the NameNode at the given index.    */
DECL|method|getNameNodeServicePort (int nnIndex)
specifier|public
name|int
name|getNameNodeServicePort
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Shutdown all the nodes in the cluster.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown all the nodes in the cluster.    */
DECL|method|shutdown (boolean deleteDfsDir)
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|deleteDfsDir
parameter_list|)
block|{
name|shutdown
argument_list|(
name|deleteDfsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown all the nodes in the cluster.    */
DECL|method|shutdown (boolean deleteDfsDir, boolean closeFileSystem)
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|deleteDfsDir
parameter_list|,
name|boolean
name|closeFileSystem
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the Mini HDFS Cluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkExitOnShutdown
condition|)
block|{
if|if
condition|(
name|ExitUtil
operator|.
name|terminateCalled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Test resulted in an unexpected exit"
argument_list|,
name|ExitUtil
operator|.
name|getFirstExitException
argument_list|()
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Test resulted in an unexpected exit"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|closeFileSystem
condition|)
block|{
for|for
control|(
name|FileSystem
name|fs
range|:
name|fileSystems
control|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while closing file system"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|fileSystems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|shutdownDataNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|NameNodeInfo
name|nnInfo
range|:
name|namenodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nnInfo
operator|==
literal|null
condition|)
continue|continue;
name|stopAndJoinNameNode
argument_list|(
name|nnInfo
operator|.
name|nameNode
argument_list|)
expr_stmt|;
block|}
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|clearShutdownHooks
argument_list|()
expr_stmt|;
if|if
condition|(
name|base_dir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|deleteDfsDir
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base_dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtil
operator|.
name|fullyDeleteOnExit
argument_list|(
name|base_dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Shutdown all DataNodes started by this class.  The NameNode    * is left running so that new DataNodes may be started.    */
DECL|method|shutdownDataNodes ()
specifier|public
name|void
name|shutdownDataNodes
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down DataNode "
operator|+
name|i
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|numDataNodes
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown all the namenodes.    */
DECL|method|shutdownNameNodes ()
specifier|public
specifier|synchronized
name|void
name|shutdownNameNodes
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|shutdownNameNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown the namenode at a given index.    */
DECL|method|shutdownNameNode (int nnIndex)
specifier|public
specifier|synchronized
name|void
name|shutdownNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|NameNodeInfo
name|info
init|=
name|getNN
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|stopAndJoinNameNode
argument_list|(
name|info
operator|.
name|nameNode
argument_list|)
expr_stmt|;
name|info
operator|.
name|nnId
operator|=
literal|null
expr_stmt|;
name|info
operator|.
name|nameNode
operator|=
literal|null
expr_stmt|;
name|info
operator|.
name|nameserviceId
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Fully stop the NameNode by stop and join.    */
DECL|method|stopAndJoinNameNode (NameNode nn)
specifier|private
name|void
name|stopAndJoinNameNode
parameter_list|(
name|NameNode
name|nn
parameter_list|)
block|{
if|if
condition|(
name|nn
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the namenode"
argument_list|)
expr_stmt|;
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|.
name|join
argument_list|()
expr_stmt|;
name|nn
operator|.
name|joinHttpServer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restart all namenodes.    */
DECL|method|restartNameNodes ()
specifier|public
specifier|synchronized
name|void
name|restartNameNodes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|restartNameNode
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restart the namenode.    */
DECL|method|restartNameNode (String... args)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode. Optionally wait for the cluster to become active.    */
DECL|method|restartNameNode (boolean waitActive)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|boolean
name|waitActive
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
name|restartNameNode
argument_list|(
literal|0
argument_list|,
name|waitActive
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode at a given index.    */
DECL|method|restartNameNode (int nnIndex)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|restartNameNode
argument_list|(
name|nnIndex
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode at a given index. Optionally wait for the cluster    * to become active.    */
DECL|method|restartNameNode (int nnIndex, boolean waitActive, String... args)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|boolean
name|waitActive
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|NameNodeInfo
name|info
init|=
name|getNN
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|StartupOption
name|startOpt
init|=
name|info
operator|.
name|startOpt
decl_stmt|;
name|shutdownNameNode
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|startOpt
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|args
operator|=
name|createArgs
argument_list|(
name|startOpt
argument_list|)
expr_stmt|;
block|}
name|NameNode
name|nn
init|=
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|args
argument_list|,
name|info
operator|.
name|conf
argument_list|)
decl_stmt|;
name|info
operator|.
name|nameNode
operator|=
name|nn
expr_stmt|;
name|info
operator|.
name|setStartOpt
argument_list|(
name|startOpt
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitActive
condition|)
block|{
name|waitClusterUp
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted the namenode"
argument_list|)
expr_stmt|;
name|waitActive
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|corruptBlockOnDataNodesHelper (ExtendedBlock block, boolean deleteBlockFile)
specifier|private
name|int
name|corruptBlockOnDataNodesHelper
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|boolean
name|deleteBlockFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|blocksCorrupted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
try|try
block|{
name|MaterializedReplica
name|replica
init|=
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
operator|.
name|getMaterializedReplica
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteBlockFile
condition|)
block|{
name|replica
operator|.
name|deleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replica
operator|.
name|corruptData
argument_list|()
expr_stmt|;
block|}
name|blocksCorrupted
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
return|return
name|blocksCorrupted
return|;
block|}
comment|/**    * Return the number of corrupted replicas of the given block.    *    * @param block block to be corrupted    * @throws IOException on error accessing the file for the given block    */
DECL|method|corruptBlockOnDataNodes (ExtendedBlock block)
specifier|public
name|int
name|corruptBlockOnDataNodes
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|corruptBlockOnDataNodesHelper
argument_list|(
name|block
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Return the number of corrupted replicas of the given block.    *    * @param block block to be corrupted    * @throws IOException on error accessing the file for the given block    */
DECL|method|corruptBlockOnDataNodesByDeletingBlockFile (ExtendedBlock block)
specifier|public
name|int
name|corruptBlockOnDataNodesByDeletingBlockFile
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|corruptBlockOnDataNodesHelper
argument_list|(
name|block
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|readBlockOnDataNode (int i, ExtendedBlock block)
specifier|public
name|String
name|readBlockOnDataNode
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
operator|)
operator|:
literal|"Invalid datanode "
operator|+
name|i
assert|;
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|blockFile
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|readBlockOnDataNodeAsBytes (int i, ExtendedBlock block)
specifier|public
name|byte
index|[]
name|readBlockOnDataNodeAsBytes
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
operator|)
operator|:
literal|"Invalid datanode "
operator|+
name|i
assert|;
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|DFSTestUtil
operator|.
name|readFileAsBytes
argument_list|(
name|blockFile
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Corrupt a block on a particular datanode.    *    * @param i index of the datanode    * @param blk name of the block    * @throws IOException on error accessing the given block file.    */
DECL|method|corruptReplica (int i, ExtendedBlock blk)
specifier|public
name|void
name|corruptReplica
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
name|getMaterializedReplica
argument_list|(
name|i
argument_list|,
name|blk
argument_list|)
operator|.
name|corruptData
argument_list|()
expr_stmt|;
block|}
comment|/**    * Corrupt a block on a particular datanode.    *    * @param dn the datanode    * @param blk name of the block    * @throws IOException on error accessing the given block file.    */
DECL|method|corruptReplica (DataNode dn, ExtendedBlock blk)
specifier|public
name|void
name|corruptReplica
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
name|getMaterializedReplica
argument_list|(
name|dn
argument_list|,
name|blk
argument_list|)
operator|.
name|corruptData
argument_list|()
expr_stmt|;
block|}
comment|/**    * Corrupt the metadata of a block on a datanode.    * @param i the index of the datanode    * @param blk name of the block    * @throws IOException on error accessing the given metadata file.    */
DECL|method|corruptMeta (int i, ExtendedBlock blk)
specifier|public
name|void
name|corruptMeta
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
name|getMaterializedReplica
argument_list|(
name|i
argument_list|,
name|blk
argument_list|)
operator|.
name|corruptMeta
argument_list|()
expr_stmt|;
block|}
comment|/**    * Corrupt the metadata of a block by deleting it.    * @param i index of the datanode    * @param blk name of the block.    */
DECL|method|deleteMeta (int i, ExtendedBlock blk)
specifier|public
name|void
name|deleteMeta
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
name|getMaterializedReplica
argument_list|(
name|i
argument_list|,
name|blk
argument_list|)
operator|.
name|deleteMeta
argument_list|()
expr_stmt|;
block|}
comment|/**    * Corrupt the metadata of a block by truncating it to a new size.    * @param i index of the datanode.    * @param blk name of the block.    * @param newSize the new size of the metadata file.    * @throws IOException if any I/O errors.    */
DECL|method|truncateMeta (int i, ExtendedBlock blk, int newSize)
specifier|public
name|void
name|truncateMeta
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|int
name|newSize
parameter_list|)
throws|throws
name|IOException
block|{
name|getMaterializedReplica
argument_list|(
name|i
argument_list|,
name|blk
argument_list|)
operator|.
name|truncateMeta
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
DECL|method|changeGenStampOfBlock (int dnIndex, ExtendedBlock blk, long newGenStamp)
specifier|public
name|void
name|changeGenStampOfBlock
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|long
name|newGenStamp
parameter_list|)
throws|throws
name|IOException
block|{
name|getFsDatasetTestUtils
argument_list|(
name|dnIndex
argument_list|)
operator|.
name|changeStoredGenerationStamp
argument_list|(
name|blk
argument_list|,
name|newGenStamp
argument_list|)
expr_stmt|;
block|}
comment|/*    * Shutdown a particular datanode    * @param i node index    * @return null if the node index is out of range, else the properties of the    * removed node    */
DECL|method|stopDataNode (int i)
specifier|public
specifier|synchronized
name|DataNodeProperties
name|stopDataNode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataNodeProperties
name|dnprop
init|=
name|dataNodes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNode
name|dn
init|=
name|dnprop
operator|.
name|datanode
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster Stopping DataNode "
operator|+
name|dn
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" from a total of "
operator|+
operator|(
name|dataNodes
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|" datanodes."
argument_list|)
expr_stmt|;
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|numDataNodes
operator|--
expr_stmt|;
return|return
name|dnprop
return|;
block|}
comment|/*    * Shutdown a datanode by name.    * @return the removed datanode or null if there was no match    */
DECL|method|stopDataNode (String dnName)
specifier|public
specifier|synchronized
name|DataNodeProperties
name|stopDataNode
parameter_list|(
name|String
name|dnName
parameter_list|)
block|{
name|int
name|node
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
if|if
condition|(
name|dnName
operator|.
name|equals
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|node
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|stopDataNode
argument_list|(
name|node
argument_list|)
return|;
block|}
comment|/*    * Shutdown a particular datanode    * @param i node index    * @return null if the node index is out of range, else the properties of the    * removed node    */
DECL|method|stopDataNodeForUpgrade (int i)
specifier|public
specifier|synchronized
name|DataNodeProperties
name|stopDataNodeForUpgrade
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataNodeProperties
name|dnprop
init|=
name|dataNodes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNode
name|dn
init|=
name|dnprop
operator|.
name|datanode
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster Stopping DataNode "
operator|+
name|dn
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" from a total of "
operator|+
operator|(
name|dataNodes
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|" datanodes."
argument_list|)
expr_stmt|;
name|dn
operator|.
name|shutdownDatanode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|numDataNodes
operator|--
expr_stmt|;
return|return
name|dnprop
return|;
block|}
comment|/**    * Restart a datanode    * @param dnprop datanode's property    * @return true if restarting is successful    * @throws IOException    */
DECL|method|restartDataNode (DataNodeProperties dnprop)
specifier|public
name|boolean
name|restartDataNode
parameter_list|(
name|DataNodeProperties
name|dnprop
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restartDataNode
argument_list|(
name|dnprop
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|waitDataNodeFullyStarted (final DataNode dn)
specifier|private
name|void
name|waitDataNodeFullyStarted
parameter_list|(
specifier|final
name|DataNode
name|dn
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|dn
operator|.
name|isDatanodeFullyStarted
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart a datanode, on the same port if requested    * @param dnprop the datanode to restart    * @param keepPort whether to use the same port     * @return true if restarting is successful    * @throws IOException    */
DECL|method|restartDataNode (DataNodeProperties dnprop, boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNode
parameter_list|(
name|DataNodeProperties
name|dnprop
parameter_list|,
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|dnprop
operator|.
name|conf
decl_stmt|;
name|String
index|[]
name|args
init|=
name|dnprop
operator|.
name|dnArgs
decl_stmt|;
name|SecureResources
name|secureResources
init|=
name|dnprop
operator|.
name|secureResources
decl_stmt|;
name|Configuration
name|newconf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// save cloned config
if|if
condition|(
name|keepPort
condition|)
block|{
name|InetSocketAddress
name|addr
init|=
name|dnprop
operator|.
name|datanode
operator|.
name|getXferAddress
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|dnprop
operator|.
name|ipcPort
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DataNode
name|newDn
init|=
name|DataNode
operator|.
name|createDataNode
argument_list|(
name|args
argument_list|,
name|conf
argument_list|,
name|secureResources
argument_list|)
decl_stmt|;
specifier|final
name|DataNodeProperties
name|dnp
init|=
operator|new
name|DataNodeProperties
argument_list|(
name|newDn
argument_list|,
name|newconf
argument_list|,
name|args
argument_list|,
name|secureResources
argument_list|,
name|newDn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|dataNodes
operator|.
name|add
argument_list|(
name|dnp
argument_list|)
expr_stmt|;
name|numDataNodes
operator|++
expr_stmt|;
name|setDataNodeStorageCapacities
argument_list|(
name|dataNodes
operator|.
name|lastIndexOf
argument_list|(
name|dnp
argument_list|)
argument_list|,
name|newDn
argument_list|,
name|storageCap
operator|.
name|toArray
argument_list|(
operator|new
name|long
index|[]
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*    * Restart a particular datanode, use newly assigned port    */
DECL|method|restartDataNode (int i)
specifier|public
name|boolean
name|restartDataNode
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restartDataNode
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * Restart a particular datanode, on the same port if keepPort is true    */
DECL|method|restartDataNode (int i, boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNode
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restartDataNode
argument_list|(
name|i
argument_list|,
name|keepPort
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Restart a particular DataNode.    * @param idn index of the DataNode    * @param keepPort true if should restart on the same port    * @param expireOnNN true if NameNode should expire the DataNode heartbeat    * @return    * @throws IOException    */
DECL|method|restartDataNode ( int idn, boolean keepPort, boolean expireOnNN)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNode
parameter_list|(
name|int
name|idn
parameter_list|,
name|boolean
name|keepPort
parameter_list|,
name|boolean
name|expireOnNN
parameter_list|)
throws|throws
name|IOException
block|{
name|DataNodeProperties
name|dnprop
init|=
name|stopDataNode
argument_list|(
name|idn
argument_list|)
decl_stmt|;
if|if
condition|(
name|expireOnNN
condition|)
block|{
name|setDataNodeDead
argument_list|(
name|dnprop
operator|.
name|datanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dnprop
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|restartDataNode
argument_list|(
name|dnprop
argument_list|,
name|keepPort
argument_list|)
return|;
block|}
block|}
comment|/**    * Expire a DataNode heartbeat on the NameNode    * @param dnId    * @throws IOException    */
DECL|method|setDataNodeDead (DatanodeID dnId)
specifier|public
name|void
name|setDataNodeDead
parameter_list|(
name|DatanodeID
name|dnId
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeDescriptor
name|dnd
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|getNamesystem
argument_list|()
argument_list|,
name|dnId
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|setDatanodeDead
argument_list|(
name|dnd
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setDataNodesDead ()
specifier|public
name|void
name|setDataNodesDead
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DataNodeProperties
name|dnp
range|:
name|dataNodes
control|)
block|{
name|setDataNodeDead
argument_list|(
name|dnp
operator|.
name|datanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Restart all datanodes, on the same ports if keepPort is true    */
DECL|method|restartDataNodes (boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNodes
parameter_list|(
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|restartDataNode
argument_list|(
name|i
argument_list|,
name|keepPort
argument_list|)
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted DataNode "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Restart all datanodes, use newly assigned ports    */
DECL|method|restartDataNodes ()
specifier|public
name|boolean
name|restartDataNodes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|restartDataNodes
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns true if the NameNode is running and is out of Safe Mode    * or if waiting for safe mode is disabled.    */
DECL|method|isNameNodeUp (int nnIndex)
specifier|public
name|boolean
name|isNameNodeUp
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|NameNode
name|nameNode
init|=
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
decl_stmt|;
if|if
condition|(
name|nameNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
index|[]
name|sizes
decl_stmt|;
name|sizes
operator|=
name|NameNodeAdapter
operator|.
name|getStats
argument_list|(
name|nameNode
operator|.
name|getNamesystem
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isUp
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isUp
operator|=
operator|(
operator|(
operator|!
name|nameNode
operator|.
name|isInSafeMode
argument_list|()
operator|||
operator|!
name|waitSafeMode
operator|)
operator|&&
name|sizes
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
index|]
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
return|return
name|isUp
return|;
block|}
comment|/**    * Returns true if all the NameNodes are running and is out of Safe Mode.    */
DECL|method|isClusterUp ()
specifier|public
name|boolean
name|isClusterUp
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isNameNodeUp
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns true if there is at least one DataNode running.    */
DECL|method|isDataNodeUp ()
specifier|public
name|boolean
name|isDataNodeUp
parameter_list|()
block|{
if|if
condition|(
name|dataNodes
operator|==
literal|null
operator|||
name|dataNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|datanode
operator|.
name|isDatanodeUp
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get a client handle to the DFS cluster with a single namenode.    */
DECL|method|getFileSystem ()
specifier|public
name|DistributedFileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getFileSystem
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get a client handle to the DFS cluster for the namenode at given index.    */
DECL|method|getFileSystem (int nnIndex)
specifier|public
name|DistributedFileSystem
name|getFileSystem
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|DistributedFileSystem
operator|)
name|addFileSystem
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|getURI
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get another FileSystem instance that is different from FileSystem.get(conf).    * This simulating different threads working on different FileSystem instances.    */
DECL|method|getNewFileSystemInstance (int nnIndex)
specifier|public
name|FileSystem
name|getNewFileSystemInstance
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addFileSystem
argument_list|(
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|getURI
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addFileSystem (T fs)
specifier|private
parameter_list|<
name|T
extends|extends
name|FileSystem
parameter_list|>
name|T
name|addFileSystem
parameter_list|(
name|T
name|fs
parameter_list|)
block|{
name|fileSystems
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/**    * @return a http URL    */
DECL|method|getHttpUri (int nnIndex)
specifier|public
name|String
name|getHttpUri
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
literal|"http://"
operator|+
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get the directories where the namenode stores its image.    */
DECL|method|getNameDirs (int nnIndex)
specifier|public
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNameDirs
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get the directories where the namenode stores its edits.    */
DECL|method|getNameEditsDirs (int nnIndex)
specifier|public
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNameEditsDirs
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|conf
argument_list|)
return|;
block|}
DECL|method|transitionToActive (int nnIndex)
specifier|public
name|void
name|transitionToActive
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServiceFailedException
block|{
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToActive
argument_list|(
operator|new
name|StateChangeRequestInfo
argument_list|(
name|RequestSource
operator|.
name|REQUEST_BY_USER_FORCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|transitionToStandby (int nnIndex)
specifier|public
name|void
name|transitionToStandby
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServiceFailedException
block|{
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
operator|new
name|StateChangeRequestInfo
argument_list|(
name|RequestSource
operator|.
name|REQUEST_BY_USER_FORCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerBlockReports ()
specifier|public
name|void
name|triggerBlockReports
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|triggerDeletionReports ()
specifier|public
name|void
name|triggerDeletionReports
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerDeletionReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|triggerHeartbeats ()
specifier|public
name|void
name|triggerHeartbeats
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Wait until the given namenode gets registration from all the datanodes */
DECL|method|waitActive (int nnIndex)
specifier|public
name|void
name|waitActive
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|namenodes
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|==
literal|null
operator|||
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|NameNodeInfo
name|info
init|=
name|getNN
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|info
operator|.
name|nameNode
operator|.
name|getServiceRpcAddress
argument_list|()
decl_stmt|;
assert|assert
name|addr
operator|.
name|getPort
argument_list|()
operator|!=
literal|0
assert|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// ensure all datanodes have registered and sent heartbeat to the namenode
while|while
condition|(
name|shouldWait
argument_list|(
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
argument_list|,
name|addr
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for cluster to become active"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Wait until the given namenode gets first block reports from all the datanodes */
DECL|method|waitFirstBRCompleted (int nnIndex, int timeout)
specifier|public
name|void
name|waitFirstBRCompleted
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|namenodes
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|==
literal|null
operator|||
name|getNN
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|nameNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|FSNamesystem
name|ns
init|=
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|dm
operator|.
name|getDatanodeListForReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|checkBlockReportReceived
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until the cluster is active and running.    */
DECL|method|waitActive ()
specifier|public
name|void
name|waitActive
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|waitActive
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failedCount
operator|++
expr_stmt|;
comment|// Cached RPC connection to namenode, if any, is expected to fail once
if|if
condition|(
name|failedCount
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried waitActive() "
operator|+
name|failedCount
operator|+
literal|" time(s) and failed, giving up.  "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster is active"
argument_list|)
expr_stmt|;
block|}
DECL|method|printNNs ()
specifier|public
name|void
name|printNNs
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Have namenode "
operator|+
name|i
operator|+
literal|", info:"
operator|+
name|getNN
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" has namenode: "
operator|+
name|getNN
argument_list|(
name|i
argument_list|)
operator|.
name|nameNode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shouldWait (DatanodeInfo[] dnInfo, InetSocketAddress addr)
specifier|private
specifier|synchronized
name|boolean
name|shouldWait
parameter_list|(
name|DatanodeInfo
index|[]
name|dnInfo
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
comment|// If a datanode failed to start, then do not wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
comment|// the datanode thread communicating with the namenode should be alive
if|if
condition|(
operator|!
name|dn
operator|.
name|datanode
operator|.
name|isConnectedToNN
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BPOfferService in datanode "
operator|+
name|dn
operator|.
name|datanode
operator|+
literal|" failed to connect to namenode at "
operator|+
name|addr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Wait for expected number of datanodes to start
if|if
condition|(
name|dnInfo
operator|.
name|length
operator|!=
name|numDataNodes
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"dnInfo.length != numDataNodes"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// if one of the data nodes is not fully started, continue to wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
operator|!
name|dn
operator|.
name|datanode
operator|.
name|isDatanodeFullyStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"!dn.datanode.isDatanodeFullyStarted()"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// make sure all datanodes have sent first heartbeat to namenode,
comment|// using (capacity == 0) as proxy.
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|dnInfo
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|getCapacity
argument_list|()
operator|==
literal|0
operator|||
name|dn
operator|.
name|getLastUpdate
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No heartbeat from DataNode: "
operator|+
name|dn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// If datanode dataset is not initialized then wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
operator|.
name|datanode
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DataNodeTestUtils.getFSDataset(dn.datanode) == null"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|formatDataNodeDirs ()
specifier|public
name|void
name|formatDataNodeDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|base_dir
operator|=
operator|new
name|File
argument_list|(
name|determineDfsBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|data_dir
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data_dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|data_dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove data directory: "
operator|+
name|data_dir
argument_list|)
throw|;
block|}
block|}
comment|/**    *     * @param dataNodeIndex - data node whose block report is desired - the index is same as for getDataNodes()    * @return the block report for the specified data node    */
DECL|method|getBlockReport (String bpid, int dataNodeIndex)
specifier|public
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
name|getBlockReport
parameter_list|(
name|String
name|bpid
parameter_list|,
name|int
name|dataNodeIndex
parameter_list|)
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
specifier|final
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
decl_stmt|;
return|return
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
operator|.
name|getBlockReports
argument_list|(
name|bpid
argument_list|)
return|;
block|}
comment|/**    *     * @return block reports from all data nodes    *    BlockListAsLongs is indexed in the same order as the list of datanodes returned by getDataNodes()    */
DECL|method|getAllBlockReports (String bpid)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|getAllBlockReports
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|int
name|numDataNodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
argument_list|(
name|numDataNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getBlockReport
argument_list|(
name|bpid
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method is valid only if the data nodes have simulated data    * @param dataNodeIndex - data node i which to inject - the index is same as for getDataNodes()    * @param blocksToInject - the blocks    * @param bpid - (optional) the block pool id to use for injecting blocks.    *             If not supplied then it is queried from the in-process NameNode.    * @throws IOException    *              if not simulatedFSDataset    *             if any of blocks already exist in the data node    *       */
DECL|method|injectBlocks (int dataNodeIndex, Iterable<Block> blocksToInject, String bpid)
specifier|public
name|void
name|injectBlocks
parameter_list|(
name|int
name|dataNodeIndex
parameter_list|,
name|Iterable
argument_list|<
name|Block
argument_list|>
name|blocksToInject
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
specifier|final
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dataSet
operator|instanceof
name|SimulatedFSDataset
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injectBlocks is valid only for SimilatedFSDataset"
argument_list|)
throw|;
block|}
if|if
condition|(
name|bpid
operator|==
literal|null
condition|)
block|{
name|bpid
operator|=
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
name|SimulatedFSDataset
name|sdataset
init|=
operator|(
name|SimulatedFSDataset
operator|)
name|dataSet
decl_stmt|;
name|sdataset
operator|.
name|injectBlocks
argument_list|(
name|bpid
argument_list|,
name|blocksToInject
argument_list|)
expr_stmt|;
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Multiple-NameNode version of injectBlocks.    */
DECL|method|injectBlocks (int nameNodeIndex, int dataNodeIndex, Iterable<Block> blocksToInject)
specifier|public
name|void
name|injectBlocks
parameter_list|(
name|int
name|nameNodeIndex
parameter_list|,
name|int
name|dataNodeIndex
parameter_list|,
name|Iterable
argument_list|<
name|Block
argument_list|>
name|blocksToInject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
specifier|final
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dataSet
operator|instanceof
name|SimulatedFSDataset
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injectBlocks is valid only for SimilatedFSDataset"
argument_list|)
throw|;
block|}
name|String
name|bpid
init|=
name|getNamesystem
argument_list|(
name|nameNodeIndex
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|SimulatedFSDataset
name|sdataset
init|=
operator|(
name|SimulatedFSDataset
operator|)
name|dataSet
decl_stmt|;
name|sdataset
operator|.
name|injectBlocks
argument_list|(
name|bpid
argument_list|,
name|blocksToInject
argument_list|)
expr_stmt|;
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the softLimit and hardLimit of client lease periods    */
DECL|method|setLeasePeriod (long soft, long hard)
specifier|public
name|void
name|setLeasePeriod
parameter_list|(
name|long
name|soft
parameter_list|,
name|long
name|hard
parameter_list|)
block|{
name|NameNodeAdapter
operator|.
name|setLeasePeriod
argument_list|(
name|getNamesystem
argument_list|()
argument_list|,
name|soft
argument_list|,
name|hard
argument_list|)
expr_stmt|;
block|}
DECL|method|setLeasePeriod (long soft, long hard, int nnIndex)
specifier|public
name|void
name|setLeasePeriod
parameter_list|(
name|long
name|soft
parameter_list|,
name|long
name|hard
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
name|NameNodeAdapter
operator|.
name|setLeasePeriod
argument_list|(
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|soft
argument_list|,
name|hard
argument_list|)
expr_stmt|;
block|}
DECL|method|setWaitSafeMode (boolean wait)
specifier|public
name|void
name|setWaitSafeMode
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{
name|this
operator|.
name|waitSafeMode
operator|=
name|wait
expr_stmt|;
block|}
comment|/**    * Returns the current set of datanodes    */
DECL|method|listDataNodes ()
name|DataNode
index|[]
name|listDataNodes
parameter_list|()
block|{
name|DataNode
index|[]
name|list
init|=
operator|new
name|DataNode
index|[
name|dataNodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Access to the data directory used for Datanodes    */
DECL|method|getDataDirectory ()
specifier|public
name|String
name|getDataDirectory
parameter_list|()
block|{
return|return
name|data_dir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
comment|/**    * Get the base directory for this MiniDFS instance.    *<p/>    * Within the MiniDFCluster class and any subclasses, this method should be    * used instead of {@link #getBaseDirectory()} which doesn't support    * configuration-specific base directories.    *<p/>    * First the Configuration property {@link #HDFS_MINIDFS_BASEDIR} is fetched.    * If non-null, this is returned.    * If this is null, then {@link #getBaseDirectory()} is called.    * @return the base directory for this instance.    */
DECL|method|determineDfsBaseDir ()
specifier|protected
name|String
name|determineDfsBaseDir
parameter_list|()
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|dfsdir
init|=
name|conf
operator|.
name|get
argument_list|(
name|HDFS_MINIDFS_BASEDIR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsdir
operator|!=
literal|null
condition|)
block|{
return|return
name|dfsdir
return|;
block|}
block|}
return|return
name|getBaseDirectory
argument_list|()
return|;
block|}
comment|/**    * Get the base directory for any DFS cluster whose configuration does    * not explicitly set it. This is done via    * {@link GenericTestUtils#getTestDir()}.    * @return a directory for use as a miniDFS filesystem.    */
DECL|method|getBaseDirectory ()
specifier|public
specifier|static
name|String
name|getBaseDirectory
parameter_list|()
block|{
return|return
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"dfs"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
return|;
block|}
comment|/**    * Get a storage directory for a datanode in this specific instance of    * a MiniCluster.    *    * @param dnIndex datanode index (starts from 0)    * @param dirIndex directory index (0 or 1). Index 0 provides access to the    *          first storage directory. Index 1 provides access to the second    *          storage directory.    * @return Storage directory    */
DECL|method|getInstanceStorageDir (int dnIndex, int dirIndex)
specifier|public
name|File
name|getInstanceStorageDir
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
name|getStorageDirPath
argument_list|(
name|dnIndex
argument_list|,
name|dirIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a storage directory for a datanode.    *<ol>    *<li><base directory>/data/data<2*dnIndex + 1></li>    *<li><base directory>/data/data<2*dnIndex + 2></li>    *</ol>    *    * @param dnIndex datanode index (starts from 0)    * @param dirIndex directory index.    * @return Storage directory    */
DECL|method|getStorageDir (int dnIndex, int dirIndex)
specifier|public
name|File
name|getStorageDir
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
name|getStorageDirPath
argument_list|(
name|dnIndex
argument_list|,
name|dirIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Calculate the DN instance-specific path for appending to the base dir    * to determine the location of the storage of a DN instance in the mini cluster    * @param dnIndex datanode index    * @param dirIndex directory index.    * @return storage directory path    */
DECL|method|getStorageDirPath (int dnIndex, int dirIndex)
specifier|private
name|String
name|getStorageDirPath
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
literal|"data/data"
operator|+
operator|(
name|storagesPerDatanode
operator|*
name|dnIndex
operator|+
literal|1
operator|+
name|dirIndex
operator|)
return|;
block|}
comment|/**    * Get current directory corresponding to the datanode as defined in    * (@link Storage#STORAGE_DIR_CURRENT}    * @param storageDir the storage directory of a datanode.    * @return the datanode current directory    */
DECL|method|getDNCurrentDir (File storageDir)
specifier|public
specifier|static
name|String
name|getDNCurrentDir
parameter_list|(
name|File
name|storageDir
parameter_list|)
block|{
return|return
name|storageDir
operator|+
literal|"/"
operator|+
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get directory corresponding to block pool directory in the datanode    * @param storageDir the storage directory of a datanode.    * @return the block pool directory    */
DECL|method|getBPDir (File storageDir, String bpid)
specifier|public
specifier|static
name|String
name|getBPDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
name|getDNCurrentDir
argument_list|(
name|storageDir
argument_list|)
operator|+
name|bpid
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get directory relative to block pool directory in the datanode    * @param storageDir storage directory    * @return current directory in the given storage directory    */
DECL|method|getBPDir (File storageDir, String bpid, String dirName)
specifier|public
specifier|static
name|String
name|getBPDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|,
name|String
name|dirName
parameter_list|)
block|{
return|return
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
operator|+
name|dirName
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get finalized directory for a block pool    * @param storageDir storage directory    * @param bpid Block pool Id    * @return finalized directory for a block pool    */
DECL|method|getRbwDir (File storageDir, String bpid)
specifier|public
specifier|static
name|File
name|getRbwDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
return|;
block|}
comment|/**    * Get finalized directory for a block pool    * @param storageDir storage directory    * @param bpid Block pool Id    * @return finalized directory for a block pool    */
DECL|method|getFinalizedDir (File storageDir, String bpid)
specifier|public
specifier|static
name|File
name|getFinalizedDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
return|;
block|}
comment|/**    * Get materialized replica that can be corrupted later.    * @param i the index of DataNode.    * @param blk name of the block.    * @return a materialized replica.    * @throws ReplicaNotFoundException if the replica does not exist on the    * DataNode.    */
DECL|method|getMaterializedReplica ( int i, ExtendedBlock blk)
specifier|public
name|MaterializedReplica
name|getMaterializedReplica
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|ReplicaNotFoundException
block|{
return|return
name|getFsDatasetTestUtils
argument_list|(
name|i
argument_list|)
operator|.
name|getMaterializedReplica
argument_list|(
name|blk
argument_list|)
return|;
block|}
comment|/**    * Get materialized replica that can be corrupted later.    * @param dn the index of DataNode.    * @param blk name of the block.    * @return a materialized replica.    * @throws ReplicaNotFoundException if the replica does not exist on the    * DataNode.    */
DECL|method|getMaterializedReplica ( DataNode dn, ExtendedBlock blk)
specifier|public
name|MaterializedReplica
name|getMaterializedReplica
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|ReplicaNotFoundException
block|{
return|return
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
operator|.
name|getMaterializedReplica
argument_list|(
name|blk
argument_list|)
return|;
block|}
comment|/**    * Get file correpsonding to a block    * @param storageDir storage directory    * @param blk the block    * @return data file corresponding to the block    */
DECL|method|getBlockFile (File storageDir, ExtendedBlock blk)
specifier|public
specifier|static
name|File
name|getBlockFile
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the latest metadata file correpsonding to a block    * @param storageDir storage directory    * @param blk the block    * @return metadata file corresponding to the block    */
DECL|method|getBlockMetadataFile (File storageDir, ExtendedBlock blk)
specifier|public
specifier|static
name|File
name|getBlockMetadataFile
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockName
argument_list|()
operator|+
literal|"_"
operator|+
name|blk
operator|.
name|getGenerationStamp
argument_list|()
operator|+
name|Block
operator|.
name|METADATA_EXTENSION
argument_list|)
return|;
block|}
comment|/**    * Return all block metadata files in given directory (recursive search)    */
DECL|method|getAllBlockMetadataFiles (File storageDir)
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|getAllBlockMetadataFiles
parameter_list|(
name|File
name|storageDir
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|storageDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Block
operator|.
name|BLOCK_FILE_PREFIX
argument_list|)
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Block
operator|.
name|METADATA_EXTENSION
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|subdirResults
init|=
name|getAllBlockMetadataFiles
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|subdirResults
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|subdirResults
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Shut down a cluster if it is not null    * @param cluster cluster reference or null    */
DECL|method|shutdownCluster (MiniDFSCluster cluster)
specifier|public
specifier|static
name|void
name|shutdownCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get all files related to a block from all the datanodes    * @param block block for which corresponding files are needed    */
DECL|method|getAllBlockFiles (ExtendedBlock block)
specifier|public
name|File
index|[]
name|getAllBlockFiles
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
if|if
condition|(
name|dataNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|new
name|File
index|[
literal|0
index|]
return|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|blockFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Get the block data file for a block from a given datanode    * @param dnIndex Index of the datanode to get block files for    * @param block block for which corresponding files are needed    */
DECL|method|getBlockFile (int dnIndex, ExtendedBlock block)
specifier|public
name|File
name|getBlockFile
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
comment|// Check for block file in the two storage directories of the datanode
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|getStorageDir
argument_list|(
name|dnIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|blockFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the block metadata file for a block from a given datanode    *     * @param dnIndex Index of the datanode to get block files for    * @param block block for which corresponding files are needed    */
DECL|method|getBlockMetadataFile (int dnIndex, ExtendedBlock block)
specifier|public
name|File
name|getBlockMetadataFile
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
comment|// Check for block file in the two storage directories of the datanode
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|getStorageDir
argument_list|(
name|dnIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|File
name|blockMetaFile
init|=
name|getBlockMetadataFile
argument_list|(
name|storageDir
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockMetaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|blockMetaFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Throw an exception if the MiniDFSCluster is not started with a single    * namenode    */
DECL|method|checkSingleNameNode ()
specifier|private
name|void
name|checkSingleNameNode
parameter_list|()
block|{
if|if
condition|(
name|namenodes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode index is needed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add a namenode to a federated cluster and start it. Configuration of    * datanodes in the cluster is refreshed to register with the new namenode.    *     * @return newly started namenode    */
DECL|method|addNameNode (Configuration conf, int namenodePort)
specifier|public
name|void
name|addNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|namenodePort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|federation
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot add namenode to non-federated cluster"
argument_list|)
throw|;
name|int
name|nameServiceIndex
init|=
name|namenodes
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|nameserviceId
init|=
name|NAMESERVICE_ID_PREFIX
operator|+
operator|(
name|namenodes
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|nameserviceIds
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMESERVICES
argument_list|)
decl_stmt|;
name|nameserviceIds
operator|+=
literal|","
operator|+
name|nameserviceId
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
name|nameserviceIds
argument_list|)
expr_stmt|;
name|String
name|nnId
init|=
literal|null
decl_stmt|;
name|initNameNodeAddress
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
operator|new
name|NNConf
argument_list|(
name|nnId
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|namenodePort
argument_list|)
argument_list|)
expr_stmt|;
comment|// figure out the current number of NNs
name|NameNodeInfo
index|[]
name|infos
init|=
name|this
operator|.
name|getNameNodeInfos
argument_list|(
name|nameserviceId
argument_list|)
decl_stmt|;
name|int
name|nnIndex
init|=
name|infos
operator|==
literal|null
condition|?
literal|0
else|:
name|infos
operator|.
name|length
decl_stmt|;
name|initNameNodeConf
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|nameServiceIndex
argument_list|,
name|nnId
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
name|createNameNode
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
comment|// Refresh datanodes with the newly started namenode
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNode
name|datanode
init|=
name|dn
operator|.
name|datanode
decl_stmt|;
name|datanode
operator|.
name|refreshNamenodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Wait for new namenode to get registrations from all the datanodes
name|waitActive
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDatanodeAddress (Configuration conf, boolean setupHostsFile, boolean checkDataNodeAddrConfig)
specifier|protected
name|void
name|setupDatanodeAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|setupHostsFile
condition|)
block|{
name|String
name|hostsFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_HOSTS
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostsFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parameter dfs.hosts is not setup in conf"
argument_list|)
throw|;
block|}
comment|// Setup datanode in the include file, if it is defined in the conf
name|String
name|address
init|=
literal|"127.0.0.1:"
operator|+
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkDataNodeAddrConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|addToFile
argument_list|(
name|hostsFile
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding datanode "
operator|+
name|address
operator|+
literal|" to hosts file "
operator|+
name|hostsFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|checkDataNodeAddrConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checkDataNodeAddrConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIfUnset
argument_list|(
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addToFile (String p, String address)
specifier|private
name|void
name|addToFile
parameter_list|(
name|String
name|p
parameter_list|,
name|String
name|address
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

