begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|rank
operator|.
name|Min
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDatasetInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StaticMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|RefreshAuthorizationPolicyProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This class creates a single-process DFS cluster for junit testing.  * The data directories for non-simulated DFS are under the testing directory.  * For simulated data nodes, no underlying fs storage is used.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HBase"
block|,
literal|"HDFS"
block|,
literal|"Hive"
block|,
literal|"MapReduce"
block|,
literal|"Pig"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|MiniDFSCluster
specifier|public
class|class
name|MiniDFSCluster
block|{
DECL|field|NAMESERVICE_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NAMESERVICE_ID_PREFIX
init|=
literal|"nameserviceId"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniDFSCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** System property to set the data dir: {@value} */
DECL|field|PROP_TEST_BUILD_DATA
specifier|public
specifier|static
specifier|final
name|String
name|PROP_TEST_BUILD_DATA
init|=
literal|"test.build.data"
decl_stmt|;
comment|/** Configuration option to set the data dir: {@value} */
DECL|field|HDFS_MINIDFS_BASEDIR
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_MINIDFS_BASEDIR
init|=
literal|"hdfs.minidfs.basedir"
decl_stmt|;
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Class to construct instances of MiniDFSClusters with specific options.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|nameNodePort
specifier|private
name|int
name|nameNodePort
init|=
literal|0
decl_stmt|;
DECL|field|nameNodeHttpPort
specifier|private
name|int
name|nameNodeHttpPort
init|=
literal|0
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numNameNodes
specifier|private
name|int
name|numNameNodes
init|=
literal|1
decl_stmt|;
DECL|field|numDataNodes
specifier|private
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
DECL|field|format
specifier|private
name|boolean
name|format
init|=
literal|true
decl_stmt|;
DECL|field|manageNameDfsDirs
specifier|private
name|boolean
name|manageNameDfsDirs
init|=
literal|true
decl_stmt|;
DECL|field|manageDataDfsDirs
specifier|private
name|boolean
name|manageDataDfsDirs
init|=
literal|true
decl_stmt|;
DECL|field|option
specifier|private
name|StartupOption
name|option
init|=
literal|null
decl_stmt|;
DECL|field|racks
specifier|private
name|String
index|[]
name|racks
init|=
literal|null
decl_stmt|;
DECL|field|hosts
specifier|private
name|String
index|[]
name|hosts
init|=
literal|null
decl_stmt|;
DECL|field|simulatedCapacities
specifier|private
name|long
index|[]
name|simulatedCapacities
init|=
literal|null
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
DECL|field|waitSafeMode
specifier|private
name|boolean
name|waitSafeMode
init|=
literal|true
decl_stmt|;
DECL|field|setupHostsFile
specifier|private
name|boolean
name|setupHostsFile
init|=
literal|false
decl_stmt|;
DECL|field|federation
specifier|private
name|boolean
name|federation
init|=
literal|false
decl_stmt|;
DECL|method|Builder (Configuration conf)
specifier|public
name|Builder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**      * default false - non federated cluster      * @param val      * @return Builder object      */
DECL|method|federation (boolean val)
specifier|public
name|Builder
name|federation
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|federation
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 0      */
DECL|method|nameNodePort (int val)
specifier|public
name|Builder
name|nameNodePort
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|nameNodePort
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 0      */
DECL|method|nameNodeHttpPort (int val)
specifier|public
name|Builder
name|nameNodeHttpPort
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|nameNodeHttpPort
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 1      */
DECL|method|numNameNodes (int val)
specifier|public
name|Builder
name|numNameNodes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|numNameNodes
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: 1      */
DECL|method|numDataNodes (int val)
specifier|public
name|Builder
name|numDataNodes
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|numDataNodes
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|format (boolean val)
specifier|public
name|Builder
name|format
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|manageNameDfsDirs (boolean val)
specifier|public
name|Builder
name|manageNameDfsDirs
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|manageNameDfsDirs
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|manageDataDfsDirs (boolean val)
specifier|public
name|Builder
name|manageDataDfsDirs
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|manageDataDfsDirs
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|startupOption (StartupOption val)
specifier|public
name|Builder
name|startupOption
parameter_list|(
name|StartupOption
name|val
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|racks (String[] val)
specifier|public
name|Builder
name|racks
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|racks
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|hosts (String[] val)
specifier|public
name|Builder
name|hosts
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|simulatedCapacities (long[] val)
specifier|public
name|Builder
name|simulatedCapacities
parameter_list|(
name|long
index|[]
name|val
parameter_list|)
block|{
name|this
operator|.
name|simulatedCapacities
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: true      */
DECL|method|waitSafeMode (boolean val)
specifier|public
name|Builder
name|waitSafeMode
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|waitSafeMode
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: null      */
DECL|method|clusterId (String cid)
specifier|public
name|Builder
name|clusterId
parameter_list|(
name|String
name|cid
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|cid
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Default: false      * When true the hosts file/include file for the cluster is setup      */
DECL|method|setupHostsFile (boolean val)
specifier|public
name|Builder
name|setupHostsFile
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|setupHostsFile
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Construct the actual MiniDFSCluster      */
DECL|method|build ()
specifier|public
name|MiniDFSCluster
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniDFSCluster
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Used by builder to create and return an instance of MiniDFSCluster    */
DECL|method|MiniDFSCluster (Builder builder)
specifier|private
name|MiniDFSCluster
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting cluster with "
operator|+
name|builder
operator|.
name|numNameNodes
operator|+
literal|" namenodes."
argument_list|)
expr_stmt|;
name|nameNodes
operator|=
operator|new
name|NameNodeInfo
index|[
name|builder
operator|.
name|numNameNodes
index|]
expr_stmt|;
comment|// try to determine if in federation mode
if|if
condition|(
name|builder
operator|.
name|numNameNodes
operator|>
literal|1
condition|)
name|builder
operator|.
name|federation
operator|=
literal|true
expr_stmt|;
name|initMiniDFSCluster
argument_list|(
name|builder
operator|.
name|nameNodePort
argument_list|,
name|builder
operator|.
name|nameNodeHttpPort
argument_list|,
name|builder
operator|.
name|conf
argument_list|,
name|builder
operator|.
name|numDataNodes
argument_list|,
name|builder
operator|.
name|format
argument_list|,
name|builder
operator|.
name|manageNameDfsDirs
argument_list|,
name|builder
operator|.
name|manageDataDfsDirs
argument_list|,
name|builder
operator|.
name|option
argument_list|,
name|builder
operator|.
name|racks
argument_list|,
name|builder
operator|.
name|hosts
argument_list|,
name|builder
operator|.
name|simulatedCapacities
argument_list|,
name|builder
operator|.
name|clusterId
argument_list|,
name|builder
operator|.
name|waitSafeMode
argument_list|,
name|builder
operator|.
name|setupHostsFile
argument_list|,
name|builder
operator|.
name|federation
argument_list|)
expr_stmt|;
block|}
DECL|class|DataNodeProperties
specifier|public
class|class
name|DataNodeProperties
block|{
DECL|field|datanode
name|DataNode
name|datanode
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|dnArgs
name|String
index|[]
name|dnArgs
decl_stmt|;
DECL|method|DataNodeProperties (DataNode node, Configuration conf, String[] args)
name|DataNodeProperties
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dnArgs
operator|=
name|args
expr_stmt|;
block|}
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nameNodes
specifier|private
name|NameNodeInfo
index|[]
name|nameNodes
decl_stmt|;
DECL|field|numDataNodes
specifier|private
name|int
name|numDataNodes
decl_stmt|;
DECL|field|dataNodes
specifier|private
name|ArrayList
argument_list|<
name|DataNodeProperties
argument_list|>
name|dataNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DataNodeProperties
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|base_dir
specifier|private
name|File
name|base_dir
decl_stmt|;
DECL|field|data_dir
specifier|private
name|File
name|data_dir
decl_stmt|;
DECL|field|federation
specifier|private
name|boolean
name|federation
init|=
literal|false
decl_stmt|;
DECL|field|waitSafeMode
specifier|private
name|boolean
name|waitSafeMode
init|=
literal|true
decl_stmt|;
comment|/**    * Stores the information related to a namenode in the cluster    */
DECL|class|NameNodeInfo
specifier|static
class|class
name|NameNodeInfo
block|{
DECL|field|nameNode
specifier|final
name|NameNode
name|nameNode
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|NameNodeInfo (NameNode nn, Configuration conf)
name|NameNodeInfo
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|nameNode
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
comment|/**    * This null constructor is used only when wishing to start a data node cluster    * without a name node (ie when the name node is started elsewhere).    */
DECL|method|MiniDFSCluster ()
specifier|public
name|MiniDFSCluster
parameter_list|()
block|{
name|nameNodes
operator|=
operator|new
name|NameNodeInfo
index|[
literal|0
index|]
expr_stmt|;
comment|// No namenode in the cluster
block|}
comment|/**    * Modify the config and start up the servers with the given operation.    * Servers will be started on free ports.    *<p>    * The caller must manage the creation of NameNode and DataNode directories    * and have already set {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and     * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} in the given conf.    *     * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param nameNodeOperation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, StartupOption nameNodeOperation)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|StartupOption
name|nameNodeOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|nameNodeOperation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the servers.  The rpc and info ports for    * servers are guaranteed to use free ports.    *<p>    * NameNode and DataNode directory creation and configuration will be    * managed by this class.    *    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param racks array of strings indicating the rack that each DataNode is on    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, boolean format, String[] racks)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the servers.  The rpc and info ports for    * servers are guaranteed to use free ports.    *<p>    * NameNode and DataNode directory creation and configuration will be    * managed by this class.    *    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostname for each DataNode    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (Configuration conf, int numDataNodes, boolean format, String[] racks, String[] hosts)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free     * ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting     *          up    * @param manageDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and     *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in     *          the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageDfsDirs, StartupOption operation, String[] racks)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodePort
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|manageDfsDirs
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param manageDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and     *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in     *          the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param simulatedCapacities array of capacities of the simulated data nodes    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageDfsDirs, StartupOption operation, String[] racks, long[] simulatedCapacities)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodePort
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|manageDfsDirs
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: if possible, the other constructors that don't have nameNode port     * parameter should be used as they will ensure that the servers use free ports.    *<p>    * Modify the config and start up the servers.      *     * @param nameNodePort suggestion for which rpc port to use.  caller should    *          use getNameNodePort() to get the actual port used.    * @param conf the base configuration to use in starting the servers.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param format if true, format the NameNode and DataNodes before starting up    * @param manageNameDfsDirs if true, the data directories for servers will be    *          created and {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY} and     *          {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set in     *          the conf    * @param manageDataDfsDirs if true, the data directories for datanodes will    *          be created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}     *          set to same in the conf    * @param operation the operation with which to start the servers.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames of each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    */
annotation|@
name|Deprecated
comment|// in 22 to be removed in 24. Use MiniDFSCluster.Builder instead
DECL|method|MiniDFSCluster (int nameNodePort, Configuration conf, int numDataNodes, boolean format, boolean manageNameDfsDirs, boolean manageDataDfsDirs, StartupOption operation, String[] racks, String hosts[], long[] simulatedCapacities)
specifier|public
name|MiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|manageDataDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
name|hosts
index|[]
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nameNodes
operator|=
operator|new
name|NameNodeInfo
index|[
literal|1
index|]
expr_stmt|;
comment|// Single namenode in the cluster
name|initMiniDFSCluster
argument_list|(
name|nameNodePort
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|format
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|manageDataDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|simulatedCapacities
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initMiniDFSCluster (int nameNodePort, int nameNodeHttpPort, Configuration conf, int numDataNodes, boolean format, boolean manageNameDfsDirs, boolean manageDataDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities, String clusterId, boolean waitSafeMode, boolean setupHostsFile, boolean federation)
specifier|private
name|void
name|initMiniDFSCluster
parameter_list|(
name|int
name|nameNodePort
parameter_list|,
name|int
name|nameNodeHttpPort
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|format
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|manageDataDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|boolean
name|waitSafeMode
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|federation
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|base_dir
operator|=
operator|new
name|File
argument_list|(
name|determineDfsBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|data_dir
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|this
operator|.
name|federation
operator|=
name|federation
expr_stmt|;
name|this
operator|.
name|waitSafeMode
operator|=
name|waitSafeMode
expr_stmt|;
comment|// use alternate RPC engine if spec'd
name|String
name|rpcEngineName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hdfs.rpc.engine"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcEngineName
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|rpcEngineName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HDFS using RPCEngine: "
operator|+
name|rpcEngineName
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rpcEngine
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|rpcEngineName
argument_list|)
decl_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocols
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
name|setRpcEngine
argument_list|(
name|conf
argument_list|,
name|GetUserMappingsProtocol
operator|.
name|class
argument_list|,
name|rpcEngine
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// disable service authorization, as it does not work with tunnelled RPC
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|replication
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|replication
argument_list|,
name|numDataNodes
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_EXTENSION_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// 3 second
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|StaticMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
init|=
name|DFSUtil
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameserviceIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|federation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|federation
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"127.0.0.1:"
operator|+
name|nameNodePort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:"
operator|+
name|nameNodeHttpPort
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|createNameNode
argument_list|(
literal|0
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|format
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|nameNodes
index|[
literal|0
index|]
operator|=
operator|new
name|NameNodeInfo
argument_list|(
name|nn
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nameserviceIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nameserviceIds
operator|.
name|add
argument_list|(
name|NAMESERVICE_ID_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|initFederationConf
argument_list|(
name|conf
argument_list|,
name|nameserviceIds
argument_list|,
name|numDataNodes
argument_list|,
name|nameNodePort
argument_list|)
expr_stmt|;
name|createFederationNamenodes
argument_list|(
name|conf
argument_list|,
name|nameserviceIds
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|format
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
condition|)
block|{
if|if
condition|(
name|data_dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|data_dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove data directory: "
operator|+
name|data_dir
argument_list|)
throw|;
block|}
block|}
comment|// Start the DataNodes
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDataDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|simulatedCapacities
argument_list|,
name|setupHostsFile
argument_list|)
expr_stmt|;
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|//make sure ProxyUsers uses the latest conf
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Initialize configuration for federated cluster */
DECL|method|initFederationConf (Configuration conf, Collection<String> nameserviceIds, int numDataNodes, int nnPort)
specifier|private
specifier|static
name|void
name|initFederationConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|nnPort
parameter_list|)
block|{
name|String
name|nameserviceIdList
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|nameserviceId
range|:
name|nameserviceIds
control|)
block|{
comment|// Create comma separated list of nameserviceIds
if|if
condition|(
name|nameserviceIdList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|nameserviceIdList
operator|+=
literal|","
expr_stmt|;
block|}
name|nameserviceIdList
operator|+=
name|nameserviceId
expr_stmt|;
name|initFederatedNamenodeAddress
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|nnPort
argument_list|)
expr_stmt|;
name|nnPort
operator|=
name|nnPort
operator|==
literal|0
condition|?
literal|0
else|:
name|nnPort
operator|+
literal|2
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_FEDERATION_NAMESERVICES
argument_list|,
name|nameserviceIdList
argument_list|)
expr_stmt|;
block|}
comment|/* For federated namenode initialize the address:port */
DECL|method|initFederatedNamenodeAddress (Configuration conf, String nameserviceId, int nnPort)
specifier|private
specifier|static
name|void
name|initFederatedNamenodeAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|int
name|nnPort
parameter_list|)
block|{
comment|// Set nameserviceId specific key
name|String
name|key
init|=
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|key
operator|=
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"127.0.0.1:"
operator|+
name|nnPort
argument_list|)
expr_stmt|;
block|}
DECL|method|createFederationNamenodes (Configuration conf, Collection<String> nameserviceIds, boolean manageNameDfsDirs, boolean format, StartupOption operation, String clusterId)
specifier|private
name|void
name|createFederationNamenodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create namenodes in the cluster
name|int
name|nnCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|nameserviceId
range|:
name|nameserviceIds
control|)
block|{
name|createFederatedNameNode
argument_list|(
name|nnCounter
operator|++
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|format
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createNameNode (int nnIndex, Configuration conf, int numDataNodes, boolean manageNameDfsDirs, boolean format, StartupOption operation, String clusterId)
specifier|private
name|NameNode
name|createNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|manageNameDfsDirs
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"name"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|2
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"namesecondary"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"namesecondary"
operator|+
operator|(
literal|2
operator|*
name|nnIndex
operator|+
literal|2
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Format and clean out DataNode directories
if|if
condition|(
name|format
condition|)
block|{
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|==
name|StartupOption
operator|.
name|UPGRADE
condition|)
block|{
name|operation
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
comment|// Start the NameNode
name|String
index|[]
name|args
init|=
operator|(
name|operation
operator|==
literal|null
operator|||
name|operation
operator|==
name|StartupOption
operator|.
name|FORMAT
operator|||
name|operation
operator|==
name|StartupOption
operator|.
name|REGULAR
operator|)
condition|?
operator|new
name|String
index|[]
block|{}
else|:
operator|new
name|String
index|[]
block|{
name|operation
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
return|return
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|createFederatedNameNode (int nnIndex, Configuration conf, int numDataNodes, boolean manageNameDfsDirs, boolean format, StartupOption operation, String clusterId, String nameserviceId)
specifier|private
name|void
name|createFederatedNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|format
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|nameserviceId
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_FEDERATION_NAMESERVICE_ID
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|createNameNode
argument_list|(
name|nnIndex
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|format
argument_list|,
name|operation
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|)
argument_list|,
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|getNameServiceIdKey
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|nameserviceId
argument_list|)
argument_list|,
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|nn
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|setGenericConf
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|nameNodes
index|[
name|nnIndex
index|]
operator|=
operator|new
name|NameNodeInfo
argument_list|(
name|nn
argument_list|,
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setRpcEngine (Configuration conf, Class<?> protocol, Class<?> engine)
specifier|private
name|void
name|setRpcEngine
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|engine
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"rpc.engine."
operator|+
name|protocol
operator|.
name|getName
argument_list|()
argument_list|,
name|engine
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return URI of the namenode from a single namenode MiniDFSCluster    */
DECL|method|getURI ()
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getURI
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * @return URI of the given namenode in MiniDFSCluster    */
DECL|method|getURI (int nnIndex)
specifier|public
name|URI
name|getURI
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|InetSocketAddress
name|addr
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
decl_stmt|;
name|String
name|hostPort
init|=
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://"
operator|+
name|hostPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"unexpected URISyntaxException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
comment|/**    * @return Configuration of for the given namenode    */
DECL|method|getConfiguration (int nnIndex)
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
return|;
block|}
comment|/**    * wait for the given namenode to get out of safemode.    */
DECL|method|waitNameNodeUp (int nnIndex)
specifier|public
name|void
name|waitNameNodeUp
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
while|while
condition|(
operator|!
name|isNameNodeUp
argument_list|(
name|nnIndex
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting for namenode at "
operator|+
name|nnIndex
operator|+
literal|" to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * wait for the cluster to get out of safemode.    */
DECL|method|waitClusterUp ()
specifier|public
name|void
name|waitClusterUp
parameter_list|()
block|{
if|if
condition|(
name|numDataNodes
operator|>
literal|0
condition|)
block|{
while|while
condition|(
operator|!
name|isClusterUp
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Waiting for the Mini HDFS Cluster to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
block|}
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be set     *          in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|simulatedCapacities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be     *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    * @param setupHostsFile add new nodes to dfs hosts files    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities, boolean setupHostsFile)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|simulatedCapacities
argument_list|,
name|setupHostsFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be     *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param hosts array of strings indicating the hostnames for each DataNode    * @param simulatedCapacities array of capacities of the simulated data nodes    * @param setupHostsFile add new nodes to dfs hosts files    * @param checkDataNodeAddrConfig if true, only set DataNode port addresses if not already set in config    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, String[] hosts, long[] simulatedCapacities, boolean setupHostsFile, boolean checkDataNodeAddrConfig)
specifier|public
specifier|synchronized
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|int
name|curDatanodesNum
init|=
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// for mincluster's the default initialDelay for BRs is 0
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INITIAL_DELAY_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// If minicluster's name node is null assume that the conf has been
comment|// set with the right address:port of the name node.
comment|//
if|if
condition|(
name|racks
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|racks
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of racks ["
operator|+
name|racks
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
if|if
condition|(
name|hosts
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|hosts
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of hosts ["
operator|+
name|hosts
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
comment|//Generate some hostnames if required
if|if
condition|(
name|racks
operator|!=
literal|null
operator|&&
name|hosts
operator|==
literal|null
condition|)
block|{
name|hosts
operator|=
operator|new
name|String
index|[
name|numDataNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curDatanodesNum
init|;
name|i
operator|<
name|curDatanodesNum
operator|+
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
operator|=
literal|"host"
operator|+
name|i
operator|+
literal|".foo.com"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|simulatedCapacities
operator|!=
literal|null
operator|&&
name|numDataNodes
operator|>
name|simulatedCapacities
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The length of simulatedCapacities ["
operator|+
name|simulatedCapacities
operator|.
name|length
operator|+
literal|"] is less than the number of datanodes ["
operator|+
name|numDataNodes
operator|+
literal|"]."
argument_list|)
throw|;
block|}
name|String
index|[]
name|dnArgs
init|=
operator|(
name|operation
operator|==
literal|null
operator|||
name|operation
operator|!=
name|StartupOption
operator|.
name|ROLLBACK
operator|)
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
name|operation
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|curDatanodesNum
init|;
name|i
operator|<
name|curDatanodesNum
operator|+
name|numDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|dnConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Set up datanode address
name|setupDatanodeAddress
argument_list|(
name|dnConf
argument_list|,
name|setupHostsFile
argument_list|,
name|checkDataNodeAddrConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|manageDfsDirs
condition|)
block|{
name|File
name|dir1
init|=
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dir2
init|=
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|dir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dir1
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|dir2
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create directory for DataNode "
operator|+
name|i
operator|+
literal|": "
operator|+
name|dir1
operator|+
literal|" or "
operator|+
name|dir2
argument_list|)
throw|;
block|}
name|String
name|dirs
init|=
name|fileAsURI
argument_list|(
name|dir1
argument_list|)
operator|+
literal|","
operator|+
name|fileAsURI
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|dnConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simulatedCapacities
operator|!=
literal|null
condition|)
block|{
name|dnConf
operator|.
name|setBoolean
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_SIMULATED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dnConf
operator|.
name|setLong
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_CAPACITY
argument_list|,
name|simulatedCapacities
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DataNode "
operator|+
name|i
operator|+
literal|" with "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
operator|+
literal|": "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|!=
literal|null
condition|)
block|{
name|dnConf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DataNode "
operator|+
name|i
operator|+
literal|" with hostname set to: "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding node with hostname : "
operator|+
name|name
operator|+
literal|" to rack "
operator|+
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|name
argument_list|,
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|newconf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|dnConf
argument_list|)
decl_stmt|;
comment|// save config
if|if
condition|(
name|hosts
operator|!=
literal|null
condition|)
block|{
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|hosts
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|dn
init|=
name|DataNode
operator|.
name|instantiateDataNode
argument_list|(
name|dnArgs
argument_list|,
name|dnConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot start DataNode in "
operator|+
name|dnConf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
throw|;
comment|//since the HDFS does things based on IP:port, we need to add the mapping
comment|//for IP:port to rackId
name|String
name|ipAddr
init|=
name|dn
operator|.
name|getSelfAddr
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|racks
operator|!=
literal|null
condition|)
block|{
name|int
name|port
init|=
name|dn
operator|.
name|getSelfAddr
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding node with IP:port : "
operator|+
name|ipAddr
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" to rack "
operator|+
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
name|StaticMapping
operator|.
name|addNodeToRack
argument_list|(
name|ipAddr
operator|+
literal|":"
operator|+
name|port
argument_list|,
name|racks
index|[
name|i
operator|-
name|curDatanodesNum
index|]
argument_list|)
expr_stmt|;
block|}
name|dn
operator|.
name|runDatanodeDaemon
argument_list|()
expr_stmt|;
name|dataNodes
operator|.
name|add
argument_list|(
operator|new
name|DataNodeProperties
argument_list|(
name|dn
argument_list|,
name|newconf
argument_list|,
name|dnArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|curDatanodesNum
operator|+=
name|numDataNodes
expr_stmt|;
name|this
operator|.
name|numDataNodes
operator|+=
name|numDataNodes
expr_stmt|;
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Modify the config and start up the DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will be     *          set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks )
specifier|public
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify the config and start up additional DataNodes.  The info port for    * DataNodes is guaranteed to use a free port.    *      *  Data nodes can run with the name node in the mini cluster or    *  a real name node. For example, running with a real name node is useful    *  when running simulated data nodes with a real name node.    *  If minicluster's name node is null assume that the conf has been    *  set with the right address:port of the name node.    *    * @param conf the base configuration to use in starting the DataNodes.  This    *          will be modified as necessary.    * @param numDataNodes Number of DataNodes to start; may be zero    * @param manageDfsDirs if true, the data directories for DataNodes will be    *          created and {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY} will     *          be set in the conf    * @param operation the operation with which to start the DataNodes.  If null    *          or StartupOption.FORMAT, then StartupOption.REGULAR will be used.    * @param racks array of strings indicating the rack that each DataNode is on    * @param simulatedCapacities array of capacities of the simulated data nodes    *    * @throws IllegalStateException if NameNode has been shutdown    */
DECL|method|startDataNodes (Configuration conf, int numDataNodes, boolean manageDfsDirs, StartupOption operation, String[] racks, long[] simulatedCapacities)
specifier|public
name|void
name|startDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|boolean
name|manageDfsDirs
parameter_list|,
name|StartupOption
name|operation
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
index|[]
name|simulatedCapacities
parameter_list|)
throws|throws
name|IOException
block|{
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|manageDfsDirs
argument_list|,
name|operation
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
name|simulatedCapacities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finalize the namenode. Block pools corresponding to the namenode are    * finalized on the datanode.    */
DECL|method|finalizeNamenode (NameNode nn, Configuration conf)
specifier|private
name|void
name|finalizeNamenode
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempting to finalize "
operator|+
literal|"Namenode but it is not running"
argument_list|)
throw|;
block|}
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-finalizeUpgrade"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finalize cluster for the namenode at the given index     * @see MiniDFSCluster#finalizeCluster(Configuration)    * @param nnIndex    * @param conf    * @throws Exception    */
DECL|method|finalizeCluster (int nnIndex, Configuration conf)
specifier|public
name|void
name|finalizeCluster
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|finalizeNamenode
argument_list|(
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
argument_list|,
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the NameNode is running, attempt to finalize a previous upgrade.    * When this method return, the NameNode should be finalized, but    * DataNodes may not be since that occurs asynchronously.    *    * @throws IllegalStateException if the Namenode is not running.    */
DECL|method|finalizeCluster (Configuration conf)
specifier|public
name|void
name|finalizeCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|NameNodeInfo
name|nnInfo
range|:
name|nameNodes
control|)
block|{
if|if
condition|(
name|nnInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempting to finalize "
operator|+
literal|"Namenode but it is not running"
argument_list|)
throw|;
block|}
name|finalizeNamenode
argument_list|(
name|nnInfo
operator|.
name|nameNode
argument_list|,
name|nnInfo
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumNameNodes ()
specifier|public
name|int
name|getNumNameNodes
parameter_list|()
block|{
return|return
name|nameNodes
operator|.
name|length
return|;
block|}
comment|/**    * Gets the started NameNode.  May be null.    */
DECL|method|getNameNode ()
specifier|public
name|NameNode
name|getNameNode
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNode
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get an instance of the NameNode's RPC handler.    */
DECL|method|getNameNodeRpc ()
specifier|public
name|NamenodeProtocols
name|getNameNodeRpc
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
return|;
block|}
comment|/**    * Gets the NameNode for the index.  May be null.    */
DECL|method|getNameNode (int nnIndex)
specifier|public
name|NameNode
name|getNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
return|;
block|}
comment|/**    * Return the {@link FSNamesystem} object.    * @return {@link FSNamesystem} object.    */
DECL|method|getNamesystem ()
specifier|public
name|FSNamesystem
name|getNamesystem
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|nameNodes
index|[
literal|0
index|]
operator|.
name|nameNode
argument_list|)
return|;
block|}
DECL|method|getNamesystem (int nnIndex)
specifier|public
name|FSNamesystem
name|getNamesystem
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
argument_list|)
return|;
block|}
comment|/**    * Gets a list of the started DataNodes.  May be empty.    */
DECL|method|getDataNodes ()
specifier|public
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|getDataNodes
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|node
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/** @return the datanode having the ipc server listen port */
DECL|method|getDataNode (int ipcPort)
specifier|public
name|DataNode
name|getDataNode
parameter_list|(
name|int
name|ipcPort
parameter_list|)
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|ipcServer
operator|.
name|getListenerAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|ipcPort
condition|)
block|{
return|return
name|dn
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Gets the rpc port used by the NameNode, because the caller     * supplied port is not necessarily the actual port used.    * Assumption: cluster has a single namenode    */
DECL|method|getNameNodePort ()
specifier|public
name|int
name|getNameNodePort
parameter_list|()
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getNameNodePort
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Gets the rpc port used by the NameNode at the given index, because the    * caller supplied port is not necessarily the actual port used.    */
DECL|method|getNameNodePort (int nnIndex)
specifier|public
name|int
name|getNameNodePort
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Shutdown all the nodes in the cluster.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the Mini HDFS Cluster"
argument_list|)
expr_stmt|;
name|shutdownDataNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|NameNodeInfo
name|nnInfo
range|:
name|nameNodes
control|)
block|{
name|NameNode
name|nameNode
init|=
name|nnInfo
operator|.
name|nameNode
decl_stmt|;
if|if
condition|(
name|nameNode
operator|!=
literal|null
condition|)
block|{
name|nameNode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nameNode
operator|.
name|join
argument_list|()
expr_stmt|;
name|nameNode
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Shutdown all DataNodes started by this class.  The NameNode    * is left running so that new DataNodes may be started.    */
DECL|method|shutdownDataNodes ()
specifier|public
name|void
name|shutdownDataNodes
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down DataNode "
operator|+
name|i
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|numDataNodes
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown all the namenodes.    */
DECL|method|shutdownNameNodes ()
specifier|public
specifier|synchronized
name|void
name|shutdownNameNodes
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|shutdownNameNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown the namenode at a given index.    */
DECL|method|shutdownNameNode (int nnIndex)
specifier|public
specifier|synchronized
name|void
name|shutdownNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|NameNode
name|nn
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
decl_stmt|;
if|if
condition|(
name|nn
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down the namenode"
argument_list|)
expr_stmt|;
name|nn
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nn
operator|.
name|join
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
decl_stmt|;
name|nameNodes
index|[
name|nnIndex
index|]
operator|=
operator|new
name|NameNodeInfo
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Restart the namenode.    */
DECL|method|restartNameNode ()
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|()
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode. Optionally wait for the cluster to become active.    */
DECL|method|restartNameNode (boolean waitActive)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|boolean
name|waitActive
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
name|restartNameNode
argument_list|(
literal|0
argument_list|,
name|waitActive
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode at a given index.    */
DECL|method|restartNameNode (int nnIndex)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|restartNameNode
argument_list|(
name|nnIndex
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restart the namenode at a given index. Optionally wait for the cluster    * to become active.    */
DECL|method|restartNameNode (int nnIndex, boolean waitActive)
specifier|public
specifier|synchronized
name|void
name|restartNameNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|boolean
name|waitActive
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
decl_stmt|;
name|shutdownNameNode
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|NameNode
operator|.
name|createNameNode
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|nameNodes
index|[
name|nnIndex
index|]
operator|=
operator|new
name|NameNodeInfo
argument_list|(
name|nn
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitActive
condition|)
block|{
name|waitClusterUp
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted the namenode"
argument_list|)
expr_stmt|;
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster is active"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return the contents of the given block on the given datanode.    *    * @param block block to be corrupted    * @throws IOException on error accessing the file for the given block    */
DECL|method|corruptBlockOnDataNodes (ExtendedBlock block)
specifier|public
name|int
name|corruptBlockOnDataNodes
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|blocksCorrupted
init|=
literal|0
decl_stmt|;
name|File
index|[]
name|blockFiles
init|=
name|getAllBlockFiles
argument_list|(
name|block
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|blockFiles
control|)
block|{
if|if
condition|(
name|corruptBlock
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|blocksCorrupted
operator|++
expr_stmt|;
block|}
block|}
return|return
name|blocksCorrupted
return|;
block|}
DECL|method|readBlockOnDataNode (int i, ExtendedBlock block)
specifier|public
name|String
name|readBlockOnDataNode
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
operator|)
operator|:
literal|"Invalid datanode "
operator|+
name|i
assert|;
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|blockFile
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Corrupt a block on a particular datanode.    *    * @param i index of the datanode    * @param blk name of the block    * @throws IOException on error accessing the given block or if    * the contents of the block (on the same datanode) differ.    * @return true if a replica was corrupted, false otherwise    * Types: delete, write bad data, truncate    */
DECL|method|corruptReplica (int i, ExtendedBlock blk)
specifier|public
specifier|static
name|boolean
name|corruptReplica
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|blk
argument_list|)
decl_stmt|;
return|return
name|corruptBlock
argument_list|(
name|blockFile
argument_list|)
return|;
block|}
comment|/*    * Corrupt a block on a particular datanode    */
DECL|method|corruptBlock (File blockFile)
specifier|public
specifier|static
name|boolean
name|corruptBlock
parameter_list|(
name|File
name|blockFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockFile
operator|==
literal|null
operator|||
operator|!
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Corrupt replica by writing random bytes into replica
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|blockFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|raFile
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|badString
init|=
literal|"BADBAD"
decl_stmt|;
name|int
name|rand
init|=
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|channel
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|badString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Corrupting the block "
operator|+
name|blockFile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*    * Shutdown a particular datanode    */
DECL|method|stopDataNode (int i)
specifier|public
specifier|synchronized
name|DataNodeProperties
name|stopDataNode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataNodeProperties
name|dnprop
init|=
name|dataNodes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNode
name|dn
init|=
name|dnprop
operator|.
name|datanode
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniDFSCluster Stopping DataNode "
operator|+
name|dn
operator|.
name|getMachineName
argument_list|()
operator|+
literal|" from a total of "
operator|+
operator|(
name|dataNodes
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|" datanodes."
argument_list|)
expr_stmt|;
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|numDataNodes
operator|--
expr_stmt|;
return|return
name|dnprop
return|;
block|}
comment|/*    * Shutdown a datanode by name.    */
DECL|method|stopDataNode (String name)
specifier|public
specifier|synchronized
name|DataNodeProperties
name|stopDataNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
decl_stmt|;
comment|// get BP registration
name|DatanodeRegistration
name|dnR
init|=
name|DataNodeTestUtils
operator|.
name|getDNRegistrationByMachineName
argument_list|(
name|dn
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"for name="
operator|+
name|name
operator|+
literal|" found bp="
operator|+
name|dnR
operator|+
literal|"; with dnMn="
operator|+
name|dn
operator|.
name|getMachineName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dnR
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|stopDataNode
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * Restart a datanode    * @param dnprop datanode's property    * @return true if restarting is successful    * @throws IOException    */
DECL|method|restartDataNode (DataNodeProperties dnprop)
specifier|public
name|boolean
name|restartDataNode
parameter_list|(
name|DataNodeProperties
name|dnprop
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restartDataNode
argument_list|(
name|dnprop
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Restart a datanode, on the same port if requested    * @param dnprop the datanode to restart    * @param keepPort whether to use the same port     * @return true if restarting is successful    * @throws IOException    */
DECL|method|restartDataNode (DataNodeProperties dnprop, boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNode
parameter_list|(
name|DataNodeProperties
name|dnprop
parameter_list|,
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|dnprop
operator|.
name|conf
decl_stmt|;
name|String
index|[]
name|args
init|=
name|dnprop
operator|.
name|dnArgs
decl_stmt|;
name|Configuration
name|newconf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// save cloned config
if|if
condition|(
name|keepPort
condition|)
block|{
name|InetSocketAddress
name|addr
init|=
name|dnprop
operator|.
name|datanode
operator|.
name|getSelfAddr
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataNodes
operator|.
name|add
argument_list|(
operator|new
name|DataNodeProperties
argument_list|(
name|DataNode
operator|.
name|createDataNode
argument_list|(
name|args
argument_list|,
name|conf
argument_list|)
argument_list|,
name|newconf
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|numDataNodes
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/*    * Restart a particular datanode, use newly assigned port    */
DECL|method|restartDataNode (int i)
specifier|public
name|boolean
name|restartDataNode
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|restartDataNode
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * Restart a particular datanode, on the same port if keepPort is true    */
DECL|method|restartDataNode (int i, boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNode
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
name|DataNodeProperties
name|dnprop
init|=
name|stopDataNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnprop
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|restartDataNode
argument_list|(
name|dnprop
argument_list|,
name|keepPort
argument_list|)
return|;
block|}
block|}
comment|/*    * Restart all datanodes, on the same ports if keepPort is true    */
DECL|method|restartDataNodes (boolean keepPort)
specifier|public
specifier|synchronized
name|boolean
name|restartDataNodes
parameter_list|(
name|boolean
name|keepPort
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|restartDataNode
argument_list|(
name|i
argument_list|,
name|keepPort
argument_list|)
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted DataNode "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Restart all datanodes, use newly assigned ports    */
DECL|method|restartDataNodes ()
specifier|public
name|boolean
name|restartDataNodes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|restartDataNodes
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Returns true if the NameNode is running and is out of Safe Mode    * or if waiting for safe mode is disabled.    */
DECL|method|isNameNodeUp (int nnIndex)
specifier|public
name|boolean
name|isNameNodeUp
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
name|NameNode
name|nameNode
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
decl_stmt|;
if|if
condition|(
name|nameNode
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
index|[]
name|sizes
decl_stmt|;
try|try
block|{
name|sizes
operator|=
name|nameNode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// This method above should never throw.
comment|// It only throws IOE since it is exposed via RPC
throw|throw
call|(
name|AssertionError
call|)
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected IOE thrown: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|ioe
argument_list|)
argument_list|)
throw|;
block|}
name|boolean
name|isUp
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isUp
operator|=
operator|(
operator|(
operator|!
name|nameNode
operator|.
name|isInSafeMode
argument_list|()
operator|||
operator|!
name|waitSafeMode
operator|)
operator|&&
name|sizes
index|[
literal|0
index|]
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
return|return
name|isUp
return|;
block|}
comment|/**    * Returns true if all the NameNodes are running and is out of Safe Mode.    */
DECL|method|isClusterUp ()
specifier|public
name|boolean
name|isClusterUp
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|nameNodes
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isNameNodeUp
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns true if there is at least one DataNode running.    */
DECL|method|isDataNodeUp ()
specifier|public
name|boolean
name|isDataNodeUp
parameter_list|()
block|{
if|if
condition|(
name|dataNodes
operator|==
literal|null
operator|||
name|dataNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|datanode
operator|.
name|isDatanodeUp
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get a client handle to the DFS cluster with a single namenode.    */
DECL|method|getFileSystem ()
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|checkSingleNameNode
argument_list|()
expr_stmt|;
return|return
name|getFileSystem
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get a client handle to the DFS cluster for the namenode at given index.    */
DECL|method|getFileSystem (int nnIndex)
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|getURI
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get another FileSystem instance that is different from FileSystem.get(conf).    * This simulating different threads working on different FileSystem instances.    */
DECL|method|getNewFileSystemInstance (int nnIndex)
specifier|public
name|FileSystem
name|getNewFileSystemInstance
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|getURI
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    * @return a http URL    */
DECL|method|getHttpUri (int nnIndex)
specifier|public
name|String
name|getHttpUri
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|"http://"
operator|+
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * @return a {@link HftpFileSystem} object.    */
DECL|method|getHftpFileSystem (int nnIndex)
specifier|public
name|HftpFileSystem
name|getHftpFileSystem
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
literal|"hftp://"
operator|+
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|HftpFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    *  @return a {@link HftpFileSystem} object as specified user.     */
DECL|method|getHftpFileSystemAs (final String username, final Configuration conf, final int nnIndex, final String... groups)
specifier|public
name|HftpFileSystem
name|getHftpFileSystemAs
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|int
name|nnIndex
parameter_list|,
specifier|final
name|String
modifier|...
name|groups
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
name|groups
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HftpFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HftpFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getHftpFileSystem
argument_list|(
name|nnIndex
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get the directories where the namenode stores its image.    */
DECL|method|getNameDirs (int nnIndex)
specifier|public
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNameDirs
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get the directories where the namenode stores its edits.    */
DECL|method|getNameEditsDirs (int nnIndex)
specifier|public
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNameEditsDirs
parameter_list|(
name|int
name|nnIndex
parameter_list|)
block|{
return|return
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/** Wait until the given namenode gets registration from all the datanodes */
DECL|method|waitActive (int nnIndex)
specifier|public
name|void
name|waitActive
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nameNodes
operator|.
name|length
operator|==
literal|0
operator|||
name|nameNodes
index|[
name|nnIndex
index|]
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|InetSocketAddress
name|addr
init|=
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
operator|.
name|getServiceRpcAddress
argument_list|()
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// ensure all datanodes have registered and sent heartbeat to the namenode
while|while
condition|(
name|shouldWait
argument_list|(
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
argument_list|,
name|addr
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for cluster to become active"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait until the cluster is active and running.    */
DECL|method|waitActive ()
specifier|public
name|void
name|waitActive
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|nameNodes
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|waitActive
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failedCount
operator|++
expr_stmt|;
comment|// Cached RPC connection to namenode, if any, is expected to fail once
if|if
condition|(
name|failedCount
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Tried waitActive() "
operator|+
name|failedCount
operator|+
literal|" time(s) and failed, giving up.  "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|shouldWait (DatanodeInfo[] dnInfo, InetSocketAddress addr)
specifier|private
specifier|synchronized
name|boolean
name|shouldWait
parameter_list|(
name|DatanodeInfo
index|[]
name|dnInfo
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
comment|// If a datanode failed to start, then do not wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
comment|// the datanode thread communicating with the namenode should be alive
if|if
condition|(
operator|!
name|dn
operator|.
name|datanode
operator|.
name|isBPServiceAlive
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BPOfferService failed to start in datanode "
operator|+
name|dn
operator|.
name|datanode
operator|+
literal|" for namenode at "
operator|+
name|addr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Wait for expected number of datanodes to start
if|if
condition|(
name|dnInfo
operator|.
name|length
operator|!=
name|numDataNodes
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// if one of the data nodes is not fully started, continue to wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
operator|!
name|dn
operator|.
name|datanode
operator|.
name|isDatanodeFullyStarted
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// make sure all datanodes have sent first heartbeat to namenode,
comment|// using (capacity == 0) as proxy.
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|dnInfo
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|getCapacity
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// If datanode dataset is not initialized then wait
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|datanode
operator|.
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|formatDataNodeDirs ()
specifier|public
name|void
name|formatDataNodeDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|base_dir
operator|=
operator|new
name|File
argument_list|(
name|determineDfsBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|data_dir
operator|=
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data_dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|data_dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove data directory: "
operator|+
name|data_dir
argument_list|)
throw|;
block|}
block|}
comment|/**    *     * @param dataNodeIndex - data node whose block report is desired - the index is same as for getDataNodes()    * @return the block report for the specified data node    */
DECL|method|getBlockReport (String bpid, int dataNodeIndex)
specifier|public
name|Iterable
argument_list|<
name|Block
argument_list|>
name|getBlockReport
parameter_list|(
name|String
name|bpid
parameter_list|,
name|int
name|dataNodeIndex
parameter_list|)
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
return|return
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getBlockReport
argument_list|(
name|bpid
argument_list|)
return|;
block|}
comment|/**    *     * @return block reports from all data nodes    *    BlockListAsLongs is indexed in the same order as the list of datanodes returned by getDataNodes()    */
DECL|method|getAllBlockReports (String bpid)
specifier|public
name|Iterable
argument_list|<
name|Block
argument_list|>
index|[]
name|getAllBlockReports
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|int
name|numDataNodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Block
argument_list|>
index|[]
name|result
init|=
operator|new
name|BlockListAsLongs
index|[
name|numDataNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataNodes
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|getBlockReport
argument_list|(
name|bpid
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method is valid only if the data nodes have simulated data    * @param dataNodeIndex - data node i which to inject - the index is same as for getDataNodes()    * @param blocksToInject - the blocks    * @throws IOException    *              if not simulatedFSDataset    *             if any of blocks already exist in the data node    *       */
DECL|method|injectBlocks (int dataNodeIndex, Iterable<Block> blocksToInject)
specifier|public
name|void
name|injectBlocks
parameter_list|(
name|int
name|dataNodeIndex
parameter_list|,
name|Iterable
argument_list|<
name|Block
argument_list|>
name|blocksToInject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|FSDatasetInterface
name|dataSet
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dataSet
operator|instanceof
name|SimulatedFSDataset
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injectBlocks is valid only for SimilatedFSDataset"
argument_list|)
throw|;
block|}
name|String
name|bpid
init|=
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|SimulatedFSDataset
name|sdataset
init|=
operator|(
name|SimulatedFSDataset
operator|)
name|dataSet
decl_stmt|;
name|sdataset
operator|.
name|injectBlocks
argument_list|(
name|bpid
argument_list|,
name|blocksToInject
argument_list|)
expr_stmt|;
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Multiple-NameNode version of {@link #injectBlocks(Iterable[])}.    */
DECL|method|injectBlocks (int nameNodeIndex, int dataNodeIndex, Iterable<Block> blocksToInject)
specifier|public
name|void
name|injectBlocks
parameter_list|(
name|int
name|nameNodeIndex
parameter_list|,
name|int
name|dataNodeIndex
parameter_list|,
name|Iterable
argument_list|<
name|Block
argument_list|>
name|blocksToInject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataNodeIndex
argument_list|<
literal|0
operator|||
name|dataNodeIndex
argument_list|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|FSDatasetInterface
name|dataSet
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dataSet
operator|instanceof
name|SimulatedFSDataset
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injectBlocks is valid only for SimilatedFSDataset"
argument_list|)
throw|;
block|}
name|String
name|bpid
init|=
name|getNamesystem
argument_list|(
name|nameNodeIndex
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|SimulatedFSDataset
name|sdataset
init|=
operator|(
name|SimulatedFSDataset
operator|)
name|dataSet
decl_stmt|;
name|sdataset
operator|.
name|injectBlocks
argument_list|(
name|bpid
argument_list|,
name|blocksToInject
argument_list|)
expr_stmt|;
name|dataNodes
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|datanode
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is valid only if the data nodes have simulated data    * @param blocksToInject - blocksToInject[] is indexed in the same order as the list     *             of datanodes returned by getDataNodes()    * @throws IOException    *             if not simulatedFSDataset    *             if any of blocks already exist in the data nodes    *             Note the rest of the blocks are not injected.    */
DECL|method|injectBlocks (Iterable<Block>[] blocksToInject)
specifier|public
name|void
name|injectBlocks
parameter_list|(
name|Iterable
argument_list|<
name|Block
argument_list|>
index|[]
name|blocksToInject
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blocksToInject
operator|.
name|length
operator|>
name|dataNodes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksToInject
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|injectBlocks
argument_list|(
name|i
argument_list|,
name|blocksToInject
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the softLimit and hardLimit of client lease periods    */
DECL|method|setLeasePeriod (long soft, long hard)
specifier|public
name|void
name|setLeasePeriod
parameter_list|(
name|long
name|soft
parameter_list|,
name|long
name|hard
parameter_list|)
block|{
name|NameNodeAdapter
operator|.
name|setLeasePeriod
argument_list|(
name|getNamesystem
argument_list|()
argument_list|,
name|soft
argument_list|,
name|hard
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current set of datanodes    */
DECL|method|listDataNodes ()
name|DataNode
index|[]
name|listDataNodes
parameter_list|()
block|{
name|DataNode
index|[]
name|list
init|=
operator|new
name|DataNode
index|[
name|dataNodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
index|[
name|i
index|]
operator|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|datanode
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Access to the data directory used for Datanodes    */
DECL|method|getDataDirectory ()
specifier|public
name|String
name|getDataDirectory
parameter_list|()
block|{
return|return
name|data_dir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
comment|/**    * Get the base directory for this MiniDFS instance.    *<p/>    * Within the MiniDFCluster class and any subclasses, this method should be    * used instead of {@link #getBaseDirectory()} which doesn't support    * configuration-specific base directories.    *<p/>    * First the Configuration property {@link #HDFS_MINIDFS_BASEDIR} is fetched.    * If non-null, this is returned.    * If this is null, then {@link #getBaseDirectory()} is called.    * @return the base directory for this instance.    */
DECL|method|determineDfsBaseDir ()
specifier|protected
name|String
name|determineDfsBaseDir
parameter_list|()
block|{
name|String
name|dfsdir
init|=
name|conf
operator|.
name|get
argument_list|(
name|HDFS_MINIDFS_BASEDIR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsdir
operator|==
literal|null
condition|)
block|{
name|dfsdir
operator|=
name|getBaseDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|dfsdir
return|;
block|}
comment|/**    * Get the base directory for any DFS cluster whose configuration does    * not explicitly set it. This is done by retrieving the system property    * {@link #PROP_TEST_BUILD_DATA} (defaulting to "build/test/data" ),    * and returning that directory with a subdir of /dfs.    * @return a directory for use as a miniDFS filesystem.    */
DECL|method|getBaseDirectory ()
specifier|public
specifier|static
name|String
name|getBaseDirectory
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_TEST_BUILD_DATA
argument_list|,
literal|"build/test/data"
argument_list|)
operator|+
literal|"/dfs/"
return|;
block|}
comment|/**    * Get a storage directory for a datanode in this specific instance of    * a MiniCluster.    *    * @param dnIndex datanode index (starts from 0)    * @param dirIndex directory index (0 or 1). Index 0 provides access to the    *          first storage directory. Index 1 provides access to the second    *          storage directory.    * @return Storage directory    */
DECL|method|getInstanceStorageDir (int dnIndex, int dirIndex)
specifier|public
name|File
name|getInstanceStorageDir
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|base_dir
argument_list|,
name|getStorageDirPath
argument_list|(
name|dnIndex
argument_list|,
name|dirIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get a storage directory for a datanode. There are two storage directories    * per datanode:    *<ol>    *<li><base directory>/data/data<2*dnIndex + 1></li>    *<li><base directory>/data/data<2*dnIndex + 2></li>    *</ol>    *     * @param dnIndex datanode index (starts from 0)    * @param dirIndex directory index (0 or 1). Index 0 provides access to the    *          first storage directory. Index 1 provides access to the second    *          storage directory.    * @return Storage directory    */
DECL|method|getStorageDir (int dnIndex, int dirIndex)
specifier|public
specifier|static
name|File
name|getStorageDir
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBaseDirectory
argument_list|()
argument_list|,
name|getStorageDirPath
argument_list|(
name|dnIndex
argument_list|,
name|dirIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Calculate the DN instance-specific path for appending to the base dir    * to determine the location of the storage of a DN instance in the mini cluster    * @param dnIndex datanode index    * @param dirIndex directory index (0 or 1).    * @return    */
DECL|method|getStorageDirPath (int dnIndex, int dirIndex)
specifier|private
specifier|static
name|String
name|getStorageDirPath
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|int
name|dirIndex
parameter_list|)
block|{
return|return
literal|"data/data"
operator|+
operator|(
literal|2
operator|*
name|dnIndex
operator|+
literal|1
operator|+
name|dirIndex
operator|)
return|;
block|}
comment|/**    * Get current directory corresponding to the datanode as defined in    * (@link Storage#STORAGE_DIR_CURRENT}    * @param storageDir the storage directory of a datanode.    * @return the datanode current directory    */
DECL|method|getDNCurrentDir (File storageDir)
specifier|public
specifier|static
name|String
name|getDNCurrentDir
parameter_list|(
name|File
name|storageDir
parameter_list|)
block|{
return|return
name|storageDir
operator|+
literal|"/"
operator|+
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get directory corresponding to block pool directory in the datanode    * @param storageDir the storage directory of a datanode.    * @return the block pool directory    */
DECL|method|getBPDir (File storageDir, String bpid)
specifier|public
specifier|static
name|String
name|getBPDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
name|getDNCurrentDir
argument_list|(
name|storageDir
argument_list|)
operator|+
name|bpid
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get directory relative to block pool directory in the datanode    * @param storageDir    * @return current directory    */
DECL|method|getBPDir (File storageDir, String bpid, String dirName)
specifier|public
specifier|static
name|String
name|getBPDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|,
name|String
name|dirName
parameter_list|)
block|{
return|return
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
operator|+
name|dirName
operator|+
literal|"/"
return|;
block|}
comment|/**    * Get finalized directory for a block pool    * @param storageDir storage directory    * @param bpid Block pool Id    * @return finalized directory for a block pool    */
DECL|method|getRbwDir (File storageDir, String bpid)
specifier|public
specifier|static
name|File
name|getRbwDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
return|;
block|}
comment|/**    * Get finalized directory for a block pool    * @param storageDir storage directory    * @param bpid Block pool Id    * @return finalized directory for a block pool    */
DECL|method|getFinalizedDir (File storageDir, String bpid)
specifier|public
specifier|static
name|File
name|getFinalizedDir
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBPDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|+
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
return|;
block|}
comment|/**    * Get file correpsonding to a block    * @param storageDir storage directory    * @param blk block to be corrupted    * @return file corresponding to the block    */
DECL|method|getBlockFile (File storageDir, ExtendedBlock blk)
specifier|public
specifier|static
name|File
name|getBlockFile
parameter_list|(
name|File
name|storageDir
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Shut down a cluster if it is not null    * @param cluster cluster reference or null    */
DECL|method|shutdownCluster (MiniDFSCluster cluster)
specifier|public
specifier|static
name|void
name|shutdownCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get all files related to a block from all the datanodes    * @param block block for which corresponding files are needed    */
DECL|method|getAllBlockFiles (ExtendedBlock block)
specifier|public
name|File
index|[]
name|getAllBlockFiles
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
if|if
condition|(
name|dataNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|new
name|File
index|[
literal|0
index|]
return|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|blockFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Get files related to a block for a given datanode    * @param dnIndex Index of the datanode to get block files for    * @param block block for which corresponding files are needed    */
DECL|method|getBlockFile (int dnIndex, ExtendedBlock block)
specifier|public
specifier|static
name|File
name|getBlockFile
parameter_list|(
name|int
name|dnIndex
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
comment|// Check for block file in the two storage directories of the datanode
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|MiniDFSCluster
operator|.
name|getStorageDir
argument_list|(
name|dnIndex
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
name|getBlockFile
argument_list|(
name|storageDir
argument_list|,
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|blockFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Throw an exception if the MiniDFSCluster is not started with a single    * namenode    */
DECL|method|checkSingleNameNode ()
specifier|private
name|void
name|checkSingleNameNode
parameter_list|()
block|{
if|if
condition|(
name|nameNodes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namenode index is needed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add a namenode to a federated cluster and start it. Configuration of    * datanodes in the cluster is refreshed to register with the new namenode.    *     * @return newly started namenode    */
DECL|method|addNameNode (Configuration conf, int namenodePort)
specifier|public
name|NameNode
name|addNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|namenodePort
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|federation
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot add namenode to non-federated cluster"
argument_list|)
throw|;
name|int
name|nnIndex
init|=
name|nameNodes
operator|.
name|length
decl_stmt|;
name|int
name|numNameNodes
init|=
name|nameNodes
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|NameNodeInfo
index|[]
name|newlist
init|=
operator|new
name|NameNodeInfo
index|[
name|numNameNodes
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nameNodes
argument_list|,
literal|0
argument_list|,
name|newlist
argument_list|,
literal|0
argument_list|,
name|nameNodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|nameNodes
operator|=
name|newlist
expr_stmt|;
name|String
name|nameserviceId
init|=
name|NAMESERVICE_ID_PREFIX
operator|+
operator|(
name|nnIndex
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|nameserviceIds
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_FEDERATION_NAMESERVICES
argument_list|)
decl_stmt|;
name|nameserviceIds
operator|+=
literal|","
operator|+
name|nameserviceId
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_FEDERATION_NAMESERVICES
argument_list|,
name|nameserviceIds
argument_list|)
expr_stmt|;
name|initFederatedNamenodeAddress
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|namenodePort
argument_list|)
expr_stmt|;
name|createFederatedNameNode
argument_list|(
name|nnIndex
argument_list|,
name|conf
argument_list|,
name|numDataNodes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
comment|// Refresh datanodes with the newly started namenode
for|for
control|(
name|DataNodeProperties
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNode
name|datanode
init|=
name|dn
operator|.
name|datanode
decl_stmt|;
name|datanode
operator|.
name|refreshNamenodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// Wait for new namenode to get registrations from all the datanodes
name|waitActive
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
return|return
name|nameNodes
index|[
name|nnIndex
index|]
operator|.
name|nameNode
return|;
block|}
DECL|method|getFreeSocketPort ()
specifier|private
name|int
name|getFreeSocketPort
parameter_list|()
block|{
name|int
name|port
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|port
operator|=
name|s
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|port
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Could not get a free port. Return default port 0.
block|}
return|return
name|port
return|;
block|}
DECL|method|setupDatanodeAddress (Configuration conf, boolean setupHostsFile, boolean checkDataNodeAddrConfig)
specifier|private
name|void
name|setupDatanodeAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|setupHostsFile
parameter_list|,
name|boolean
name|checkDataNodeAddrConfig
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|setupHostsFile
condition|)
block|{
name|String
name|hostsFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostsFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parameter dfs.hosts is not setup in conf"
argument_list|)
throw|;
block|}
comment|// Setup datanode in the include file, if it is defined in the conf
name|String
name|address
init|=
literal|"127.0.0.1:"
operator|+
name|getFreeSocketPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkDataNodeAddrConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|addToFile
argument_list|(
name|hostsFile
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding datanode "
operator|+
name|address
operator|+
literal|" to hosts file "
operator|+
name|hostsFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|checkDataNodeAddrConfig
condition|)
block|{
name|conf
operator|.
name|setIfUnset
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIfUnset
argument_list|(
literal|"dfs.datanode.http.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIfUnset
argument_list|(
literal|"dfs.datanode.ipc.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.http.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.ipc.address"
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addToFile (String p, String address)
specifier|private
name|void
name|addToFile
parameter_list|(
name|String
name|p
parameter_list|,
name|String
name|address
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

