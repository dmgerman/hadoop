begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSymlinkHdfsFileContext
specifier|public
class|class
name|TestSymlinkHdfsFileContext
extends|extends
name|TestSymlinkHdfs
block|{
DECL|field|fc
specifier|private
specifier|static
name|FileContext
name|fc
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|testSetup ()
specifier|public
specifier|static
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|fc
argument_list|,
literal|"/tmp/TestSymlinkHdfsFileContext"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
comment|/** Test access a symlink using AbstractFileSystem */
DECL|method|testAccessLinkFromAbstractFileSystem ()
specifier|public
name|void
name|testAccessLinkFromAbstractFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"linkToFile"
argument_list|)
decl_stmt|;
name|createAndWriteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|AbstractFileSystem
name|afs
init|=
name|fc
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|afs
operator|.
name|open
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Opened a link using AFS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|x
parameter_list|)
block|{
comment|// Expected
block|}
block|}
block|}
end_class

end_unit

