begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_DRIVER_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|impl
operator|.
name|StateStoreFileImpl
operator|.
name|FEDERATION_STORE_FILE_DIRECTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FederationNamenodeServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|impl
operator|.
name|StateStoreFileBaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|impl
operator|.
name|StateStoreFileImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MembershipStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * Utilities to test the State Store.  */
end_comment

begin_class
DECL|class|FederationStateStoreTestUtils
specifier|public
specifier|final
class|class
name|FederationStateStoreTestUtils
block|{
comment|/** The State Store Driver implementation class for testing .*/
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
DECL|field|FEDERATION_STORE_DRIVER_CLASS_FOR_TEST
name|FEDERATION_STORE_DRIVER_CLASS_FOR_TEST
init|=
name|StateStoreFileImpl
operator|.
name|class
decl_stmt|;
DECL|method|FederationStateStoreTestUtils ()
specifier|private
name|FederationStateStoreTestUtils
parameter_list|()
block|{
comment|// Utility Class
block|}
comment|/**    * Get the State Store driver implementation for testing.    *    * @return Class of the State Store driver implementation.    */
DECL|method|getTestDriverClass ()
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|getTestDriverClass
parameter_list|()
block|{
return|return
name|FEDERATION_STORE_DRIVER_CLASS_FOR_TEST
return|;
block|}
comment|/**    * Create a default State Store configuration.    *    * @return State Store configuration.    */
DECL|method|getStateStoreConfiguration ()
specifier|public
specifier|static
name|Configuration
name|getStateStoreConfiguration
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|clazz
init|=
name|getTestDriverClass
argument_list|()
decl_stmt|;
return|return
name|getStateStoreConfiguration
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Create a new State Store configuration for a particular driver.    *    * @param clazz Class of the driver to create.    * @return State Store configuration.    */
DECL|method|getStateStoreConfiguration ( Class<? extends StateStoreDriver> clazz)
specifier|public
specifier|static
name|Configuration
name|getStateStoreConfiguration
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|clazz
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://test"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|FEDERATION_STORE_DRIVER_CLASS
argument_list|,
name|clazz
argument_list|,
name|StateStoreDriver
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|StateStoreFileBaseImpl
operator|.
name|class
argument_list|)
condition|)
block|{
name|setFileConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Create a new State Store based on a configuration.    *    * @param configuration Configuration for the State Store.    * @return New State Store service.    * @throws IOException If it cannot create the State Store.    * @throws InterruptedException If we cannot wait for the store to start.    */
DECL|method|newStateStore ( Configuration configuration)
specifier|public
specifier|static
name|StateStoreService
name|newStateStore
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StateStoreService
name|stateStore
init|=
operator|new
name|StateStoreService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
comment|// Set unique identifier, this is normally the router address
name|String
name|identifier
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|stateStore
operator|.
name|setIdentifier
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for state store to connect
name|waitStateStore
argument_list|(
name|stateStore
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stateStore
return|;
block|}
comment|/**    * Wait for the State Store to initialize its driver.    *    * @param stateStore State Store.    * @param timeoutMs Time out in milliseconds.    * @throws IOException If the State Store cannot be reached.    * @throws InterruptedException If the sleep is interrupted.    */
DECL|method|waitStateStore (StateStoreService stateStore, long timeoutMs)
specifier|public
specifier|static
name|void
name|waitStateStore
parameter_list|(
name|StateStoreService
name|stateStore
parameter_list|,
name|long
name|timeoutMs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|startingTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stateStore
operator|.
name|isDriverReady
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startingTime
operator|>
name|timeoutMs
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeout waiting for State Store to connect"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Delete the default State Store.    *    * @throws IOException    */
DECL|method|deleteStateStore ()
specifier|public
specifier|static
name|void
name|deleteStateStore
parameter_list|()
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|driverClass
init|=
name|getTestDriverClass
argument_list|()
decl_stmt|;
name|deleteStateStore
argument_list|(
name|driverClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete the State Store.    * @param driverClass Class of the State Store driver implementation.    * @throws IOException If it cannot be deleted.    */
DECL|method|deleteStateStore ( Class<? extends StateStoreDriver> driverClass)
specifier|public
specifier|static
name|void
name|deleteStateStore
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|driverClass
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StateStoreFileBaseImpl
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|driverClass
argument_list|)
condition|)
block|{
name|String
name|workingDirectory
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|workingDirectory
operator|+
literal|"/statestore"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the default configuration for drivers based on files.    *    * @param conf Configuration to extend.    */
DECL|method|setFileConfiguration (Configuration conf)
specifier|public
specifier|static
name|void
name|setFileConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|workingPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|String
name|stateStorePath
init|=
name|workingPath
operator|+
literal|"/statestore"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FEDERATION_STORE_FILE_DIRECTORY
argument_list|,
name|stateStorePath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear all the records from the State Store.    *    * @param store State Store to remove records from.    * @return If the State Store was cleared.    * @throws IOException If it cannot clear the State Store.    */
DECL|method|clearAllRecords (StateStoreService store)
specifier|public
specifier|static
name|boolean
name|clearAllRecords
parameter_list|(
name|StateStoreService
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
argument_list|>
name|allRecords
init|=
name|store
operator|.
name|getSupportedRecords
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|recordType
range|:
name|allRecords
control|)
block|{
if|if
condition|(
operator|!
name|clearRecords
argument_list|(
name|store
argument_list|,
name|recordType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Clear records from a certain type from the State Store.    *    * @param store State Store to remove records from.    * @param recordClass Class of the records to remove.    * @return If the State Store was cleared.    * @throws IOException If it cannot clear the State Store.    */
DECL|method|clearRecords ( StateStoreService store, Class<T> recordClass)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|boolean
name|clearRecords
parameter_list|(
name|StateStoreService
name|store
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|recordClass
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|emptyList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|synchronizeRecords
argument_list|(
name|store
argument_list|,
name|emptyList
argument_list|,
name|recordClass
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|store
operator|.
name|refreshCaches
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Synchronize a set of records. Remove all and keep the ones specified.    *    * @param stateStore State Store service managing the driver.    * @param records Records to add.    * @param clazz Class of the record to synchronize.    * @return If the synchronization succeeded.    * @throws IOException If it cannot connect to the State Store.    */
DECL|method|synchronizeRecords ( StateStoreService stateStore, List<T> records, Class<T> clazz)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|boolean
name|synchronizeRecords
parameter_list|(
name|StateStoreService
name|stateStore
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|records
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|StateStoreDriver
name|driver
init|=
name|stateStore
operator|.
name|getDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|verifyDriverReady
argument_list|()
expr_stmt|;
if|if
condition|(
name|driver
operator|.
name|removeAll
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
if|if
condition|(
name|driver
operator|.
name|putAll
argument_list|(
name|records
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createMockMountTable ( List<String> nameservices)
specifier|public
specifier|static
name|List
argument_list|<
name|MountTable
argument_list|>
name|createMockMountTable
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nameservices
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create table entries
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nameservices
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|destMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
literal|"/target-"
operator|+
name|ns
argument_list|)
expr_stmt|;
name|MountTable
name|entry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
operator|+
name|ns
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
DECL|method|createMockRegistrationForNamenode ( String nameserviceId, String namenodeId, FederationNamenodeServiceState state)
specifier|public
specifier|static
name|MembershipState
name|createMockRegistrationForNamenode
parameter_list|(
name|String
name|nameserviceId
parameter_list|,
name|String
name|namenodeId
parameter_list|,
name|FederationNamenodeServiceState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|MembershipState
name|entry
init|=
name|MembershipState
operator|.
name|newInstance
argument_list|(
literal|"routerId"
argument_list|,
name|nameserviceId
argument_list|,
name|namenodeId
argument_list|,
literal|"clusterId"
argument_list|,
literal|"test"
argument_list|,
literal|"0.0.0.0:0"
argument_list|,
literal|"0.0.0.0:0"
argument_list|,
literal|"0.0.0.0:0"
argument_list|,
literal|"0.0.0.0:0"
argument_list|,
name|state
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MembershipStats
name|stats
init|=
name|MembershipStats
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumOfActiveDatanodes
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumOfDeadDatanodes
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumOfDecommissioningDatanodes
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumOfDecomActiveDatanodes
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumOfDecomDeadDatanodes
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumOfBlocks
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

