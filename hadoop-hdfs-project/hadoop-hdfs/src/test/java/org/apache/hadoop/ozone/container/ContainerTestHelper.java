begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Helpers for container tests.  */
end_comment

begin_class
DECL|class|ContainerTestHelper
specifier|public
class|class
name|ContainerTestHelper
block|{
comment|/**    * Create a pipeline with single node replica.    *    * @return Pipeline with single node in it.    * @throws IOException    */
DECL|method|createSingleNodePipeline ()
specifier|public
specifier|static
name|Pipeline
name|createSingleNodePipeline
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|socket
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|DatanodeID
name|datanodeID
init|=
operator|new
name|DatanodeID
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|port
argument_list|,
name|port
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|datanodeID
operator|.
name|setContainerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|addMember
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|pipeline
return|;
block|}
comment|/**    * Returns a create container command for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
DECL|method|getCreateContainerRequest ()
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCreateContainerRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|Builder
name|createRequest
init|=
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|Builder
name|containerData
init|=
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|containerData
operator|.
name|setName
argument_list|(
literal|"testContainer"
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setPipeline
argument_list|(
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
operator|.
name|getProtobufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setContainerData
argument_list|(
name|containerData
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreateContainer
argument_list|(
name|createRequest
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container response for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
specifier|public
specifier|static
name|ContainerCommandResponseProto
DECL|method|getCreateContainerResponse (ContainerCommandRequestProto request)
name|getCreateContainerResponse
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|CreateContainerResponseProto
operator|.
name|Builder
name|createResponse
init|=
name|ContainerProtos
operator|.
name|CreateContainerResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
operator|.
name|Builder
name|response
init|=
name|ContainerCommandResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTraceID
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreateContainer
argument_list|(
name|createResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

