begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|sps
operator|.
name|ExternalSPSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Tests that StoragePolicySatisfier daemon is able to check the striped blocks  * to be moved and finding its expected target locations in order to satisfy the  * storage policy.  */
end_comment

begin_class
DECL|class|TestStoragePolicySatisfierWithStripedFile
specifier|public
class|class
name|TestStoragePolicySatisfierWithStripedFile
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStoragePolicySatisfierWithStripedFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stripesPerBlock
specifier|private
specifier|final
name|int
name|stripesPerBlock
init|=
literal|2
decl_stmt|;
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|dataBlocks
specifier|private
name|int
name|dataBlocks
decl_stmt|;
DECL|field|parityBlocks
specifier|private
name|int
name|parityBlocks
decl_stmt|;
DECL|field|cellSize
specifier|private
name|int
name|cellSize
decl_stmt|;
DECL|field|defaultStripeBlockSize
specifier|private
name|int
name|defaultStripeBlockSize
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|sps
specifier|private
name|StoragePolicySatisfier
name|sps
decl_stmt|;
DECL|field|ctxt
specifier|private
name|ExternalSPSContext
name|ctxt
decl_stmt|;
DECL|field|nnc
specifier|private
name|NameNodeConnector
name|nnc
decl_stmt|;
DECL|method|getEcPolicy ()
specifier|private
name|ErasureCodingPolicy
name|getEcPolicy
parameter_list|()
block|{
return|return
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
return|;
block|}
comment|/**    * Initialize erasure coding policy.    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|ecPolicy
operator|=
name|getEcPolicy
argument_list|()
expr_stmt|;
name|dataBlocks
operator|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|parityBlocks
operator|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|cellSize
operator|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
expr_stmt|;
name|defaultStripeBlockSize
operator|=
name|cellSize
operator|*
name|stripesPerBlock
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|EXTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reduced refresh cycle to update latest datanodes.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SPS_DATANODE_CACHE_REFRESH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|initConfWithStripe
argument_list|(
name|conf
argument_list|,
name|defaultStripeBlockSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests to verify that all the striped blocks(data + parity blocks) are    * moving to satisfy the storage policy.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoverWithFullStripe ()
specifier|public
name|void
name|testMoverWithFullStripe
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start 11 datanodes
name|int
name|numOfDatanodes
init|=
literal|11
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|20
operator|*
name|defaultStripeBlockSize
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|startSPS
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set "/bar" directory with HOT storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|barDir
init|=
literal|"/bar"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/bar" directory
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
name|barDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|String
name|fooFile
init|=
literal|"/bar/foo"
decl_stmt|;
name|long
name|fileLen
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// start 5 more datanodes
name|int
name|numOfNewDatanodes
init|=
literal|5
decl_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
name|numOfNewDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfNewDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// move file to ARCHIVE
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sets storage policy to COLD and invoked satisfyStoragePolicy"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// verify storage types and locations
name|waitExpectedStorageType
argument_list|(
name|cluster
argument_list|,
name|fooFile
argument_list|,
name|fileLen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sps
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that only few datanodes are available and few striped    * blocks are able to move. Others are still trying to find available nodes.    *    * For example, we have 3 nodes A(disk, disk), B(disk, disk), C(disk, archive)    *    * Assume a block with storage locations A(disk), B(disk), C(disk). Now, set    * policy as COLD and invoked {@link HdfsAdmin#satisfyStoragePolicy(Path)},    * while choosing the target node for A, it shouldn't choose C. For C, it    * should do local block movement as it has ARCHIVE storage type.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenOnlyFewTargetNodesAreAvailableToSatisfyStoragePolicy ()
specifier|public
name|void
name|testWhenOnlyFewTargetNodesAreAvailableToSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start 10 datanodes
name|int
name|numOfDatanodes
init|=
literal|11
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|20
operator|*
name|defaultStripeBlockSize
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|startSPS
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set "/bar" directory with HOT storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|barDir
init|=
literal|"/bar"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/bar" directory
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
name|barDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|String
name|fooFile
init|=
literal|"/bar/foo"
decl_stmt|;
name|long
name|fileLen
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// start 2 more datanodes
name|int
name|numOfNewDatanodes
init|=
literal|2
decl_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
name|numOfNewDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfNewDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// Move file to ARCHIVE. Only 5 datanodes are available with ARCHIVE
comment|// storage type.
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sets storage policy to COLD and invoked satisfyStoragePolicy"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// verify storage types and locations.
name|waitExpectedStorageType
argument_list|(
name|cluster
argument_list|,
name|fooFile
argument_list|,
name|fileLen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sps
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test SPS for low redundant file blocks.    * 1. Create cluster with 10 datanode.    * 1. Create one striped file with default EC Policy.    * 2. Set policy and call satisfyStoragePolicy for file.    * 3. Stop NameNode and Datanodes.    * 4. Start NameNode with 5 datanode and wait for block movement.    * 5. Start remaining 5 datanode.    * 6. All replica  should be moved in proper storage based on policy.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSPSWhenFileHasLowRedundancyBlocks ()
specifier|public
name|void
name|testSPSWhenFileHasLowRedundancyBlocks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start 9 datanodes
name|int
name|numOfDatanodes
init|=
literal|9
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|20
operator|*
name|defaultStripeBlockSize
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"3000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|startSPS
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|barDir
init|=
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/bar" directory
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|barDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
literal|"/bar/foo"
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|fooFile
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Move file to ARCHIVE.
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|//Stop DataNodes and restart namenode
name|List
argument_list|<
name|DataNodeProperties
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numOfDatanodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// Restart half datanodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|.
name|satisfyStoragePolicy
argument_list|(
name|fooFile
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitExpectedStorageType
argument_list|(
name|fooFile
operator|.
name|toString
argument_list|()
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|5
argument_list|,
literal|30000
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
comment|//Start remaining datanodes
for|for
control|(
name|int
name|i
init|=
name|numOfDatanodes
operator|-
literal|1
init|;
name|i
operator|>=
literal|5
condition|;
name|i
operator|--
control|)
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// verify storage types and locations.
name|waitExpectedStorageType
argument_list|(
name|cluster
argument_list|,
name|fooFile
operator|.
name|toString
argument_list|()
argument_list|,
name|fileLen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sps
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests to verify that for the given path, no blocks under the given path    * will be scheduled for block movement as there are no available datanode    * with required storage type.    *    * For example, there are two block for a file:    *    * File1 => blk_1[locations=A(DISK),B(DISK),C(DISK)],    * blk_2[locations=A(DISK),B(DISK),C(DISK)]. Now, set storage policy to COLD.    * No datanode is available with storage type ARCHIVE.    *    * SPS won't schedule any block movement for this path.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWhenNoTargetDatanodeToSatisfyStoragePolicy ()
specifier|public
name|void
name|testWhenNoTargetDatanodeToSatisfyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start 10 datanodes
name|int
name|numOfDatanodes
init|=
literal|10
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|20
operator|*
name|defaultStripeBlockSize
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|startSPS
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set "/bar" directory with HOT storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|barDir
init|=
literal|"/bar"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/bar" directory
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
name|barDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|String
name|fooFile
init|=
literal|"/bar/foo"
decl_stmt|;
name|long
name|fileLen
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// Move file to ARCHIVE. Only 5 datanodes are available with ARCHIVE
comment|// storage type.
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|satisfyStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sets storage policy to COLD and invoked satisfyStoragePolicy"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// verify storage types and locations.
name|waitExpectedStorageType
argument_list|(
name|cluster
argument_list|,
name|fooFile
argument_list|,
name|fileLen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|waitForAttemptedItems
argument_list|(
literal|1
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sps
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startSPS ()
specifier|private
name|void
name|startSPS
parameter_list|()
throws|throws
name|IOException
block|{
name|nnc
operator|=
name|DFSTestUtil
operator|.
name|getNameNodeConnector
argument_list|(
name|conf
argument_list|,
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sps
operator|=
operator|new
name|StoragePolicySatisfier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ctxt
operator|=
operator|new
name|ExternalSPSContext
argument_list|(
name|sps
argument_list|,
name|nnc
argument_list|)
expr_stmt|;
name|sps
operator|.
name|init
argument_list|(
name|ctxt
argument_list|)
expr_stmt|;
name|sps
operator|.
name|start
argument_list|(
name|StoragePolicySatisfierMode
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
block|}
DECL|method|initConfWithStripe (Configuration conf, int stripeBlockSize)
specifier|private
specifier|static
name|void
name|initConfWithStripe
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|stripeBlockSize
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|stripeBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Check whether the Block movement has been successfully completed to satisfy
comment|// the storage policy for the given file.
DECL|method|waitExpectedStorageType (MiniDFSCluster cluster, final String fileName, long fileLen, final StorageType expectedStorageType, int expectedStorageCount, int expectedBlkLocationCount, int timeout)
specifier|private
name|void
name|waitExpectedStorageType
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
name|long
name|fileLen
parameter_list|,
specifier|final
name|StorageType
name|expectedStorageType
parameter_list|,
name|int
name|expectedStorageCount
parameter_list|,
name|int
name|expectedBlkLocationCount
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|int
name|actualStorageCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|LocatedBlocks
name|locatedBlocks
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LocatedBlocks => Size {}, locs {}"
argument_list|,
name|lb
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|,
name|lb
argument_list|)
expr_stmt|;
if|if
condition|(
name|lb
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|>
name|expectedBlkLocationCount
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|StorageType
name|storageType
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|expectedStorageType
operator|==
name|storageType
condition|)
block|{
name|actualStorageCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected storage type {} and actual {}"
argument_list|,
name|expectedStorageType
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|expectedStorageType
operator|+
literal|" replica count, expected={} and actual={}"
argument_list|,
name|expectedStorageCount
argument_list|,
name|actualStorageCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting located blocks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|expectedStorageCount
operator|==
name|actualStorageCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForAttemptedItems (long expectedBlkMovAttemptedCount, int timeout)
specifier|private
name|void
name|waitForAttemptedItems
parameter_list|(
name|long
name|expectedBlkMovAttemptedCount
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"expectedAttemptedItemsCount={} actualAttemptedItemsCount={}"
argument_list|,
name|expectedBlkMovAttemptedCount
argument_list|,
operator|(
call|(
name|BlockStorageMovementAttemptedItems
call|)
argument_list|(
name|sps
operator|.
name|getAttemptedItemsMonitor
argument_list|()
argument_list|)
operator|)
operator|.
name|getAttemptedItemsCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|BlockStorageMovementAttemptedItems
call|)
argument_list|(
name|sps
operator|.
name|getAttemptedItemsMonitor
argument_list|()
argument_list|)
operator|)
operator|.
name|getAttemptedItemsCount
argument_list|()
operator|==
name|expectedBlkMovAttemptedCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

