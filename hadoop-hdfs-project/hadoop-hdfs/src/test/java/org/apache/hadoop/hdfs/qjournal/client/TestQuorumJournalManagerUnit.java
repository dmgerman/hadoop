begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournaledEditsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalStateResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Stubber
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SettableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|writeOp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|createTxnData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|verifyEdits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_comment
comment|/**  * True unit tests for QuorumJournalManager  */
end_comment

begin_class
DECL|class|TestQuorumJournalManagerUnit
specifier|public
class|class
name|TestQuorumJournalManagerUnit
block|{
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|QuorumJournalManager
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
DECL|field|FAKE_NSINFO
specifier|private
specifier|static
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|12345
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|spyLoggers
specifier|private
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|spyLoggers
decl_stmt|;
DECL|field|qjm
specifier|private
name|QuorumJournalManager
name|qjm
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|spyLoggers
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|mockLogger
argument_list|()
argument_list|,
name|mockLogger
argument_list|()
argument_list|,
name|mockLogger
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qjm
operator|=
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
operator|new
name|URI
argument_list|(
literal|"qjournal://host/jid"
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|createLoggers
parameter_list|(
name|AsyncLogger
operator|.
name|Factory
name|factory
parameter_list|)
block|{
return|return
name|spyLoggers
return|;
block|}
block|}
expr_stmt|;
for|for
control|(
name|AsyncLogger
name|logger
range|:
name|spyLoggers
control|)
block|{
name|futureReturns
argument_list|(
name|GetJournalStateResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLastPromisedEpoch
argument_list|(
literal|0
argument_list|)
operator|.
name|setHttpPort
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|logger
argument_list|)
operator|.
name|getJournalState
argument_list|()
expr_stmt|;
name|futureReturns
argument_list|(
name|NewEpochResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|logger
argument_list|)
operator|.
name|newEpoch
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|logger
argument_list|)
operator|.
name|format
argument_list|(
name|Mockito
operator|.
expr|<
name|NamespaceInfo
operator|>
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
block|}
DECL|method|mockLogger ()
specifier|private
name|AsyncLogger
name|mockLogger
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|AsyncLogger
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|futureReturns (V value)
specifier|static
parameter_list|<
name|V
parameter_list|>
name|Stubber
name|futureReturns
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|V
argument_list|>
name|ret
init|=
name|Futures
operator|.
name|immediateFuture
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Mockito
operator|.
name|doReturn
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|futureThrows (Throwable t)
specifier|static
name|Stubber
name|futureThrows
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|ret
init|=
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|t
argument_list|)
decl_stmt|;
return|return
name|Mockito
operator|.
name|doReturn
argument_list|(
name|ret
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testAllLoggersStartOk ()
specifier|public
name|void
name|testAllLoggersStartOk
parameter_list|()
throws|throws
name|Exception
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuorumOfLoggersStartOk ()
specifier|public
name|void
name|testQuorumOfLoggersStartOk
parameter_list|()
throws|throws
name|Exception
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"logger failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuorumOfLoggersFail ()
specifier|public
name|void
name|testQuorumOfLoggersFail
parameter_list|()
throws|throws
name|Exception
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"logger failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"logger failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw when quorum failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"logger failed"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testQuorumOutputStreamReport ()
specifier|public
name|void
name|testQuorumOutputStreamReport
parameter_list|()
throws|throws
name|Exception
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|QuorumOutputStream
name|os
init|=
operator|(
name|QuorumOutputStream
operator|)
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
decl_stmt|;
name|String
name|report
init|=
name|os
operator|.
name|generateReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Report should be plain text"
argument_list|,
name|report
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteEdits ()
specifier|public
name|void
name|testWriteEdits
parameter_list|()
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|createLogSegment
argument_list|()
decl_stmt|;
name|writeOp
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeOp
argument_list|(
name|stm
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stm
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|writeOp
argument_list|(
name|stm
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// The flush should log txn 1-2
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Another flush should now log txn #3
name|stm
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testSetOutputBufferCapacityTooLarge ()
specifier|public
name|void
name|testSetOutputBufferCapacityTooLarge
parameter_list|()
throws|throws
name|Exception
block|{
name|qjm
operator|.
name|setOutputBufferCapacity
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_MAXIMUM_DATA_LENGTH_DEFAULT
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Regression test for HDFS-13977
annotation|@
name|Test
DECL|method|testFSEditLogAutoSyncToQuorumStream ()
specifier|public
name|void
name|testFSEditLogAutoSyncToQuorumStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the buffer capacity low to make it easy to fill it
name|qjm
operator|.
name|setOutputBufferCapacity
argument_list|(
literal|512
argument_list|)
expr_stmt|;
comment|// Set up mocks
name|NNStorage
name|mockStorage
init|=
name|mock
argument_list|(
name|NNStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|createLogSegment
argument_list|()
expr_stmt|;
comment|// sets up to the mocks for startLogSegment
for|for
control|(
name|int
name|logIdx
init|=
literal|0
init|;
name|logIdx
operator|<
literal|3
condition|;
name|logIdx
operator|++
control|)
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|logIdx
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PermissionStatus
name|permStat
init|=
name|PermissionStatus
operator|.
name|createImmutable
argument_list|(
literal|"user"
argument_list|,
literal|"group"
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|INode
name|fakeInode
init|=
name|FSImageTestUtil
operator|.
name|createEmptyInodeFile
argument_list|(
literal|1
argument_list|,
literal|"foo"
argument_list|,
name|permStat
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Create a fake FSEditLog using this QJM
name|String
name|mockQjmEdits
init|=
literal|"qjournal://mock/"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|mockQjmEdits
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|,
name|mockQjmEdits
argument_list|)
expr_stmt|;
name|FSEditLog
name|editLog
init|=
name|FSImageTestUtil
operator|.
name|createEditLogWithJournalManager
argument_list|(
name|conf
argument_list|,
name|mockStorage
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|mockQjmEdits
argument_list|)
argument_list|,
name|qjm
argument_list|)
decl_stmt|;
name|editLog
operator|.
name|initJournalsForWrite
argument_list|()
expr_stmt|;
name|editLog
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
expr_stmt|;
comment|// Write enough edit ops that the output buffer capacity should fill and
comment|// an auto-sync should be triggered
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|editLog
operator|.
name|logMkDir
argument_list|(
literal|"/fake/path"
argument_list|,
name|fakeInode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWriteEditsOneSlow ()
specifier|public
name|void
name|testWriteEditsOneSlow
parameter_list|()
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|createLogSegment
argument_list|()
decl_stmt|;
name|writeOp
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
comment|// Make the first two logs respond immediately
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// And the third log not respond
name|SettableFuture
argument_list|<
name|Void
argument_list|>
name|slowLog
init|=
name|SettableFuture
operator|.
name|create
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|slowLog
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|setCommittedTxId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRpcInputStreams ()
specifier|public
name|void
name|testReadRpcInputStreams
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|jn
init|=
literal|0
init|;
name|jn
operator|<
literal|3
condition|;
name|jn
operator|++
control|)
block|{
name|futureReturns
argument_list|(
name|getJournaledEditsReponse
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|jn
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|qjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRpcMismatchedInputStreams ()
specifier|public
name|void
name|testReadRpcMismatchedInputStreams
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|jn
init|=
literal|0
init|;
name|jn
operator|<
literal|3
condition|;
name|jn
operator|++
control|)
block|{
name|futureReturns
argument_list|(
name|getJournaledEditsReponse
argument_list|(
literal|1
argument_list|,
name|jn
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|jn
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|qjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRpcInputStreamsOneSlow ()
specifier|public
name|void
name|testReadRpcInputStreamsOneSlow
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|jn
init|=
literal|0
init|;
name|jn
operator|<
literal|2
condition|;
name|jn
operator|++
control|)
block|{
name|futureReturns
argument_list|(
name|getJournaledEditsReponse
argument_list|(
literal|1
argument_list|,
name|jn
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|jn
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|doReturn
argument_list|(
name|SettableFuture
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|qjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRpcInputStreamsOneException ()
specifier|public
name|void
name|testReadRpcInputStreamsOneException
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|jn
init|=
literal|0
init|;
name|jn
operator|<
literal|2
condition|;
name|jn
operator|++
control|)
block|{
name|futureReturns
argument_list|(
name|getJournaledEditsReponse
argument_list|(
literal|1
argument_list|,
name|jn
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|jn
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|qjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRpcInputStreamsNoNewEdits ()
specifier|public
name|void
name|testReadRpcInputStreamsNoNewEdits
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|jn
init|=
literal|0
init|;
name|jn
operator|<
literal|3
condition|;
name|jn
operator|++
control|)
block|{
name|futureReturns
argument_list|(
name|GetJournaledEditsResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTxnCount
argument_list|(
literal|0
argument_list|)
operator|.
name|setEditLog
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
name|jn
argument_list|)
argument_list|)
operator|.
name|getJournaledEdits
argument_list|(
literal|1
argument_list|,
name|QuorumJournalManager
operator|.
name|QJM_RPC_MAX_TXNS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|qjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getJournaledEditsReponse ( int startTxn, int numTxns)
specifier|private
name|GetJournaledEditsResponseProto
name|getJournaledEditsReponse
parameter_list|(
name|int
name|startTxn
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|EditLogFileOutputStream
operator|.
name|writeHeader
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
argument_list|)
expr_stmt|;
name|byteStream
operator|.
name|write
argument_list|(
name|createTxnData
argument_list|(
name|startTxn
argument_list|,
name|numTxns
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetJournaledEditsResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTxnCount
argument_list|(
name|numTxns
argument_list|)
operator|.
name|setEditLog
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createLogSegment ()
specifier|private
name|EditLogOutputStream
name|createLogSegment
parameter_list|()
throws|throws
name|IOException
block|{
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|futureReturns
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|spyLoggers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|startLogSegment
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
decl_stmt|;
return|return
name|stm
return|;
block|}
block|}
end_class

end_unit

