begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * This class benchmarks the performance of the local file system, raw local  * file system and HDFS at reading and writing files. The user should invoke  * the main of this class and optionally include a repetition count.  */
end_comment

begin_class
DECL|class|BenchmarkThroughput
specifier|public
class|class
name|BenchmarkThroughput
extends|extends
name|Configured
implements|implements
name|Tool
block|{
comment|// the property in the config that specifies a working directory
DECL|field|dir
specifier|private
name|LocalDirAllocator
name|dir
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
comment|// the size of the buffer to use
DECL|field|BUFFER_SIZE
specifier|private
name|int
name|BUFFER_SIZE
decl_stmt|;
DECL|method|resetMeasurements ()
specifier|private
name|void
name|resetMeasurements
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
DECL|method|printMeasurements ()
specifier|private
name|void
name|printMeasurements
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeLocalFile (String name, Configuration conf, long total)
specifier|private
name|Path
name|writeLocalFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|total
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|dir
operator|.
name|getLocalPathForWrite
argument_list|(
name|name
argument_list|,
name|total
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Writing "
operator|+
name|name
argument_list|)
expr_stmt|;
name|resetMeasurements
argument_list|()
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
for|for
control|(
name|long
name|size
init|=
literal|0
init|;
name|size
operator|<
name|total
condition|;
name|size
operator|+=
name|BUFFER_SIZE
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|printMeasurements
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
DECL|method|readLocalFile (Path path, String name, Configuration conf)
specifier|private
name|void
name|readLocalFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Reading "
operator|+
name|name
argument_list|)
expr_stmt|;
name|resetMeasurements
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|size
operator|=
name|in
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|printMeasurements
argument_list|()
expr_stmt|;
block|}
DECL|method|writeAndReadLocalFile (String name, Configuration conf, long size )
specifier|private
name|void
name|writeAndReadLocalFile
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
name|f
operator|=
name|writeLocalFile
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|readLocalFile
argument_list|(
name|f
argument_list|,
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
operator|new
name|File
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeFile (FileSystem fs, String name, Configuration conf, long total )
specifier|private
name|Path
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|total
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
name|dir
operator|.
name|getLocalPathForWrite
argument_list|(
name|name
argument_list|,
name|total
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Writing "
operator|+
name|name
argument_list|)
expr_stmt|;
name|resetMeasurements
argument_list|()
expr_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
for|for
control|(
name|long
name|size
init|=
literal|0
init|;
name|size
operator|<
name|total
condition|;
name|size
operator|+=
name|BUFFER_SIZE
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|printMeasurements
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|readFile (FileSystem fs, Path f, String name, Configuration conf )
specifier|private
name|void
name|readFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Reading "
operator|+
name|name
argument_list|)
expr_stmt|;
name|resetMeasurements
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|val
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|val
operator|>=
literal|0
condition|)
block|{
name|val
operator|=
name|in
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|printMeasurements
argument_list|()
expr_stmt|;
block|}
DECL|method|writeAndReadFile (FileSystem fs, String name, Configuration conf, long size )
specifier|private
name|void
name|writeAndReadFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
name|f
operator|=
name|writeFile
argument_list|(
name|fs
argument_list|,
name|name
argument_list|,
name|conf
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|readFile
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// IGNORE
block|}
block|}
block|}
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: dfsthroughput [#reps]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Config properties:\n"
operator|+
literal|"  dfsthroughput.file.size:\tsize of each write/read (10GB)\n"
operator|+
literal|"  dfsthroughput.buffer.size:\tbuffer size for write/read (4k)\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// silence the minidfs cluster
name|Log
name|hadoopLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopLog
operator|instanceof
name|Log4JLogger
condition|)
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|hadoopLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
name|int
name|reps
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
try|try
block|{
name|reps
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// the size of the file to write
name|long
name|SIZE
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"dfsthroughput.file.size"
argument_list|,
literal|10L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|BUFFER_SIZE
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"dfsthroughput.buffer.size"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|String
name|localDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.temp.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|localDir
operator|==
literal|null
condition|)
block|{
name|localDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.temp.dir"
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
block|}
name|dir
operator|=
operator|new
name|LocalDirAllocator
argument_list|(
literal|"mapred.temp.dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|localDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Local = "
operator|+
name|localDir
argument_list|)
expr_stmt|;
name|ChecksumFileSystem
name|checkedLocal
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|rawLocal
init|=
name|checkedLocal
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
operator|++
name|i
control|)
block|{
name|writeAndReadLocalFile
argument_list|(
literal|"local"
argument_list|,
name|conf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|writeAndReadFile
argument_list|(
name|rawLocal
argument_list|,
literal|"raw"
argument_list|,
name|conf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
name|writeAndReadFile
argument_list|(
name|checkedLocal
argument_list|,
literal|"checked"
argument_list|,
name|conf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|racks
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/foo"
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reps
condition|;
operator|++
name|i
control|)
block|{
name|writeAndReadFile
argument_list|(
name|dfs
argument_list|,
literal|"dfs"
argument_list|,
name|conf
argument_list|,
name|SIZE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// clean up minidfs junk
name|rawLocal
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
literal|"dfs"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
operator|new
name|BenchmarkThroughput
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

