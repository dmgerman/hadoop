begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|CBlockTargetMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|ContainerCacheFlusher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
operator|.
name|CBlockLocalCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_SECONDS
import|;
end_import

begin_comment
comment|/**  * Tests for Local Cache Buffer Manager.  */
end_comment

begin_class
DECL|class|TestBufferManager
specifier|public
class|class
name|TestBufferManager
block|{
DECL|field|GB
specifier|private
specifier|final
specifier|static
name|long
name|GB
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|KB
specifier|private
specifier|final
specifier|static
name|int
name|KB
init|=
literal|1024
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|OzoneConfiguration
name|config
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|static
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|config
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * createContainerAndGetPipeline creates a set of containers and returns the    * Pipelines that define those containers.    *    * @param count - Number of containers to create.    * @return - List of Pipelines.    * @throws IOException    */
DECL|method|createContainerAndGetPipeline (int count)
specifier|private
name|List
argument_list|<
name|Pipeline
argument_list|>
name|createContainerAndGetPipeline
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containerPipelines
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|String
name|traceID
init|=
literal|"trace"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|containerName
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|containerName
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|ContainerProtocolCalls
operator|.
name|createContainer
argument_list|(
name|client
argument_list|,
name|traceID
argument_list|)
expr_stmt|;
comment|// This step is needed since we set private data on pipelines, when we
comment|// read the list from CBlockServer. So we mimic that action here.
name|pipeline
operator|.
name|setData
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|containerPipelines
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|containerPipelines
return|;
block|}
comment|/**    * This test writes some block to the cache and then shuts down the cache.    * The cache is then restarted to check that the    * correct number of blocks are read from Dirty Log    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testEmptyBlockBufferHandling ()
specifier|public
name|void
name|testEmptyBlockBufferHandling
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelines
init|=
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|pipelines
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Write data to the cache
name|cache
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumDirectBlockWrites
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|2
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumDirectBlockWrites
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumWriteOps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store the previous block buffer position
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferUpdates
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simulate a shutdown by closing the cache
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumFailedBlockBufferFlushes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumInterruptedBufferWaits
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart cache and check that right number of entries are read
name|CBlockTargetMetrics
name|newMetrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|newFlusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|newMetrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|newCache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|pipelines
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|newFlusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|newMetrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|newCache
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|fllushListenerThread
init|=
operator|new
name|Thread
argument_list|(
name|newFlusher
argument_list|)
decl_stmt|;
name|fllushListenerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fllushListenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metrics
operator|.
name|getNumBlockBufferUpdates
argument_list|()
argument_list|,
name|newMetrics
operator|.
name|getNumDirtyLogBlockRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newMetrics
operator|.
name|getNumDirtyLogBlockRead
argument_list|()
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
argument_list|,
name|newMetrics
operator|.
name|getNumBytesDirtyLogReads
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now shutdown again, nothing should be flushed
name|newFlusher
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newMetrics
operator|.
name|getNumBlockBufferUpdates
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newMetrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPeriodicFlush ()
specifier|public
name|void
name|testPeriodicFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setInt
argument_list|(
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_SECONDS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
comment|// Ticks will be at 5s, 10s and so on, so this count should be 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nothing pushed to cache, so nothing should be written
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// After close, another trigger should happen but still no data written
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumFailedBlockBufferFlushes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleBufferFlush ()
specifier|public
name|void
name|testSingleBufferFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|511
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// After writing 511 block no flush should happen
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
comment|// After one more block it should
name|cache
operator|.
name|put
argument_list|(
literal|512
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleBuffersFlush ()
specifier|public
name|void
name|testMultipleBuffersFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setInt
argument_list|(
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_SECONDS
argument_list|,
literal|120
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|512
condition|;
name|j
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
operator|*
literal|512
operator|+
name|j
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Flush should be triggered after every 512 block write
name|Assert
operator|.
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumIllegalDirtyLogFiles
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumFailedDirtyLogFileDeletes
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
literal|512
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleBlockFlush ()
specifier|public
name|void
name|testSingleBlockFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setInt
argument_list|(
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_SECONDS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
comment|// Ticks will be at 5s, 10s and so on, so this count should be 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 block written to cache, which should be flushed
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// After close, another trigger should happen but no data should be written
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|metrics
operator|.
name|getNumBytesDirtyLogWritten
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumFailedBlockBufferFlushes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRepeatedBlockWrites ()
specifier|public
name|void
name|testRepeatedBlockWrites
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Create a new config so that this tests write metafile to new location
name|OzoneConfiguration
name|flushTestConfig
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestBufferManager
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|flushTestConfig
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|flushTestConfig
operator|.
name|setBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
decl_stmt|;
name|CBlockTargetMetrics
name|metrics
init|=
name|CBlockTargetMetrics
operator|.
name|create
argument_list|()
decl_stmt|;
name|ContainerCacheFlusher
name|flusher
init|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|flushTestConfig
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|CBlockLocalCache
name|cache
init|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|flushTestConfig
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|createContainerAndGetPipeline
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
literal|4
operator|*
name|KB
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
literal|50
operator|*
name|GB
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Thread
name|fllushListenerThread
init|=
operator|new
name|Thread
argument_list|(
name|flusher
argument_list|)
decl_stmt|;
name|fllushListenerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fllushListenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|512
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|metrics
operator|.
name|getNumWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferUpdates
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|512
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|metrics
operator|.
name|getNumWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferUpdates
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushTriggered
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumWriteIOExceptionRetryBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getNumWriteGenericExceptionRetryBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metrics
operator|.
name|getNumBlockBufferFlushCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

