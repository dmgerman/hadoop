begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDatanodeManager
specifier|public
class|class
name|TestDatanodeManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDatanodeManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//The number of times the registration / removal of nodes should happen
DECL|field|NUM_ITERATIONS
specifier|final
name|int
name|NUM_ITERATIONS
init|=
literal|500
decl_stmt|;
comment|/**    * This test sends a random sequence of node registrations and node removals    * to the DatanodeManager (of nodes with different IDs and versions), and    * checks that the DatanodeManager keeps a correct count of different software    * versions at all times.    */
annotation|@
name|Test
DECL|method|testNumVersionsReportedCorrect ()
specifier|public
name|void
name|testNumVersionsReportedCorrect
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Create the DatanodeManager which will be tested
name|FSNamesystem
name|fsn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsn
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DatanodeManager
name|dm
init|=
operator|new
name|DatanodeManager
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockManager
operator|.
name|class
argument_list|)
argument_list|,
name|fsn
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|//Seed the RNG with a known value so test failures are easier to reproduce
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|seed
init|=
name|rng
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|rng
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using seed "
operator|+
name|seed
operator|+
literal|" for testing"
argument_list|)
expr_stmt|;
comment|//A map of the Storage IDs to the DN registration it was registered with
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatanodeRegistration
argument_list|>
name|sIdToDnReg
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatanodeRegistration
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITERATIONS
condition|;
operator|++
name|i
control|)
block|{
comment|//If true, remove a node for every 3rd time (if there's one)
if|if
condition|(
name|rng
operator|.
name|nextBoolean
argument_list|()
operator|&&
name|i
operator|%
literal|3
operator|==
literal|0
operator|&&
name|sIdToDnReg
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|//Pick a random node.
name|int
name|randomIndex
init|=
name|rng
operator|.
name|nextInt
argument_list|()
operator|%
name|sIdToDnReg
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//Iterate to that random position
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DatanodeRegistration
argument_list|>
argument_list|>
name|it
init|=
name|sIdToDnReg
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|randomIndex
operator|-
literal|1
condition|;
operator|++
name|j
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|DatanodeRegistration
name|toRemove
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing node "
operator|+
name|toRemove
operator|.
name|getDatanodeUuid
argument_list|()
operator|+
literal|" ip "
operator|+
name|toRemove
operator|.
name|getXferAddr
argument_list|()
operator|+
literal|" version : "
operator|+
name|toRemove
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|//Remove that random node
name|dm
operator|.
name|removeDatanode
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Otherwise register a node. This node may be a new / an old one
else|else
block|{
comment|//Pick a random storageID to register.
name|String
name|storageID
init|=
literal|"someStorageID"
operator|+
name|rng
operator|.
name|nextInt
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|dr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storageID
argument_list|)
expr_stmt|;
comment|//If this storageID had already been registered before
if|if
condition|(
name|sIdToDnReg
operator|.
name|containsKey
argument_list|(
name|storageID
argument_list|)
condition|)
block|{
name|dr
operator|=
name|sIdToDnReg
operator|.
name|get
argument_list|(
name|storageID
argument_list|)
expr_stmt|;
comment|//Half of the times, change the IP address
if|if
condition|(
name|rng
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|dr
operator|.
name|setIpAddr
argument_list|(
name|dr
operator|.
name|getIpAddr
argument_list|()
operator|+
literal|"newIP"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//This storageID has never been registered
comment|//Ensure IP address is unique to storageID
name|String
name|ip
init|=
literal|"someIP"
operator|+
name|storageID
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getIpAddr
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getXferAddr
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ip
operator|+
literal|":9000"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getXferPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|9000
argument_list|)
expr_stmt|;
block|}
comment|//Pick a random version to register with
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"version"
operator|+
name|rng
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering node storageID: "
operator|+
name|dr
operator|.
name|getDatanodeUuid
argument_list|()
operator|+
literal|", version: "
operator|+
name|dr
operator|.
name|getSoftwareVersion
argument_list|()
operator|+
literal|", IP address: "
operator|+
name|dr
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|//Register this random node
name|dm
operator|.
name|registerDatanode
argument_list|(
name|dr
argument_list|)
expr_stmt|;
name|sIdToDnReg
operator|.
name|put
argument_list|(
name|storageID
argument_list|,
name|dr
argument_list|)
expr_stmt|;
block|}
comment|//Verify DatanodeManager still has the right count
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapToCheck
init|=
name|dm
operator|.
name|getDatanodesSoftwareVersions
argument_list|()
decl_stmt|;
comment|//Remove counts from versions and make sure that after removing all nodes
comment|//mapToCheck is empty
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|DatanodeRegistration
argument_list|>
name|it
range|:
name|sIdToDnReg
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|ver
init|=
name|it
operator|.
name|getValue
argument_list|()
operator|.
name|getSoftwareVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mapToCheck
operator|.
name|containsKey
argument_list|(
name|ver
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The correct number of datanodes of a "
operator|+
literal|"version was not found on iteration "
operator|+
name|i
argument_list|)
throw|;
block|}
name|mapToCheck
operator|.
name|put
argument_list|(
name|ver
argument_list|,
name|mapToCheck
operator|.
name|get
argument_list|(
name|ver
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapToCheck
operator|.
name|get
argument_list|(
name|ver
argument_list|)
operator|==
literal|0
condition|)
block|{
name|mapToCheck
operator|.
name|remove
argument_list|(
name|ver
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|mapToCheck
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Still in map: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" has "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"The map of version counts returned by DatanodeManager was"
operator|+
literal|" not what it was expected to be on iteration "
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|mapToCheck
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testRejectUnresolvedDatanodes ()
specifier|public
name|void
name|testRejectUnresolvedDatanodes
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Create the DatanodeManager which will be tested
name|FSNamesystem
name|fsn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fsn
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|//Set configuration property for rejecting unresolved topology mapping
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REJECT_UNRESOLVED_DN_TOPOLOGY_MAPPING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//set TestDatanodeManager.MyResolver to be used for topology resolving
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|TestDatanodeManager
operator|.
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//create DatanodeManager
name|DatanodeManager
name|dm
init|=
operator|new
name|DatanodeManager
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockManager
operator|.
name|class
argument_list|)
argument_list|,
name|fsn
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//storageID to register.
name|String
name|storageID
init|=
literal|"someStorageID-123"
decl_stmt|;
name|DatanodeRegistration
name|dr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dr
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storageID
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Register this node
name|dm
operator|.
name|registerDatanode
argument_list|(
name|dr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an UnresolvedTopologyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedTopologyException
name|ute
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected - topology is not resolved and "
operator|+
literal|"registration is rejected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an UnresolvedTopologyException"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * MyResolver class provides resolve method which always returns null     * in order to simulate unresolved topology mapping.    */
DECL|class|MyResolver
specifier|public
specifier|static
class|class
name|MyResolver
implements|implements
name|DNSToSwitchMapping
block|{
annotation|@
name|Override
DECL|method|resolve (List<String> names)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|reloadCachedMappings ()
specifier|public
name|void
name|reloadCachedMappings
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|reloadCachedMappings (List<String> names)
specifier|public
name|void
name|reloadCachedMappings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{       }
block|}
block|}
end_class

end_unit

