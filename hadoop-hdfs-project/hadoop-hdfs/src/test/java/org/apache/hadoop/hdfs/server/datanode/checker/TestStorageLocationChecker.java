begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
operator|.
name|VolumeCheckResult
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unit tests for the {@link StorageLocationChecker} class.  */
end_comment

begin_class
DECL|class|TestStorageLocationChecker
specifier|public
class|class
name|TestStorageLocationChecker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStorageLocationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Verify that all healthy locations are correctly handled and that the    * check routine is invoked as expected.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAllLocationsHealthy ()
specifier|public
name|void
name|testAllLocationsHealthy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|makeMockLocations
argument_list|(
name|HEALTHY
argument_list|,
name|HEALTHY
argument_list|,
name|HEALTHY
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|StorageLocationChecker
name|checker
init|=
operator|new
name|StorageLocationChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|filteredLocations
init|=
name|checker
operator|.
name|check
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|)
decl_stmt|;
comment|// All locations should be healthy.
name|assertThat
argument_list|(
name|filteredLocations
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure that the check method was invoked for each location.
for|for
control|(
name|StorageLocation
name|location
range|:
name|locations
control|)
block|{
name|verify
argument_list|(
name|location
argument_list|)
operator|.
name|check
argument_list|(
name|any
argument_list|(
name|StorageLocation
operator|.
name|CheckContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test handling when the number of failed locations is below the    * max volume failure threshold.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailedLocationsBelowThreshold ()
specifier|public
name|void
name|testFailedLocationsBelowThreshold
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|makeMockLocations
argument_list|(
name|HEALTHY
argument_list|,
name|HEALTHY
argument_list|,
name|FAILED
argument_list|)
decl_stmt|;
comment|// 2 healthy, 1 failed.
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StorageLocationChecker
name|checker
init|=
operator|new
name|StorageLocationChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|filteredLocations
init|=
name|checker
operator|.
name|check
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredLocations
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test handling when the number of volume failures tolerated is the    * same as the number of volumes.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailedLocationsAboveThreshold ()
specifier|public
name|void
name|testFailedLocationsAboveThreshold
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|makeMockLocations
argument_list|(
name|HEALTHY
argument_list|,
name|FAILED
argument_list|,
name|FAILED
argument_list|)
decl_stmt|;
comment|// 1 healthy, 2 failed.
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Too many failed volumes - current valid volumes: 1,"
operator|+
literal|" volumes configured: 3, volumes failed: 2, volume failures"
operator|+
literal|" tolerated: 1"
argument_list|)
expr_stmt|;
name|StorageLocationChecker
name|checker
init|=
operator|new
name|StorageLocationChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test handling all storage locations are failed.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testBadConfiguration ()
specifier|public
name|void
name|testBadConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|makeMockLocations
argument_list|(
name|HEALTHY
argument_list|,
name|HEALTHY
argument_list|,
name|HEALTHY
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Invalid value configured"
argument_list|)
expr_stmt|;
name|StorageLocationChecker
name|checker
init|=
operator|new
name|StorageLocationChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that a {@link StorageLocation#check} timeout is correctly detected    * as a failure.    *    * This is hard to test without a {@link Thread#sleep} call.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTimeoutInCheck ()
specifier|public
name|void
name|testTimeoutInCheck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
comment|// Generate a list of storage locations the first of which sleeps
comment|// for 2 seconds in its check() routine.
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|makeSlowLocations
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StorageLocationChecker
name|checker
init|=
operator|new
name|StorageLocationChecker
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Check the two locations and ensure that only one of them
comment|// was filtered out.
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|filteredList
init|=
name|checker
operator|.
name|check
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filteredList
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|checker
operator|.
name|shutdownAndWait
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return a list of storage locations - one per argument - which return    * health check results corresponding to the supplied arguments.    */
DECL|method|makeMockLocations (VolumeCheckResult... args)
specifier|private
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|makeMockLocations
parameter_list|(
name|VolumeCheckResult
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|index
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|VolumeCheckResult
name|result
range|:
name|args
control|)
block|{
specifier|final
name|StorageLocation
name|location
init|=
name|mock
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|location
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/"
operator|+
name|index
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|location
operator|.
name|check
argument_list|(
name|any
argument_list|(
name|StorageLocation
operator|.
name|CheckContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
comment|/**    * Return a list of storage locations - one per argument - whose check()    * method takes at least the specified number of milliseconds to complete.    */
DECL|method|makeSlowLocations (long... args)
specifier|private
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|makeSlowLocations
parameter_list|(
name|long
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|index
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|long
name|checkDelayMs
range|:
name|args
control|)
block|{
specifier|final
name|StorageLocation
name|location
init|=
name|mock
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|location
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/"
operator|+
name|index
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|location
operator|.
name|check
argument_list|(
name|any
argument_list|(
name|StorageLocation
operator|.
name|CheckContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VolumeCheckResult
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|checkDelayMs
argument_list|)
expr_stmt|;
return|return
name|VolumeCheckResult
operator|.
name|HEALTHY
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
block|}
end_class

end_unit

