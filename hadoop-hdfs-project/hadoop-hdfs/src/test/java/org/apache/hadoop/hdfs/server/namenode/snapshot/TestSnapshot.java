begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
operator|.
name|TestDirectoryTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
operator|.
name|TestDirectoryTree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|OfflineImageViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|XmlImageVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * This class tests snapshot functionality. One or multiple snapshots are  * created. The snapshotted directory is changed and verification is done to  * ensure snapshots remain unchanges.  */
end_comment

begin_class
DECL|class|TestSnapshot
specifier|public
class|class
name|TestSnapshot
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|INode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|disableLogs
parameter_list|()
constructor_decl|;
block|}
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
decl_stmt|;
DECL|field|random
specifier|private
specifier|static
specifier|final
name|Random
name|random
decl_stmt|;
static|static
block|{
name|seed
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Random seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|field|REPLICATION
specifier|protected
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
comment|/** The number of times snapshots are created for a snapshottable directory */
DECL|field|SNAPSHOT_ITERATION_NUMBER
specifier|public
specifier|static
specifier|final
name|int
name|SNAPSHOT_ITERATION_NUMBER
init|=
literal|20
decl_stmt|;
comment|/** Height of directory tree used for testing */
DECL|field|DIRECTORY_TREE_LEVEL
specifier|public
specifier|static
specifier|final
name|int
name|DIRECTORY_TREE_LEVEL
init|=
literal|5
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|protected
specifier|static
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsdir
specifier|protected
specifier|static
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|hdfs
specifier|protected
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * The list recording all previous snapshots. Each element in the array    * records a snapshot root.    */
DECL|field|snapshotList
specifier|protected
specifier|static
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|snapshotList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Check {@link SnapshotTestHelper.TestDirectoryTree}    */
DECL|field|dirTree
specifier|private
name|TestDirectoryTree
name|dirTree
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dirTree
operator|=
operator|new
name|TestDirectoryTree
argument_list|(
name|DIRECTORY_TREE_LEVEL
argument_list|,
name|hdfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|modificationCount
specifier|static
name|int
name|modificationCount
init|=
literal|0
decl_stmt|;
comment|/**    * Make changes (modification, deletion, creation) to the current files/dir.    * Then check if the previous snapshots are still correct.    *     * @param modifications Modifications that to be applied to the current dir.    */
DECL|method|modifyCurrentDirAndCheckSnapshots (Modification[] modifications)
specifier|private
name|void
name|modifyCurrentDirAndCheckSnapshots
parameter_list|(
name|Modification
index|[]
name|modifications
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Modification
name|modification
range|:
name|modifications
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|++
name|modificationCount
operator|+
literal|") "
operator|+
name|modification
argument_list|)
expr_stmt|;
name|modification
operator|.
name|loadSnapshots
argument_list|()
expr_stmt|;
name|modification
operator|.
name|modify
argument_list|()
expr_stmt|;
name|modification
operator|.
name|checkSnapshots
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create two snapshots in each iteration. Each time we will create a snapshot    * for the top node, then randomly pick a dir in the tree and create    * snapshot for it.    *     * Finally check the snapshots are created correctly.    */
DECL|method|createSnapshots ()
specifier|protected
name|TestDirectoryTree
operator|.
name|Node
index|[]
name|createSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|TestDirectoryTree
operator|.
name|Node
index|[]
name|nodes
init|=
operator|new
name|TestDirectoryTree
operator|.
name|Node
index|[
literal|2
index|]
decl_stmt|;
comment|// Each time we will create a snapshot for the top level dir
name|Path
name|root
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dirTree
operator|.
name|topNode
operator|.
name|nodePath
argument_list|,
name|nextSnapshotName
argument_list|()
argument_list|)
decl_stmt|;
name|snapshotList
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|nodes
index|[
literal|0
index|]
operator|=
name|dirTree
operator|.
name|topNode
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|checkSnapshotCreation
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
name|nodes
index|[
literal|0
index|]
operator|.
name|nodePath
argument_list|)
expr_stmt|;
comment|// Then randomly pick one dir from the tree (cannot be the top node) and
comment|// create snapshot for it
name|ArrayList
argument_list|<
name|TestDirectoryTree
operator|.
name|Node
argument_list|>
name|excludedList
init|=
operator|new
name|ArrayList
argument_list|<
name|TestDirectoryTree
operator|.
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|excludedList
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nodes
index|[
literal|1
index|]
operator|=
name|dirTree
operator|.
name|getRandomDirNode
argument_list|(
name|random
argument_list|,
name|excludedList
argument_list|)
expr_stmt|;
name|root
operator|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|nodes
index|[
literal|1
index|]
operator|.
name|nodePath
argument_list|,
name|nextSnapshotName
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotList
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|checkSnapshotCreation
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
name|nodes
index|[
literal|1
index|]
operator|.
name|nodePath
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
DECL|method|getDumpTreeFile (String dir, String suffix)
specifier|private
name|File
name|getDumpTreeFile
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"dumptree_%s"
argument_list|,
name|suffix
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Restart the cluster to check edit log applying and fsimage saving/loading    */
DECL|method|checkFSImage ()
specifier|private
name|void
name|checkFSImage
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|fsnBefore
init|=
name|getDumpTreeFile
argument_list|(
name|testDir
argument_list|,
literal|"before"
argument_list|)
decl_stmt|;
name|File
name|fsnMiddle
init|=
name|getDumpTreeFile
argument_list|(
name|testDir
argument_list|,
literal|"middle"
argument_list|)
decl_stmt|;
name|File
name|fsnAfter
init|=
name|getDumpTreeFile
argument_list|(
name|testDir
argument_list|,
literal|"after"
argument_list|)
decl_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnBefore
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// later check fsnMiddle to see if the edit log is applied correctly
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnMiddle
argument_list|)
expr_stmt|;
comment|// save namespace and restart cluster
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// dump the namespace loaded from fsimage
name|SnapshotTestHelper
operator|.
name|dumpTree2File
argument_list|(
name|fsdir
argument_list|,
name|fsnAfter
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|compareDumpedTreeInFile
argument_list|(
name|fsnBefore
argument_list|,
name|fsnMiddle
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|compareDumpedTreeInFile
argument_list|(
name|fsnBefore
argument_list|,
name|fsnAfter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Main test, where we will go in the following loop:    *<pre>    *    Create snapshot and check the creation<--+      * -> Change the current/live files/dir         |     * -> Check previous snapshots -----------------+    *</pre>    */
annotation|@
name|Test
DECL|method|testSnapshot ()
specifier|public
name|void
name|testSnapshot
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|runTestSnapshot
argument_list|(
name|SNAPSHOT_ITERATION_NUMBER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|SnapshotTestHelper
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FAILED"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree
argument_list|(
literal|"FAILED"
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Test if the OfflineImageViewer can correctly parse a fsimage containing    * snapshots    */
annotation|@
name|Test
DECL|method|testOfflineImageViewer ()
specifier|public
name|void
name|testOfflineImageViewer
parameter_list|()
throws|throws
name|Throwable
block|{
name|runTestSnapshot
argument_list|(
name|SNAPSHOT_ITERATION_NUMBER
argument_list|)
expr_stmt|;
comment|// retrieve the fsimage. Note that we already save namespace to fsimage at
comment|// the end of each iteration of runTestSnapshot.
name|File
name|originalFsimage
init|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|,
name|originalFsimage
argument_list|)
expr_stmt|;
name|String
name|ROOT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|ROOT
argument_list|,
literal|"/image"
argument_list|)
decl_stmt|;
name|String
name|xmlImage
init|=
name|ROOT
operator|+
literal|"/image_xml"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|copyFile
argument_list|(
name|originalFsimage
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|XmlImageVisitor
name|v
init|=
operator|new
name|XmlImageVisitor
argument_list|(
name|xmlImage
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|OfflineImageViewer
name|oiv
init|=
operator|new
name|OfflineImageViewer
argument_list|(
name|testFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|v
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|oiv
operator|.
name|go
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|testFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|testFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// delete the xml file if the parsing is successful
if|if
condition|(
name|success
condition|)
block|{
name|File
name|xmlImageFile
init|=
operator|new
name|File
argument_list|(
name|xmlImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlImageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|xmlImageFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|runTestSnapshot (int iteration)
specifier|private
name|void
name|runTestSnapshot
parameter_list|(
name|int
name|iteration
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iteration
condition|;
name|i
operator|++
control|)
block|{
comment|// create snapshot and check the creation
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setAllowNestedSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TestDirectoryTree
operator|.
name|Node
index|[]
name|ssNodes
init|=
name|createSnapshots
argument_list|()
decl_stmt|;
comment|// prepare the modifications for the snapshotted dirs
comment|// we cover the following directories: top, new, and a random
name|ArrayList
argument_list|<
name|TestDirectoryTree
operator|.
name|Node
argument_list|>
name|excludedList
init|=
operator|new
name|ArrayList
argument_list|<
name|TestDirectoryTree
operator|.
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|TestDirectoryTree
operator|.
name|Node
index|[]
name|modNodes
init|=
operator|new
name|TestDirectoryTree
operator|.
name|Node
index|[
name|ssNodes
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|ssNodes
operator|.
name|length
condition|;
name|n
operator|++
control|)
block|{
name|modNodes
index|[
name|n
index|]
operator|=
name|ssNodes
index|[
name|n
index|]
expr_stmt|;
name|excludedList
operator|.
name|add
argument_list|(
name|ssNodes
index|[
name|n
index|]
argument_list|)
expr_stmt|;
block|}
name|modNodes
index|[
name|modNodes
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|dirTree
operator|.
name|getRandomDirNode
argument_list|(
name|random
argument_list|,
name|excludedList
argument_list|)
expr_stmt|;
name|Modification
index|[]
name|mods
init|=
name|prepareModifications
argument_list|(
name|modNodes
argument_list|)
decl_stmt|;
comment|// make changes to the directories/files
name|modifyCurrentDirAndCheckSnapshots
argument_list|(
name|mods
argument_list|)
expr_stmt|;
comment|// also update the metadata of directories
name|TestDirectoryTree
operator|.
name|Node
name|chmodDir
init|=
name|dirTree
operator|.
name|getRandomDirNode
argument_list|(
name|random
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Modification
name|chmod
init|=
operator|new
name|FileChangePermission
argument_list|(
name|chmodDir
operator|.
name|nodePath
argument_list|,
name|hdfs
argument_list|,
name|genRandomPermission
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|userGroup
init|=
name|genRandomOwner
argument_list|()
decl_stmt|;
name|TestDirectoryTree
operator|.
name|Node
name|chownDir
init|=
name|dirTree
operator|.
name|getRandomDirNode
argument_list|(
name|random
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|chmodDir
argument_list|)
argument_list|)
decl_stmt|;
name|Modification
name|chown
init|=
operator|new
name|FileChown
argument_list|(
name|chownDir
operator|.
name|nodePath
argument_list|,
name|hdfs
argument_list|,
name|userGroup
index|[
literal|0
index|]
argument_list|,
name|userGroup
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|modifyCurrentDirAndCheckSnapshots
argument_list|(
operator|new
name|Modification
index|[]
block|{
name|chmod
block|,
name|chown
block|}
argument_list|)
expr_stmt|;
comment|// check fsimage saving/loading
name|checkFSImage
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A simple test that updates a sub-directory of a snapshottable directory    * with snapshots    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateDirectory ()
specifier|public
name|void
name|testUpdateDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|Path
name|subFile
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|FileStatus
name|oldStatus
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|sub
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|sub
argument_list|,
literal|100L
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|Path
name|snapshotPath
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|FileStatus
name|snapshotStatus
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oldStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|snapshotStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|snapshotStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creating a snapshot with illegal name    */
annotation|@
name|Test
DECL|method|testCreateSnapshotWithIllegalName ()
specifier|public
name|void
name|testCreateSnapshotWithIllegalName
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name1
init|=
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected when an illegal name is given"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|String
name|errorMsg
init|=
literal|"\""
operator|+
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
literal|"\" is a reserved name."
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|errorMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
name|errorMsg
init|=
literal|"Snapshot name cannot contain \""
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"\""
decl_stmt|;
specifier|final
name|String
index|[]
name|badNames
init|=
operator|new
name|String
index|[]
block|{
literal|"foo"
operator|+
name|Path
operator|.
name|SEPARATOR
block|,
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"foo"
block|,
name|Path
operator|.
name|SEPARATOR
block|,
literal|"foo"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"bar"
block|}
decl_stmt|;
for|for
control|(
name|String
name|badName
range|:
name|badNames
control|)
block|{
try|try
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|badName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected when an illegal name is given"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|errorMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creating snapshots for a directory that is not snapshottable must fail.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSnapshottableDirectory ()
specifier|public
name|void
name|testSnapshottableDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot/sub"
argument_list|)
decl_stmt|;
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected: "
operator|+
name|dir
operator|+
literal|" is not snapshottable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected: "
operator|+
name|dir
operator|+
literal|" is not a snapshottale dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hdfs
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected: "
operator|+
name|dir
operator|+
literal|" is not a snapshottale dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test multiple calls of allowSnapshot and disallowSnapshot, to make sure     * they are idempotent    */
annotation|@
name|Test
DECL|method|testAllowAndDisallowSnapshot ()
specifier|public
name|void
name|testAllowAndDisallowSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|INodeDirectory
name|dirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|dirNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dirNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
comment|// call allowSnapshot again
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dirNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
comment|// disallowSnapshot on dir
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dirNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
comment|// do it again
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dirNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dirNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
comment|// same process on root
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|INodeDirectory
name|rootNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
comment|// root is snapshottable dir, but with 0 snapshot quota
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|rootNode
operator|)
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rootNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeDirectorySnapshottable
operator|.
name|SNAPSHOT_LIMIT
argument_list|,
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|rootNode
operator|)
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// call allowSnapshot again
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rootNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeDirectorySnapshottable
operator|.
name|SNAPSHOT_LIMIT
argument_list|,
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|rootNode
operator|)
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// disallowSnapshot on dir
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rootNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|rootNode
operator|)
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
comment|// do it again
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|rootNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rootNode
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|rootNode
operator|)
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare a list of modifications. A modification may be a file creation,    * file deletion, or a modification operation such as appending to an existing    * file.    */
DECL|method|prepareModifications (TestDirectoryTree.Node[] nodes)
specifier|private
name|Modification
index|[]
name|prepareModifications
parameter_list|(
name|TestDirectoryTree
operator|.
name|Node
index|[]
name|nodes
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Modification
argument_list|>
name|mList
init|=
operator|new
name|ArrayList
argument_list|<
name|Modification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TestDirectoryTree
operator|.
name|Node
name|node
range|:
name|nodes
control|)
block|{
comment|// If the node does not have files in it, create files
if|if
condition|(
name|node
operator|.
name|fileList
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|initFileList
argument_list|(
name|hdfs
argument_list|,
name|node
operator|.
name|nodePath
operator|.
name|getName
argument_list|()
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Modification iterations are as follows:
comment|// Iteration 0 - create:fileList[5], delete:fileList[0],
comment|//               append:fileList[1], chmod:fileList[2],
comment|//               chown:fileList[3],  change_replication:fileList[4].
comment|//               Set nullFileIndex to 0
comment|//
comment|// Iteration 1 - create:fileList[0], delete:fileList[1],
comment|//               append:fileList[2], chmod:fileList[3],
comment|//               chown:fileList[4],  change_replication:fileList[5]
comment|//               Set nullFileIndex to 1
comment|//
comment|// Iteration 2 - create:fileList[1], delete:fileList[2],
comment|//               append:fileList[3], chmod:fileList[4],
comment|//               chown:fileList[5],  change_replication:fileList[6]
comment|//               Set nullFileIndex to 2
comment|// ...
comment|//
name|Modification
name|create
init|=
operator|new
name|FileCreation
argument_list|(
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
name|node
operator|.
name|nullFileIndex
argument_list|)
argument_list|,
name|hdfs
argument_list|,
operator|(
name|int
operator|)
name|BLOCKSIZE
argument_list|)
decl_stmt|;
name|Modification
name|delete
init|=
operator|new
name|FileDeletion
argument_list|(
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|1
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|hdfs
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|2
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Modification
name|append
init|=
operator|new
name|FileAppend
argument_list|(
name|f
argument_list|,
name|hdfs
argument_list|,
name|BLOCKSIZE
argument_list|)
decl_stmt|;
name|FileAppendNotClose
name|appendNotClose
init|=
operator|new
name|FileAppendNotClose
argument_list|(
name|f
argument_list|,
name|hdfs
argument_list|,
name|BLOCKSIZE
argument_list|)
decl_stmt|;
name|Modification
name|appendClose
init|=
operator|new
name|FileAppendClose
argument_list|(
name|f
argument_list|,
name|hdfs
argument_list|,
name|BLOCKSIZE
argument_list|,
name|appendNotClose
argument_list|)
decl_stmt|;
name|Modification
name|chmod
init|=
operator|new
name|FileChangePermission
argument_list|(
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|3
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|hdfs
argument_list|,
name|genRandomPermission
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|userGroup
init|=
name|genRandomOwner
argument_list|()
decl_stmt|;
name|Modification
name|chown
init|=
operator|new
name|FileChown
argument_list|(
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|4
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|hdfs
argument_list|,
name|userGroup
index|[
literal|0
index|]
argument_list|,
name|userGroup
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Modification
name|replication
init|=
operator|new
name|FileChangeReplication
argument_list|(
name|node
operator|.
name|fileList
operator|.
name|get
argument_list|(
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|5
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|hdfs
argument_list|,
call|(
name|short
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|REPLICATION
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|.
name|nullFileIndex
operator|=
operator|(
name|node
operator|.
name|nullFileIndex
operator|+
literal|1
operator|)
operator|%
name|node
operator|.
name|fileList
operator|.
name|size
argument_list|()
expr_stmt|;
name|Modification
name|dirChange
init|=
operator|new
name|DirCreationOrDeletion
argument_list|(
name|node
operator|.
name|nodePath
argument_list|,
name|hdfs
argument_list|,
name|node
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
comment|// dir rename
name|Node
name|dstParent
init|=
name|dirTree
operator|.
name|getRandomDirNode
argument_list|(
name|random
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
argument_list|)
decl_stmt|;
name|Modification
name|dirRename
init|=
operator|new
name|DirRename
argument_list|(
name|node
operator|.
name|nodePath
argument_list|,
name|hdfs
argument_list|,
name|node
argument_list|,
name|dstParent
argument_list|)
decl_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|appendNotClose
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|appendClose
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|chmod
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|chown
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|replication
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|dirChange
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|dirRename
argument_list|)
expr_stmt|;
block|}
return|return
name|mList
operator|.
name|toArray
argument_list|(
operator|new
name|Modification
index|[
name|mList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * @return A random FsPermission    */
DECL|method|genRandomPermission ()
specifier|private
name|FsPermission
name|genRandomPermission
parameter_list|()
block|{
comment|// randomly select between "rwx" and "rw-"
name|FsAction
name|u
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|FsAction
operator|.
name|ALL
else|:
name|FsAction
operator|.
name|READ_WRITE
decl_stmt|;
name|FsAction
name|g
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|FsAction
operator|.
name|ALL
else|:
name|FsAction
operator|.
name|READ_WRITE
decl_stmt|;
name|FsAction
name|o
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|FsAction
operator|.
name|ALL
else|:
name|FsAction
operator|.
name|READ_WRITE
decl_stmt|;
return|return
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|)
return|;
block|}
comment|/**    * @return A string array containing two string: the first string indicates    *         the owner, and the other indicates the group    */
DECL|method|genRandomOwner ()
specifier|private
name|String
index|[]
name|genRandomOwner
parameter_list|()
block|{
name|String
index|[]
name|userGroup
init|=
operator|new
name|String
index|[]
block|{
literal|"dr.who"
block|,
literal|"unknown"
block|}
decl_stmt|;
return|return
name|userGroup
return|;
block|}
DECL|field|snapshotCount
specifier|private
specifier|static
name|int
name|snapshotCount
init|=
literal|0
decl_stmt|;
comment|/** @return The next snapshot name */
DECL|method|nextSnapshotName ()
specifier|static
name|String
name|nextSnapshotName
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"s-%d"
argument_list|,
operator|++
name|snapshotCount
argument_list|)
return|;
block|}
comment|/**    * Base class to present changes applied to current file/dir. A modification    * can be file creation, deletion, or other modifications such as appending on    * an existing file. Three abstract methods need to be implemented by    * subclasses: loadSnapshots() captures the states of snapshots before the    * modification, modify() applies the modification to the current directory,    * and checkSnapshots() verifies the snapshots do not change after the    * modification.    */
DECL|class|Modification
specifier|static
specifier|abstract
class|class
name|Modification
block|{
DECL|field|file
specifier|protected
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|fs
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|Modification (Path file, FileSystem fs, String type)
name|Modification
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|loadSnapshots ()
specifier|abstract
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|modify ()
specifier|abstract
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|checkSnapshots ()
specifier|abstract
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":"
operator|+
name|type
operator|+
literal|":"
operator|+
name|file
return|;
block|}
block|}
comment|/**    * Modifications that change the file status. We check the FileStatus of    * snapshot files before/after the modification.    */
DECL|class|FileStatusChange
specifier|static
specifier|abstract
class|class
name|FileStatusChange
extends|extends
name|Modification
block|{
DECL|field|statusMap
specifier|protected
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|statusMap
decl_stmt|;
DECL|method|FileStatusChange (Path file, FileSystem fs, String type)
name|FileStatusChange
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|statusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|)
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotFile
range|:
name|statusMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|FileStatus
name|currentStatus
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
else|:
literal|null
decl_stmt|;
name|FileStatus
name|originalStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentStatus
argument_list|,
name|originalStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentStatus
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|currentStatus
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|originalStatus
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|s
operator|=
literal|"FAILED: "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": file="
operator|+
name|file
operator|+
literal|", snapshotFile"
operator|+
name|snapshotFile
operator|+
literal|"\n\n currentStatus = "
operator|+
name|currentStatus
operator|+
literal|"\noriginalStatus = "
operator|+
name|originalStatus
operator|+
literal|"\n\nfile        : "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
operator|+
literal|"\n\nsnapshotFile: "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|snapshotFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree
argument_list|(
name|s
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|s
argument_list|,
name|currentStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|originalStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Change the file permission    */
DECL|class|FileChangePermission
specifier|static
class|class
name|FileChangePermission
extends|extends
name|FileStatusChange
block|{
DECL|field|newPermission
specifier|private
specifier|final
name|FsPermission
name|newPermission
decl_stmt|;
DECL|method|FileChangePermission (Path file, FileSystem fs, FsPermission newPermission)
name|FileChangePermission
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FsPermission
name|newPermission
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"chmod"
argument_list|)
expr_stmt|;
name|this
operator|.
name|newPermission
operator|=
name|newPermission
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|file
argument_list|,
name|newPermission
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Change the replication factor of file    */
DECL|class|FileChangeReplication
specifier|static
class|class
name|FileChangeReplication
extends|extends
name|FileStatusChange
block|{
DECL|field|newReplication
specifier|private
specifier|final
name|short
name|newReplication
decl_stmt|;
DECL|method|FileChangeReplication (Path file, FileSystem fs, short replication)
name|FileChangeReplication
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"replication"
argument_list|)
expr_stmt|;
name|this
operator|.
name|newReplication
operator|=
name|replication
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Change the owner:group of a file    */
DECL|class|FileChown
specifier|static
class|class
name|FileChown
extends|extends
name|FileStatusChange
block|{
DECL|field|newUser
specifier|private
specifier|final
name|String
name|newUser
decl_stmt|;
DECL|field|newGroup
specifier|private
specifier|final
name|String
name|newGroup
decl_stmt|;
DECL|method|FileChown (Path file, FileSystem fs, String user, String group)
name|FileChown
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"chown"
argument_list|)
expr_stmt|;
name|this
operator|.
name|newUser
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|newGroup
operator|=
name|group
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|file
argument_list|,
name|newUser
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Appending a specified length to an existing file    */
DECL|class|FileAppend
specifier|static
class|class
name|FileAppend
extends|extends
name|Modification
block|{
DECL|field|appendLen
specifier|final
name|int
name|appendLen
decl_stmt|;
DECL|field|snapshotFileLengthMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
name|snapshotFileLengthMap
decl_stmt|;
DECL|method|FileAppend (Path file, FileSystem fs, int len)
name|FileAppend
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"append"
argument_list|)
expr_stmt|;
name|this
operator|.
name|appendLen
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|snapshotFileLengthMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFile
operator|!=
literal|null
condition|)
block|{
name|long
name|snapshotFileLen
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
operator|.
name|getLen
argument_list|()
else|:
operator|-
literal|1L
decl_stmt|;
name|snapshotFileLengthMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|snapshotFileLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|appendLen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|Path
name|snapshotFile
range|:
name|snapshotFileLengthMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|long
name|currentSnapshotFileLen
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
operator|.
name|getLen
argument_list|()
else|:
operator|-
literal|1L
decl_stmt|;
name|long
name|originalSnapshotFileLen
init|=
name|snapshotFileLengthMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentSnapshotFileLen
operator|!=
name|originalSnapshotFileLen
condition|)
block|{
name|s
operator|=
literal|"FAILED: "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": file="
operator|+
name|file
operator|+
literal|", snapshotFile"
operator|+
name|snapshotFile
operator|+
literal|"\n\n currentSnapshotFileLen = "
operator|+
name|currentSnapshotFileLen
operator|+
literal|"\noriginalSnapshotFileLen = "
operator|+
name|originalSnapshotFileLen
operator|+
literal|"\n\nfile        : "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
operator|+
literal|"\n\nsnapshotFile: "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|snapshotFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree
argument_list|(
name|s
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|s
argument_list|,
name|originalSnapshotFileLen
argument_list|,
name|currentSnapshotFileLen
argument_list|)
expr_stmt|;
comment|// Read the snapshot file out of the boundary
if|if
condition|(
name|currentSnapshotFileLen
operator|!=
operator|-
literal|1L
operator|&&
operator|!
operator|(
name|this
operator|instanceof
name|FileAppendNotClose
operator|)
condition|)
block|{
name|FSDataInputStream
name|input
init|=
name|fs
operator|.
name|open
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
name|input
operator|.
name|read
argument_list|(
name|currentSnapshotFileLen
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLen
operator|!=
operator|-
literal|1
condition|)
block|{
name|s
operator|=
literal|"FAILED: "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": file="
operator|+
name|file
operator|+
literal|", snapshotFile"
operator|+
name|snapshotFile
operator|+
literal|"\n\n currentSnapshotFileLen = "
operator|+
name|currentSnapshotFileLen
operator|+
literal|"\n                readLen = "
operator|+
name|readLen
operator|+
literal|"\n\nfile        : "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
operator|+
literal|"\n\nsnapshotFile: "
operator|+
name|fsdir
operator|.
name|getINode
argument_list|(
name|snapshotFile
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toDetailString
argument_list|()
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|dumpTree
argument_list|(
name|s
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|s
argument_list|,
operator|-
literal|1
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Appending a specified length to an existing file but not close the file    */
DECL|class|FileAppendNotClose
specifier|static
class|class
name|FileAppendNotClose
extends|extends
name|FileAppend
block|{
DECL|field|out
name|HdfsDataOutputStream
name|out
decl_stmt|;
DECL|method|FileAppendNotClose (Path file, FileSystem fs, int len)
name|FileAppendNotClose
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|toAppend
init|=
operator|new
name|byte
index|[
name|appendLen
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
name|out
operator|=
operator|(
name|HdfsDataOutputStream
operator|)
name|fs
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|HdfsDataOutputStream
operator|.
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Appending a specified length to an existing file    */
DECL|class|FileAppendClose
specifier|static
class|class
name|FileAppendClose
extends|extends
name|FileAppend
block|{
DECL|field|fileAppendNotClose
specifier|final
name|FileAppendNotClose
name|fileAppendNotClose
decl_stmt|;
DECL|method|FileAppendClose (Path file, FileSystem fs, int len, FileAppendNotClose fileAppendNotClose)
name|FileAppendClose
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|,
name|FileAppendNotClose
name|fileAppendNotClose
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileAppendNotClose
operator|=
name|fileAppendNotClose
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|toAppend
init|=
operator|new
name|byte
index|[
name|appendLen
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
name|fileAppendNotClose
operator|.
name|out
operator|.
name|write
argument_list|(
name|toAppend
argument_list|)
expr_stmt|;
name|fileAppendNotClose
operator|.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * New file creation    */
DECL|class|FileCreation
specifier|static
class|class
name|FileCreation
extends|extends
name|Modification
block|{
DECL|field|fileLen
specifier|final
name|int
name|fileLen
decl_stmt|;
DECL|field|fileStatusMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|fileStatusMap
decl_stmt|;
DECL|method|FileCreation (Path file, FileSystem fs, int len)
name|FileCreation
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"creation"
argument_list|)
expr_stmt|;
assert|assert
name|len
operator|>=
literal|0
assert|;
name|this
operator|.
name|fileLen
operator|=
name|len
expr_stmt|;
name|fileStatusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFile
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
else|:
literal|null
decl_stmt|;
name|fileStatusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFile
operator|!=
literal|null
condition|)
block|{
name|boolean
name|computed
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
if|if
condition|(
name|computed
condition|)
block|{
name|FileStatus
name|currentSnapshotStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|FileStatus
name|originalStatus
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
comment|// We compare the string because it contains all the information,
comment|// while FileStatus#equals only compares the path
name|assertEquals
argument_list|(
name|currentSnapshotStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|originalStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * File deletion    */
DECL|class|FileDeletion
specifier|static
class|class
name|FileDeletion
extends|extends
name|Modification
block|{
DECL|field|snapshotFileExistenceMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
name|snapshotFileExistenceMap
decl_stmt|;
DECL|method|FileDeletion (Path file, FileSystem fs)
name|FileDeletion
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"deletion"
argument_list|)
expr_stmt|;
name|snapshotFileExistenceMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|boolean
name|existence
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|snapshotFileExistenceMap
operator|.
name|put
argument_list|(
name|snapshotRoot
argument_list|,
name|existence
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|boolean
name|currentSnapshotFileExist
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|file
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|originalSnapshotFileExist
init|=
name|snapshotFileExistenceMap
operator|.
name|get
argument_list|(
name|snapshotRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentSnapshotFileExist
argument_list|,
name|originalSnapshotFileExist
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Directory creation or deletion.    */
DECL|class|DirCreationOrDeletion
class|class
name|DirCreationOrDeletion
extends|extends
name|Modification
block|{
DECL|field|node
specifier|private
specifier|final
name|TestDirectoryTree
operator|.
name|Node
name|node
decl_stmt|;
DECL|field|isCreation
specifier|private
specifier|final
name|boolean
name|isCreation
decl_stmt|;
DECL|field|changedPath
specifier|private
specifier|final
name|Path
name|changedPath
decl_stmt|;
DECL|field|statusMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|statusMap
decl_stmt|;
DECL|method|DirCreationOrDeletion (Path file, FileSystem fs, TestDirectoryTree.Node node, boolean isCreation)
name|DirCreationOrDeletion
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TestDirectoryTree
operator|.
name|Node
name|node
parameter_list|,
name|boolean
name|isCreation
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"dircreation"
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
comment|// If the node's nonSnapshotChildren is empty, we still need to create
comment|// sub-directories
name|this
operator|.
name|isCreation
operator|=
name|isCreation
operator|||
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isCreation
condition|)
block|{
comment|// Generate the path for the dir to be created
name|changedPath
operator|=
operator|new
name|Path
argument_list|(
name|node
operator|.
name|nodePath
argument_list|,
literal|"sub"
operator|+
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If deletion, we delete the current last dir in nonSnapshotChildren
name|changedPath
operator|=
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|get
argument_list|(
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|nodePath
expr_stmt|;
block|}
name|this
operator|.
name|statusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotDir
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|changedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotDir
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotDir
argument_list|)
else|:
literal|null
decl_stmt|;
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotDir
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// In each non-snapshottable directory, we also create a file. Thus
comment|// here we also need to check the file's status before/after taking
comment|// snapshots
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|status
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
else|:
literal|null
expr_stmt|;
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isCreation
condition|)
block|{
comment|// creation
name|TestDirectoryTree
operator|.
name|Node
name|newChild
init|=
operator|new
name|TestDirectoryTree
operator|.
name|Node
argument_list|(
name|changedPath
argument_list|,
name|node
operator|.
name|level
operator|+
literal|1
argument_list|,
name|node
argument_list|,
name|hdfs
argument_list|)
decl_stmt|;
comment|// create file under the new non-snapshottable directory
name|newChild
operator|.
name|initFileList
argument_list|(
name|hdfs
argument_list|,
name|node
operator|.
name|nodePath
operator|.
name|getName
argument_list|()
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|add
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// deletion
name|TestDirectoryTree
operator|.
name|Node
name|childToDelete
init|=
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|remove
argument_list|(
name|node
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|childToDelete
operator|.
name|nodePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshot
range|:
name|statusMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|FileStatus
name|currentStatus
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshot
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshot
argument_list|)
else|:
literal|null
decl_stmt|;
name|FileStatus
name|originalStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentStatus
argument_list|,
name|originalStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentStatus
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|currentStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|originalStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Directory creation or deletion.    */
DECL|class|DirRename
class|class
name|DirRename
extends|extends
name|Modification
block|{
DECL|field|srcParent
specifier|private
specifier|final
name|TestDirectoryTree
operator|.
name|Node
name|srcParent
decl_stmt|;
DECL|field|dstParent
specifier|private
specifier|final
name|TestDirectoryTree
operator|.
name|Node
name|dstParent
decl_stmt|;
DECL|field|srcPath
specifier|private
specifier|final
name|Path
name|srcPath
decl_stmt|;
DECL|field|dstPath
specifier|private
specifier|final
name|Path
name|dstPath
decl_stmt|;
DECL|field|statusMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|statusMap
decl_stmt|;
DECL|method|DirRename (Path file, FileSystem fs, TestDirectoryTree.Node src, TestDirectoryTree.Node dst)
name|DirRename
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TestDirectoryTree
operator|.
name|Node
name|src
parameter_list|,
name|TestDirectoryTree
operator|.
name|Node
name|dst
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"dirrename"
argument_list|)
expr_stmt|;
name|this
operator|.
name|srcParent
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|dstParent
operator|=
name|dst
expr_stmt|;
name|dstPath
operator|=
operator|new
name|Path
argument_list|(
name|dstParent
operator|.
name|nodePath
argument_list|,
literal|"sub"
operator|+
name|dstParent
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the srcParent's nonSnapshotChildren is empty, we need to create
comment|// sub-directories
if|if
condition|(
name|srcParent
operator|.
name|nonSnapshotChildren
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|srcParent
operator|.
name|nodePath
argument_list|,
literal|"sub"
operator|+
name|srcParent
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// creation
name|TestDirectoryTree
operator|.
name|Node
name|newChild
init|=
operator|new
name|TestDirectoryTree
operator|.
name|Node
argument_list|(
name|srcPath
argument_list|,
name|srcParent
operator|.
name|level
operator|+
literal|1
argument_list|,
name|srcParent
argument_list|,
name|hdfs
argument_list|)
decl_stmt|;
comment|// create file under the new non-snapshottable directory
name|newChild
operator|.
name|initFileList
argument_list|(
name|hdfs
argument_list|,
name|srcParent
operator|.
name|nodePath
operator|.
name|getName
argument_list|()
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|srcParent
operator|.
name|nonSnapshotChildren
operator|.
name|add
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|srcParent
operator|.
name|nodePath
argument_list|,
literal|"sub"
operator|+
operator|(
name|srcParent
operator|.
name|nonSnapshotChildren
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|statusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotDir
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotFile
argument_list|(
name|snapshotRoot
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotDir
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotDir
argument_list|)
else|:
literal|null
decl_stmt|;
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotDir
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// In each non-snapshottable directory, we also create a file. Thus
comment|// here we also need to check the file's status before/after taking
comment|// snapshots
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|status
operator|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
else|:
literal|null
expr_stmt|;
name|statusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|hdfs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|TestDirectoryTree
operator|.
name|Node
name|newDstChild
init|=
operator|new
name|TestDirectoryTree
operator|.
name|Node
argument_list|(
name|dstPath
argument_list|,
name|dstParent
operator|.
name|level
operator|+
literal|1
argument_list|,
name|dstParent
argument_list|,
name|hdfs
argument_list|)
decl_stmt|;
name|dstParent
operator|.
name|nonSnapshotChildren
operator|.
name|add
argument_list|(
name|newDstChild
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshot
range|:
name|statusMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|FileStatus
name|currentStatus
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshot
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshot
argument_list|)
else|:
literal|null
decl_stmt|;
name|FileStatus
name|originalStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentStatus
argument_list|,
name|originalStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentStatus
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|currentStatus
operator|.
name|toString
argument_list|()
argument_list|,
name|originalStatus
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

