begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * This class tests snapshot functionality. One or multiple snapshots are  * created. The snapshotted directory is changed and verification is done to  * ensure snapshots remain unchanges.  */
end_comment

begin_class
DECL|class|TestSnapshot
specifier|public
class|class
name|TestSnapshot
block|{
DECL|field|seed
specifier|protected
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|protected
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|protected
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|SNAPSHOTNUMBER
specifier|public
specifier|static
specifier|final
name|int
name|SNAPSHOTNUMBER
init|=
literal|10
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|subsub1
specifier|private
specifier|final
name|Path
name|subsub1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"subsub1"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|protected
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
specifier|protected
name|DistributedFileSystem
name|hdfs
decl_stmt|;
comment|/**    * The list recording all previous snapshots. Each element in the array    * records a snapshot root.    */
DECL|field|snapshotList
specifier|protected
specifier|static
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|snapshotList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Make changes (modification, deletion, creation) to the current files/dir.    * Then check if the previous snapshots are still correct.    *     * @param modifications Modifications that to be applied to the current dir.    */
DECL|method|modifyCurrentDirAndCheckSnapshots (Modification[] modifications)
specifier|public
name|void
name|modifyCurrentDirAndCheckSnapshots
parameter_list|(
name|Modification
index|[]
name|modifications
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Modification
name|modification
range|:
name|modifications
control|)
block|{
name|modification
operator|.
name|loadSnapshots
argument_list|()
expr_stmt|;
name|modification
operator|.
name|modify
argument_list|()
expr_stmt|;
name|modification
operator|.
name|checkSnapshots
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generate the snapshot name based on its index.    *     * @param snapshotIndex The index of the snapshot    * @return The snapshot name    */
DECL|method|genSnapshotName (int snapshotIndex)
specifier|private
name|String
name|genSnapshotName
parameter_list|(
name|int
name|snapshotIndex
parameter_list|)
block|{
return|return
literal|"s"
operator|+
name|snapshotIndex
return|;
block|}
comment|/**    * Main test, where we will go in the following loop:    *     * Create snapshot<----------------------+ -> Check snapshot creation | ->    * Change the current/live files/dir | -> Check previous snapshots    * -----------+    *     * @param snapshottedDir The dir to be snapshotted    * @param modificiationsList The list of modifications. Each element in the    *          list is a group of modifications applied to current dir.    */
DECL|method|testSnapshot (Path snapshottedDir, ArrayList<Modification[]> modificationsList)
specifier|protected
name|void
name|testSnapshot
parameter_list|(
name|Path
name|snapshottedDir
parameter_list|,
name|ArrayList
argument_list|<
name|Modification
index|[]
argument_list|>
name|modificationsList
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|snapshotIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Modification
index|[]
name|modifications
range|:
name|modificationsList
control|)
block|{
comment|// 1. create snapshot
comment|// TODO: we also need to check creating snapshot for a directory under a
comment|// snapshottable directory
name|Path
name|snapshotRoot
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|snapshottedDir
argument_list|,
name|genSnapshotName
argument_list|(
name|snapshotIndex
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|snapshotList
operator|.
name|add
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
comment|// 2. Check the basic functionality of the snapshot(s)
name|SnapshotTestHelper
operator|.
name|checkSnapshotCreation
argument_list|(
name|hdfs
argument_list|,
name|snapshotRoot
argument_list|,
name|snapshottedDir
argument_list|)
expr_stmt|;
comment|// 3. Make changes to the current directory
for|for
control|(
name|Modification
name|m
range|:
name|modifications
control|)
block|{
name|m
operator|.
name|loadSnapshots
argument_list|()
expr_stmt|;
name|m
operator|.
name|modify
argument_list|()
expr_stmt|;
name|m
operator|.
name|checkSnapshots
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Prepare a list of modifications. A modification may be a file creation,    * file deletion, or a modification operation such as appending to an existing    * file.    *     * @param number    *          Number of times that we make modifications to the current    *          directory.    * @return A list of modifications. Each element in the list is a group of    *         modifications that will be apply to the "current" directory.    * @throws Exception    */
DECL|method|prepareModifications (int number)
specifier|private
name|ArrayList
argument_list|<
name|Modification
index|[]
argument_list|>
name|prepareModifications
parameter_list|(
name|int
name|number
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
index|[]
name|files
init|=
operator|new
name|Path
index|[
literal|3
index|]
decl_stmt|;
name|files
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
expr_stmt|;
name|files
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|files
index|[
literal|2
index|]
operator|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file2"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|files
index|[
literal|0
index|]
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|files
index|[
literal|1
index|]
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Modification
index|[]
argument_list|>
name|mList
init|=
operator|new
name|ArrayList
argument_list|<
name|Modification
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|//
comment|// Modification iterations are as follows:
comment|// Iteration 0 - delete:file0, append:file1, create:file2
comment|// Iteration 1 - delete:file1, append:file2, create:file0
comment|// Iteration 3 - delete:file2, append:file0, create:file1
comment|// ...
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|Modification
index|[]
name|mods
init|=
operator|new
name|Modification
index|[
literal|3
index|]
decl_stmt|;
comment|// delete files[i % 3]
name|mods
index|[
literal|0
index|]
operator|=
operator|new
name|FileDeletion
argument_list|(
name|files
index|[
name|i
operator|%
literal|3
index|]
argument_list|,
name|hdfs
argument_list|)
expr_stmt|;
comment|// modify files[(i+1) % 3]
name|mods
index|[
literal|1
index|]
operator|=
operator|new
name|FileAppend
argument_list|(
name|files
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|3
index|]
argument_list|,
name|hdfs
argument_list|,
operator|(
name|int
operator|)
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create files[(i+2) % 3]
name|mods
index|[
literal|2
index|]
operator|=
operator|new
name|FileCreation
argument_list|(
name|files
index|[
operator|(
name|i
operator|+
literal|2
operator|)
operator|%
literal|3
index|]
argument_list|,
name|hdfs
argument_list|,
operator|(
name|int
operator|)
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|mList
operator|.
name|add
argument_list|(
name|mods
argument_list|)
expr_stmt|;
block|}
return|return
name|mList
return|;
block|}
annotation|@
name|Test
DECL|method|testSnapshot ()
specifier|public
name|void
name|testSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Modification
index|[]
argument_list|>
name|mList
init|=
name|prepareModifications
argument_list|(
name|SNAPSHOTNUMBER
argument_list|)
decl_stmt|;
name|testSnapshot
argument_list|(
name|sub1
argument_list|,
name|mList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creating snapshots for a directory that is not snapshottable must fail.    *     * TODO: Listing/Deleting snapshots for a directory that is not snapshottable    * should also fail.    */
annotation|@
name|Test
DECL|method|testSnapshottableDirectory ()
specifier|public
name|void
name|testSnapshottableDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
literal|"s1"
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deleting snapshottable directory with snapshots must fail.    */
annotation|@
name|Test
DECL|method|testDeleteDirectoryWithSnapshot ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for sub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
literal|"s1"
argument_list|,
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deleting a snapshottable dir with snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deleting directory with snapshottable descendant with snapshots must fail.    */
annotation|@
name|Test
DECL|method|testDeleteDirectoryWithSnapshot2 ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|subfile1
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|subfile2
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for subsub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|subsub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
literal|"s1"
argument_list|,
name|subsub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deleting dir while its descedant subsub1 having snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renaming a directory to another directory with snapshots must fail.    */
annotation|@
name|Test
DECL|method|testRenameToDirectoryWithSnapshot ()
specifier|public
name|void
name|testRenameToDirectoryWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create the directory sub1
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// The normal rename should succeed
name|hdfs
operator|.
name|rename
argument_list|(
name|sub2
argument_list|,
name|sub1
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// Create sub3 and create snapshot for it
name|Path
name|sub3
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sub3
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub3
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
literal|"The direcotry "
operator|+
name|sub3
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be deleted for renaming since "
operator|+
name|sub3
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|sub1
argument_list|,
name|sub3
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renaming a directory to another directory with snapshots    * must fail.    */
annotation|@
name|Test
DECL|method|testRenameToDirectoryWithSnapshot2 ()
specifier|public
name|void
name|testRenameToDirectoryWithSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Create snapshot for sub1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Then delete file0 and file1 so that the renaming can succeed if without
comment|// snapshots
name|hdfs
operator|.
name|delete
argument_list|(
name|file0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
literal|"The direcotry "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be deleted for renaming since "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|sub2
argument_list|,
name|sub1
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Base class to present changes applied to current file/dir. A modification    * can be file creation, deletion, or other modifications such as appending on    * an existing file. Three abstract methods need to be implemented by    * subclasses: loadSnapshots() captures the states of snapshots before the    * modification, modify() applies the modification to the current directory,    * and checkSnapshots() verifies the snapshots do not change after the    * modification.    */
DECL|class|Modification
specifier|static
specifier|abstract
class|class
name|Modification
block|{
DECL|field|file
specifier|protected
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|fs
specifier|protected
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|random
specifier|protected
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|Modification (Path file, FileSystem fs, String type)
name|Modification
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
DECL|method|loadSnapshots ()
specifier|abstract
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|modify ()
specifier|abstract
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|checkSnapshots ()
specifier|abstract
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Appending a specified length to an existing file    */
DECL|class|FileAppend
specifier|static
class|class
name|FileAppend
extends|extends
name|Modification
block|{
DECL|field|appendLen
specifier|final
name|int
name|appendLen
decl_stmt|;
DECL|field|snapshotFileLengthMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
name|snapshotFileLengthMap
decl_stmt|;
DECL|method|FileAppend (Path file, FileSystem fs, int len)
name|FileAppend
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"append"
argument_list|)
expr_stmt|;
assert|assert
name|len
operator|>=
literal|0
assert|;
name|this
operator|.
name|appendLen
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|snapshotFileLengthMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|)
block|{
name|long
name|snapshotFileLen
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|snapshotFileLengthMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|snapshotFileLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|snapshotFileLengthMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
assert|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|appendLen
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|currentSnapshotFileLen
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|)
block|{
name|currentSnapshotFileLen
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|long
name|originalSnapshotFileLen
init|=
name|snapshotFileLengthMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentSnapshotFileLen
argument_list|,
name|originalSnapshotFileLen
argument_list|)
expr_stmt|;
comment|// Read the snapshot file out of the boundary
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
condition|)
block|{
name|FSDataInputStream
name|input
init|=
name|fs
operator|.
name|open
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
name|input
operator|.
name|read
argument_list|(
name|currentSnapshotFileLen
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|readLen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * New file creation    */
DECL|class|FileCreation
specifier|static
class|class
name|FileCreation
extends|extends
name|Modification
block|{
DECL|field|fileLen
specifier|final
name|int
name|fileLen
decl_stmt|;
DECL|field|fileStatusMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|fileStatusMap
decl_stmt|;
DECL|method|FileCreation (Path file, FileSystem fs, int len)
name|FileCreation
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"creation"
argument_list|)
expr_stmt|;
assert|assert
name|len
operator|>=
literal|0
assert|;
name|this
operator|.
name|fileLen
operator|=
name|len
expr_stmt|;
name|fileStatusMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exist
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|exist
condition|)
block|{
name|fileStatusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileStatusMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|currentSnapshotFileExist
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|boolean
name|originalSnapshotFileExist
init|=
operator|!
operator|(
name|fileStatusMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
operator|==
literal|null
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentSnapshotFileExist
argument_list|,
name|originalSnapshotFileExist
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentSnapshotFileExist
condition|)
block|{
name|FileStatus
name|currentSnapshotStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|FileStatus
name|originalStatus
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentSnapshotStatus
argument_list|,
name|originalStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * File deletion    */
DECL|class|FileDeletion
specifier|static
class|class
name|FileDeletion
extends|extends
name|Modification
block|{
DECL|field|snapshotFileExistenceMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
name|snapshotFileExistenceMap
decl_stmt|;
DECL|method|FileDeletion (Path file, FileSystem fs)
name|FileDeletion
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|fs
argument_list|,
literal|"deletion"
argument_list|)
expr_stmt|;
name|snapshotFileExistenceMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadSnapshots ()
name|void
name|loadSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|existence
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|snapshotFileExistenceMap
operator|.
name|put
argument_list|(
name|snapshotFile
argument_list|,
name|existence
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|modify ()
name|void
name|modify
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkSnapshots ()
name|void
name|checkSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|snapshotRoot
range|:
name|snapshotList
control|)
block|{
name|Path
name|snapshotFile
init|=
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|currentSnapshotFileExist
init|=
name|fs
operator|.
name|exists
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|boolean
name|originalSnapshotFileExist
init|=
name|snapshotFileExistenceMap
operator|.
name|get
argument_list|(
name|snapshotFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentSnapshotFileExist
argument_list|,
name|originalSnapshotFileExist
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

