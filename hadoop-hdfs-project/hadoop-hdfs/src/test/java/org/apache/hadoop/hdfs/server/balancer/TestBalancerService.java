begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test balancer run as a service.  */
end_comment

begin_class
DECL|class|TestBalancerService
specifier|public
class|class
name|TestBalancerService
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|client
specifier|private
name|ClientProtocol
name|client
decl_stmt|;
DECL|field|totalUsedSpace
specifier|private
name|long
name|totalUsedSpace
decl_stmt|;
comment|// array of racks for original nodes in cluster
DECL|field|TEST_RACKS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|TEST_RACKS
init|=
block|{
name|TestBalancer
operator|.
name|RACK0
block|,
name|TestBalancer
operator|.
name|RACK1
block|}
decl_stmt|;
comment|// array of capacities for original nodes in cluster
DECL|field|TEST_CAPACITIES
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|TEST_CAPACITIES
init|=
block|{
name|TestBalancer
operator|.
name|CAPACITY
block|,
name|TestBalancer
operator|.
name|CAPACITY
block|}
decl_stmt|;
DECL|field|USED
specifier|private
specifier|static
specifier|final
name|double
name|USED
init|=
literal|0.3
decl_stmt|;
static|static
block|{
name|TestBalancer
operator|.
name|initTestSetup
argument_list|()
expr_stmt|;
block|}
DECL|method|setupCluster (Configuration conf)
specifier|private
name|void
name|setupCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniDFSNNTopology
operator|.
name|NNConf
name|nn1Conf
init|=
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn1"
argument_list|)
decl_stmt|;
name|nn1Conf
operator|.
name|setIpcPort
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
argument_list|)
expr_stmt|;
name|Configuration
name|copiedConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Limit the number of failover retries to avoid the test taking too long
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|MAX_ATTEMPTS_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|SLEEPTIME_BASE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|copiedConf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|TEST_CAPACITIES
operator|.
name|length
argument_list|)
operator|.
name|racks
argument_list|(
name|TEST_RACKS
argument_list|)
operator|.
name|simulatedCapacities
argument_list|(
name|TEST_CAPACITIES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|client
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|int
name|numOfDatanodes
init|=
name|TEST_CAPACITIES
operator|.
name|length
decl_stmt|;
name|long
name|totalCapacity
init|=
name|TestBalancer
operator|.
name|sum
argument_list|(
name|TEST_CAPACITIES
argument_list|)
decl_stmt|;
comment|// fill up the cluster to be 30% full
name|totalUsedSpace
operator|=
call|(
name|long
call|)
argument_list|(
name|totalCapacity
operator|*
name|USED
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|createFile
argument_list|(
name|cluster
argument_list|,
name|TestBalancer
operator|.
name|filePath
argument_list|,
name|totalUsedSpace
operator|/
name|numOfDatanodes
argument_list|,
operator|(
name|short
operator|)
name|numOfDatanodes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|addOneDataNode (Configuration conf)
specifier|private
name|long
name|addOneDataNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// start up an empty node with the same capacity and on the same rack
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestBalancer
operator|.
name|RACK2
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|TestBalancer
operator|.
name|CAPACITY
block|}
argument_list|)
expr_stmt|;
name|long
name|totalCapacity
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|TestBalancer
operator|.
name|CAPACITY
decl_stmt|;
name|TestBalancer
operator|.
name|waitForHeartBeat
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
return|return
name|totalCapacity
return|;
block|}
DECL|method|newBalancerService (Configuration conf, String[] args)
specifier|private
name|Thread
name|newBalancerService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Tool
name|cli
init|=
operator|new
name|Balancer
operator|.
name|Cli
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"balancer failed for "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * The normal test case. Start with an imbalanced cluster, then balancer    * should balance succeed but not exit, then make the cluster imbalanced and    * wait for balancer to balance it again    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBalancerServiceBalanceTwice ()
specifier|public
name|void
name|testBalancerServiceBalanceTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_SERVICE_INTERVAL_KEY
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|setupCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|totalCapacity
init|=
name|addOneDataNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// make cluster imbalanced
name|Thread
name|balancerThread
init|=
name|newBalancerService
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-asService"
block|}
argument_list|)
decl_stmt|;
name|balancerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|TestBalancer
operator|.
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
comment|// add another empty datanode, wait for cluster become balance again
name|totalCapacity
operator|=
name|addOneDataNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Balancer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|balancerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBalancerServiceOnError ()
specifier|public
name|void
name|testBalancerServiceOnError
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// retry for every 5 seconds
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_SERVICE_INTERVAL_KEY
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|setupCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Thread
name|balancerThread
init|=
name|newBalancerService
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-asService"
block|}
argument_list|)
decl_stmt|;
name|balancerThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// cluster is out of service for 10+ secs, the balancer service will retry
comment|// for 2+ times
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|Balancer
operator|.
name|getExceptionsSinceLastBalance
argument_list|()
operator|>
literal|0
argument_list|,
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Balancer
operator|.
name|getExceptionsSinceLastBalance
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|long
name|totalCapacity
init|=
name|addOneDataNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TestBalancer
operator|.
name|waitForBalancer
argument_list|(
name|totalUsedSpace
argument_list|,
name|totalCapacity
argument_list|,
name|client
argument_list|,
name|cluster
argument_list|,
name|BalancerParameters
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|Balancer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|balancerThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// reset to 0 once the balancer finished without exception
name|assertEquals
argument_list|(
name|Balancer
operator|.
name|getExceptionsSinceLastBalance
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

