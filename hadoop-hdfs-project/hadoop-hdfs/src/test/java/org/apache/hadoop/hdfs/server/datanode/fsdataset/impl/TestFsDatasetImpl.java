begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FinalizedReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ShortCircuitRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DN_CACHED_DFSUSED_CHECK_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyListOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestFsDatasetImpl
specifier|public
class|class
name|TestFsDatasetImpl
block|{
DECL|field|LOG
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFsDatasetImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
DECL|field|NUM_INIT_VOLUMES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_INIT_VOLUMES
init|=
literal|2
decl_stmt|;
DECL|field|CLUSTER_ID
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_ID
init|=
literal|"cluser-id"
decl_stmt|;
DECL|field|BLOCK_POOL_IDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|BLOCK_POOL_IDS
init|=
block|{
literal|"bpid-0"
block|,
literal|"bpid-1"
block|}
decl_stmt|;
comment|// Use to generate storageUuid
DECL|field|dsForStorageUuid
specifier|private
specifier|static
specifier|final
name|DataStorage
name|dsForStorageUuid
init|=
operator|new
name|DataStorage
argument_list|(
operator|new
name|StorageInfo
argument_list|(
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|datanode
specifier|private
name|DataNode
name|datanode
decl_stmt|;
DECL|field|storage
specifier|private
name|DataStorage
name|storage
decl_stmt|;
DECL|field|dataset
specifier|private
name|FsDatasetImpl
name|dataset
decl_stmt|;
DECL|field|BLOCKPOOL
specifier|private
specifier|final
specifier|static
name|String
name|BLOCKPOOL
init|=
literal|"BP-TEST"
decl_stmt|;
DECL|method|createStorageDirectory (File root, Configuration conf)
specifier|private
specifier|static
name|Storage
operator|.
name|StorageDirectory
name|createStorageDirectory
parameter_list|(
name|File
name|root
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|IOException
block|{
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
operator|new
name|Storage
operator|.
name|StorageDirectory
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|root
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|createStorageID
argument_list|(
name|sd
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
DECL|method|createStorageDirs (DataStorage storage, Configuration conf, int numDirs)
specifier|private
specifier|static
name|void
name|createStorageDirs
parameter_list|(
name|DataStorage
name|storage
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dirStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
operator|+
literal|"/data"
operator|+
name|i
argument_list|)
decl_stmt|;
name|dirStrings
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|loc
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|loc
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|createStorageDirectory
argument_list|(
name|loc
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getStorageDir
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|dataDir
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|dirStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|dirIterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirs
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getNumStorageDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numDirs
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumVolumes ()
specifier|private
name|int
name|getNumVolumes
parameter_list|()
block|{
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
return|return
name|volumes
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|datanode
operator|=
name|mock
argument_list|(
name|DataNode
operator|.
name|class
argument_list|)
expr_stmt|;
name|storage
operator|=
name|mock
argument_list|(
name|DataStorage
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|DNConf
name|dnConf
init|=
operator|new
name|DNConf
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnConf
argument_list|)
expr_stmt|;
specifier|final
name|BlockScanner
name|disabledBlockScanner
init|=
operator|new
name|BlockScanner
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getBlockScanner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|disabledBlockScanner
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitRegistry
name|shortCircuitRegistry
init|=
operator|new
name|ShortCircuitRegistry
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|shortCircuitRegistry
argument_list|)
expr_stmt|;
name|createStorageDirs
argument_list|(
name|storage
argument_list|,
name|conf
argument_list|,
name|NUM_INIT_VOLUMES
argument_list|)
expr_stmt|;
name|dataset
operator|=
operator|new
name|FsDatasetImpl
argument_list|(
name|datanode
argument_list|,
name|storage
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|BLOCK_POOL_IDS
control|)
block|{
name|dataset
operator|.
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_INIT_VOLUMES
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dataset
operator|.
name|getNumFailedVolumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddVolumes ()
specifier|public
name|void
name|testAddVolumes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numNewVolumes
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|numExistingVolumes
init|=
name|getNumVolumes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalVolumes
init|=
name|numNewVolumes
operator|+
name|numExistingVolumes
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedVolumes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NamespaceInfo
argument_list|>
name|nsInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|BLOCK_POOL_IDS
control|)
block|{
name|nsInfos
operator|.
name|add
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|0
argument_list|,
name|CLUSTER_ID
argument_list|,
name|bpid
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewVolumes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|BASE_DIR
operator|+
literal|"/newData"
operator|+
name|i
decl_stmt|;
name|String
name|pathUri
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|expectedVolumes
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|pathUri
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|StorageLocation
name|loc
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|createStorageDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|VolumeBuilder
name|builder
init|=
operator|new
name|DataStorage
operator|.
name|VolumeBuilder
argument_list|(
name|storage
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|prepareVolume
argument_list|(
name|eq
argument_list|(
name|datanode
argument_list|)
argument_list|,
name|eq
argument_list|(
name|loc
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|NamespaceInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|addVolume
argument_list|(
name|loc
argument_list|,
name|nsInfos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expectedVolumes "
operator|+
name|i
operator|+
literal|" is "
operator|+
operator|new
name|File
argument_list|(
name|pathUri
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalVolumes
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalVolumes
argument_list|,
name|dataset
operator|.
name|storageMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actualVolumes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewVolumes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|volumeName
init|=
name|volumes
operator|.
name|get
argument_list|(
name|numExistingVolumes
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|actualVolumes
operator|.
name|add
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"actualVolume "
operator|+
name|i
operator|+
literal|" is "
operator|+
name|volumeName
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|actualVolumes
operator|.
name|size
argument_list|()
argument_list|,
name|expectedVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualVolumes
operator|.
name|containsAll
argument_list|(
name|expectedVolumes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddVolumeWithSameStorageUuid ()
specifier|public
name|void
name|testAddVolumeWithSameStorageUuid
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isConnectedToNN
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getServiceRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dn
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|vol0
init|=
name|cluster
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|vol1
init|=
name|cluster
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd0
init|=
operator|new
name|Storage
operator|.
name|StorageDirectory
argument_list|(
name|vol0
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd1
init|=
operator|new
name|Storage
operator|.
name|StorageDirectory
argument_list|(
name|vol1
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|sd0
operator|.
name|getVersionFile
argument_list|()
argument_list|,
name|sd1
operator|.
name|getVersionFile
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isConnectedToNN
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getServiceRpcAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRemoveVolumes ()
specifier|public
name|void
name|testRemoveVolumes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Feed FsDataset with block metadata.
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bpid
init|=
name|BLOCK_POOL_IDS
index|[
name|NUM_BLOCKS
operator|%
name|BLOCK_POOL_IDS
operator|.
name|length
index|]
decl_stmt|;
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|ReplicaHandler
name|replica
init|=
name|dataset
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|eb
argument_list|,
literal|false
argument_list|)
init|)
block|{       }
block|}
specifier|final
name|String
index|[]
name|dataDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|final
name|String
name|volumePathToRemove
init|=
name|dataDirs
index|[
literal|0
index|]
decl_stmt|;
name|Set
argument_list|<
name|StorageLocation
argument_list|>
name|volumesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|volumesToRemove
operator|.
name|add
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|volumePathToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|FsVolumeReferences
name|volReferences
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
decl_stmt|;
name|FsVolumeImpl
name|volumeToRemove
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FsVolumeSpi
name|vol
range|:
name|volReferences
control|)
block|{
if|if
condition|(
name|vol
operator|.
name|getStorageLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|volumesToRemove
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|volumeToRemove
operator|=
operator|(
name|FsVolumeImpl
operator|)
name|vol
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|volumeToRemove
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|volReferences
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataset
operator|.
name|removeVolumes
argument_list|(
name|volumesToRemove
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|expectedNumVolumes
init|=
name|dataDirs
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The volume has been removed from the volumeList."
argument_list|,
name|expectedNumVolumes
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The volume has been removed from the storageMap."
argument_list|,
name|expectedNumVolumes
argument_list|,
name|dataset
operator|.
name|storageMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|dataset
operator|.
name|asyncDiskService
operator|.
name|execute
argument_list|(
name|volumeToRemove
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect RuntimeException: the volume has been removed from the "
operator|+
literal|"AsyncDiskService."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot find volume"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|totalNumReplicas
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|dataset
operator|.
name|volumeMap
operator|.
name|getBlockPoolList
argument_list|()
control|)
block|{
name|totalNumReplicas
operator|+=
name|dataset
operator|.
name|volumeMap
operator|.
name|size
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"The replica infos on this volume has been removed from the "
operator|+
literal|"volumeMap."
argument_list|,
name|NUM_BLOCKS
operator|/
name|NUM_INIT_VOLUMES
argument_list|,
name|totalNumReplicas
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRemoveNewlyAddedVolume ()
specifier|public
name|void
name|testRemoveNewlyAddedVolume
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numExistingVolumes
init|=
name|getNumVolumes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NamespaceInfo
argument_list|>
name|nsInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|BLOCK_POOL_IDS
control|)
block|{
name|nsInfos
operator|.
name|add
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|0
argument_list|,
name|CLUSTER_ID
argument_list|,
name|bpid
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|newVolumePath
init|=
name|BASE_DIR
operator|+
literal|"/newVolumeToRemoveLater"
decl_stmt|;
name|StorageLocation
name|loc
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|newVolumePath
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|createStorageDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|newVolumePath
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|VolumeBuilder
name|builder
init|=
operator|new
name|DataStorage
operator|.
name|VolumeBuilder
argument_list|(
name|storage
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|prepareVolume
argument_list|(
name|eq
argument_list|(
name|datanode
argument_list|)
argument_list|,
name|eq
argument_list|(
name|loc
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|NamespaceInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|addVolume
argument_list|(
name|loc
argument_list|,
name|nsInfos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numExistingVolumes
operator|+
literal|1
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getNumStorageDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numExistingVolumes
operator|+
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getStorageDir
argument_list|(
name|numExistingVolumes
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|StorageLocation
argument_list|>
name|volumesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|volumesToRemove
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|removeVolumes
argument_list|(
name|volumesToRemove
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numExistingVolumes
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddVolumeFailureReleasesInUseLock ()
specifier|public
name|void
name|testAddVolumeFailureReleasesInUseLock
parameter_list|()
throws|throws
name|IOException
block|{
name|FsDatasetImpl
name|spyDataset
init|=
name|spy
argument_list|(
name|dataset
argument_list|)
decl_stmt|;
name|FsVolumeImpl
name|mockVolume
init|=
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|badDir
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|,
literal|"bad"
argument_list|)
decl_stmt|;
name|badDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockVolume
argument_list|)
operator|.
name|when
argument_list|(
name|spyDataset
argument_list|)
operator|.
name|createFsVolume
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|StorageDirectory
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Failed to getVolumeMap()"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockVolume
argument_list|)
operator|.
name|getVolumeMap
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ReplicaMap
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RamDiskReplicaLruTracker
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|createStorageDirectory
argument_list|(
name|badDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sd
operator|.
name|lock
argument_list|()
expr_stmt|;
name|DataStorage
operator|.
name|VolumeBuilder
name|builder
init|=
operator|new
name|DataStorage
operator|.
name|VolumeBuilder
argument_list|(
name|storage
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|prepareVolume
argument_list|(
name|eq
argument_list|(
name|datanode
argument_list|)
argument_list|,
name|eq
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|badDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Matchers
operator|.
expr|<
name|List
argument_list|<
name|NamespaceInfo
argument_list|>
operator|>
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|badDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NamespaceInfo
argument_list|>
name|nsInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|BLOCK_POOL_IDS
control|)
block|{
name|nsInfos
operator|.
name|add
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|0
argument_list|,
name|CLUSTER_ID
argument_list|,
name|bpid
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|spyDataset
operator|.
name|addVolume
argument_list|(
name|location
argument_list|,
name|nsInfos
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw MultipleIOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MultipleIOException
name|e
parameter_list|)
block|{     }
name|FsDatasetTestUtil
operator|.
name|assertFileLockReleased
argument_list|(
name|badDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletingBlocks ()
specifier|public
name|void
name|testDeletingBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|ds
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|ds
operator|.
name|addBlockPool
argument_list|(
name|BLOCKPOOL
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FsVolumeImpl
name|vol
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|ds
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|vol
operator|=
operator|(
name|FsVolumeImpl
operator|)
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ExtendedBlock
name|eb
decl_stmt|;
name|ReplicaInfo
name|info
decl_stmt|;
name|List
argument_list|<
name|Block
argument_list|>
name|blockList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|63
condition|;
name|i
operator|++
control|)
block|{
name|eb
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|BLOCKPOOL
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
literal|0
argument_list|)
operator|.
name|createFinalizedReplica
argument_list|(
name|eb
argument_list|)
expr_stmt|;
name|blockList
operator|.
name|add
argument_list|(
name|eb
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|invalidate
argument_list|(
name|BLOCKPOOL
argument_list|,
name|blockList
operator|.
name|toArray
argument_list|(
operator|new
name|Block
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Nothing to do
block|}
name|assertTrue
argument_list|(
name|ds
operator|.
name|isDeletingBlock
argument_list|(
name|BLOCKPOOL
argument_list|,
name|blockList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|blockList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|eb
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|BLOCKPOOL
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1064
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
literal|0
argument_list|)
operator|.
name|createFinalizedReplica
argument_list|(
name|eb
argument_list|)
expr_stmt|;
name|blockList
operator|.
name|add
argument_list|(
name|eb
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|invalidate
argument_list|(
name|BLOCKPOOL
argument_list|,
name|blockList
operator|.
name|toArray
argument_list|(
operator|new
name|Block
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Nothing to do
block|}
name|assertFalse
argument_list|(
name|ds
operator|.
name|isDeletingBlock
argument_list|(
name|BLOCKPOOL
argument_list|,
name|blockList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDuplicateReplicaResolution ()
specifier|public
name|void
name|testDuplicateReplicaResolution
parameter_list|()
throws|throws
name|IOException
block|{
name|FsVolumeImpl
name|fsv1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|FsVolumeImpl
name|fsv2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|f1
init|=
operator|new
name|File
argument_list|(
literal|"d1/block"
argument_list|)
decl_stmt|;
name|File
name|f2
init|=
operator|new
name|File
argument_list|(
literal|"d2/block"
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaOlder
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|fsv1
argument_list|,
name|f1
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replica
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|fsv1
argument_list|,
name|f1
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaSame
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|fsv1
argument_list|,
name|f1
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaNewer
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|fsv1
argument_list|,
name|f1
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaOtherOlder
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|fsv2
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaOtherSame
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|fsv2
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|replicaOtherNewer
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|fsv2
argument_list|,
name|f2
argument_list|)
decl_stmt|;
comment|// equivalent path so don't remove either
name|assertNull
argument_list|(
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaSame
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaOlder
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaNewer
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep latest found replica
name|assertSame
argument_list|(
name|replica
argument_list|,
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaOtherSame
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|replicaOtherOlder
argument_list|,
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaOtherOlder
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|replica
argument_list|,
name|BlockPoolSlice
operator|.
name|selectReplicaToDelete
argument_list|(
name|replicaOtherNewer
argument_list|,
name|replica
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadingDfsUsedForVolumes ()
specifier|public
name|void
name|testLoadingDfsUsedForVolumes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|waitIntervalTime
init|=
literal|5000
decl_stmt|;
comment|// Initialize the cachedDfsUsedIntervalTime larger than waitIntervalTime
comment|// to avoid cache-dfsused time expired
name|long
name|cachedDfsUsedIntervalTime
init|=
name|waitIntervalTime
operator|+
literal|1000
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DN_CACHED_DFSUSED_CHECK_INTERVAL_MS
argument_list|,
name|cachedDfsUsedIntervalTime
argument_list|)
expr_stmt|;
name|long
name|cacheDfsUsed
init|=
literal|1024
decl_stmt|;
name|long
name|dfsUsed
init|=
name|getDfsUsedValueOfNewVolume
argument_list|(
name|cacheDfsUsed
argument_list|,
name|waitIntervalTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cacheDfsUsed
argument_list|,
name|dfsUsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadingDfsUsedForVolumesExpired ()
specifier|public
name|void
name|testLoadingDfsUsedForVolumesExpired
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|waitIntervalTime
init|=
literal|5000
decl_stmt|;
comment|// Initialize the cachedDfsUsedIntervalTime smaller than waitIntervalTime
comment|// to make cache-dfsused time expired
name|long
name|cachedDfsUsedIntervalTime
init|=
name|waitIntervalTime
operator|-
literal|1000
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DN_CACHED_DFSUSED_CHECK_INTERVAL_MS
argument_list|,
name|cachedDfsUsedIntervalTime
argument_list|)
expr_stmt|;
name|long
name|cacheDfsUsed
init|=
literal|1024
decl_stmt|;
name|long
name|dfsUsed
init|=
name|getDfsUsedValueOfNewVolume
argument_list|(
name|cacheDfsUsed
argument_list|,
name|waitIntervalTime
argument_list|)
decl_stmt|;
comment|// Because the cache-dfsused expired and the dfsUsed will be recalculated
name|assertTrue
argument_list|(
name|cacheDfsUsed
operator|!=
name|dfsUsed
argument_list|)
expr_stmt|;
block|}
DECL|method|getDfsUsedValueOfNewVolume (long cacheDfsUsed, long waitIntervalTime)
specifier|private
name|long
name|getDfsUsedValueOfNewVolume
parameter_list|(
name|long
name|cacheDfsUsed
parameter_list|,
name|long
name|waitIntervalTime
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|NamespaceInfo
argument_list|>
name|nsInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nsInfos
operator|.
name|add
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|0
argument_list|,
name|CLUSTER_ID
argument_list|,
name|BLOCK_POOL_IDS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|CURRENT_DIR
init|=
literal|"current"
decl_stmt|;
name|String
name|DU_CACHE_FILE
init|=
name|BlockPoolSlice
operator|.
name|DU_CACHE_FILE
decl_stmt|;
name|String
name|path
init|=
name|BASE_DIR
operator|+
literal|"/newData0"
decl_stmt|;
name|String
name|pathUri
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StorageLocation
name|loc
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|createStorageDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|VolumeBuilder
name|builder
init|=
operator|new
name|DataStorage
operator|.
name|VolumeBuilder
argument_list|(
name|storage
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|prepareVolume
argument_list|(
name|eq
argument_list|(
name|datanode
argument_list|)
argument_list|,
name|eq
argument_list|(
name|loc
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|NamespaceInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|String
name|cacheFilePath
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s/%s/%s/%s"
argument_list|,
name|path
argument_list|,
name|CURRENT_DIR
argument_list|,
name|BLOCK_POOL_IDS
index|[
literal|0
index|]
argument_list|,
name|CURRENT_DIR
argument_list|,
name|DU_CACHE_FILE
argument_list|)
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|cacheFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|outFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|outFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
try|try
block|{
try|try
init|(
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
comment|// Write the dfsUsed value and the time to cache file
name|out
operator|.
name|write
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|cacheDfsUsed
argument_list|)
operator|+
literal|" "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|timer
operator|.
name|now
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{     }
name|dataset
operator|.
name|setTimer
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|waitIntervalTime
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|addVolume
argument_list|(
name|loc
argument_list|,
name|nsInfos
argument_list|)
expr_stmt|;
comment|// Get the last volume which was just added before
name|FsVolumeImpl
name|newVolume
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|newVolume
operator|=
operator|(
name|FsVolumeImpl
operator|)
name|volumes
operator|.
name|get
argument_list|(
name|volumes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|dfsUsed
init|=
name|newVolume
operator|.
name|getDfsUsed
argument_list|()
decl_stmt|;
return|return
name|dfsUsed
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveVolumeBeingWritten ()
specifier|public
name|void
name|testRemoveVolumeBeingWritten
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Will write and remove on dn0.
specifier|final
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|BLOCK_POOL_IDS
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startFinalizeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|blockReportReceivedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|volRemoveStartedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|volRemoveCompletedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
class|class
name|BlockReportThread
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Lets wait for the volume remove process to start
try|try
block|{
name|volRemoveStartedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unexpected exception when waiting for vol removal:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting block report"
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|getBlockReports
argument_list|(
name|eb
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully received block report"
argument_list|)
expr_stmt|;
name|blockReportReceivedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|ResponderThread
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|ReplicaHandler
name|replica
init|=
name|dataset
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|eb
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CreateRbw finished"
argument_list|)
expr_stmt|;
name|startFinalizeLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Slow down while we're holding the reference to the volume.
comment|// As we finalize a block, the volume is removed in parallel.
comment|// Ignore any interrupts coming out of volume shutdown.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
comment|// Lets wait for the other thread finish getting block report
name|blockReportReceivedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|dataset
operator|.
name|finalizeBlock
argument_list|(
name|eb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FinalizeBlock finished"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception caught. This should not affect the test"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|VolRemoveThread
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Set
argument_list|<
name|StorageLocation
argument_list|>
name|volumesToRemove
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|volumesToRemove
operator|.
name|add
argument_list|(
name|dataset
operator|.
name|getVolume
argument_list|(
name|eb
argument_list|)
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem preparing volumes to remove: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception in remove volume thread, check log for "
operator|+
literal|"details."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing volume "
operator|+
name|volumesToRemove
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|removeVolumes
argument_list|(
name|volumesToRemove
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|volRemoveCompletedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed volume "
operator|+
name|volumesToRemove
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start the volume write operation
name|ResponderThread
name|responderThread
init|=
operator|new
name|ResponderThread
argument_list|()
decl_stmt|;
name|responderThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|startFinalizeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Start the block report get operation
specifier|final
name|BlockReportThread
name|blockReportThread
init|=
operator|new
name|BlockReportThread
argument_list|()
decl_stmt|;
name|blockReportThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start the volume remove operation
name|VolRemoveThread
name|volRemoveThread
init|=
operator|new
name|VolRemoveThread
argument_list|()
decl_stmt|;
name|volRemoveThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let volume write and remove operation be
comment|// blocked for few seconds
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Signal block report receiver and volume writer
comment|// thread to complete their operations so that vol
comment|// remove can proceed
name|volRemoveStartedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Verify if block report can be received
comment|// when volume is in use and also being removed
name|blockReportReceivedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify if volume can be removed safely when there
comment|// are read/write operation in-progress
name|volRemoveCompletedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests stopping all the active DataXceiver thread on volume failure event.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCleanShutdownOfVolume ()
specifier|public
name|void
name|testCleanShutdownOfVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_KEY
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"test.dat"
argument_list|)
decl_stmt|;
comment|// Create a file and keep the output stream unclosed.
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
specifier|final
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|dataNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolume
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
name|volume
operator|.
name|getFinalizedDir
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|info
init|=
name|lb
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|finalizedDir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Remove write and execute access so that checkDiskErrorThread detects
comment|// this volume is bad.
name|finalizedDir
operator|.
name|setExecutable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|finalizedDir
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Reference count for the volume should be greater "
operator|+
literal|"than 0"
argument_list|,
name|volume
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Invoke the synchronous checkDiskError method
name|dataNode
operator|.
name|checkDiskError
argument_list|()
expr_stmt|;
comment|// Sleep for 1 second so that datanode can interrupt and cluster clean up
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|volume
operator|.
name|getReferenceCount
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dataNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getNumFailedVolumes
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This is not a valid code path. "
operator|+
literal|"out.close should have thrown an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|info
operator|.
name|getXferAddr
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|finalizedDir
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|finalizedDir
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testReportBadBlocks ()
specifier|public
name|void
name|testReportBadBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|threwException
init|=
literal|false
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Test the reportBadBlocks when the volume is null
name|dataNode
operator|.
name|reportBadBlocks
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
name|threwException
operator|=
literal|true
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|threwException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"testData"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|block
operator|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
comment|// Test for the overloaded method reportBadBlocks
name|dataNode
operator|.
name|reportBadBlocks
argument_list|(
name|block
argument_list|,
name|dataNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the bad block has been reported to namenode
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMoveBlockFailure ()
specifier|public
name|void
name|testMoveBlockFailure
parameter_list|()
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"testData"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|fsDataSetImpl
init|=
operator|(
name|FsDatasetImpl
operator|)
name|dataNode
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|ReplicaInfo
name|newReplicaInfo
init|=
name|createNewReplicaObj
argument_list|(
name|block
argument_list|,
name|fsDataSetImpl
argument_list|)
decl_stmt|;
comment|// Append to file to update its GS
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Call finalizeNewReplica
name|LOG
operator|.
name|info
argument_list|(
literal|"GenerationStamp of old replica: {}"
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"GenerationStamp of new replica: {}"
argument_list|,
name|fsDataSetImpl
operator|.
name|getReplicaInfo
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|newReplicaInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Generation Stamp "
operator|+
literal|"should be monotonically increased."
argument_list|,
parameter_list|()
lambda|->
name|fsDataSetImpl
operator|.
name|finalizeNewReplica
argument_list|(
name|newReplicaInfo
argument_list|,
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in testMoveBlockFailure "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception while testing testMoveBlockFailure "
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMoveBlockSuccess ()
specifier|public
name|void
name|testMoveBlockSuccess
parameter_list|()
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"testData"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|fsDataSetImpl
init|=
operator|(
name|FsDatasetImpl
operator|)
name|dataNode
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|ReplicaInfo
name|newReplicaInfo
init|=
name|createNewReplicaObj
argument_list|(
name|block
argument_list|,
name|fsDataSetImpl
argument_list|)
decl_stmt|;
name|fsDataSetImpl
operator|.
name|finalizeNewReplica
argument_list|(
name|newReplicaInfo
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in testMoveBlockSuccess "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MoveBlock operation should succeed"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a new temporary replica of replicaInfo object in another volume.    *    * @param block         - Extended Block    * @param fsDataSetImpl - FsDatasetImpl reference    * @throws IOException    */
DECL|method|createNewReplicaObj (ExtendedBlock block, FsDatasetImpl fsDataSetImpl)
specifier|private
name|ReplicaInfo
name|createNewReplicaObj
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|FsDatasetImpl
name|fsDataSetImpl
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplicaInfo
name|replicaInfo
init|=
name|fsDataSetImpl
operator|.
name|getReplicaInfo
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|FsVolumeSpi
name|destVolume
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|srcStorageId
init|=
name|fsDataSetImpl
operator|.
name|getVolume
argument_list|(
name|block
argument_list|)
operator|.
name|getStorageID
argument_list|()
decl_stmt|;
try|try
init|(
name|FsVolumeReferences
name|volumeReferences
init|=
name|fsDataSetImpl
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeReferences
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|volumeReferences
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStorageID
argument_list|()
operator|.
name|equals
argument_list|(
name|srcStorageId
argument_list|)
condition|)
block|{
name|destVolume
operator|=
name|volumeReferences
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|fsDataSetImpl
operator|.
name|copyReplicaToVolume
argument_list|(
name|block
argument_list|,
name|replicaInfo
argument_list|,
name|destVolume
operator|.
name|obtainReference
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

