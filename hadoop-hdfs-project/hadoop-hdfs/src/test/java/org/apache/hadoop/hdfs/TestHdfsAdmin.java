begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestHdfsAdmin
specifier|public
class|class
name|TestHdfsAdmin
block|{
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
DECL|field|REPL
specifier|private
specifier|static
specifier|final
name|short
name|REPL
init|=
literal|1
decl_stmt|;
DECL|field|SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|128
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCluster ()
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Test that we can set and clear quotas via {@link HdfsAdmin}.    */
annotation|@
name|Test
DECL|method|testHdfsAdminSetQuota ()
specifier|public
name|void
name|testHdfsAdminSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|setSpaceQuota
argument_list|(
name|TEST_PATH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|setQuota
argument_list|(
name|TEST_PATH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|clearSpaceQuota
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|clearQuota
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fs
operator|.
name|getContentSummary
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that a non-HDFS URI throws a helpful error.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testHdfsAdminWithBadUri ()
specifier|public
name|void
name|testHdfsAdminWithBadUri
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
operator|new
name|HdfsAdmin
argument_list|(
operator|new
name|URI
argument_list|(
literal|"file:///bad-scheme"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we can set, get, unset storage policies via {@link HdfsAdmin}.    */
annotation|@
name|Test
DECL|method|testHdfsAdminStoragePolicies ()
specifier|public
name|void
name|testHdfsAdminStoragePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsAdmin
name|hdfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|wow
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"wow"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|wow
argument_list|,
name|SIZE
argument_list|,
name|REPL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|BlockStoragePolicySuite
name|suite
init|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|suite
operator|.
name|getPolicy
argument_list|(
literal|"WARM"
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|suite
operator|.
name|getPolicy
argument_list|(
literal|"COLD"
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|suite
operator|.
name|getPolicy
argument_list|(
literal|"HOT"
argument_list|)
decl_stmt|;
comment|/*      * test: set storage policy      */
name|hdfsAdmin
operator|.
name|setStoragePolicy
argument_list|(
name|foo
argument_list|,
name|warm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|setStoragePolicy
argument_list|(
name|bar
argument_list|,
name|cold
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|setStoragePolicy
argument_list|(
name|wow
argument_list|,
name|hot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * test: get storage policy after set      */
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|foo
argument_list|)
argument_list|,
name|warm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|bar
argument_list|)
argument_list|,
name|cold
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|wow
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
comment|/*      * test: unset storage policy      */
name|hdfsAdmin
operator|.
name|unsetStoragePolicy
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|unsetStoragePolicy
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|hdfsAdmin
operator|.
name|unsetStoragePolicy
argument_list|(
name|wow
argument_list|)
expr_stmt|;
comment|/*      * test: get storage policy after unset. HOT by default.      */
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|foo
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|bar
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdfsAdmin
operator|.
name|getStoragePolicy
argument_list|(
name|wow
argument_list|)
argument_list|,
name|hot
argument_list|)
expr_stmt|;
comment|/*      * test: get all storage policies      */
comment|// Get policies via HdfsAdmin
name|Set
argument_list|<
name|String
argument_list|>
name|policyNamesSet1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicySpi
name|policy
range|:
name|hdfsAdmin
operator|.
name|getAllStoragePolicies
argument_list|()
control|)
block|{
name|policyNamesSet1
operator|.
name|add
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get policies via BlockStoragePolicySuite
name|Set
argument_list|<
name|String
argument_list|>
name|policyNamesSet2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|suite
operator|.
name|getAllPolicies
argument_list|()
control|)
block|{
name|policyNamesSet2
operator|.
name|add
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that we got the same set of policies in both cases.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|policyNamesSet1
argument_list|,
name|policyNamesSet2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|policyNamesSet2
argument_list|,
name|policyNamesSet1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

