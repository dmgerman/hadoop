begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Test that X-Frame-Options works correctly with DatanodeHTTPServer.  */
end_comment

begin_class
DECL|class|TestDatanodeHttpXFrame
specifier|public
class|class
name|TestDatanodeHttpXFrame
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDataNodeXFrameOptionsEnabled ()
specifier|public
name|void
name|testDataNodeXFrameOptionsEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|xFrameEnabled
init|=
literal|true
decl_stmt|;
name|cluster
operator|=
name|createCluster
argument_list|(
name|xFrameEnabled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConn
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|String
name|xfoHeader
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"X-FRAME-OPTIONS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"X-FRAME-OPTIONS is absent in the header"
argument_list|,
name|xfoHeader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xfoHeader
operator|.
name|endsWith
argument_list|(
name|HttpServer2
operator|.
name|XFrameOption
operator|.
name|SAMEORIGIN
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNameNodeXFrameOptionsDisabled ()
specifier|public
name|void
name|testNameNodeXFrameOptionsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|xFrameEnabled
init|=
literal|false
decl_stmt|;
name|cluster
operator|=
name|createCluster
argument_list|(
name|xFrameEnabled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
name|getConn
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|String
name|xfoHeader
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"X-FRAME-OPTIONS"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"unexpected X-FRAME-OPTION in header"
argument_list|,
name|xfoHeader
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDataNodeXFramewithInvalidOptions ()
specifier|public
name|void
name|testDataNodeXFramewithInvalidOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|createCluster
argument_list|(
literal|false
argument_list|,
literal|"Hadoop"
argument_list|)
expr_stmt|;
block|}
DECL|method|createCluster (boolean enabled, String value)
specifier|private
specifier|static
name|MiniDFSCluster
name|createCluster
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_ENABLED
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_XFRAME_OPTION_VALUE
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|dfsCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
return|return
name|dfsCluster
return|;
block|}
DECL|method|getConn (MiniDFSCluster dfsCluster)
specifier|private
specifier|static
name|HttpURLConnection
name|getConn
parameter_list|(
name|MiniDFSCluster
name|dfsCluster
parameter_list|)
throws|throws
name|IOException
block|{
name|DataNode
name|datanode
init|=
name|dfsCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|URL
name|newURL
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|datanode
operator|.
name|getInfoPort
argument_list|()
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|newURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
block|}
end_class

end_unit

