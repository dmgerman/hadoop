begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_PROTECTED_DIRECTORIES
import|;
end_import

begin_comment
comment|/**  * Verify that the dfs.namenode.protected.directories setting is respected.  */
end_comment

begin_class
DECL|class|TestProtectedDirectories
specifier|public
class|class
name|TestProtectedDirectories
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestProtectedDirectories
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
comment|/**    * Start a namenode-only 'cluster' which is configured to protect    * the given list of directories.    * @param conf    * @param protectedDirs    * @param unProtectedDirs    * @return    * @throws IOException    */
DECL|method|setupTestCase (Configuration conf, Collection<Path> protectedDirs, Collection<Path> unProtectedDirs)
specifier|public
name|MiniDFSCluster
name|setupTestCase
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|protectedDirs
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|unProtectedDirs
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Initialize the configuration.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|protectedDirs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start the cluster.
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create all the directories.
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|protectedDirs
argument_list|,
name|unProtectedDirs
argument_list|)
control|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|cluster
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Initialize a collection of file system layouts that will be used    * as the test matrix.    *    * @return    */
DECL|method|createTestMatrix ()
specifier|private
name|Collection
argument_list|<
name|TestMatrixEntry
argument_list|>
name|createTestMatrix
parameter_list|()
block|{
name|Collection
argument_list|<
name|TestMatrixEntry
argument_list|>
name|matrix
init|=
operator|new
name|ArrayList
argument_list|<
name|TestMatrixEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|// single empty unprotected dir.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Single empty protected dir.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Nested unprotected dirs.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3/4"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-empty protected dir.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Protected empty child of unprotected parent.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Protected empty child of protected parent.
comment|// We should not be able to delete the parent.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|false
argument_list|)
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// One of each, non-nested.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Protected non-empty child of unprotected parent.
comment|// Neither should be deletable.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Protected non-empty child has unprotected siblings.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2.2"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2.2/3"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2.1"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2.3"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Deeply nested protected child.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2/3/4/5"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3/4/5/6"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3/4"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disjoint trees.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/1/2"
argument_list|,
literal|false
argument_list|)
operator|.
name|addProtectedDir
argument_list|(
literal|"/a/b"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/1/2/3"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following tests exercise special cases in the path prefix
comment|// checks and handling of trailing separators.
comment|// A disjoint non-empty protected dir has the same string prefix as the
comment|// directory we are trying to delete.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/a1"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a1/a2"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// The directory we are trying to delete has a non-empty protected
comment|// child and we try to delete it with a trailing separator.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/a/b"
argument_list|,
literal|false
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a/b/c"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a/"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The directory we are trying to delete has an empty protected
comment|// child and we try to delete it with a trailing separator.
name|matrix
operator|.
name|add
argument_list|(
name|TestMatrixEntry
operator|.
name|get
argument_list|()
operator|.
name|addProtectedDir
argument_list|(
literal|"/a/b"
argument_list|,
literal|true
argument_list|)
operator|.
name|addUnprotectedDir
argument_list|(
literal|"/a/"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|matrix
return|;
block|}
annotation|@
name|Test
DECL|method|testReconfigureProtectedPaths ()
specifier|public
name|void
name|testReconfigureProtectedPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Path
argument_list|>
name|protectedPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/b"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/c"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Path
argument_list|>
name|unprotectedPaths
init|=
name|Arrays
operator|.
name|asList
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|setupTestCase
argument_list|(
name|conf
argument_list|,
name|protectedPaths
argument_list|,
name|unprotectedPaths
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|protectedPathsNew
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|FSDirectory
operator|.
name|normalizePaths
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/aa"
argument_list|,
literal|"/bb"
argument_list|,
literal|"/cc"
argument_list|)
argument_list|,
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|protectedPathsStrNew
init|=
literal|"/aa,/bb,/cc"
decl_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
comment|// change properties
name|nn
operator|.
name|reconfigureProperty
argument_list|(
name|FS_PROTECTED_DIRECTORIES
argument_list|,
name|protectedPathsStrNew
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsDirectory
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
comment|// verify change
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|,
name|protectedPathsNew
argument_list|,
name|fsDirectory
operator|.
name|getProtectedDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|,
name|protectedPathsStrNew
argument_list|,
name|nn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|)
expr_stmt|;
comment|// revert to default
name|nn
operator|.
name|reconfigureProperty
argument_list|(
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// verify default
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|fsDirectory
operator|.
name|getProtectedDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|,
literal|null
argument_list|,
name|nn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|FS_PROTECTED_DIRECTORIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|TestMatrixEntry
name|testMatrixEntry
range|:
name|createTestMatrix
argument_list|()
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|setupTestCase
argument_list|(
name|conf
argument_list|,
name|testMatrixEntry
operator|.
name|getProtectedPaths
argument_list|()
argument_list|,
name|testMatrixEntry
operator|.
name|getUnprotectedPaths
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running {}"
argument_list|,
name|testMatrixEntry
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|testMatrixEntry
operator|.
name|getAllPathsToBeDeleted
argument_list|()
control|)
block|{
specifier|final
name|long
name|countBefore
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFilesTotal
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|testMatrixEntry
operator|+
literal|": Testing whether "
operator|+
name|path
operator|+
literal|" can be deleted"
argument_list|,
name|deletePath
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|,
name|is
argument_list|(
name|testMatrixEntry
operator|.
name|canPathBeDeleted
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|countAfter
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFilesTotal
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|testMatrixEntry
operator|.
name|canPathBeDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"Either all paths should be deleted or none"
argument_list|,
name|countAfter
argument_list|,
name|is
argument_list|(
name|countBefore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Verify that protected directories could not be renamed.    */
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|TestMatrixEntry
name|testMatrixEntry
range|:
name|createTestMatrix
argument_list|()
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|setupTestCase
argument_list|(
name|conf
argument_list|,
name|testMatrixEntry
operator|.
name|getProtectedPaths
argument_list|()
argument_list|,
name|testMatrixEntry
operator|.
name|getUnprotectedPaths
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running {}"
argument_list|,
name|testMatrixEntry
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|srcPath
range|:
name|testMatrixEntry
operator|.
name|getAllPathsToBeDeleted
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|testMatrixEntry
operator|+
literal|": Testing whether "
operator|+
name|srcPath
operator|+
literal|" can be renamed"
argument_list|,
name|renamePath
argument_list|(
name|fs
argument_list|,
name|srcPath
argument_list|,
operator|new
name|Path
argument_list|(
name|srcPath
operator|.
name|toString
argument_list|()
operator|+
literal|"_renamed"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|testMatrixEntry
operator|.
name|canPathBeRenamed
argument_list|(
name|srcPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify that configured paths are normalized by removing    * redundant separators.    */
annotation|@
name|Test
DECL|method|testProtectedDirNormalization1 ()
specifier|public
name|void
name|testProtectedDirNormalization1
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|"/foo//bar"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|FSDirectory
operator|.
name|parseProtectedDirectories
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that configured paths are normalized by removing    * trailing separators.    */
annotation|@
name|Test
DECL|method|testProtectedDirNormalization2 ()
specifier|public
name|void
name|testProtectedDirNormalization2
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|"/a/b/,/c,/d/e/f/"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|FSDirectory
operator|.
name|parseProtectedDirectories
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertFalse
argument_list|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that configured paths are canonicalized.    */
annotation|@
name|Test
DECL|method|testProtectedDirIsCanonicalized ()
specifier|public
name|void
name|testProtectedDirIsCanonicalized
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|"/foo/../bar/"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|FSDirectory
operator|.
name|parseProtectedDirectories
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the root directory in the configuration is correctly handled.    */
annotation|@
name|Test
DECL|method|testProtectedRootDirectory ()
specifier|public
name|void
name|testProtectedRootDirectory
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|FSDirectory
operator|.
name|parseProtectedDirectories
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paths
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that invalid paths in the configuration are filtered out.    * (Path with scheme, reserved path).    */
annotation|@
name|Test
DECL|method|testBadPathsInConfig ()
specifier|public
name|void
name|testBadPathsInConfig
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PROTECTED_DIRECTORIES
argument_list|,
literal|"hdfs://foo/,/.reserved/foo"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|FSDirectory
operator|.
name|parseProtectedDirectories
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Unexpected directories "
operator|+
name|paths
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return true if the path was successfully deleted. False if it    * failed with AccessControlException. Any other exceptions are    * propagated to the caller.    *    * @param fs    * @param path    * @return    */
DECL|method|deletePath (FileSystem fs, Path path)
specifier|private
name|boolean
name|deletePath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Return true if the path was successfully renamed. False if it    * failed with AccessControlException. Any other exceptions are    * propagated to the caller.    *    * @param fs    * @param srcPath    * @param dstPath    * @return    */
DECL|method|renamePath (FileSystem fs, Path srcPath, Path dstPath)
specifier|private
name|boolean
name|renamePath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|TestMatrixEntry
specifier|private
specifier|static
class|class
name|TestMatrixEntry
block|{
comment|// true if the path can be deleted.
DECL|field|protectedPaths
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
name|protectedPaths
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|unProtectedPaths
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Boolean
argument_list|>
name|unProtectedPaths
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|TestMatrixEntry ()
specifier|private
name|TestMatrixEntry
parameter_list|()
block|{     }
DECL|method|get ()
specifier|public
specifier|static
name|TestMatrixEntry
name|get
parameter_list|()
block|{
return|return
operator|new
name|TestMatrixEntry
argument_list|()
return|;
block|}
DECL|method|getProtectedPaths ()
specifier|public
name|Collection
argument_list|<
name|Path
argument_list|>
name|getProtectedPaths
parameter_list|()
block|{
return|return
name|protectedPaths
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getUnprotectedPaths ()
specifier|public
name|Collection
argument_list|<
name|Path
argument_list|>
name|getUnprotectedPaths
parameter_list|()
block|{
return|return
name|unProtectedPaths
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Get all paths to be deleted in sorted order.      * @return sorted collection of paths to be deleted.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Path implements Comparable incorrectly
DECL|method|getAllPathsToBeDeleted ()
specifier|public
name|Iterable
argument_list|<
name|Path
argument_list|>
name|getAllPathsToBeDeleted
parameter_list|()
block|{
comment|// Sorting ensures deletion of parents is attempted first.
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|combined
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|combined
operator|.
name|addAll
argument_list|(
name|protectedPaths
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|combined
operator|.
name|addAll
argument_list|(
name|unProtectedPaths
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|combined
argument_list|)
expr_stmt|;
return|return
name|combined
return|;
block|}
DECL|method|canPathBeDeleted (Path path)
specifier|public
name|boolean
name|canPathBeDeleted
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|protectedPaths
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|?
name|protectedPaths
operator|.
name|get
argument_list|(
name|path
argument_list|)
else|:
name|unProtectedPaths
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|canPathBeRenamed (Path path)
specifier|public
name|boolean
name|canPathBeRenamed
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|protectedPaths
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|?
name|protectedPaths
operator|.
name|get
argument_list|(
name|path
argument_list|)
else|:
name|unProtectedPaths
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|addProtectedDir (String dir, boolean canBeDeleted)
specifier|public
name|TestMatrixEntry
name|addProtectedDir
parameter_list|(
name|String
name|dir
parameter_list|,
name|boolean
name|canBeDeleted
parameter_list|)
block|{
name|protectedPaths
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|canBeDeleted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addUnprotectedDir (String dir, boolean canBeDeleted)
specifier|public
name|TestMatrixEntry
name|addUnprotectedDir
parameter_list|(
name|String
name|dir
parameter_list|,
name|boolean
name|canBeDeleted
parameter_list|)
block|{
name|unProtectedPaths
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|,
name|canBeDeleted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TestMatrixEntry - ProtectedPaths=["
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|protectedPaths
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"]; UnprotectedPaths=["
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|unProtectedPaths
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

