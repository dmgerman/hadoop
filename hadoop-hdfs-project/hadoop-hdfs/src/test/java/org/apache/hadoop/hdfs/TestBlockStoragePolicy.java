begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test {@link BlockStoragePolicy} */
end_comment

begin_class
DECL|class|TestBlockStoragePolicy
specifier|public
class|class
name|TestBlockStoragePolicy
block|{
DECL|field|none
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|none
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|archive
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|archive
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
DECL|field|disk
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|disk
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
DECL|field|both
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|both
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPolicies ()
specifier|public
name|void
name|testDefaultPolicies
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
name|COLD
init|=
operator|(
name|byte
operator|)
literal|4
decl_stmt|;
specifier|final
name|byte
name|WARM
init|=
operator|(
name|byte
operator|)
literal|8
decl_stmt|;
specifier|final
name|byte
name|HOT
init|=
operator|(
name|byte
operator|)
literal|12
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|expectedPolicyStrings
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|COLD
argument_list|,
literal|"BlockStoragePolicy{COLD:4, storageTypes=[ARCHIVE], creationFallbacks=[], replicationFallbacks=[]"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|WARM
argument_list|,
literal|"BlockStoragePolicy{WARM:8, storageTypes=[DISK, ARCHIVE], creationFallbacks=[DISK, ARCHIVE], replicationFallbacks=[DISK, ARCHIVE]"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|HOT
argument_list|,
literal|"BlockStoragePolicy{HOT:12, storageTypes=[DISK], creationFallbacks=[], replicationFallbacks=[ARCHIVE]"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|BlockStoragePolicy
index|[]
name|policies
init|=
name|BlockStoragePolicy
operator|.
name|readBlockStoragePolicies
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|policies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|policies
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|policies
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPolicyStrings
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// check Cold policy
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|policies
index|[
name|COLD
index|]
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|StorageType
index|[]
name|computed
init|=
name|cold
operator|.
name|getStoragteTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|cold
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|cold
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check Warm policy
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|policies
index|[
name|WARM
index|]
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|StorageType
index|[]
name|computed
init|=
name|warm
operator|.
name|getStoragteTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|warm
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|warm
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check Hot policy
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|policies
index|[
name|HOT
index|]
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|StorageType
index|[]
name|computed
init|=
name|hot
operator|.
name|getStoragteTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|hot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|hot
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertStorageType (StorageType[] computed, short replication, StorageType... answers)
specifier|static
name|void
name|assertStorageType
parameter_list|(
name|StorageType
index|[]
name|computed
parameter_list|,
name|short
name|replication
parameter_list|,
name|StorageType
modifier|...
name|answers
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|replication
argument_list|,
name|computed
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|StorageType
name|last
init|=
name|answers
index|[
name|answers
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|computed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StorageType
name|expected
init|=
name|i
operator|<
name|answers
operator|.
name|length
condition|?
name|answers
index|[
name|i
index|]
else|:
name|last
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|computed
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCreationFallback (BlockStoragePolicy policy, StorageType noneExpected, StorageType archiveExpected, StorageType diskExpected)
specifier|static
name|void
name|assertCreationFallback
parameter_list|(
name|BlockStoragePolicy
name|policy
parameter_list|,
name|StorageType
name|noneExpected
parameter_list|,
name|StorageType
name|archiveExpected
parameter_list|,
name|StorageType
name|diskExpected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|noneExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|none
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|archiveExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|archive
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diskExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|both
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReplicationFallback (BlockStoragePolicy policy, StorageType noneExpected, StorageType archiveExpected, StorageType diskExpected)
specifier|static
name|void
name|assertReplicationFallback
parameter_list|(
name|BlockStoragePolicy
name|policy
parameter_list|,
name|StorageType
name|noneExpected
parameter_list|,
name|StorageType
name|archiveExpected
parameter_list|,
name|StorageType
name|diskExpected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|noneExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|none
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|archiveExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|archive
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diskExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|both
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

