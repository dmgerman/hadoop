begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test {@link BlockStoragePolicy} */
end_comment

begin_class
DECL|class|TestBlockStoragePolicy
specifier|public
class|class
name|TestBlockStoragePolicy
block|{
DECL|field|POLICY_SUITE
specifier|public
specifier|static
specifier|final
name|BlockStoragePolicySuite
name|POLICY_SUITE
decl_stmt|;
DECL|field|DEFAULT_STORAGE_POLICY
specifier|public
specifier|static
specifier|final
name|BlockStoragePolicy
name|DEFAULT_STORAGE_POLICY
decl_stmt|;
DECL|field|conf
specifier|public
specifier|static
specifier|final
name|Configuration
name|conf
decl_stmt|;
static|static
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|POLICY_SUITE
operator|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
expr_stmt|;
name|DEFAULT_STORAGE_POLICY
operator|=
name|POLICY_SUITE
operator|.
name|getDefaultPolicy
argument_list|()
expr_stmt|;
block|}
DECL|field|none
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|none
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|archive
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|archive
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
DECL|field|disk
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|disk
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
DECL|field|ssd
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|ssd
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
DECL|field|disk_archive
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|disk_archive
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
DECL|field|all
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|all
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
DECL|field|FILE_LEN
specifier|static
specifier|final
name|long
name|FILE_LEN
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|COLD
specifier|static
specifier|final
name|byte
name|COLD
init|=
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_ID
decl_stmt|;
DECL|field|WARM
specifier|static
specifier|final
name|byte
name|WARM
init|=
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_ID
decl_stmt|;
DECL|field|HOT
specifier|static
specifier|final
name|byte
name|HOT
init|=
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_ID
decl_stmt|;
DECL|field|ONESSD
specifier|static
specifier|final
name|byte
name|ONESSD
init|=
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_ID
decl_stmt|;
DECL|field|ALLSSD
specifier|static
specifier|final
name|byte
name|ALLSSD
init|=
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_ID
decl_stmt|;
DECL|field|LAZY_PERSIST
specifier|static
specifier|final
name|byte
name|LAZY_PERSIST
init|=
name|HdfsConstants
operator|.
name|MEMORY_STORAGE_POLICY_ID
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConfigKeyEnabled ()
specifier|public
name|void
name|testConfigKeyEnabled
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that setStoragePolicy throws IOException when    * dfs.storage.policy.enabled is set to false.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|,
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testConfigKeyDisabled ()
specifier|public
name|void
name|testConfigKeyDisabled
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultPolicies ()
specifier|public
name|void
name|testDefaultPolicies
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|expectedPolicyStrings
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|COLD
argument_list|,
literal|"BlockStoragePolicy{COLD:"
operator|+
name|COLD
operator|+
literal|", storageTypes=[ARCHIVE], "
operator|+
literal|"creationFallbacks=[], replicationFallbacks=[]}"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|WARM
argument_list|,
literal|"BlockStoragePolicy{WARM:"
operator|+
name|WARM
operator|+
literal|", storageTypes=[DISK, ARCHIVE], "
operator|+
literal|"creationFallbacks=[DISK, ARCHIVE], "
operator|+
literal|"replicationFallbacks=[DISK, ARCHIVE]}"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|HOT
argument_list|,
literal|"BlockStoragePolicy{HOT:"
operator|+
name|HOT
operator|+
literal|", storageTypes=[DISK], "
operator|+
literal|"creationFallbacks=[], replicationFallbacks=[ARCHIVE]}"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|LAZY_PERSIST
argument_list|,
literal|"BlockStoragePolicy{LAZY_PERSIST:"
operator|+
name|LAZY_PERSIST
operator|+
literal|", storageTypes=[RAM_DISK, DISK], "
operator|+
literal|"creationFallbacks=[DISK], replicationFallbacks=[DISK]}"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|ONESSD
argument_list|,
literal|"BlockStoragePolicy{ONE_SSD:"
operator|+
name|ONESSD
operator|+
literal|", storageTypes=[SSD, DISK], creationFallbacks=[SSD, DISK], "
operator|+
literal|"replicationFallbacks=[SSD, DISK]}"
argument_list|)
expr_stmt|;
name|expectedPolicyStrings
operator|.
name|put
argument_list|(
name|ALLSSD
argument_list|,
literal|"BlockStoragePolicy{ALL_SSD:"
operator|+
name|ALLSSD
operator|+
literal|", storageTypes=[SSD], creationFallbacks=[DISK], "
operator|+
literal|"replicationFallbacks=[DISK]}"
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BlockStoragePolicy
name|policy
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|policy
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPolicyStrings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
argument_list|,
name|POLICY_SUITE
operator|.
name|getDefaultPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// check Cold policy
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|cold
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|cold
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|cold
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check Warm policy
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|warm
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|warm
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|warm
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check Hot policy
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|hot
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|hot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|hot
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check ONE_SSD policy
specifier|final
name|BlockStoragePolicy
name|onessd
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|ONESSD
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|onessd
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|onessd
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|onessd
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check ALL_SSD policy
specifier|final
name|BlockStoragePolicy
name|allssd
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|ALLSSD
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|allssd
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|allssd
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|allssd
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
block|{
comment|// check LAZY_PERSIST policy
specifier|final
name|BlockStoragePolicy
name|lazyPersist
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|LAZY_PERSIST
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|replication
init|=
literal|1
init|;
name|replication
operator|<
literal|6
condition|;
name|replication
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
init|=
name|lazyPersist
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
name|assertStorageType
argument_list|(
name|computed
argument_list|,
name|replication
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
name|assertCreationFallback
argument_list|(
name|lazyPersist
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertReplicationFallback
argument_list|(
name|lazyPersist
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newStorageTypes (int nDisk, int nArchive)
specifier|static
name|StorageType
index|[]
name|newStorageTypes
parameter_list|(
name|int
name|nDisk
parameter_list|,
name|int
name|nArchive
parameter_list|)
block|{
specifier|final
name|StorageType
index|[]
name|t
init|=
operator|new
name|StorageType
index|[
name|nDisk
operator|+
name|nArchive
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|t
argument_list|,
literal|0
argument_list|,
name|nDisk
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|t
argument_list|,
name|nDisk
argument_list|,
name|t
operator|.
name|length
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|asList (int nDisk, int nArchive)
specifier|static
name|List
argument_list|<
name|StorageType
argument_list|>
name|asList
parameter_list|(
name|int
name|nDisk
parameter_list|,
name|int
name|nArchive
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|newStorageTypes
argument_list|(
name|nDisk
argument_list|,
name|nArchive
argument_list|)
argument_list|)
return|;
block|}
DECL|method|assertStorageType (List<StorageType> computed, short replication, StorageType... answers)
specifier|static
name|void
name|assertStorageType
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
parameter_list|,
name|short
name|replication
parameter_list|,
name|StorageType
modifier|...
name|answers
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|replication
argument_list|,
name|computed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StorageType
name|last
init|=
name|answers
index|[
name|answers
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|computed
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StorageType
name|expected
init|=
name|i
operator|<
name|answers
operator|.
name|length
condition|?
name|answers
index|[
name|i
index|]
else|:
name|last
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|computed
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertCreationFallback (BlockStoragePolicy policy, StorageType noneExpected, StorageType archiveExpected, StorageType diskExpected, StorageType ssdExpected, StorageType disk_archiveExpected)
specifier|static
name|void
name|assertCreationFallback
parameter_list|(
name|BlockStoragePolicy
name|policy
parameter_list|,
name|StorageType
name|noneExpected
parameter_list|,
name|StorageType
name|archiveExpected
parameter_list|,
name|StorageType
name|diskExpected
parameter_list|,
name|StorageType
name|ssdExpected
parameter_list|,
name|StorageType
name|disk_archiveExpected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|noneExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|none
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|archiveExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|archive
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diskExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ssdExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|ssd
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|disk_archiveExpected
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|disk_archive
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|policy
operator|.
name|getCreationFallback
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReplicationFallback (BlockStoragePolicy policy, StorageType noneExpected, StorageType archiveExpected, StorageType diskExpected, StorageType ssdExpected)
specifier|static
name|void
name|assertReplicationFallback
parameter_list|(
name|BlockStoragePolicy
name|policy
parameter_list|,
name|StorageType
name|noneExpected
parameter_list|,
name|StorageType
name|archiveExpected
parameter_list|,
name|StorageType
name|diskExpected
parameter_list|,
name|StorageType
name|ssdExpected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|noneExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|none
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|archiveExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|archive
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|diskExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ssdExpected
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|ssd
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|policy
operator|.
name|getReplicationFallback
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|interface|CheckChooseStorageTypes
specifier|private
specifier|static
interface|interface
name|CheckChooseStorageTypes
block|{
DECL|method|checkChooseStorageTypes (BlockStoragePolicy p, short replication, List<StorageType> chosen, StorageType... expected)
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
function_decl|;
comment|/** Basic case: pass only replication and chosen */
DECL|field|Basic
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|Basic
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With empty unavailables and isNewBlock=true */
DECL|field|EmptyUnavailablesAndNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|EmptyUnavailablesAndNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|none
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With empty unavailables and isNewBlock=false */
DECL|field|EmptyUnavailablesAndNonNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|EmptyUnavailablesAndNonNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|none
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With both DISK and ARCHIVE unavailables and isNewBlock=true */
DECL|field|BothUnavailableAndNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|BothUnavailableAndNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|disk_archive
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With both DISK and ARCHIVE unavailable and isNewBlock=false */
DECL|field|BothUnavailableAndNonNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|BothUnavailableAndNonNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|disk_archive
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With ARCHIVE unavailable and isNewBlock=true */
DECL|field|ArchivalUnavailableAndNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|ArchivalUnavailableAndNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|archive
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** With ARCHIVE unavailable and isNewBlock=true */
DECL|field|ArchivalUnavailableAndNonNewBlock
specifier|static
specifier|final
name|CheckChooseStorageTypes
name|ArchivalUnavailableAndNonNewBlock
init|=
operator|new
name|CheckChooseStorageTypes
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|archive
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseStorageTypes ()
specifier|public
name|void
name|testChooseStorageTypes
parameter_list|()
block|{
name|run
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|Basic
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|EmptyUnavailablesAndNewBlock
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|EmptyUnavailablesAndNonNewBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|run (CheckChooseStorageTypes method)
specifier|private
specifier|static
name|void
name|run
parameter_list|(
name|CheckChooseStorageTypes
name|method
parameter_list|)
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testChooseStorageTypesWithBothUnavailable ()
specifier|public
name|void
name|testChooseStorageTypesWithBothUnavailable
parameter_list|()
block|{
name|runWithBothUnavailable
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|BothUnavailableAndNewBlock
argument_list|)
expr_stmt|;
name|runWithBothUnavailable
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|BothUnavailableAndNonNewBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|runWithBothUnavailable (CheckChooseStorageTypes method)
specifier|private
specifier|static
name|void
name|runWithBothUnavailable
parameter_list|(
name|CheckChooseStorageTypes
name|method
parameter_list|)
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|3
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<=
name|n
condition|;
name|d
operator|++
control|)
block|{
specifier|final
name|int
name|a
init|=
name|n
operator|-
name|d
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|asList
argument_list|(
name|d
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testChooseStorageTypesWithDiskUnavailableAndNewBlock ()
specifier|public
name|void
name|testChooseStorageTypesWithDiskUnavailableAndNewBlock
parameter_list|()
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
init|=
name|disk
decl_stmt|;
specifier|final
name|boolean
name|isNewBlock
init|=
literal|true
decl_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testChooseStorageTypesWithArchiveUnavailable ()
specifier|public
name|void
name|testChooseStorageTypesWithArchiveUnavailable
parameter_list|()
block|{
name|runWithArchiveUnavailable
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|ArchivalUnavailableAndNewBlock
argument_list|)
expr_stmt|;
name|runWithArchiveUnavailable
argument_list|(
name|CheckChooseStorageTypes
operator|.
name|ArchivalUnavailableAndNonNewBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|runWithArchiveUnavailable (CheckChooseStorageTypes method)
specifier|private
specifier|static
name|void
name|runWithArchiveUnavailable
parameter_list|(
name|CheckChooseStorageTypes
name|method
parameter_list|)
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|method
operator|.
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testChooseStorageTypesWithDiskUnavailableAndNonNewBlock ()
specifier|public
name|void
name|testChooseStorageTypesWithDiskUnavailableAndNonNewBlock
parameter_list|()
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
init|=
name|disk
decl_stmt|;
specifier|final
name|boolean
name|isNewBlock
init|=
literal|false
decl_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
decl_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
name|checkChooseStorageTypes
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkChooseStorageTypes (BlockStoragePolicy p, short replication, List<StorageType> chosen, EnumSet<StorageType> unavailables, boolean isNewBlock, StorageType... expected)
specifier|static
name|void
name|checkChooseStorageTypes
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|EnumSet
argument_list|<
name|StorageType
argument_list|>
name|unavailables
parameter_list|,
name|boolean
name|isNewBlock
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|,
name|unavailables
argument_list|,
name|isNewBlock
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStorageTypes (List<StorageType> computed, StorageType... expected)
specifier|static
name|void
name|assertStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|computed
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
name|assertStorageTypes
argument_list|(
name|computed
operator|.
name|toArray
argument_list|(
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|assertStorageTypes (StorageType[] computed, StorageType... expected)
specifier|static
name|void
name|assertStorageTypes
parameter_list|(
name|StorageType
index|[]
name|computed
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|computed
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseExcess ()
specifier|public
name|void
name|testChooseExcess
parameter_list|()
block|{
specifier|final
name|BlockStoragePolicy
name|hot
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|HOT
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|warm
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|WARM
argument_list|)
decl_stmt|;
specifier|final
name|BlockStoragePolicy
name|cold
init|=
name|POLICY_SUITE
operator|.
name|getPolicy
argument_list|(
name|COLD
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<=
literal|6
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<=
name|n
condition|;
name|d
operator|++
control|)
block|{
specifier|final
name|int
name|a
init|=
name|n
operator|-
name|d
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
init|=
name|asList
argument_list|(
name|d
argument_list|,
name|a
argument_list|)
decl_stmt|;
block|{
specifier|final
name|int
name|nDisk
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|d
operator|-
name|replication
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nArchive
init|=
name|a
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|expected
init|=
name|newStorageTypes
argument_list|(
name|nDisk
argument_list|,
name|nArchive
argument_list|)
decl_stmt|;
name|checkChooseExcess
argument_list|(
name|hot
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|int
name|nDisk
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|d
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nArchive
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|a
operator|-
name|replication
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|expected
init|=
name|newStorageTypes
argument_list|(
name|nDisk
argument_list|,
name|nArchive
argument_list|)
decl_stmt|;
name|checkChooseExcess
argument_list|(
name|warm
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|int
name|nDisk
init|=
name|d
decl_stmt|;
specifier|final
name|int
name|nArchive
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|a
operator|-
name|replication
argument_list|)
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|expected
init|=
name|newStorageTypes
argument_list|(
name|nDisk
argument_list|,
name|nArchive
argument_list|)
decl_stmt|;
name|checkChooseExcess
argument_list|(
name|cold
argument_list|,
name|replication
argument_list|,
name|chosen
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkChooseExcess (BlockStoragePolicy p, short replication, List<StorageType> chosen, StorageType... expected)
specifier|static
name|void
name|checkChooseExcess
parameter_list|(
name|BlockStoragePolicy
name|p
parameter_list|,
name|short
name|replication
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|chosen
parameter_list|,
name|StorageType
modifier|...
name|expected
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|p
operator|.
name|chooseExcess
argument_list|(
name|replication
argument_list|,
name|chosen
argument_list|)
decl_stmt|;
name|assertStorageTypes
argument_list|(
name|types
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDirectoryListing (HdfsFileStatus[] stats, byte... policies)
specifier|private
name|void
name|checkDirectoryListing
parameter_list|(
name|HdfsFileStatus
index|[]
name|stats
parameter_list|,
name|byte
modifier|...
name|policies
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stats
operator|.
name|length
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stats
index|[
name|i
index|]
operator|.
name|getStoragePolicy
argument_list|()
argument_list|,
name|policies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetStoragePolicy ()
specifier|public
name|void
name|testSetStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testSetStoragePolicy"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|barDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|barFile1
init|=
operator|new
name|Path
argument_list|(
name|barDir
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|barFile2
init|=
operator|new
name|Path
argument_list|(
name|barDir
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fooFile
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|barFile1
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|barFile2
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|String
name|invalidPolicyName
init|=
literal|"INVALID-POLICY"
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|fooFile
argument_list|,
name|invalidPolicyName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw a HadoopIllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|invalidPolicyName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// check storage policy
name|HdfsFileStatus
index|[]
name|dirList
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|HdfsFileStatus
index|[]
name|barList
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|barDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|,
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|)
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|barList
argument_list|,
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|,
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|invalidPath
init|=
operator|new
name|Path
argument_list|(
literal|"/invalidPath"
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|invalidPath
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw a FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|invalidPath
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|invalidPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw a FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|invalidPath
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|fooFile
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|barFile2
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File storage policy should be COLD"
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|,
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|fooFile
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File storage policy should be WARM"
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|,
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|barDir
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File storage policy should be HOT"
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|,
name|fs
operator|.
name|getStoragePolicy
argument_list|(
name|barFile2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dirList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|barList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|barDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|WARM
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
comment|// bar is warm, foo is cold
name|checkDirectoryListing
argument_list|(
name|barList
argument_list|,
name|WARM
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// restart namenode to make sure the editlog is correct
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dirList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|barList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|barDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|WARM
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
comment|// bar is warm, foo is cold
name|checkDirectoryListing
argument_list|(
name|barList
argument_list|,
name|WARM
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// restart namenode with checkpoint to make sure the fsimage is correct
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dirList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|barList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|barDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|WARM
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
comment|// bar is warm, foo is cold
name|checkDirectoryListing
argument_list|(
name|barList
argument_list|,
name|WARM
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetStoragePolicy ()
specifier|public
name|void
name|testGetStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testGetStoragePolicy"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fooFile
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
literal|"/testGetStoragePolicy/foo"
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|String
name|policyName
init|=
name|client
operator|.
name|getStoragePolicy
argument_list|(
literal|"/testGetStoragePolicy/foo"
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File storage policy should be COLD"
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetStoragePolicyWithSnapshot ()
specifier|public
name|void
name|testSetStoragePolicyWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testSetStoragePolicyWithSnapshot"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooFile1
init|=
operator|new
name|Path
argument_list|(
name|fooDir
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fooFile2
init|=
operator|new
name|Path
argument_list|(
name|fooDir
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fooFile1
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fooFile2
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|fooDir
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|HdfsFileStatus
index|[]
name|dirList
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|HdfsFileStatus
index|[]
name|fooList
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|fooDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|fooList
argument_list|,
name|WARM
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
comment|// take snapshot
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// change the storage policy of fooFile1
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|fooFile1
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|fooList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|fooDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|fooList
argument_list|,
name|COLD
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
comment|// check the policy for /dir/.snapshot/s1/foo/f1. Note we always return
comment|// the latest storage policy for a file/directory.
name|Path
name|s1f1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
literal|"foo/f1"
argument_list|)
decl_stmt|;
name|DirectoryListing
name|f1Listing
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1f1
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|f1Listing
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
comment|// delete f1
name|fs
operator|.
name|delete
argument_list|(
name|fooFile1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fooList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|fooDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|fooList
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
comment|// check the policy for /dir/.snapshot/s1/foo/f1 again after the deletion
name|checkDirectoryListing
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1f1
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
comment|// change the storage policy of foo dir
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|fooDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// /dir/foo is now hot
name|dirList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|dirList
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// /dir/foo/f2 is hot
name|fooList
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|fooDir
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|fooList
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// check storage policy of snapshot path
name|Path
name|s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Path
name|s1foo
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// /dir/.snapshot/.s1/foo/f1 and /dir/.snapshot/.s1/foo/f2 should still
comment|// follow the latest
name|checkDirectoryListing
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1foo
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|COLD
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
comment|// delete foo
name|fs
operator|.
name|delete
argument_list|(
name|fooDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|s1foo
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
operator|.
name|getPartialListing
argument_list|()
argument_list|,
name|COLD
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|genStorageTypes (int numDataNodes)
specifier|private
specifier|static
name|StorageType
index|[]
index|[]
name|genStorageTypes
parameter_list|(
name|int
name|numDataNodes
parameter_list|)
block|{
name|StorageType
index|[]
index|[]
name|types
init|=
operator|new
name|StorageType
index|[
name|numDataNodes
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
DECL|method|checkLocatedBlocks (HdfsLocatedFileStatus status, int blockNum, int replicaNum, StorageType... types)
specifier|private
name|void
name|checkLocatedBlocks
parameter_list|(
name|HdfsLocatedFileStatus
name|status
parameter_list|,
name|int
name|blockNum
parameter_list|,
name|int
name|replicaNum
parameter_list|,
name|StorageType
modifier|...
name|types
parameter_list|)
block|{
name|List
argument_list|<
name|StorageType
argument_list|>
name|typeList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|typeList
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|status
operator|.
name|getBlockLocations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blockNum
argument_list|,
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|replicaNum
argument_list|,
name|lb
operator|.
name|getStorageTypes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|typeList
operator|.
name|remove
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|typeList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testChangeFileRep (String policyName, byte policyId, StorageType[] before, StorageType[] after)
specifier|private
name|void
name|testChangeFileRep
parameter_list|(
name|String
name|policyName
parameter_list|,
name|byte
name|policyId
parameter_list|,
name|StorageType
index|[]
name|before
parameter_list|,
name|StorageType
index|[]
name|after
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDataNodes
init|=
literal|5
decl_stmt|;
specifier|final
name|StorageType
index|[]
index|[]
name|types
init|=
name|genStorageTypes
argument_list|(
name|numDataNodes
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|types
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|foo
argument_list|,
name|FILE_LEN
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|HdfsFileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
name|checkDirectoryListing
argument_list|(
name|status
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
name|HdfsLocatedFileStatus
name|fooStatus
init|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|status
index|[
literal|0
index|]
decl_stmt|;
name|checkLocatedBlocks
argument_list|(
name|fooStatus
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|before
argument_list|)
expr_stmt|;
comment|// change the replication factor to 5
name|fs
operator|.
name|setReplication
argument_list|(
name|foo
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|status
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
name|fooStatus
operator|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|status
index|[
literal|0
index|]
expr_stmt|;
name|checkLocatedBlocks
argument_list|(
name|fooStatus
argument_list|,
literal|1
argument_list|,
name|numDataNodes
argument_list|,
name|after
argument_list|)
expr_stmt|;
comment|// change the replication factor back to 3
name|fs
operator|.
name|setReplication
argument_list|(
name|foo
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
name|checkDirectoryListing
argument_list|(
name|status
argument_list|,
name|policyId
argument_list|)
expr_stmt|;
name|fooStatus
operator|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|status
index|[
literal|0
index|]
expr_stmt|;
name|checkLocatedBlocks
argument_list|(
name|fooStatus
argument_list|,
literal|1
argument_list|,
name|REPLICATION
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Consider a File with Hot storage policy. Increase replication factor of    * that file from 3 to 5. Make sure all replications are created in DISKS.    */
annotation|@
name|Test
DECL|method|testChangeHotFileRep ()
specifier|public
name|void
name|testChangeHotFileRep
parameter_list|()
throws|throws
name|Exception
block|{
name|testChangeFileRep
argument_list|(
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|,
name|HOT
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Consider a File with Warm temperature. Increase replication factor of    * that file from 3 to 5. Make sure all replicas are created in DISKS    * and ARCHIVE.    */
annotation|@
name|Test
DECL|method|testChangeWarmRep ()
specifier|public
name|void
name|testChangeWarmRep
parameter_list|()
throws|throws
name|Exception
block|{
name|testChangeFileRep
argument_list|(
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|,
name|WARM
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Consider a File with Cold temperature. Increase replication factor of    * that file from 3 to 5. Make sure all replicas are created in ARCHIVE.    */
annotation|@
name|Test
DECL|method|testChangeColdRep ()
specifier|public
name|void
name|testChangeColdRep
parameter_list|()
throws|throws
name|Exception
block|{
name|testChangeFileRep
argument_list|(
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|,
name|COLD
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseTargetWithTopology ()
specifier|public
name|void
name|testChooseTargetWithTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockStoragePolicy
name|policy1
init|=
operator|new
name|BlockStoragePolicy
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|,
literal|"TEST1"
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|)
decl_stmt|;
name|BlockStoragePolicy
name|policy2
init|=
operator|new
name|BlockStoragePolicy
argument_list|(
operator|(
name|byte
operator|)
literal|11
argument_list|,
literal|"TEST2"
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r2"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|types
init|=
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
decl_stmt|;
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
literal|3
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|types
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeDescriptor
index|[]
name|dataNodes
init|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
name|namenode
init|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockPlacementPolicy
name|replicator
init|=
name|bm
operator|.
name|getBlockPlacementPolicy
argument_list|()
decl_stmt|;
name|NetworkTopology
name|cluster
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|dataNodes
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
literal|"/foo"
argument_list|,
literal|3
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|Collections
operator|.
expr|<
name|DatanodeStorageInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|policy1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
name|targets
operator|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
literal|"/foo"
argument_list|,
literal|3
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|Collections
operator|.
expr|<
name|DatanodeStorageInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|policy2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseSsdOverDisk ()
specifier|public
name|void
name|testChooseSsdOverDisk
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockStoragePolicy
name|policy
init|=
operator|new
name|BlockStoragePolicy
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|,
literal|"TEST1"
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|,
operator|new
name|StorageType
index|[]
block|{}
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|disks
init|=
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
decl_stmt|;
specifier|final
name|DatanodeStorageInfo
index|[]
name|diskStorages
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
literal|3
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
name|disks
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeDescriptor
index|[]
name|dataNodes
init|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|diskStorages
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlockManagerTestUtil
operator|.
name|updateStorage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
operator|new
name|DatanodeStorage
argument_list|(
literal|"ssd"
operator|+
name|i
argument_list|,
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
name|namenode
init|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockPlacementPolicy
name|replicator
init|=
name|bm
operator|.
name|getBlockPlacementPolicy
argument_list|()
decl_stmt|;
name|NetworkTopology
name|cluster
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|dataNodes
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
literal|"/foo"
argument_list|,
literal|3
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|Collections
operator|.
expr|<
name|DatanodeStorageInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|policy
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|targets
index|[
literal|0
index|]
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|targets
index|[
literal|1
index|]
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileStoragePolicyAfterRestartNN ()
specifier|public
name|void
name|testGetFileStoragePolicyAfterRestartNN
parameter_list|()
throws|throws
name|Exception
block|{
comment|//HDFS8219
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|file
init|=
literal|"/testScheduleWithinSameNode/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testScheduleWithinSameNode"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// 2. Set Dir policy
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// 3. Create file
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleWithinSameNode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 4. Set Dir policy
name|fs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|status
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// 5. get file policy, it should be parent policy.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File storage policy should be HOT"
argument_list|,
name|status
operator|.
name|getStoragePolicy
argument_list|()
operator|==
name|HOT
argument_list|)
expr_stmt|;
comment|// 6. restart NameNode for reloading edits logs.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 7. get file policy, it should be parent policy.
name|status
operator|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File storage policy should be HOT"
argument_list|,
name|status
operator|.
name|getStoragePolicy
argument_list|()
operator|==
name|HOT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify that {@link FileSystem#getAllStoragePolicies} returns all    * known storage policies for DFS.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testGetAllStoragePoliciesFromFs ()
specifier|public
name|void
name|testGetAllStoragePoliciesFromFs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Get policies via {@link FileSystem#getAllStoragePolicies}
name|Set
argument_list|<
name|String
argument_list|>
name|policyNamesSet1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicySpi
name|policy
range|:
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAllStoragePolicies
argument_list|()
control|)
block|{
name|policyNamesSet1
operator|.
name|add
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get policies from the default BlockStoragePolicySuite.
name|BlockStoragePolicySuite
name|suite
init|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|policyNamesSet2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|suite
operator|.
name|getAllPolicies
argument_list|()
control|)
block|{
name|policyNamesSet2
operator|.
name|add
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that we got the same set of policies in both cases.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|policyNamesSet1
argument_list|,
name|policyNamesSet2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Sets
operator|.
name|difference
argument_list|(
name|policyNamesSet2
argument_list|,
name|policyNamesSet1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStorageType ()
specifier|public
name|void
name|testStorageType
parameter_list|()
block|{
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//put storage type is reversed order
name|map
operator|.
name|put
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
specifier|final
name|Iterator
argument_list|<
name|StorageType
argument_list|>
name|i
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|i
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

