begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HardLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_comment
comment|/**  * This class tests the building blocks that are needed to  * support HDFS appends.  */
end_comment

begin_class
DECL|class|TestFileAppend
specifier|public
class|class
name|TestFileAppend
block|{
DECL|field|simulatedStorage
name|boolean
name|simulatedStorage
init|=
literal|false
decl_stmt|;
DECL|field|fileContents
specifier|private
specifier|static
name|byte
index|[]
name|fileContents
init|=
literal|null
decl_stmt|;
comment|//
comment|// writes to file but does not close it
comment|//
DECL|method|writeFile (FSDataOutputStream stm)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FSDataOutputStream
name|stm
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// verify that the data written to the full blocks are sane
comment|//
DECL|method|checkFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|void
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// wait till all full blocks are confirmed by the datanodes.
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|fileSys
operator|.
name|getFileBlockLocations
argument_list|(
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|name
argument_list|)
argument_list|,
literal|0
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|length
operator|<
name|AppendTestUtil
operator|.
name|NUM_BLOCKS
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of blocks found "
operator|+
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|AppendTestUtil
operator|.
name|NUM_BLOCKS
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|locations
index|[
name|idx
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|<
name|repl
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Block index "
operator|+
name|idx
operator|+
literal|" not yet replciated."
argument_list|)
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|AppendTestUtil
operator|.
name|NUM_BLOCKS
operator|*
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
name|SimulatedFSDataset
operator|.
name|DEFAULT_DATABYTE
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// do a sanity check. Read the file
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|,
name|AppendTestUtil
operator|.
name|NUM_BLOCKS
operator|*
name|AppendTestUtil
operator|.
name|BLOCK_SIZE
argument_list|,
name|expected
argument_list|,
literal|"Read 1"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that copy on write for blocks works correctly    * @throws IOException an exception might be thrown    */
annotation|@
name|Test
DECL|method|testCopyOnWrite ()
specifier|public
name|void
name|testCopyOnWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_SIMULATED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a new file, write to it and close it.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Get a handle to the datanode
name|DataNode
index|[]
name|dn
init|=
name|cluster
operator|.
name|listDataNodes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be only one datanode but found "
operator|+
name|dn
operator|.
name|length
argument_list|,
name|dn
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locations
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|locations
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|FSDataset
name|dataset
init|=
operator|(
name|FSDataset
operator|)
name|dn
index|[
literal|0
index|]
operator|.
name|data
decl_stmt|;
comment|//
comment|// Create hard links for a few of the blocks
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
name|ExtendedBlock
name|b
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
specifier|final
name|File
name|f
init|=
name|DataNodeTestUtils
operator|.
name|getBlockFile
argument_list|(
name|dataset
argument_list|,
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|link
init|=
operator|new
name|File
argument_list|(
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|".link"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating hardlink for File "
operator|+
name|f
operator|+
literal|" to "
operator|+
name|link
argument_list|)
expr_stmt|;
name|HardLink
operator|.
name|createHardLink
argument_list|(
name|f
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Detach all blocks. This should remove hardlinks (if any)
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|b
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCopyOnWrite detaching block "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Detaching block "
operator|+
name|b
operator|+
literal|" should have returned true"
argument_list|,
name|dataset
operator|.
name|unlinkBlock
argument_list|(
name|b
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since the blocks were already detached earlier, these calls should
comment|// return false
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|b
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCopyOnWrite detaching block "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Detaching block "
operator|+
name|b
operator|+
literal|" should have returned false"
argument_list|,
operator|!
name|dataset
operator|.
name|unlinkBlock
argument_list|(
name|b
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test a simple flush on a simple HDFS file.    * @throws IOException an exception might be thrown    */
annotation|@
name|Test
DECL|method|testSimpleFlush ()
specifier|public
name|void
name|testSimpleFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_SIMULATED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fileContents
operator|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a new file.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/simpleFlush.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file simpleFlush.dat"
argument_list|)
expr_stmt|;
comment|// write to file
name|int
name|mid
init|=
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|/
literal|2
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote and Flushed first part of file."
argument_list|)
expr_stmt|;
comment|// write the remainder of the file
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|mid
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|mid
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Written second part of file"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote and Flushed second part of file."
argument_list|)
expr_stmt|;
comment|// verify that full blocks are sane
name|checkFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closed file."
argument_list|)
expr_stmt|;
comment|// verify that entire file is good
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|,
name|fileContents
argument_list|,
literal|"Read 2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Exception :"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Throwable :"
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Throwable : "
operator|+
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that file data can be flushed.    * @throws IOException an exception might be thrown    */
annotation|@
name|Test
DECL|method|testComplexFlush ()
specifier|public
name|void
name|testComplexFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_SIMULATED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fileContents
operator|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a new file.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/complexFlush.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file complexFlush.dat"
argument_list|)
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
for|for
control|(
name|start
operator|=
literal|0
init|;
operator|(
name|start
operator|+
literal|29
operator|)
operator|<
name|AppendTestUtil
operator|.
name|FILE_SIZE
condition|;
control|)
block|{
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|start
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|start
operator|+=
literal|29
expr_stmt|;
block|}
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|start
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|start
argument_list|)
expr_stmt|;
comment|// verify that full blocks are sane
name|checkFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that entire file is good
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|,
name|fileContents
argument_list|,
literal|"Read 2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Exception :"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Throwable :"
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Throwable : "
operator|+
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * FileNotFoundException is expected for appending to a non-exisiting file    *     * @throws FileNotFoundException as the result    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testFileNotFound ()
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|SimulatedFSDataset
operator|.
name|CONFIG_PROPERTY_SIMULATED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/nonexistingfile.dat"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|append
argument_list|(
name|file1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

