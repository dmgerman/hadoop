begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
DECL|class|TestAtomicFileOutputStream
specifier|public
class|class
name|TestAtomicFileOutputStream
block|{
DECL|field|TEST_STRING
specifier|private
specifier|static
specifier|final
name|String
name|TEST_STRING
init|=
literal|"hello world"
decl_stmt|;
DECL|field|TEST_STRING_2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_STRING_2
init|=
literal|"goodbye world"
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestAtomicFileOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DST_FILE
specifier|private
specifier|static
specifier|final
name|File
name|DST_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test.txt"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|cleanupTestDir ()
specifier|public
name|void
name|cleanupTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|TEST_DIR
operator|.
name|exists
argument_list|()
operator|||
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDeleteContents
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where there is no existing file    */
annotation|@
name|Test
DECL|method|testWriteNewFile ()
specifier|public
name|void
name|testWriteNewFile
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|fos
init|=
operator|new
name|AtomicFileOutputStream
argument_list|(
name|DST_FILE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|DST_FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|DST_FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|DST_FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|readBackData
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|DST_FILE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_STRING
argument_list|,
name|readBackData
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where there is no existing file    */
annotation|@
name|Test
DECL|method|testOverwriteFile ()
specifier|public
name|void
name|testOverwriteFile
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Creating empty dst file"
argument_list|,
name|DST_FILE
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|fos
init|=
operator|new
name|AtomicFileOutputStream
argument_list|(
name|DST_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty file still exists"
argument_list|,
name|DST_FILE
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Original contents still in place
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|DST_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// New contents replace original file
name|String
name|readBackData
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|DST_FILE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_STRING
argument_list|,
name|readBackData
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where the flush() fails at close time - make sure    * that we clean up after ourselves and don't touch any    * existing file at the destination    */
annotation|@
name|Test
DECL|method|testFailToFlush ()
specifier|public
name|void
name|testFailToFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a file at destination
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|DST_FILE
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|TEST_STRING_2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|OutputStream
name|failingStream
init|=
name|createFailingStream
argument_list|()
decl_stmt|;
name|failingStream
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|failingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Close didn't throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
comment|// Should not have touched original file
name|assertEquals
argument_list|(
name|TEST_STRING_2
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|DST_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Temporary file should have been cleaned up"
argument_list|,
name|DST_FILE
operator|.
name|getName
argument_list|()
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|TEST_DIR
operator|.
name|list
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailToRename ()
specifier|public
name|void
name|testFailToRename
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|OutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|AtomicFileOutputStream
argument_list|(
name|DST_FILE
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|TEST_DIR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"failure in native rename"
argument_list|)
expr_stmt|;
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fos
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a stream that fails to flush at close time    */
DECL|method|createFailingStream ()
specifier|private
name|OutputStream
name|createFailingStream
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
return|return
operator|new
name|AtomicFileOutputStream
argument_list|(
name|DST_FILE
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injected failure"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

