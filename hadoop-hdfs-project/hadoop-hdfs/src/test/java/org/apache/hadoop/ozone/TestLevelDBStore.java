begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBKeyFilters
operator|.
name|KeyPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBKeyFilters
operator|.
name|LevelDBKeyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.hadoop.utils.LevelDBStore}.  */
end_comment

begin_class
DECL|class|TestLevelDBStore
specifier|public
class|class
name|TestLevelDBStore
block|{
DECL|field|store
specifier|private
name|LevelDBStore
name|store
decl_stmt|;
DECL|field|testDir
specifier|private
name|File
name|testDir
decl_stmt|;
DECL|field|MAX_GETRANGE_LENGTH
specifier|private
specifier|final
specifier|static
name|int
name|MAX_GETRANGE_LENGTH
init|=
literal|100
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|testDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|LevelDBStore
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add 20 entries.
comment|// {a0 : a-value0} to {a9 : a-value9}
comment|// {b0 : a-value0} to {b0 : b-value9}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"a-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|put
argument_list|(
name|getBytes
argument_list|(
literal|"b"
operator|+
name|i
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"b-value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
DECL|method|getBytes (String str)
specifier|private
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|str
argument_list|)
return|;
block|}
DECL|method|getString (byte[] bytes)
specifier|private
name|String
name|getString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGetRangeKVs ()
specifier|public
name|void
name|testGetRangeKVs
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
comment|// Set empty startKey will return values from beginning.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a-value2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Returns max available entries after a valid startKey.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b0"
argument_list|)
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b-value0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b0"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both startKey and count are honored.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"a9"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a9"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a-value9"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b-value0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Filter keys by prefix.
comment|// It should returns all "b*" entries.
name|LevelDBKeyFilter
name|filter1
init|=
operator|new
name|KeyPrefixFilter
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"b3"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b-value3"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Define a customized filter that filters keys by suffix.
comment|// Returns all "*2" entries.
name|LevelDBKeyFilter
name|filter2
init|=
parameter_list|(
name|preKey
parameter_list|,
name|currentKey
parameter_list|,
name|nextKey
parameter_list|)
lambda|->
name|getString
argument_list|(
name|currentKey
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply multiple filters.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b-value2"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If filter is null, no effect.
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
name|getString
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRangeLength ()
specifier|public
name|void
name|testGetRangeLength
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Count less than zero is invalid.
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Invalid count given"
argument_list|)
expr_stmt|;
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidStartKey ()
specifier|public
name|void
name|testInvalidStartKey
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If startKey is invalid, throws an invalid key exception.
name|expectedException
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Invalid start key"
argument_list|)
expr_stmt|;
name|store
operator|.
name|getRangeKVs
argument_list|(
name|getBytes
argument_list|(
literal|"unknownKey"
argument_list|)
argument_list|,
name|MAX_GETRANGE_LENGTH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

