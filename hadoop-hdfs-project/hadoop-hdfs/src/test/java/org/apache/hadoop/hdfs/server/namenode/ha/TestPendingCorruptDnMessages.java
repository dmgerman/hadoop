begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ThreadUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPendingCorruptDnMessages
specifier|public
class|class
name|TestPendingCorruptDnMessages
block|{
DECL|field|filePath
specifier|private
specifier|static
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/foo.txt"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testChangedStorageId ()
specifier|public
name|void
name|testChangedStorageId
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"foo bar baz"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the gen stamp of the block on datanode to go back in time (gen
comment|// stamps start at 1000)
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MiniDFSCluster
operator|.
name|changeGenStampOfBlock
argument_list|(
literal|0
argument_list|,
name|block
argument_list|,
literal|900
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stop the DN so the replica with the changed gen stamp will be reported
comment|// when this DN starts up.
name|DataNodeProperties
name|dnProps
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Restart the namenode so that when the DN comes up it will see an initial
comment|// block report.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnProps
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait until the standby NN queues up the corrupt block in the pending DN
comment|// message queue.
while|while
condition|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
operator|<
literal|1
condition|)
block|{
name|ThreadUtil
operator|.
name|sleepAtLeastIgnoreInterrupts
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|oldStorageId
init|=
name|getRegisteredDatanodeUid
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Reformat/restart the DN.
name|assertTrue
argument_list|(
name|wipeAndRestartDn
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Give the DN time to start up and register, which will cause the
comment|// DatanodeManager to dissociate the old storage ID from the DN xfer addr.
name|String
name|newStorageId
init|=
literal|""
decl_stmt|;
do|do
block|{
name|ThreadUtil
operator|.
name|sleepAtLeastIgnoreInterrupts
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|newStorageId
operator|=
name|getRegisteredDatanodeUid
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"====> oldStorageId: "
operator|+
name|oldStorageId
operator|+
literal|" newStorageId: "
operator|+
name|newStorageId
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|newStorageId
operator|.
name|equals
argument_list|(
name|oldStorageId
argument_list|)
condition|)
do|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now try to fail over.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRegisteredDatanodeUid ( MiniDFSCluster cluster, int nnIndex)
specifier|private
specifier|static
name|String
name|getRegisteredDatanodeUid
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|nnIndex
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|registeredDatanodes
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeListForReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registeredDatanodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registeredDatanodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
return|;
block|}
DECL|method|wipeAndRestartDn (MiniDFSCluster cluster, int dnIndex)
specifier|private
specifier|static
name|boolean
name|wipeAndRestartDn
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|dnIndex
parameter_list|)
throws|throws
name|IOException
block|{
comment|// stop the DN, reformat it, then start it again with the same xfer port.
name|DataNodeProperties
name|dnProps
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|dnIndex
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|formatDataNodeDirs
argument_list|()
expr_stmt|;
return|return
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnProps
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

