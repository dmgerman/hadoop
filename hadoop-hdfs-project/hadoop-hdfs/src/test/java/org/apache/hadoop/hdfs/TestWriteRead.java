begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file   * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWriteRead
specifier|public
class|class
name|TestWriteRead
block|{
comment|// Junit test settings.
DECL|field|WR_NTIMES
specifier|private
specifier|static
specifier|final
name|int
name|WR_NTIMES
init|=
literal|350
decl_stmt|;
DECL|field|WR_CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|WR_CHUNK_SIZE
init|=
literal|10000
decl_stmt|;
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|8192
operator|*
literal|100
decl_stmt|;
DECL|field|ROOT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_DIR
init|=
literal|"/tmp/"
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
specifier|final
name|long
name|blockSize
init|=
literal|1024
operator|*
literal|100
decl_stmt|;
comment|// command-line options. Different defaults for unit test vs real cluster
DECL|field|filenameOption
name|String
name|filenameOption
init|=
name|ROOT_DIR
operator|+
literal|"fileX1"
decl_stmt|;
DECL|field|chunkSizeOption
name|int
name|chunkSizeOption
init|=
literal|10000
decl_stmt|;
DECL|field|loopOption
name|int
name|loopOption
init|=
literal|10
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// = new HdfsConfiguration();
DECL|field|mfs
specifier|private
name|FileSystem
name|mfs
decl_stmt|;
comment|// = cluster.getFileSystem();
DECL|field|mfc
specifier|private
name|FileContext
name|mfc
decl_stmt|;
comment|// = FileContext.getFileContext();
comment|// configuration
DECL|field|useFCOption
specifier|private
name|boolean
name|useFCOption
init|=
literal|false
decl_stmt|;
comment|// use either FileSystem or FileContext
DECL|field|verboseOption
specifier|private
name|boolean
name|verboseOption
init|=
literal|true
decl_stmt|;
DECL|field|positionReadOption
specifier|private
name|boolean
name|positionReadOption
init|=
literal|false
decl_stmt|;
DECL|field|truncateOption
specifier|private
name|boolean
name|truncateOption
init|=
literal|false
decl_stmt|;
DECL|field|abortTestOnFailure
specifier|private
specifier|final
name|boolean
name|abortTestOnFailure
init|=
literal|true
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWriteRead
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|initJunitModeTest ()
specifier|public
name|void
name|initJunitModeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"initJunitModeTest"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// 100K
comment|// blocksize
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|mfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mfc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|()
expr_stmt|;
name|Path
name|rootdir
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|)
decl_stmt|;
name|mfs
operator|.
name|mkdirs
argument_list|(
name|rootdir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Equivalence of @Before for cluster mode testing.
DECL|method|initClusterModeTest ()
specifier|private
name|void
name|initClusterModeTest
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWriteRead
operator|.
name|class
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"initClusterModeTest"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|mfc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|()
expr_stmt|;
name|mfs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Junit Test reading while writing. */
annotation|@
name|Test
DECL|method|testWriteReadSeq ()
specifier|public
name|void
name|testWriteReadSeq
parameter_list|()
throws|throws
name|IOException
block|{
name|useFCOption
operator|=
literal|false
expr_stmt|;
name|positionReadOption
operator|=
literal|false
expr_stmt|;
name|String
name|fname
init|=
name|filenameOption
decl_stmt|;
name|long
name|rdBeginPos
init|=
literal|0
decl_stmt|;
comment|// need to run long enough to fail: takes 25 to 35 seec on Mac
name|int
name|stat
init|=
name|testWriteAndRead
argument_list|(
name|fname
argument_list|,
name|WR_NTIMES
argument_list|,
name|WR_CHUNK_SIZE
argument_list|,
name|rdBeginPos
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Summary status from test1: status= "
operator|+
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
comment|/** Junit Test position read while writing. */
annotation|@
name|Test
DECL|method|testWriteReadPos ()
specifier|public
name|void
name|testWriteReadPos
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fname
init|=
name|filenameOption
decl_stmt|;
name|positionReadOption
operator|=
literal|true
expr_stmt|;
comment|// position read
name|long
name|rdBeginPos
init|=
literal|0
decl_stmt|;
name|int
name|stat
init|=
name|testWriteAndRead
argument_list|(
name|fname
argument_list|,
name|WR_NTIMES
argument_list|,
name|WR_CHUNK_SIZE
argument_list|,
name|rdBeginPos
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
comment|/** Junit Test position read of the current block being written. */
annotation|@
name|Test
DECL|method|testReadPosCurrentBlock ()
specifier|public
name|void
name|testReadPosCurrentBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fname
init|=
name|filenameOption
decl_stmt|;
name|positionReadOption
operator|=
literal|true
expr_stmt|;
comment|// position read
name|int
name|wrChunkSize
init|=
call|(
name|int
call|)
argument_list|(
name|blockSize
argument_list|)
operator|+
call|(
name|int
call|)
argument_list|(
name|blockSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|long
name|rdBeginPos
init|=
name|blockSize
operator|+
literal|1
decl_stmt|;
name|int
name|numTimes
init|=
literal|5
decl_stmt|;
name|int
name|stat
init|=
name|testWriteAndRead
argument_list|(
name|fname
argument_list|,
name|numTimes
argument_list|,
name|wrChunkSize
argument_list|,
name|rdBeginPos
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
comment|// equivalent of TestWriteRead1
DECL|method|clusterTestWriteRead1 ()
specifier|private
name|int
name|clusterTestWriteRead1
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|rdBeginPos
init|=
literal|0
decl_stmt|;
name|int
name|stat
init|=
name|testWriteAndRead
argument_list|(
name|filenameOption
argument_list|,
name|loopOption
argument_list|,
name|chunkSizeOption
argument_list|,
name|rdBeginPos
argument_list|)
decl_stmt|;
return|return
name|stat
return|;
block|}
comment|/**    * Open the file to read from begin to end. Then close the file.     * Return number of bytes read.     * Support both sequential read and position read.    */
DECL|method|readData (String fname, byte[] buffer, long byteExpected, long beginPosition)
specifier|private
name|long
name|readData
parameter_list|(
name|String
name|fname
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|long
name|byteExpected
parameter_list|,
name|long
name|beginPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalByteRead
init|=
literal|0
decl_stmt|;
name|Path
name|path
init|=
name|getFullyQualifiedPath
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|openInputStream
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|long
name|visibleLenFromReadStream
init|=
operator|(
operator|(
name|HdfsDataInputStream
operator|)
name|in
operator|)
operator|.
name|getVisibleLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|visibleLenFromReadStream
operator|<
name|byteExpected
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|visibleLenFromReadStream
operator|+
literal|" = visibleLenFromReadStream< bytesExpected= "
operator|+
name|byteExpected
argument_list|)
throw|;
block|}
name|totalByteRead
operator|=
name|readUntilEnd
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|fname
argument_list|,
name|beginPosition
argument_list|,
name|visibleLenFromReadStream
argument_list|,
name|positionReadOption
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// reading more data than visibleLeng is OK, but not less
if|if
condition|(
name|totalByteRead
operator|+
name|beginPosition
operator|<
name|byteExpected
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"readData mismatch in byte read: expected="
operator|+
name|byteExpected
operator|+
literal|" ; got "
operator|+
operator|(
name|totalByteRead
operator|+
name|beginPosition
operator|)
argument_list|)
throw|;
block|}
return|return
name|totalByteRead
operator|+
name|beginPosition
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"##### Caught Exception in readData. "
operator|+
literal|"Total Byte Read so far = "
operator|+
name|totalByteRead
operator|+
literal|" beginPosition = "
operator|+
name|beginPosition
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * read chunks into buffer repeatedly until total of VisibleLen byte are read.    * Return total number of bytes read    */
DECL|method|readUntilEnd (FSDataInputStream in, byte[] buffer, long size, String fname, long pos, long visibleLen, boolean positionReadOption)
specifier|private
name|long
name|readUntilEnd
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|fname
parameter_list|,
name|long
name|pos
parameter_list|,
name|long
name|visibleLen
parameter_list|,
name|boolean
name|positionReadOption
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|>=
name|visibleLen
operator|||
name|visibleLen
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
name|int
name|chunkNumber
init|=
literal|0
decl_stmt|;
name|long
name|totalByteRead
init|=
literal|0
decl_stmt|;
name|long
name|currentPosition
init|=
name|pos
decl_stmt|;
name|int
name|byteRead
init|=
literal|0
decl_stmt|;
name|long
name|byteLeftToRead
init|=
name|visibleLen
operator|-
name|pos
decl_stmt|;
name|int
name|byteToReadThisRound
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|positionReadOption
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|currentPosition
operator|=
name|in
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|verboseOption
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"reader begin: position: "
operator|+
name|pos
operator|+
literal|" ; currentOffset = "
operator|+
name|currentPosition
operator|+
literal|" ; bufferSize ="
operator|+
name|buffer
operator|.
name|length
operator|+
literal|" ; Filename = "
operator|+
name|fname
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|byteLeftToRead
operator|>
literal|0
operator|&&
name|currentPosition
operator|<
name|visibleLen
condition|)
block|{
name|byteToReadThisRound
operator|=
call|(
name|int
call|)
argument_list|(
name|byteLeftToRead
operator|>=
name|buffer
operator|.
name|length
condition|?
name|buffer
operator|.
name|length
else|:
name|byteLeftToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|positionReadOption
condition|)
block|{
name|byteRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|currentPosition
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|byteToReadThisRound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|byteToReadThisRound
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|byteRead
operator|<=
literal|0
condition|)
break|break;
name|chunkNumber
operator|++
expr_stmt|;
name|totalByteRead
operator|+=
name|byteRead
expr_stmt|;
name|currentPosition
operator|+=
name|byteRead
expr_stmt|;
name|byteLeftToRead
operator|-=
name|byteRead
expr_stmt|;
if|if
condition|(
name|verboseOption
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"reader: Number of byte read: "
operator|+
name|byteRead
operator|+
literal|" ; totalByteRead = "
operator|+
name|totalByteRead
operator|+
literal|" ; currentPosition="
operator|+
name|currentPosition
operator|+
literal|" ; chunkNumber ="
operator|+
name|chunkNumber
operator|+
literal|"; File name = "
operator|+
name|fname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"#### Exception caught in readUntilEnd: reader  currentOffset = "
operator|+
name|currentPosition
operator|+
literal|" ; totalByteRead ="
operator|+
name|totalByteRead
operator|+
literal|" ; latest byteRead = "
operator|+
name|byteRead
operator|+
literal|"; visibleLen= "
operator|+
name|visibleLen
operator|+
literal|" ; bufferLen = "
operator|+
name|buffer
operator|.
name|length
operator|+
literal|" ; Filename = "
operator|+
name|fname
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|verboseOption
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"reader end:   position: "
operator|+
name|pos
operator|+
literal|" ; currentOffset = "
operator|+
name|currentPosition
operator|+
literal|" ; totalByteRead ="
operator|+
name|totalByteRead
operator|+
literal|" ; Filename = "
operator|+
name|fname
argument_list|)
expr_stmt|;
return|return
name|totalByteRead
return|;
block|}
DECL|method|writeData (FSDataOutputStream out, byte[] buffer, int length)
specifier|private
name|void
name|writeData
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|totalByteWritten
init|=
literal|0
decl_stmt|;
name|int
name|remainToWrite
init|=
name|length
decl_stmt|;
while|while
condition|(
name|remainToWrite
operator|>
literal|0
condition|)
block|{
name|int
name|toWriteThisRound
init|=
name|remainToWrite
operator|>
name|buffer
operator|.
name|length
condition|?
name|buffer
operator|.
name|length
else|:
name|remainToWrite
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|toWriteThisRound
argument_list|)
expr_stmt|;
name|totalByteWritten
operator|+=
name|toWriteThisRound
expr_stmt|;
name|remainToWrite
operator|-=
name|toWriteThisRound
expr_stmt|;
block|}
if|if
condition|(
name|totalByteWritten
operator|!=
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"WriteData: failure in write. Attempt to write "
operator|+
name|length
operator|+
literal|" ; written="
operator|+
name|totalByteWritten
argument_list|)
throw|;
block|}
block|}
comment|/**    * Common routine to do position read while open the file for write.     * After each iteration of write, do a read of the file from begin to end.     * Return 0 on success, else number of failure.    */
DECL|method|testWriteAndRead (String fname, int loopN, int chunkSize, long readBeginPosition)
specifier|private
name|int
name|testWriteAndRead
parameter_list|(
name|String
name|fname
parameter_list|,
name|int
name|loopN
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|readBeginPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|countOfFailures
init|=
literal|0
decl_stmt|;
name|long
name|byteVisibleToRead
init|=
literal|0
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|outBuffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|byte
index|[]
name|inBuffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUFFER_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|outBuffer
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0x00ff
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Path
name|path
init|=
name|getFullyQualifiedPath
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|long
name|fileLengthBeforeOpen
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ifExists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|truncateOption
condition|)
block|{
name|out
operator|=
name|useFCOption
condition|?
name|mfc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|)
else|:
name|mfs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|truncateOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File already exists. File open with Truncate mode: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|useFCOption
condition|?
name|mfc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|)
else|:
name|mfs
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fileLengthBeforeOpen
operator|=
name|getFileLengthFromNN
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File already exists of size "
operator|+
name|fileLengthBeforeOpen
operator|+
literal|" File open for Append mode: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|=
name|useFCOption
condition|?
name|mfc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
else|:
name|mfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|long
name|totalByteWritten
init|=
name|fileLengthBeforeOpen
decl_stmt|;
name|long
name|totalByteVisible
init|=
name|fileLengthBeforeOpen
decl_stmt|;
name|long
name|totalByteWrittenButNotVisible
init|=
literal|0
decl_stmt|;
name|boolean
name|toFlush
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loopN
condition|;
name|i
operator|++
control|)
block|{
name|toFlush
operator|=
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
expr_stmt|;
name|writeData
argument_list|(
name|out
argument_list|,
name|outBuffer
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|totalByteWritten
operator|+=
name|chunkSize
expr_stmt|;
if|if
condition|(
name|toFlush
condition|)
block|{
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|totalByteVisible
operator|+=
name|chunkSize
operator|+
name|totalByteWrittenButNotVisible
expr_stmt|;
name|totalByteWrittenButNotVisible
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|totalByteWrittenButNotVisible
operator|+=
name|chunkSize
expr_stmt|;
block|}
if|if
condition|(
name|verboseOption
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"TestReadWrite - Written "
operator|+
name|chunkSize
operator|+
literal|". Total written = "
operator|+
name|totalByteWritten
operator|+
literal|". TotalByteVisible = "
operator|+
name|totalByteVisible
operator|+
literal|" to file "
operator|+
name|fname
argument_list|)
expr_stmt|;
block|}
name|byteVisibleToRead
operator|=
name|readData
argument_list|(
name|fname
argument_list|,
name|inBuffer
argument_list|,
name|totalByteVisible
argument_list|,
name|readBeginPosition
argument_list|)
expr_stmt|;
name|String
name|readmsg
init|=
literal|"Written="
operator|+
name|totalByteWritten
operator|+
literal|" ; Expected Visible="
operator|+
name|totalByteVisible
operator|+
literal|" ; Got Visible="
operator|+
name|byteVisibleToRead
operator|+
literal|" of file "
operator|+
name|fname
decl_stmt|;
if|if
condition|(
name|byteVisibleToRead
operator|>=
name|totalByteVisible
operator|&&
name|byteVisibleToRead
operator|<=
name|totalByteWritten
condition|)
block|{
name|readmsg
operator|=
literal|"pass: reader sees expected number of visible byte. "
operator|+
name|readmsg
operator|+
literal|" [pass]"
expr_stmt|;
block|}
else|else
block|{
name|countOfFailures
operator|++
expr_stmt|;
name|readmsg
operator|=
literal|"fail: reader see different number of visible byte. "
operator|+
name|readmsg
operator|+
literal|" [fail]"
expr_stmt|;
if|if
condition|(
name|abortTestOnFailure
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|readmsg
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|readmsg
argument_list|)
expr_stmt|;
block|}
comment|// test the automatic flush after close
name|writeData
argument_list|(
name|out
argument_list|,
name|outBuffer
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|totalByteWritten
operator|+=
name|chunkSize
expr_stmt|;
name|totalByteVisible
operator|+=
name|chunkSize
operator|+
name|totalByteWrittenButNotVisible
expr_stmt|;
name|totalByteWrittenButNotVisible
operator|+=
literal|0
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|byteVisibleToRead
operator|=
name|readData
argument_list|(
name|fname
argument_list|,
name|inBuffer
argument_list|,
name|totalByteVisible
argument_list|,
name|readBeginPosition
argument_list|)
expr_stmt|;
name|String
name|readmsg2
init|=
literal|"Written="
operator|+
name|totalByteWritten
operator|+
literal|" ; Expected Visible="
operator|+
name|totalByteVisible
operator|+
literal|" ; Got Visible="
operator|+
name|byteVisibleToRead
operator|+
literal|" of file "
operator|+
name|fname
decl_stmt|;
name|String
name|readmsg
decl_stmt|;
if|if
condition|(
name|byteVisibleToRead
operator|>=
name|totalByteVisible
operator|&&
name|byteVisibleToRead
operator|<=
name|totalByteWritten
condition|)
block|{
name|readmsg
operator|=
literal|"pass: reader sees expected number of visible byte on close. "
operator|+
name|readmsg2
operator|+
literal|" [pass]"
expr_stmt|;
block|}
else|else
block|{
name|countOfFailures
operator|++
expr_stmt|;
name|readmsg
operator|=
literal|"fail: reader sees different number of visible byte on close. "
operator|+
name|readmsg2
operator|+
literal|" [fail]"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|readmsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|abortTestOnFailure
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
name|readmsg
argument_list|)
throw|;
block|}
comment|// now check if NN got the same length
name|long
name|lenFromFc
init|=
name|getFileLengthFromNN
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|lenFromFc
operator|!=
name|byteVisibleToRead
condition|)
block|{
name|readmsg
operator|=
literal|"fail: reader sees different number of visible byte from NN "
operator|+
name|readmsg2
operator|+
literal|" [fail]"
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|readmsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"##### Caught Exception in testAppendWriteAndRead. Close file. "
operator|+
literal|"Total Byte Read so far = "
operator|+
name|byteVisibleToRead
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|-
name|countOfFailures
return|;
block|}
comment|// //////////////////////////////////////////////////////////////////////
comment|// // helper function:
comment|// /////////////////////////////////////////////////////////////////////
DECL|method|openInputStream (Path path)
specifier|private
name|FSDataInputStream
name|openInputStream
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
name|useFCOption
condition|?
name|mfc
operator|.
name|open
argument_list|(
name|path
argument_list|)
else|:
name|mfs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|in
return|;
block|}
comment|// length of a file (path name) from NN.
DECL|method|getFileLengthFromNN (Path path)
specifier|private
name|long
name|getFileLengthFromNN
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|useFCOption
condition|?
name|mfc
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
else|:
name|mfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|fileStatus
operator|.
name|getLen
argument_list|()
return|;
block|}
DECL|method|ifExists (Path path)
specifier|private
name|boolean
name|ifExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|useFCOption
condition|?
name|mfc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
else|:
name|mfs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getFullyQualifiedPath (String pathString)
specifier|private
name|Path
name|getFullyQualifiedPath
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
name|useFCOption
condition|?
name|mfc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|pathString
argument_list|)
argument_list|)
else|:
name|mfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|pathString
argument_list|)
argument_list|)
return|;
block|}
DECL|method|usage ()
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Usage: [-useSeqRead | -usePosRead] [-append|truncate]"
operator|+
literal|" -chunkSize nn -loop ntimes  -f filename"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: [-useSeqRead | -usePosRead] [-append|truncate]"
operator|+
literal|" -chunkSize nn -loop ntimes  -f filename"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Defaults: -chunkSize=10000, -loop=10, -f=/tmp/fileX1, "
operator|+
literal|"use sequential read, use append mode if file already exists"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpOptions ()
specifier|private
name|void
name|dumpOptions
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: filenameOption = "
operator|+
name|filenameOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: chunkSizeOption = "
operator|+
name|chunkSizeOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: loopOption = "
operator|+
name|loopOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: posReadOption = "
operator|+
name|positionReadOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: truncateOption = "
operator|+
name|truncateOption
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Option setting: verboseOption = "
operator|+
name|verboseOption
argument_list|)
expr_stmt|;
block|}
DECL|method|getCmdLineOption (String[] args)
specifier|private
name|void
name|getCmdLineOption
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-f"
argument_list|)
condition|)
block|{
name|filenameOption
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-chunkSize"
argument_list|)
condition|)
block|{
name|chunkSizeOption
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-loop"
argument_list|)
condition|)
block|{
name|loopOption
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-usePosRead"
argument_list|)
condition|)
block|{
name|positionReadOption
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-useSeqRead"
argument_list|)
condition|)
block|{
name|positionReadOption
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-truncate"
argument_list|)
condition|)
block|{
name|truncateOption
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-append"
argument_list|)
condition|)
block|{
name|truncateOption
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|verboseOption
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-noVerbose"
argument_list|)
condition|)
block|{
name|verboseOption
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|usage
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verboseOption
condition|)
name|dumpOptions
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/**    * Entry point of the test when using a real cluster.     * Usage: [-loop ntimes] [-chunkSize nn] [-f filename]     *     [-useSeqRead |-usePosRead] [-append |-truncate] [-verbose |-noVerbose]    * -loop: iterate ntimes: each iteration consists of a write, then a read     * -chunkSize: number of byte for each write    * -f filename: filename to write and read     * [-useSeqRead | -usePosRead]: use Position Read, or default Sequential Read     * [-append | -truncate]: if file already exist, Truncate or default Append     * [-verbose | -noVerbose]: additional debugging messages if verbose is on    * Default: -loop = 10; -chunkSize = 10000; -f filename = /tmp/fileX1    *     Use Sequential Read, Append Mode, verbose on.    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|TestWriteRead
name|trw
init|=
operator|new
name|TestWriteRead
argument_list|()
decl_stmt|;
name|trw
operator|.
name|initClusterModeTest
argument_list|()
expr_stmt|;
name|trw
operator|.
name|getCmdLineOption
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|int
name|stat
init|=
name|trw
operator|.
name|clusterTestWriteRead1
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status: clusterTestWriteRead1 test PASS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status: clusterTestWriteRead1 test FAIL with "
operator|+
name|stat
operator|+
literal|" failures"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"#### Exception in Main"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

