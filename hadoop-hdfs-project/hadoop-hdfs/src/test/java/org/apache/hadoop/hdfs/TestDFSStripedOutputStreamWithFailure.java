begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|SecurityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
DECL|class|TestDFSStripedOutputStreamWithFailure
specifier|public
class|class
name|TestDFSStripedOutputStreamWithFailure
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSStripedOutputStreamWithFailure
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DFSOutputStream
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DataStreamer
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DFSClient
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|NUM_DATA_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATA_BLOCKS
init|=
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|NUM_PARITY_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PARITY_BLOCKS
init|=
name|StripedFileTestUtil
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|CELL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|CELL_SIZE
init|=
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|STRIPES_PER_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|STRIPES_PER_BLOCK
init|=
literal|4
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CELL_SIZE
operator|*
name|STRIPES_PER_BLOCK
decl_stmt|;
DECL|field|BLOCK_GROUP_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_GROUP_SIZE
init|=
name|BLOCK_SIZE
operator|*
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|FLUSH_POS
specifier|private
specifier|static
specifier|final
name|int
name|FLUSH_POS
init|=
literal|9
operator|*
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
operator|+
literal|1
decl_stmt|;
static|static
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NUM_DATA_BLOCKS  = "
operator|+
name|NUM_DATA_BLOCKS
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NUM_PARITY_BLOCKS= "
operator|+
name|NUM_PARITY_BLOCKS
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CELL_SIZE        = "
operator|+
name|CELL_SIZE
operator|+
literal|" (="
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|CELL_SIZE
argument_list|,
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BLOCK_SIZE       = "
operator|+
name|BLOCK_SIZE
operator|+
literal|" (="
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|BLOCK_SIZE
argument_list|,
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BLOCK_GROUP_SIZE = "
operator|+
name|BLOCK_GROUP_SIZE
operator|+
literal|" (="
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|BLOCK_GROUP_SIZE
argument_list|,
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|newLengths ()
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|newLengths
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|lengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lengths
operator|.
name|add
argument_list|(
name|FLUSH_POS
operator|+
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<=
literal|2
condition|;
name|b
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|STRIPES_PER_BLOCK
operator|*
name|NUM_DATA_BLOCKS
condition|;
name|c
operator|++
control|)
block|{
for|for
control|(
name|int
name|delta
init|=
operator|-
literal|1
init|;
name|delta
operator|<=
literal|1
condition|;
name|delta
operator|++
control|)
block|{
specifier|final
name|int
name|length
init|=
name|b
operator|*
name|BLOCK_GROUP_SIZE
operator|+
name|c
operator|*
name|CELL_SIZE
operator|+
name|delta
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|lengths
operator|.
name|size
argument_list|()
operator|+
literal|": length="
operator|+
name|length
operator|+
literal|", (b, c, d) = ("
operator|+
name|b
operator|+
literal|", "
operator|+
name|c
operator|+
literal|", "
operator|+
name|delta
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|add
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|lengths
return|;
block|}
DECL|field|dnIndexSuite
specifier|private
specifier|static
specifier|final
name|int
index|[]
index|[]
name|dnIndexSuite
init|=
block|{
block|{
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|0
block|,
literal|8
block|}
block|,
block|{
literal|1
block|,
literal|5
block|}
block|,
block|{
literal|1
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|8
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|6
block|}
block|,
block|{
literal|0
block|,
literal|5
block|,
literal|6
block|}
block|,
block|{
literal|0
block|,
literal|5
block|,
literal|8
block|}
block|,
block|{
literal|0
block|,
literal|6
block|,
literal|7
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|7
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|}
block|,   }
decl_stmt|;
DECL|method|getKillPositions (int fileLen, int num)
specifier|private
name|int
index|[]
name|getKillPositions
parameter_list|(
name|int
name|fileLen
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|fileLen
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
operator|(
name|num
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|positions
return|;
block|}
DECL|field|LENGTHS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|LENGTHS
init|=
name|newLengths
argument_list|()
decl_stmt|;
DECL|method|getLength (int i)
specifier|static
name|int
name|getLength
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|LENGTHS
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|TestDFSStripedOutputStreamWithFailure
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|setup (Configuration conf)
specifier|private
name|void
name|setup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDNs
init|=
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|private
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newHdfsConfiguration ()
specifier|private
name|HdfsConfiguration
name|newHdfsConfiguration
parameter_list|()
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testDatanodeFailure56 ()
specifier|public
name|void
name|testDatanodeFailure56
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|getLength
argument_list|(
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testDatanodeFailureRandomLength ()
specifier|public
name|void
name|testDatanodeFailureRandomLength
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lenIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|LENGTHS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"run testMultipleDatanodeFailureRandomLength with length index: "
operator|+
name|lenIndex
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|getLength
argument_list|(
name|lenIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testMultipleDatanodeFailure56 ()
specifier|public
name|void
name|testMultipleDatanodeFailure56
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestWithMultipleFailure
argument_list|(
name|getLength
argument_list|(
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Randomly pick a length and run tests with multiple data failures    * TODO: enable this later    */
comment|//@Test(timeout=240000)
DECL|method|testMultipleDatanodeFailureRandomLength ()
specifier|public
name|void
name|testMultipleDatanodeFailureRandomLength
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lenIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|LENGTHS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"run testMultipleDatanodeFailureRandomLength with length index: "
operator|+
name|lenIndex
argument_list|)
expr_stmt|;
name|runTestWithMultipleFailure
argument_list|(
name|getLength
argument_list|(
name|lenIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testBlockTokenExpired ()
specifier|public
name|void
name|testBlockTokenExpired
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|length
init|=
name|NUM_DATA_BLOCKS
operator|*
operator|(
name|BLOCK_SIZE
operator|-
name|CELL_SIZE
operator|)
decl_stmt|;
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dn
init|=
literal|0
init|;
name|dn
operator|<
literal|9
condition|;
name|dn
operator|+=
literal|2
control|)
block|{
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
operator|new
name|int
index|[]
block|{
name|length
operator|/
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|dn
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed, dn="
operator|+
name|dn
operator|+
literal|", length="
operator|+
name|length
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testAddBlockWhenNoSufficientDataBlockNumOfNodes ()
specifier|public
name|void
name|testAddBlockWhenNoSufficientDataBlockNumOfNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// shutdown few datanodes to avoid getting sufficient data blocks number
comment|// of datanodes
name|int
name|killDns
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|numDatanodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
name|killDns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|killDns
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatches number of live Dns "
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dirFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|dirFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"something"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to validate available dns against blkGroupSize"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to get 6 nodes from"
operator|+
literal|" namenode: blockGroupSize= 9, blocks.length= 5"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testAddBlockWhenNoSufficientParityNumOfNodes ()
specifier|public
name|void
name|testAddBlockWhenNoSufficientParityNumOfNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// shutdown few data nodes to avoid writing parity blocks
name|int
name|killDns
init|=
operator|(
name|NUM_PARITY_BLOCKS
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|numDatanodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
name|killDns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|killDns
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatches number of live Dns "
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testAddBlockWhenNoSufficientParityNodes"
argument_list|)
decl_stmt|;
name|int
name|fileLength
init|=
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
operator|-
literal|1000
decl_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
operator|new
name|String
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"writing finished. Seek and read the file to verify."
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifySeek
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runTest (final int length)
name|void
name|runTest
parameter_list|(
specifier|final
name|int
name|length
parameter_list|)
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|dn
init|=
literal|0
init|;
name|dn
operator|<
literal|9
condition|;
name|dn
operator|++
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runTest: dn="
operator|+
name|dn
operator|+
literal|", length="
operator|+
name|length
argument_list|)
expr_stmt|;
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
operator|new
name|int
index|[]
block|{
name|length
operator|/
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|dn
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|err
init|=
literal|"failed, dn="
operator|+
name|dn
operator|+
literal|", length="
operator|+
name|length
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTestWithMultipleFailure (final int length)
name|void
name|runTestWithMultipleFailure
parameter_list|(
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|int
index|[]
name|dnIndex
range|:
name|dnIndexSuite
control|)
block|{
name|int
index|[]
name|killPos
init|=
name|getKillPositions
argument_list|(
name|length
argument_list|,
name|dnIndex
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runTestWithMultipleFailure: length=="
operator|+
name|length
operator|+
literal|", killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
argument_list|)
expr_stmt|;
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
name|killPos
argument_list|,
name|dnIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|err
init|=
literal|"failed, killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
operator|+
literal|", length="
operator|+
name|length
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * runTest implementation    * @param length file length    * @param killPos killing positions in ascending order    * @param dnIndex DN index to kill when meets killing positions    * @param tokenExpire wait token to expire when kill a DN    * @throws Exception    */
DECL|method|runTest (final int length, final int[] killPos, final int[] dnIndex, final boolean tokenExpire)
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|int
index|[]
name|killPos
parameter_list|,
specifier|final
name|int
index|[]
name|dnIndex
parameter_list|,
specifier|final
name|boolean
name|tokenExpire
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|killPos
index|[
literal|0
index|]
operator|<=
name|FLUSH_POS
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|"<= FLUSH_POS="
operator|+
name|FLUSH_POS
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
argument_list|)
expr_stmt|;
return|return;
comment|//skip test
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|length
operator|>
name|killPos
index|[
literal|0
index|]
argument_list|,
literal|"length=%s<= killPos=%s"
argument_list|,
name|length
argument_list|,
name|killPos
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|killPos
operator|.
name|length
operator|==
name|dnIndex
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"dn"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
operator|+
literal|"len"
operator|+
name|length
operator|+
literal|"kill"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fullPath
init|=
name|p
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fullPath="
operator|+
name|fullPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenExpire
condition|)
block|{
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|BlockTokenSecretManager
name|sm
init|=
name|bm
operator|.
name|getBlockTokenSecretManager
argument_list|()
decl_stmt|;
comment|// set a short token lifetime (1 second)
name|SecurityTestUtil
operator|.
name|setBlockTokenLifetime
argument_list|(
name|sm
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicInteger
name|pos
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
specifier|final
name|DFSStripedOutputStream
name|stripedOut
init|=
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|long
name|firstGS
init|=
operator|-
literal|1
decl_stmt|;
comment|// first GS of this block group which never proceeds blockRecovery
name|long
name|oldGS
init|=
operator|-
literal|1
decl_stmt|;
comment|// the old GS before bumping
name|List
argument_list|<
name|Long
argument_list|>
name|gsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|killedDN
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numKilled
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|.
name|get
argument_list|()
operator|<
name|length
condition|;
control|)
block|{
specifier|final
name|int
name|i
init|=
name|pos
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|numKilled
operator|<
name|killPos
operator|.
name|length
operator|&&
name|i
operator|==
name|killPos
index|[
name|numKilled
index|]
condition|)
block|{
name|assertTrue
argument_list|(
name|firstGS
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|long
name|gs
init|=
name|getGenerationStamp
argument_list|(
name|stripedOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|numKilled
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|firstGS
argument_list|,
name|gs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: implement hflush/hsync and verify gs strict greater than oldGS
name|assertTrue
argument_list|(
name|gs
operator|>=
name|oldGS
argument_list|)
expr_stmt|;
block|}
name|oldGS
operator|=
name|gs
expr_stmt|;
if|if
condition|(
name|tokenExpire
condition|)
block|{
name|DFSTestUtil
operator|.
name|flushInternal
argument_list|(
name|stripedOut
argument_list|)
expr_stmt|;
name|waitTokenExpires
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|killedDN
operator|.
name|add
argument_list|(
name|killDatanode
argument_list|(
name|cluster
argument_list|,
name|stripedOut
argument_list|,
name|dnIndex
index|[
name|numKilled
index|]
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|numKilled
operator|++
expr_stmt|;
block|}
name|write
argument_list|(
name|out
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|BLOCK_GROUP_SIZE
operator|==
name|FLUSH_POS
condition|)
block|{
name|firstGS
operator|=
name|getGenerationStamp
argument_list|(
name|stripedOut
argument_list|)
expr_stmt|;
name|oldGS
operator|=
name|firstGS
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|BLOCK_GROUP_SIZE
operator|==
literal|0
condition|)
block|{
name|gsList
operator|.
name|add
argument_list|(
name|oldGS
argument_list|)
expr_stmt|;
block|}
block|}
name|gsList
operator|.
name|add
argument_list|(
name|oldGS
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|dnIndex
operator|.
name|length
argument_list|,
name|numKilled
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|dfs
argument_list|,
name|fullPath
argument_list|,
name|numKilled
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|length
argument_list|,
name|killedDN
argument_list|,
name|gsList
argument_list|)
expr_stmt|;
block|}
DECL|method|write (FSDataOutputStream out, int i)
specifier|static
name|void
name|write
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|StripedFileTestUtil
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed at i="
operator|+
name|i
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|getGenerationStamp (DFSStripedOutputStream out)
specifier|static
name|long
name|getGenerationStamp
parameter_list|(
name|DFSStripedOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|gs
init|=
name|out
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getGenerationStamp returns "
operator|+
name|gs
argument_list|)
expr_stmt|;
return|return
name|gs
return|;
block|}
DECL|method|getDatanodes (StripedDataStreamer streamer)
specifier|static
name|DatanodeInfo
name|getDatanodes
parameter_list|(
name|StripedDataStreamer
name|streamer
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|streamer
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|datanodes
operator|==
literal|null
condition|)
block|{
comment|// try peeking following block.
specifier|final
name|LocatedBlock
name|lb
init|=
name|streamer
operator|.
name|peekFollowingBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|!=
literal|null
condition|)
block|{
name|datanodes
operator|=
name|lb
operator|.
name|getLocations
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|datanodes
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|datanodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|datanodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|datanodes
index|[
literal|0
index|]
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|method|killDatanode (MiniDFSCluster cluster, DFSStripedOutputStream out, final int dnIndex, final AtomicInteger pos)
specifier|static
name|DatanodeInfo
name|killDatanode
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DFSStripedOutputStream
name|out
parameter_list|,
specifier|final
name|int
name|dnIndex
parameter_list|,
specifier|final
name|AtomicInteger
name|pos
parameter_list|)
block|{
specifier|final
name|StripedDataStreamer
name|s
init|=
name|out
operator|.
name|getStripedDataStreamer
argument_list|(
name|dnIndex
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
name|datanode
init|=
name|getDatanodes
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"killDatanode "
operator|+
name|dnIndex
operator|+
literal|": "
operator|+
name|datanode
operator|+
literal|", pos="
operator|+
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanode
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|datanode
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|datanode
return|;
block|}
DECL|method|waitTokenExpires (FSDataOutputStream out)
specifier|private
name|void
name|waitTokenExpires
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
name|DFSTestUtil
operator|.
name|getBlockToken
argument_list|(
name|out
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|SecurityTestUtil
operator|.
name|isBlockTokenExpired
argument_list|(
name|token
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{       }
block|}
block|}
DECL|class|TestBase
specifier|public
specifier|static
specifier|abstract
class|class
name|TestBase
block|{
DECL|field|TIMEOUT
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|240000
decl_stmt|;
DECL|method|getBase ()
name|int
name|getBase
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>=
literal|0
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|;
name|i
operator|--
control|)
empty_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|field|test
specifier|private
specifier|final
name|TestDFSStripedOutputStreamWithFailure
name|test
init|=
operator|new
name|TestDFSStripedOutputStreamWithFailure
argument_list|()
decl_stmt|;
DECL|method|run (int offset)
specifier|private
name|void
name|run
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|offset
operator|+
name|getBase
argument_list|()
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|getLength
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Run test "
operator|+
name|i
operator|+
literal|", length="
operator|+
name|length
argument_list|)
expr_stmt|;
name|test
operator|.
name|runTest
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|test0 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test0
parameter_list|()
block|{
name|run
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|test1 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test1
parameter_list|()
block|{
name|run
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|test2 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test2
parameter_list|()
block|{
name|run
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|test3 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test3
parameter_list|()
block|{
name|run
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|test4 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test4
parameter_list|()
block|{
name|run
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|test5 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test5
parameter_list|()
block|{
name|run
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|test6 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test6
parameter_list|()
block|{
name|run
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|test7 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test7
parameter_list|()
block|{
name|run
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|test8 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test8
parameter_list|()
block|{
name|run
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
DECL|method|test9 ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TIMEOUT
argument_list|)
specifier|public
name|void
name|test9
parameter_list|()
block|{
name|run
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

