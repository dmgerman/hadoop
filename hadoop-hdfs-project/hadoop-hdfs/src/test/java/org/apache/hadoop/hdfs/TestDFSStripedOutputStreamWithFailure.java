begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test striped file write operation with data node failures with fixed  * parameter test cases.  */
end_comment

begin_class
DECL|class|TestDFSStripedOutputStreamWithFailure
specifier|public
class|class
name|TestDFSStripedOutputStreamWithFailure
extends|extends
name|TestDFSStripedOutputStreamWithFailureBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDFSStripedOutputStreamWithFailure
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMultipleDatanodeFailure56 ()
specifier|public
name|void
name|testMultipleDatanodeFailure56
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestWithMultipleFailure
argument_list|(
name|getLength
argument_list|(
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Randomly pick a length and run tests with multiple data failures.    * TODO: enable this later    */
comment|//@Test(timeout=240000)
DECL|method|testMultipleDatanodeFailureRandomLength ()
specifier|public
name|void
name|testMultipleDatanodeFailureRandomLength
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|lenIndex
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|lengths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"run testMultipleDatanodeFailureRandomLength with length index: "
operator|+
name|lenIndex
argument_list|)
expr_stmt|;
name|runTestWithMultipleFailure
argument_list|(
name|getLength
argument_list|(
name|lenIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
DECL|method|testBlockTokenExpired ()
specifier|public
name|void
name|testBlockTokenExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure killPos is greater than the length of one stripe
specifier|final
name|int
name|length
init|=
name|dataBlocks
operator|*
name|cellSize
operator|*
literal|3
decl_stmt|;
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dn
init|=
literal|0
init|;
name|dn
operator|<
name|dataBlocks
operator|+
name|parityBlocks
condition|;
name|dn
operator|+=
literal|2
control|)
block|{
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
operator|new
name|int
index|[]
block|{
name|length
operator|/
literal|2
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|dn
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed, dn="
operator|+
name|dn
operator|+
literal|", length="
operator|+
name|length
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testAddBlockWhenNoSufficientDataBlockNumOfNodes ()
specifier|public
name|void
name|testAddBlockWhenNoSufficientDataBlockNumOfNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// shutdown few datanodes to avoid getting sufficient data blocks number
comment|// of datanodes
name|int
name|numDatanodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|numDatanodes
operator|>=
name|dataBlocks
condition|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|numDatanodes
operator|--
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatches number of live Dns"
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dirFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecfile"
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"File "
operator|+
name|dirFile
operator|+
literal|" could only be written to "
operator|+
name|numDatanodes
operator|+
literal|" of the "
operator|+
name|dataBlocks
operator|+
literal|" required nodes for "
operator|+
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|dirFile
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"something"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCloseWithExceptionsInStreamer ( int numFailures, boolean shouldFail)
specifier|private
name|void
name|testCloseWithExceptionsInStreamer
parameter_list|(
name|int
name|numFailures
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|numFailures
operator|<=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dirFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecfile-"
operator|+
name|numFailures
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|dirFile
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"idempotent close"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect to raise IOE on the first close call, but any following
comment|// close() should be no-op.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|out
operator|::
name|close
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|DFSStripedOutputStream
argument_list|)
expr_stmt|;
name|DFSStripedOutputStream
name|stripedOut
init|=
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFailures
condition|;
name|i
operator|++
control|)
block|{
comment|// Only inject 1 stream failure.
name|stripedOut
operator|.
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|getLastException
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"injected failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldFail
condition|)
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|out
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
comment|// Close multiple times. All the following close() should have no
comment|// side-effect.
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// HDFS-12612
annotation|@
name|Test
DECL|method|testIdempotentCloseWithFailedStreams ()
specifier|public
name|void
name|testIdempotentCloseWithFailedStreams
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// shutdown few datanodes to avoid getting sufficient data blocks number
comment|// of datanodes.
while|while
condition|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|dataBlocks
condition|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|testCloseWithExceptionsInStreamer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCloseWithExceptionsInStreamer
argument_list|(
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testCloseWithExceptionsInStreamer
argument_list|(
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCloseWithExceptionsInStreamer
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCloseAfterAbort ()
specifier|public
name|void
name|testCloseAfterAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dirFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"ecfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|dirFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|DFSStripedOutputStream
argument_list|)
expr_stmt|;
name|DFSStripedOutputStream
name|stripedOut
init|=
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|stripedOut
operator|.
name|abort
argument_list|()
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Lease timeout"
argument_list|,
name|stripedOut
operator|::
name|close
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testAddBlockWhenNoSufficientParityNumOfNodes ()
specifier|public
name|void
name|testAddBlockWhenNoSufficientParityNumOfNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
try|try
block|{
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// shutdown few data nodes to avoid writing parity blocks
name|int
name|killDns
init|=
operator|(
name|parityBlocks
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|numDatanodes
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
name|killDns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|killDns
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatches number of live Dns"
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"testAddBlockWhenNoSufficientParityNodes"
argument_list|)
decl_stmt|;
name|int
name|fileLength
init|=
name|cellSize
operator|-
literal|1000
decl_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
operator|new
name|String
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"writing finished. Seek and read the file to verify."
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifySeek
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|,
name|ecPolicy
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * When the two DataNodes with partial data blocks fail.    */
annotation|@
name|Test
DECL|method|testCloseWithExceptionsInStreamer ()
specifier|public
name|void
name|testCloseWithExceptionsInStreamer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|fileLengths
init|=
block|{
comment|// Full stripe then partial on cell boundary
name|cellSize
operator|*
operator|(
name|dataBlocks
operator|*
literal|2
operator|-
literal|2
operator|)
block|,
comment|// Full stripe and a partial on non-cell boundary
operator|(
name|cellSize
operator|*
name|dataBlocks
operator|)
operator|+
literal|123
block|,     }
decl_stmt|;
comment|// select the two DNs with partial block to kill
name|int
index|[]
name|dnIndex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parityBlocks
operator|>
literal|1
condition|)
block|{
name|dnIndex
operator|=
operator|new
name|int
index|[]
block|{
name|dataBlocks
operator|-
literal|2
block|,
name|dataBlocks
operator|-
literal|1
block|}
expr_stmt|;
block|}
else|else
block|{
name|dnIndex
operator|=
operator|new
name|int
index|[]
block|{
name|dataBlocks
operator|-
literal|1
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|length
range|:
name|fileLengths
control|)
block|{
specifier|final
name|int
index|[]
name|killPos
init|=
name|getKillPositions
argument_list|(
name|length
argument_list|,
name|dnIndex
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runTestWithMultipleFailure2: length=="
operator|+
name|length
operator|+
literal|", killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
argument_list|)
expr_stmt|;
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
name|killPos
argument_list|,
name|dnIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|err
init|=
literal|"failed, killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
operator|+
literal|", length="
operator|+
name|length
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test writing very short EC files with many failures.    */
annotation|@
name|Test
DECL|method|runTestWithShortStripe ()
specifier|public
name|void
name|runTestWithShortStripe
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsConfiguration
name|conf
init|=
name|newHdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Write a file with a 1 cell partial stripe
specifier|final
name|int
name|length
init|=
name|cellSize
operator|-
literal|123
decl_stmt|;
comment|// Kill all but one DN
specifier|final
name|int
index|[]
name|dnIndex
init|=
operator|new
name|int
index|[
name|dataBlocks
operator|+
name|parityBlocks
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dnIndex
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
specifier|final
name|int
index|[]
name|killPos
init|=
name|getKillPositions
argument_list|(
name|length
argument_list|,
name|dnIndex
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runTestWithShortStripe: length=="
operator|+
name|length
operator|+
literal|", killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
argument_list|)
expr_stmt|;
name|setup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|length
argument_list|,
name|killPos
argument_list|,
name|dnIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
specifier|final
name|String
name|err
init|=
literal|"failed, killPos="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|killPos
argument_list|)
operator|+
literal|", dnIndex="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dnIndex
argument_list|)
operator|+
literal|", length="
operator|+
name|length
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

