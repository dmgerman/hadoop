begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|LAZY_PERSIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Verify that locked memory is used correctly when writing to replicas in  * memory  */
end_comment

begin_class
DECL|class|TestLazyPersistLockedMemory
specifier|public
class|class
name|TestLazyPersistLockedMemory
extends|extends
name|LazyPersistTestCase
block|{
comment|/**    * RAM disk present but locked memory is set to zero. Placement should    * fall back to disk.    */
annotation|@
name|Test
DECL|method|testWithNoLockedMemory ()
specifier|public
name|void
name|testWithNoLockedMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxLockedMemory
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservation ()
specifier|public
name|void
name|testReservation
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxLockedMemory
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
comment|// Create a file and ensure the replica in RAM_DISK uses locked memory.
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fsd
operator|.
name|getCacheUsed
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReleaseOnFileDeletion ()
specifier|public
name|void
name|testReleaseOnFileDeletion
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxLockedMemory
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fsd
operator|.
name|getCacheUsed
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the file and ensure that the locked memory is released.
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|waitForLockedBytesUsed
argument_list|(
name|fsd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that locked RAM is released when blocks are evicted from RAM disk.    */
annotation|@
name|Test
DECL|method|testReleaseOnEviction ()
specifier|public
name|void
name|testReleaseOnEviction
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxLockedMemory
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
name|BLOCK_SIZE
operator|*
literal|2
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// The block should get evicted soon since it pushes RAM disk free
comment|// space below the threshold.
name|waitForLockedBytesUsed
argument_list|(
name|fsd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|MetricsAsserts
operator|.
name|getMetrics
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MetricsAsserts
operator|.
name|assertCounter
argument_list|(
literal|"RamDiskBlocksEvicted"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that locked bytes are correctly updated when a block is finalized    * at less than its max length.    */
annotation|@
name|Test
DECL|method|testShortBlockFinalized ()
specifier|public
name|void
name|testShortBlockFinalized
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fsd
operator|.
name|getCacheUsed
argument_list|()
argument_list|,
name|is
argument_list|(
name|osPageSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the file and ensure locked RAM usage goes to zero.
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForLockedBytesUsed
argument_list|(
name|fsd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that locked bytes are correctly updated when the client goes    * away unexpectedly during a write.    */
annotation|@
name|Test
DECL|method|testWritePipelineFailure ()
specifier|public
name|void
name|testWritePipelineFailure
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|LAZY_PERSIST
argument_list|)
decl_stmt|;
comment|// Write 1 byte to the file and kill the writer.
specifier|final
name|FSDataOutputStream
name|fos
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|createFlags
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|REPL_FACTOR
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fos
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|abortStream
argument_list|(
operator|(
name|DFSOutputStream
operator|)
name|fos
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|waitForLockedBytesUsed
argument_list|(
name|fsd
argument_list|,
name|osPageSize
argument_list|)
expr_stmt|;
comment|// Delete the file and ensure locked RAM goes to zero.
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|waitForLockedBytesUsed
argument_list|(
name|fsd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until used locked byte count goes to the expected value.    * @throws TimeoutException after 300 seconds.    */
DECL|method|waitForLockedBytesUsed (final FsDatasetSpi<?> fsd, final long expectedLockedBytes)
specifier|private
name|void
name|waitForLockedBytesUsed
parameter_list|(
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsd
parameter_list|,
specifier|final
name|long
name|expectedLockedBytes
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|long
name|cacheUsed
init|=
name|fsd
operator|.
name|getCacheUsed
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cacheUsed="
operator|+
name|cacheUsed
operator|+
literal|", waiting for it to be "
operator|+
name|expectedLockedBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheUsed
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cacheUsed unpexpectedly negative"
argument_list|)
throw|;
block|}
return|return
operator|(
name|cacheUsed
operator|==
name|expectedLockedBytes
operator|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

