begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Utility class for testing online recovery of striped files.  */
end_comment

begin_class
DECL|class|ReadStripedFileWithDecodingHelper
specifier|abstract
specifier|public
class|class
name|ReadStripedFileWithDecodingHelper
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReadStripedFileWithDecodingHelper
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockManager
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockManager
operator|.
name|blockLog
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NameNode
operator|.
name|stateChangeLog
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
DECL|field|EC_POLICY
specifier|protected
specifier|static
specifier|final
name|ErasureCodingPolicy
name|EC_POLICY
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
DECL|field|NUM_DATA_UNITS
specifier|protected
specifier|static
specifier|final
name|short
name|NUM_DATA_UNITS
init|=
operator|(
name|short
operator|)
name|EC_POLICY
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|NUM_PARITY_UNITS
specifier|protected
specifier|static
specifier|final
name|short
name|NUM_PARITY_UNITS
init|=
operator|(
name|short
operator|)
name|EC_POLICY
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|CELL_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|CELL_SIZE
init|=
name|EC_POLICY
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|STRIPES_PER_BLOCK
specifier|private
specifier|static
specifier|final
name|int
name|STRIPES_PER_BLOCK
init|=
literal|4
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
name|CELL_SIZE
operator|*
name|STRIPES_PER_BLOCK
decl_stmt|;
DECL|field|BLOCK_GROUP_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_GROUP_SIZE
init|=
name|BLOCK_SIZE
operator|*
name|NUM_DATA_UNITS
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
name|NUM_DATA_UNITS
operator|+
name|NUM_PARITY_UNITS
decl_stmt|;
DECL|field|FILE_LENGTHS
specifier|protected
specifier|static
specifier|final
name|int
index|[]
name|FILE_LENGTHS
init|=
block|{
name|BLOCK_GROUP_SIZE
operator|-
literal|123
block|,
name|BLOCK_GROUP_SIZE
operator|+
literal|123
block|}
decl_stmt|;
DECL|method|initializeCluster ()
specifier|public
specifier|static
name|MiniDFSCluster
name|initializeCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_POLICIES_ENABLED_KEY
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|myCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|myCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/"
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|myCluster
return|;
block|}
DECL|method|tearDownCluster (MiniDFSCluster cluster)
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findFirstDataNode (MiniDFSCluster cluster, DistributedFileSystem dfs, Path file, long length)
specifier|public
specifier|static
name|int
name|findFirstDataNode
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|file
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockLocation
index|[]
name|locs
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|locs
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|int
name|dnIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|int
name|port
init|=
name|dn
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|dnIndex
return|;
block|}
name|dnIndex
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Cross product of FILE_LENGTHS, NUM_PARITY_UNITS+1, NUM_PARITY_UNITS.    * Input for parameterized tests classes.    *    * @return Test parameters.    */
DECL|method|getParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getParameters
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fileLength
range|:
name|FILE_LENGTHS
control|)
block|{
for|for
control|(
name|int
name|dataDelNum
init|=
literal|1
init|;
name|dataDelNum
operator|<=
name|NUM_PARITY_UNITS
condition|;
name|dataDelNum
operator|++
control|)
block|{
for|for
control|(
name|int
name|parityDelNum
init|=
literal|0
init|;
operator|(
name|dataDelNum
operator|+
name|parityDelNum
operator|)
operator|<=
name|NUM_PARITY_UNITS
condition|;
name|parityDelNum
operator|++
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fileLength
block|,
name|dataDelNum
block|,
name|parityDelNum
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|verifyRead (DistributedFileSystem dfs, Path testPath, int length, byte[] expected)
specifier|public
specifier|static
name|void
name|verifyRead
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|testPath
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
operator|+
literal|100
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead verifyLength on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLength
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead verifyPread on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyPread
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|length
argument_list|,
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead verifyStatefulRead on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyStatefulRead
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|length
argument_list|,
name|expected
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead verifyStatefulRead2 on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyStatefulRead
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|length
argument_list|,
name|expected
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
operator|+
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyRead verifySeek on path {}"
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifySeek
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|length
argument_list|,
name|EC_POLICY
argument_list|,
name|BLOCK_GROUP_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|testReadWithDNFailure (MiniDFSCluster cluster, DistributedFileSystem dfs, int fileLength, int dnFailureNum)
specifier|public
specifier|static
name|void
name|testReadWithDNFailure
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|int
name|dnFailureNum
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|fileType
init|=
name|fileLength
operator|<
operator|(
name|BLOCK_SIZE
operator|*
name|NUM_DATA_UNITS
operator|)
condition|?
literal|"smallFile"
else|:
literal|"largeFile"
decl_stmt|;
name|String
name|src
init|=
literal|"/dnFailure_"
operator|+
name|dnFailureNum
operator|+
literal|"_"
operator|+
name|fileType
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testReadWithDNFailure: file = "
operator|+
name|src
operator|+
literal|", fileSize = "
operator|+
name|fileLength
operator|+
literal|", dnFailureNum = "
operator|+
name|dnFailureNum
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|dfs
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|// shut down the DN that holds an internal data block
name|BlockLocation
index|[]
name|locs
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|testPath
argument_list|,
name|CELL_SIZE
operator|*
literal|5
argument_list|,
name|CELL_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|failedDnIdx
init|=
literal|0
init|;
name|failedDnIdx
operator|<
name|dnFailureNum
condition|;
name|failedDnIdx
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|locs
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
operator|)
index|[
name|failedDnIdx
index|]
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|int
name|port
init|=
name|dn
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
condition|)
block|{
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// check file length, pread, stateful read and seek
name|verifyRead
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
name|fileLength
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test reading a file with some blocks(data blocks or parity blocks or both)    * deleted or corrupted.    * @param src file path    * @param fileNumBytes file length    * @param dataBlkDelNum the deleted or corrupted number of data blocks.    * @param parityBlkDelNum the deleted or corrupted number of parity blocks.    * @param deleteBlockFile whether block file is deleted or corrupted.    *                        true is to delete the block file.    *                        false is to corrupt the content of the block file.    * @throws IOException    */
DECL|method|testReadWithBlockCorrupted (MiniDFSCluster cluster, DistributedFileSystem dfs, String src, int fileNumBytes, int dataBlkDelNum, int parityBlkDelNum, boolean deleteBlockFile)
specifier|public
specifier|static
name|void
name|testReadWithBlockCorrupted
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
name|src
parameter_list|,
name|int
name|fileNumBytes
parameter_list|,
name|int
name|dataBlkDelNum
parameter_list|,
name|int
name|parityBlkDelNum
parameter_list|,
name|boolean
name|deleteBlockFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReadWithBlockCorrupted: file = "
operator|+
name|src
operator|+
literal|", dataBlkDelNum = "
operator|+
name|dataBlkDelNum
operator|+
literal|", parityBlkDelNum = "
operator|+
name|parityBlkDelNum
operator|+
literal|", deleteBlockFile? "
operator|+
name|deleteBlockFile
argument_list|)
expr_stmt|;
name|int
name|recoverBlkNum
init|=
name|dataBlkDelNum
operator|+
name|parityBlkDelNum
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"dataBlkDelNum and parityBlkDelNum should be positive"
argument_list|,
name|dataBlkDelNum
operator|>=
literal|0
operator|&&
name|parityBlkDelNum
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The sum of dataBlkDelNum and parityBlkDelNum "
operator|+
literal|"should be between 1 ~ "
operator|+
name|NUM_PARITY_UNITS
argument_list|,
name|recoverBlkNum
operator|<=
name|NUM_PARITY_UNITS
argument_list|)
expr_stmt|;
comment|// write a file with the length of writeLen
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileNumBytes
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|// delete or corrupt some blocks
name|corruptBlocks
argument_list|(
name|cluster
argument_list|,
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|dataBlkDelNum
argument_list|,
name|parityBlkDelNum
argument_list|,
name|deleteBlockFile
argument_list|)
expr_stmt|;
comment|// check the file can be read after some blocks were deleted
name|verifyRead
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|fileNumBytes
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
DECL|method|corruptBlocks (MiniDFSCluster cluster, DistributedFileSystem dfs, Path srcPath, int dataBlkDelNum, int parityBlkDelNum, boolean deleteBlockFile)
specifier|public
specifier|static
name|void
name|corruptBlocks
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|dataBlkDelNum
parameter_list|,
name|int
name|parityBlkDelNum
parameter_list|,
name|boolean
name|deleteBlockFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"corruptBlocks on path {}"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|int
name|recoverBlkNum
init|=
name|dataBlkDelNum
operator|+
name|parityBlkDelNum
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|getLocatedBlocks
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|LocatedStripedBlock
name|lastBlock
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|locatedBlocks
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
name|int
index|[]
name|delDataBlkIndices
init|=
name|StripedFileTestUtil
operator|.
name|randomArray
argument_list|(
literal|0
argument_list|,
name|NUM_DATA_UNITS
argument_list|,
name|dataBlkDelNum
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|delDataBlkIndices
argument_list|)
expr_stmt|;
name|int
index|[]
name|delParityBlkIndices
init|=
name|StripedFileTestUtil
operator|.
name|randomArray
argument_list|(
name|NUM_DATA_UNITS
argument_list|,
name|NUM_DATA_UNITS
operator|+
name|NUM_PARITY_UNITS
argument_list|,
name|parityBlkDelNum
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|delParityBlkIndices
argument_list|)
expr_stmt|;
name|int
index|[]
name|delBlkIndices
init|=
operator|new
name|int
index|[
name|recoverBlkNum
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|delDataBlkIndices
argument_list|,
literal|0
argument_list|,
name|delBlkIndices
argument_list|,
literal|0
argument_list|,
name|delDataBlkIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|delParityBlkIndices
argument_list|,
literal|0
argument_list|,
name|delBlkIndices
argument_list|,
name|delDataBlkIndices
operator|.
name|length
argument_list|,
name|delParityBlkIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|ExtendedBlock
index|[]
name|delBlocks
init|=
operator|new
name|ExtendedBlock
index|[
name|recoverBlkNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recoverBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|delBlocks
index|[
name|i
index|]
operator|=
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|lastBlock
operator|.
name|getBlock
argument_list|()
argument_list|,
name|CELL_SIZE
argument_list|,
name|NUM_DATA_UNITS
argument_list|,
name|delBlkIndices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteBlockFile
condition|)
block|{
comment|// delete the block file
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting block file {}"
argument_list|,
name|delBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|corruptBlockOnDataNodesByDeletingBlockFile
argument_list|(
name|delBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// corrupt the block file
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupting block file {}"
argument_list|,
name|delBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|delBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLocatedBlocks (DistributedFileSystem dfs, Path filePath)
specifier|public
specifier|static
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

