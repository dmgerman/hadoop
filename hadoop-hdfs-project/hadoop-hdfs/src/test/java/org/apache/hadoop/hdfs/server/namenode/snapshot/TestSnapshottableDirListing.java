begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSnapshottableDirListing
specifier|public
class|class
name|TestSnapshottableDirListing
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|dir1
specifier|private
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot1"
argument_list|)
decl_stmt|;
DECL|field|dir2
specifier|private
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot2"
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test listing all the snapshottable directories    */
annotation|@
name|Test
DECL|method|testListSnapshottableDir ()
specifier|public
name|void
name|testListSnapshottableDir
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initially there is no snapshottable directories in the system
name|SnapshottableDirectoryStatus
index|[]
name|dirs
init|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
comment|// Make dir1 as snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
operator|.
name|getName
argument_list|()
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// There is no snapshot for dir1 yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make dir2 as snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
operator|.
name|getName
argument_list|()
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
operator|.
name|getName
argument_list|()
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// There is no snapshot for dir2 yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create dir3
specifier|final
name|Path
name|dir3
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot3"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir3
argument_list|)
expr_stmt|;
comment|// Rename dir3 to dir2
name|hdfs
operator|.
name|rename
argument_list|(
name|dir3
argument_list|,
name|dir2
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// Now we only have one snapshottable dir: dir1
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make dir2 snapshottable again
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a snapshot for dir2
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir2
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir2
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
comment|// There are now 2 snapshots for dir2
name|assertEquals
argument_list|(
name|dir2
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getSnapshotNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create sub-dirs under dir1
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Make sub1 and sub2 snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub1
argument_list|,
name|dirs
index|[
literal|2
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub2
argument_list|,
name|dirs
index|[
literal|3
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset sub1
name|hdfs
operator|.
name|disallowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir1
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
argument_list|,
name|dirs
index|[
literal|1
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub2
argument_list|,
name|dirs
index|[
literal|2
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove dir1, both dir1 and sub2 will be removed
name|hdfs
operator|.
name|delete
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
operator|.
name|getName
argument_list|()
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getDirStatus
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir2
argument_list|,
name|dirs
index|[
literal|0
index|]
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

