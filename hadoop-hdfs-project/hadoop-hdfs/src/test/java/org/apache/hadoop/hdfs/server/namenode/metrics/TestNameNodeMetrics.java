begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOGGERS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertQuantileGauges
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
operator|.
name|TopMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for metrics published by the Namenode  */
end_comment

begin_class
DECL|class|TestNameNodeMetrics
specifier|public
class|class
name|TestNameNodeMetrics
block|{
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DFS_REPLICATION_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|DFS_REPLICATION_INTERVAL
init|=
literal|1
decl_stmt|;
DECL|field|TEST_ROOT_DIR_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/testNameNodeMetrics"
argument_list|)
decl_stmt|;
DECL|field|NN_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|NN_METRICS
init|=
literal|"NameNodeActivity"
decl_stmt|;
DECL|field|NS_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|NS_METRICS
init|=
literal|"FSNamesystem"
decl_stmt|;
comment|// Number of datanodes in the cluster
DECL|field|DATANODE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DATANODE_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|WAIT_GAUGE_VALUE_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_GAUGE_VALUE_RETRIES
init|=
literal|20
decl_stmt|;
comment|// Rollover interval of percentile metrics (in seconds)
DECL|field|PERCENTILES_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|PERCENTILES_INTERVAL
init|=
literal|1
decl_stmt|;
static|static
block|{
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFS_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
name|DFS_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_PERCENTILES_INTERVALS_KEY
argument_list|,
literal|""
operator|+
name|PERCENTILES_INTERVAL
argument_list|)
expr_stmt|;
comment|// Enable stale DataNodes checking
name|CONF
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsAsserts
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
comment|/**      * need it to test {@link #testTopAuditLogger}      */
name|CONF
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_AUDIT_LOGGERS_KEY
argument_list|,
name|TopAuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
DECL|method|getTestPath (String fileName)
specifier|private
specifier|static
name|Path
name|getTestPath
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TopMetrics
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//reset the static init done by prev test
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|bm
operator|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsSource
name|source
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|getSource
argument_list|(
literal|"UgiMetrics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
comment|// Run only once since the UGI metrics is cleaned up during teardown
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"GetGroups1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** create a file with a length of<code>fileLen</code> */
DECL|method|createFile (Path file, long fileLen, short replicas)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|short
name|replicas
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|replicas
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFile (FileSystem fileSys,Path name)
specifier|private
name|void
name|readFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Just read file so that getNumBlockLocations are incremented
name|DataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|stm
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that capacity metrics are exported and pass    * basic sanity tests.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1800
argument_list|)
DECL|method|testCapacityMetrics ()
specifier|public
name|void
name|testCapacityMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|long
name|capacityTotal
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityTotal"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|capacityTotal
operator|!=
literal|0
operator|)
assert|;
name|long
name|capacityUsed
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityUsed"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|long
name|capacityRemaining
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityRemaining"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|long
name|capacityUsedNonDFS
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityUsedNonDFS"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|capacityUsed
operator|+
name|capacityRemaining
operator|+
name|capacityUsedNonDFS
operator|==
name|capacityTotal
operator|)
assert|;
block|}
comment|/** Test metrics indicating the number of stale DataNodes */
annotation|@
name|Test
DECL|method|testStaleNodes ()
specifier|public
name|void
name|testStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set two datanodes as stale
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|staleInterval
init|=
name|CONF
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|staleInterval
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Let HeartbeatManager to check heartbeat
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"StaleDataNodes"
argument_list|,
literal|2
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset stale datanodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Let HeartbeatManager to refresh
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"StaleDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test metrics associated with addition of a file */
annotation|@
name|Test
DECL|method|testFileAdd ()
specifier|public
name|void
name|testFileAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add files with 100 blocks
specifier|final
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testFileAdd"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|3200
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|long
name|blockCount
init|=
literal|32
decl_stmt|;
name|int
name|blockCapacity
init|=
name|namesystem
operator|.
name|getBlockCapacity
argument_list|()
decl_stmt|;
name|assertGauge
argument_list|(
literal|"BlockCapacity"
argument_list|,
name|blockCapacity
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
comment|// File create operations is 1
comment|// Number of files created is depth of<code>file</code> path
name|assertCounter
argument_list|(
literal|"CreateFileOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FilesCreated"
argument_list|,
operator|(
name|long
operator|)
name|file
operator|.
name|depth
argument_list|()
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|long
name|filesTotal
init|=
name|file
operator|.
name|depth
argument_list|()
operator|+
literal|1
decl_stmt|;
comment|// Add 1 for root
name|rb
operator|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FilesTotal"
argument_list|,
name|filesTotal
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BlocksTotal"
argument_list|,
name|blockCount
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesTotal
operator|--
expr_stmt|;
comment|// reduce the filecount for deleted file
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"FilesTotal"
argument_list|,
name|filesTotal
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BlocksTotal"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingDeletionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
expr_stmt|;
comment|// Delete file operations and number of files deleted must be 1
name|assertCounter
argument_list|(
literal|"DeleteFileOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FilesDeleted"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/** Corrupt a block and ensure metrics reflects it */
annotation|@
name|Test
DECL|method|testCorruptBlock ()
specifier|public
name|void
name|testCorruptBlock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file with single block with two replicas
specifier|final
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testCorruptBlock"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|// Disable the heartbeats, so that no corrupted replica
comment|// can be fixed
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Corrupt first replica of the block
name|LocatedBlock
name|block
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// During the file deletion, both BlockManager#corruptReplicas and
comment|// BlockManager#pendingReplications will be updated, i.e., the records
comment|// for the blocks of the deleted file will be removed from both
comment|// corruptReplicas and pendingReplications. The corresponding
comment|// metrics (CorruptBlocks and PendingReplicationBlocks) will only be updated
comment|// when BlockManager#computeDatanodeWork is run where the
comment|// BlockManager#updateState is called. And in
comment|// BlockManager#computeDatanodeWork the metric ScheduledReplicationBlocks
comment|// will also be updated.
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"ScheduledReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/** Create excess blocks by reducing the replication factor for    * for a file and ensure metrics reflects it    */
annotation|@
name|Test
DECL|method|testExcessBlocks ()
specifier|public
name|void
name|testExcessBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testExcessBlocks"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|long
name|totalBlocks
init|=
literal|1
decl_stmt|;
name|NameNodeAdapter
operator|.
name|setReplication
argument_list|(
name|namesystem
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"ExcessBlocks"
argument_list|,
name|totalBlocks
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Test to ensure metrics reflects missing blocks */
annotation|@
name|Test
DECL|method|testMissingBlock ()
specifier|public
name|void
name|testMissingBlock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file with single block with two replicas
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testMissingBlocks"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// Corrupt the only replica of the block to result in a missing block
name|LocatedBlock
name|block
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait for block to be marked corrupt
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"UnderReplicatedBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"MissingBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"MissingReplOneBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"UnderReplicatedBlocks"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForDeletion ()
specifier|private
name|void
name|waitForDeletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Wait for more than DATANODE_COUNT replication intervals to ensure all
comment|// the blocks pending deletion are sent for deletion to the datanodes.
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_REPLICATION_INTERVAL
operator|*
operator|(
name|DATANODE_COUNT
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for the named gauge value from the metrics source to reach the    * desired value.    *    * There's an initial delay then a spin cycle of sleep and poll. Because    * all the tests use a shared FS instance, these tests are not independent;    * that's why the initial sleep is in there.    *    * @param source metrics source    * @param name gauge name    * @param expected expected value    * @return the last metrics record polled    * @throws Exception if something went wrong.    */
DECL|method|waitForDnMetricValue (String source, String name, long expected)
specifier|private
name|MetricsRecordBuilder
name|waitForDnMetricValue
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
decl_stmt|;
name|long
name|gauge
decl_stmt|;
comment|//initial wait.
name|waitForDeletion
argument_list|()
expr_stmt|;
comment|//lots of retries are allowed for slow systems; fast ones will still
comment|//exit early
name|int
name|retries
init|=
operator|(
name|DATANODE_COUNT
operator|+
literal|1
operator|)
operator|*
name|WAIT_GAUGE_VALUE_RETRIES
decl_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|gauge
operator|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
name|name
argument_list|,
name|rb
argument_list|)
expr_stmt|;
while|while
condition|(
name|gauge
operator|!=
name|expected
operator|&&
operator|(
operator|--
name|retries
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_REPLICATION_INTERVAL
operator|*
literal|500
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|gauge
operator|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
name|name
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|//at this point the assertion is valid or the retry count ran out
name|assertGauge
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|rb
argument_list|)
expr_stmt|;
return|return
name|rb
return|;
block|}
annotation|@
name|Test
DECL|method|testRenameMetrics ()
specifier|public
name|void
name|testRenameMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
name|getTestPath
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|target
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"FilesRenamed"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FilesDeleted"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test numGetBlockLocations metric       *     * Test initiates and performs file operations (create,read,close,open file )    * which results in metrics changes. These metrics changes are updated and     * tested for correctness.    *     *  create file operation does not increment numGetBlockLocation    *  one read file operation increments numGetBlockLocation by 1    *        * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testGetBlockLocationMetric ()
specifier|public
name|void
name|testGetBlockLocationMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1_Path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
literal|"file1.dat"
argument_list|)
decl_stmt|;
comment|// When cluster starts first time there are no file  (read,create,open)
comment|// operations so metric GetBlockLocations should be 0.
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|//Perform create file operation
name|createFile
argument_list|(
name|file1_Path
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|//Create file does not change numGetBlockLocations metric
comment|//expect numGetBlockLocations = 0 for previous and current interval
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Open and read file operation increments GetBlockLocations
comment|// Perform read file operation on earlier created file
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
comment|// Verify read file operation has incremented numGetBlockLocations by 1
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// opening and reading file  twice will increment numGetBlockLocations by 2
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test NN checkpoint and transaction-related metrics.    */
annotation|@
name|Test
DECL|method|testTransactionAndCheckpointMetrics ()
specifier|public
name|void
name|testTransactionAndCheckpointMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastCkptTime
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|newLastCkptTime
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lastCkptTime
operator|<
name|newLastCkptTime
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|6L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the sync and block report metrics get updated on cluster    * startup.    */
annotation|@
name|Test
DECL|method|testSyncAndBlockReportMetric ()
specifier|public
name|void
name|testSyncAndBlockReportMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
comment|// We have one sync when the cluster starts up, just opening the journal
name|assertCounter
argument_list|(
literal|"SyncsNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Each datanode reports in when the cluster comes up
name|assertCounter
argument_list|(
literal|"BlockReportNumOps"
argument_list|,
operator|(
name|long
operator|)
name|DATANODE_COUNT
operator|*
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Sleep for an interval+slop to let the percentiles rollover
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|PERCENTILES_INTERVAL
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Check that the percentiles were updated
name|assertQuantileGauges
argument_list|(
literal|"Syncs1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"BlockReport1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether {@link TopMetrics} is registered with metrics system    * @throws Exception    */
annotation|@
name|Test
DECL|method|testTopMetrics ()
specifier|public
name|void
name|testTopMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testUser
init|=
literal|"NNTopTestUser"
decl_stmt|;
specifier|final
name|String
name|testOp
init|=
literal|"NNTopTestOp"
decl_stmt|;
specifier|final
name|String
name|metricName
init|=
name|RollingWindowManager
operator|.
name|createMetricName
argument_list|(
name|testOp
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
name|TopMetrics
operator|.
name|getInstance
argument_list|()
operator|.
name|report
argument_list|(
name|testUser
argument_list|,
name|testOp
argument_list|)
expr_stmt|;
specifier|final
name|String
name|regName
init|=
name|TopConf
operator|.
name|TOP_METRICS_REGISTRATION_NAME
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|regName
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
name|metricName
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether {@link TopAuditLogger} is registered as an audit logger    * @throws Exception    */
annotation|@
name|Test
DECL|method|testTopAuditLogger ()
specifier|public
name|void
name|testTopAuditLogger
parameter_list|()
throws|throws
name|Exception
block|{
comment|//note: the top audit logger should already be set in conf
comment|//issue one command, any command is fine
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|time
argument_list|,
name|time
argument_list|)
expr_stmt|;
comment|//the command should be reflected in the total count of all users
specifier|final
name|String
name|testUser
init|=
name|TopConf
operator|.
name|ALL_USERS
decl_stmt|;
specifier|final
name|String
name|testOp
init|=
name|TopConf
operator|.
name|CMD_TOTAL
decl_stmt|;
specifier|final
name|String
name|metricName
init|=
name|RollingWindowManager
operator|.
name|createMetricName
argument_list|(
name|testOp
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
specifier|final
name|String
name|regName
init|=
name|TopConf
operator|.
name|TOP_METRICS_REGISTRATION_NAME
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|regName
argument_list|)
decl_stmt|;
name|assertGaugeGreaterThan
argument_list|(
name|metricName
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert a long gauge metric greater than    * @param name  of the metric    * @param expected  minimum expected value of the metric    * @param rb  the record builder mock used to getMetrics    */
DECL|method|assertGaugeGreaterThan (String name, long expected, MetricsRecordBuilder rb)
specifier|public
specifier|static
name|void
name|assertGaugeGreaterThan
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|MetricsRecordBuilder
name|rb
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Bad value for metric "
operator|+
name|name
argument_list|,
name|expected
operator|<=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
name|name
argument_list|,
name|rb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

