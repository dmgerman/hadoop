begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|CreateEncryptionZoneFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HA_HM_RPC_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HA_HM_RPC_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertQuantileGauges
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|MockNameNodeResourceChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|NNHAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|HostsFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for metrics published by the Namenode  */
end_comment

begin_class
DECL|class|TestNameNodeMetrics
specifier|public
class|class
name|TestNameNodeMetrics
block|{
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DFS_REDUNDANCY_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|DFS_REDUNDANCY_INTERVAL
init|=
literal|1
decl_stmt|;
DECL|field|TEST_ROOT_DIR_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT_DIR_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/testNameNodeMetrics"
argument_list|)
decl_stmt|;
DECL|field|NN_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|NN_METRICS
init|=
literal|"NameNodeActivity"
decl_stmt|;
DECL|field|NS_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|NS_METRICS
init|=
literal|"FSNamesystem"
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|EC_POLICY
specifier|private
specifier|static
specifier|final
name|ErasureCodingPolicy
name|EC_POLICY
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNameNodeMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Number of datanodes in the cluster
DECL|field|DATANODE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DATANODE_COUNT
init|=
name|EC_POLICY
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|EC_POLICY
operator|.
name|getNumParityUnits
argument_list|()
operator|+
literal|1
decl_stmt|;
DECL|field|WAIT_GAUGE_VALUE_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_GAUGE_VALUE_RETRIES
init|=
literal|20
decl_stmt|;
comment|// Rollover interval of percentile metrics (in seconds)
DECL|field|PERCENTILES_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|PERCENTILES_INTERVAL
init|=
literal|1
decl_stmt|;
static|static
block|{
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFS_REDUNDANCY_INTERVAL
argument_list|)
expr_stmt|;
comment|// Set it long enough to essentially disable unless we manually call it
comment|// Used for decommissioning DataNode metrics
name|CONF
operator|.
name|setTimeDuration
argument_list|(
name|MiniDFSCluster
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_TESTING_KEY
argument_list|,
literal|999
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
comment|// Next two configs used for checking failed volume metrics
name|CONF
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_KEY
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
name|DFS_REDUNDANCY_INTERVAL
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_PERCENTILES_INTERVALS_KEY
argument_list|,
literal|""
operator|+
name|PERCENTILES_INTERVAL
argument_list|)
expr_stmt|;
comment|// Enable stale DataNodes checking
name|CONF
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Enable erasure coding
name|CONF
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_POLICIES_ENABLED_KEY
argument_list|,
name|EC_POLICY
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsAsserts
operator|.
name|class
argument_list|)
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|hostsFileWriter
specifier|private
name|HostsFileWriter
name|hostsFileWriter
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
DECL|field|ecDir
specifier|private
name|Path
name|ecDir
decl_stmt|;
DECL|method|getTestPath (String fileName)
specifier|private
specifier|static
name|Path
name|getTestPath
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hostsFileWriter
operator|=
operator|new
name|HostsFileWriter
argument_list|()
expr_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|CONF
argument_list|,
literal|"temp/decommission"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|bm
operator|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|ecDir
operator|=
name|getTestPath
argument_list|(
literal|"/ec"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|EC_POLICY
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsSource
name|source
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|getSource
argument_list|(
literal|"UgiMetrics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
comment|// Run only once since the UGI metrics is cleaned up during teardown
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"GetGroups1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostsFileWriter
operator|!=
literal|null
condition|)
block|{
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|hostsFileWriter
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** create a file with a length of<code>fileLen</code> */
DECL|method|createFile (Path file, long fileLen, short replicas)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|short
name|replicas
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|replicas
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFile (FileSystem fileSys,Path name)
specifier|private
name|void
name|readFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Just read file so that getNumBlockLocations are incremented
name|DataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|stm
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that capacity metrics are exported and pass    * basic sanity tests.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCapacityMetrics ()
specifier|public
name|void
name|testCapacityMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|long
name|capacityTotal
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityTotal"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|capacityTotal
operator|!=
literal|0
operator|)
assert|;
name|long
name|capacityUsed
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityUsed"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|long
name|capacityRemaining
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityRemaining"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|long
name|capacityUsedNonDFS
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"CapacityUsedNonDFS"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
comment|// There will be 5% space reserved in ext filesystem which is not
comment|// considered.
assert|assert
operator|(
name|capacityUsed
operator|+
name|capacityRemaining
operator|+
name|capacityUsedNonDFS
operator|<=
name|capacityTotal
operator|)
assert|;
block|}
comment|/** Test metrics indicating the number of stale DataNodes */
annotation|@
name|Test
DECL|method|testStaleNodes ()
specifier|public
name|void
name|testStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set two datanodes as stale
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|staleInterval
init|=
name|CONF
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnDes
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDes
argument_list|,
operator|-
operator|(
name|staleInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Let HeartbeatManager to check heartbeat
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"StaleDataNodes"
argument_list|,
literal|2
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset stale datanodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dnDes
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Let HeartbeatManager to refresh
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"StaleDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test metrics associated with volume failures.    */
annotation|@
name|Test
DECL|method|testVolumeFailures ()
specifier|public
name|void
name|testVolumeFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|assertGauge
argument_list|(
literal|"VolumeFailuresTotal"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"EstimatedCapacityLostTotal"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumeReferences
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
operator|.
name|getFsVolumeReferences
argument_list|()
decl_stmt|;
name|FsVolumeImpl
name|fsVolume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|volumeReferences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|fsVolume
operator|.
name|getBaseURI
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|capacity
init|=
name|fsVolume
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|volumeReferences
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|injectDataDirFailure
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|waitForDiskError
argument_list|(
name|dn
argument_list|,
name|fsVolume
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"VolumeFailuresTotal"
argument_list|,
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"EstimatedCapacityLostTotal"
argument_list|,
name|capacity
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test metrics associated with liveness and decommission status of DataNodes.    */
annotation|@
name|Test
DECL|method|testDataNodeLivenessAndDecom ()
specifier|public
name|void
name|testDataNodeLivenessAndDecom
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
index|[]
name|dnDescriptors
init|=
operator|new
name|DatanodeDescriptor
index|[
name|DATANODE_COUNT
index|]
decl_stmt|;
name|String
index|[]
name|dnAddresses
init|=
operator|new
name|String
index|[
name|DATANODE_COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATANODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|dnDescriptors
index|[
name|i
index|]
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
name|dnAddresses
index|[
name|i
index|]
operator|=
name|dnDescriptors
index|[
name|i
index|]
operator|.
name|getXferAddr
argument_list|()
expr_stmt|;
block|}
comment|// First put all DNs into include
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|dnAddresses
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomLiveDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumLiveDataNodes"
argument_list|,
name|DATANODE_COUNT
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now decommission one DN
name|hostsFileWriter
operator|.
name|initExcludeHost
argument_list|(
name|dnAddresses
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecommissioningDataNodes"
argument_list|,
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|recheckDecommissionState
argument_list|(
name|bm
operator|.
name|getDatanodeManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecommissioningDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomLiveDataNodes"
argument_list|,
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumLiveDataNodes"
argument_list|,
name|DATANODE_COUNT
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now kill all DNs by expiring their heartbeats
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATANODE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|expireInterval
init|=
name|CONF
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|2L
operator|+
name|CONF
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|10
operator|*
literal|1000L
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDescriptors
index|[
name|i
index|]
argument_list|,
operator|-
operator|(
name|expireInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomLiveDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomDeadDataNodes"
argument_list|,
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumLiveDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDeadDataNodes"
argument_list|,
name|DATANODE_COUNT
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now remove the decommissioned DN altogether
name|String
index|[]
name|includeHosts
init|=
operator|new
name|String
index|[
name|dnAddresses
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|includeHosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|includeHosts
index|[
name|i
index|]
operator|=
name|dnAddresses
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|includeHosts
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initExcludeHosts
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomLiveDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDecomDeadDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumLiveDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDeadDataNodes"
argument_list|,
name|DATANODE_COUNT
operator|-
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finally mark the remaining DNs as live again
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|dataNodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDescriptors
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|checkHeartbeat
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumLiveDataNodes"
argument_list|,
name|DATANODE_COUNT
operator|-
literal|1
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumDeadDataNodes"
argument_list|,
literal|0
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test metrics associated with addition of a file */
annotation|@
name|Test
DECL|method|testFileAdd ()
specifier|public
name|void
name|testFileAdd
parameter_list|()
throws|throws
name|Exception
block|{
comment|// File creations
specifier|final
name|long
name|blockCount
init|=
literal|32
decl_stmt|;
specifier|final
name|Path
name|normalFile
init|=
name|getTestPath
argument_list|(
literal|"testFileAdd"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|normalFile
argument_list|,
name|blockCount
operator|*
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"ecFile.log"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createStripedFile
argument_list|(
name|cluster
argument_list|,
name|ecFile
argument_list|,
literal|null
argument_list|,
operator|(
name|int
operator|)
name|blockCount
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|EC_POLICY
argument_list|)
expr_stmt|;
name|int
name|blockCapacity
init|=
name|namesystem
operator|.
name|getBlockCapacity
argument_list|()
decl_stmt|;
name|assertGauge
argument_list|(
literal|"BlockCapacity"
argument_list|,
name|blockCapacity
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
comment|// File create operations are 2
name|assertCounter
argument_list|(
literal|"CreateFileOps"
argument_list|,
literal|2L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Number of files created is depth of normalFile and ecFile, after
comment|// removing the duplicate accounting for root test dir.
name|assertCounter
argument_list|(
literal|"FilesCreated"
argument_list|,
call|(
name|long
call|)
argument_list|(
name|normalFile
operator|.
name|depth
argument_list|()
operator|+
name|ecFile
operator|.
name|depth
argument_list|()
argument_list|)
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|long
name|filesTotal
init|=
name|normalFile
operator|.
name|depth
argument_list|()
operator|+
name|ecFile
operator|.
name|depth
argument_list|()
operator|+
literal|1
comment|/* ecDir */
decl_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FilesTotal"
argument_list|,
name|filesTotal
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BlocksTotal"
argument_list|,
name|blockCount
operator|*
literal|2
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|normalFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesTotal
operator|--
expr_stmt|;
comment|// reduce the filecount for deleted file
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"FilesTotal"
argument_list|,
name|filesTotal
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BlocksTotal"
argument_list|,
name|blockCount
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingDeletionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|ecFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|filesTotal
operator|--
expr_stmt|;
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"FilesTotal"
argument_list|,
name|filesTotal
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"BlocksTotal"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingDeletionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
expr_stmt|;
comment|// Delete file operations and number of files deleted must be 1
name|assertCounter
argument_list|(
literal|"DeleteFileOps"
argument_list|,
literal|2L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FilesDeleted"
argument_list|,
literal|2L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify low redundancy and corrupt blocks metrics are zero.    * @throws Exception    */
DECL|method|verifyZeroMetrics ()
specifier|private
name|void
name|verifyZeroMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
literal|500
argument_list|)
decl_stmt|;
comment|// Verify aggregated blocks metrics
name|assertGauge
argument_list|(
literal|"UnderReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Deprecated metric
name|assertGauge
argument_list|(
literal|"LowRedundancyBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Deprecated metric
name|assertGauge
argument_list|(
literal|"PendingReconstructionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify replica metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify striped block groups metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify aggregated metrics equals the sum of replicated blocks metrics    * and erasure coded blocks metrics.    * @throws Exception    */
DECL|method|verifyAggregatedMetricsTally ()
specifier|private
name|void
name|verifyAggregatedMetricsTally
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Under replicated metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getLowRedundancyBlocks
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Low redundancy metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getLowRedundancyBlocks
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getLowRedundancyReplicatedBlocks
argument_list|()
operator|+
name|namesystem
operator|.
name|getLowRedundancyECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Corrupt blocks metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getCorruptReplicatedBlocks
argument_list|()
operator|+
name|namesystem
operator|.
name|getCorruptECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Missing blocks metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getMissingReplicatedBlocks
argument_list|()
operator|+
name|namesystem
operator|.
name|getMissingECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Missing blocks with replication factor one not matching!"
argument_list|,
name|namesystem
operator|.
name|getMissingReplOneBlocksCount
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getMissingReplicationOneBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bytes in future blocks metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getBytesInFuture
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getBytesInFutureReplicatedBlocks
argument_list|()
operator|+
name|namesystem
operator|.
name|getBytesInFutureECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Pending deletion blocks metrics not matching!"
argument_list|,
name|namesystem
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|,
name|namesystem
operator|.
name|getPendingDeletionReplicatedBlocks
argument_list|()
operator|+
name|namesystem
operator|.
name|getPendingDeletionECBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Corrupt a block and ensure metrics reflects it */
annotation|@
name|Test
DECL|method|testCorruptBlock ()
specifier|public
name|void
name|testCorruptBlock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file with single block with two replicas
specifier|final
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testCorruptBlock"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replicaCount
init|=
literal|2
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
name|replicaCount
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replicaCount
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
comment|// Disable the heartbeats, so that no corrupted replica
comment|// can be fixed
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|verifyZeroMetrics
argument_list|()
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
comment|// Corrupt first replica of the block
name|LocatedBlock
name|block
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|1L
argument_list|,
literal|500
argument_list|)
decl_stmt|;
comment|// Verify aggregated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReconstructionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify replicated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyReplicatedBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptReplicatedBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify striped blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start block reconstruction work
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replicaCount
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
literal|500
argument_list|)
expr_stmt|;
comment|// Verify aggregated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReconstructionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify replicated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify striped blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
comment|// During the file deletion, both BlockManager#corruptReplicas and
comment|// BlockManager#pendingReplications will be updated, i.e., the records
comment|// for the blocks of the deleted file will be removed from both
comment|// corruptReplicas and pendingReplications. The corresponding
comment|// metrics (CorruptBlocks and PendingReplicationBlocks) will only be updated
comment|// when BlockManager#computeDatanodeWork is run where the
comment|// BlockManager#updateState is called. And in
comment|// BlockManager#computeDatanodeWork the metric ScheduledReplicationBlocks
comment|// will also be updated.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|verifyZeroMetrics
argument_list|()
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000L
argument_list|)
DECL|method|testStripedFileCorruptBlocks ()
specifier|public
name|void
name|testStripedFileCorruptBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|fileLen
init|=
name|BLOCK_SIZE
operator|*
literal|4
decl_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"ecFile.log"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFile
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|fs
argument_list|,
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable the heartbeats, so that no corrupted replica
comment|// can be fixed
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|verifyZeroMetrics
argument_list|()
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
comment|// Corrupt first replica of the block
name|LocatedBlocks
name|lbs
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
assert|assert
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|LocatedStripedBlock
assert|;
name|LocatedStripedBlock
name|bg
init|=
call|(
name|LocatedStripedBlock
call|)
argument_list|(
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|bg
operator|.
name|getBlock
argument_list|()
argument_list|,
name|bg
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|1L
argument_list|,
literal|500
argument_list|)
decl_stmt|;
comment|// Verify aggregated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReconstructionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify replica metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify striped block groups metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyECBlockGroups"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptECBlockGroups"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start block reconstruction work
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitForReconstructionFinished
argument_list|(
name|ecFile
argument_list|,
name|fs
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rb
operator|=
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReplicationBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"PendingReconstructionBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify replicated blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptReplicatedBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Verify striped blocks metrics
name|assertGauge
argument_list|(
literal|"LowRedundancyECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"CorruptECBlockGroups"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|ecFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
comment|// During the file deletion, both BlockManager#corruptReplicas and
comment|// BlockManager#pendingReplications will be updated, i.e., the records
comment|// for the blocks of the deleted file will be removed from both
comment|// corruptReplicas and pendingReplications. The corresponding
comment|// metrics (CorruptBlocks and PendingReplicationBlocks) will only be updated
comment|// when BlockManager#computeDatanodeWork is run where the
comment|// BlockManager#updateState is called. And in
comment|// BlockManager#computeDatanodeWork the metric ScheduledReplicationBlocks
comment|// will also be updated.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"CorruptBlocks"
argument_list|,
literal|0L
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|verifyZeroMetrics
argument_list|()
expr_stmt|;
name|verifyAggregatedMetricsTally
argument_list|()
expr_stmt|;
block|}
comment|/** Create excess blocks by reducing the replication factor for    * for a file and ensure metrics reflects it    */
annotation|@
name|Test
DECL|method|testExcessBlocks ()
specifier|public
name|void
name|testExcessBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testExcessBlocks"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|setReplication
argument_list|(
name|namesystem
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"ExcessBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// verify ExcessBlocks metric is decremented and
comment|// excessReplicateMap is cleared after deleting a file
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"ExcessBlocks"
argument_list|,
literal|0L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|bm
operator|.
name|getExcessBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test to ensure metrics reflects missing blocks */
annotation|@
name|Test
DECL|method|testMissingBlock ()
specifier|public
name|void
name|testMissingBlock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a file with single block with two replicas
name|Path
name|file
init|=
name|getTestPath
argument_list|(
literal|"testMissingBlocks"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// Corrupt the only replica of the block to result in a missing block
name|LocatedBlock
name|block
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait for block to be marked corrupt
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"UnderReplicatedBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"MissingBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"MissingReplOneBlocks"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForDnMetricValue
argument_list|(
name|NS_METRICS
argument_list|,
literal|"UnderReplicatedBlocks"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForDeletion ()
specifier|private
name|void
name|waitForDeletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Wait for more than DATANODE_COUNT replication intervals to ensure all
comment|// the blocks pending deletion are sent for deletion to the datanodes.
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_REDUNDANCY_INTERVAL
operator|*
name|DATANODE_COUNT
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for the named gauge value from the metrics source to reach the    * desired value.    *    * There's an initial delay then a spin cycle of sleep and poll. Because    * all the tests use a shared FS instance, these tests are not independent;    * that's why the initial sleep is in there.    *    * @param source metrics source    * @param name gauge name    * @param expected expected value    * @return the last metrics record polled    * @throws Exception if something went wrong.    */
DECL|method|waitForDnMetricValue (String source, String name, long expected)
specifier|private
name|MetricsRecordBuilder
name|waitForDnMetricValue
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
comment|// initial wait
name|waitForDeletion
argument_list|()
expr_stmt|;
return|return
name|waitForDnMetricValue
argument_list|(
name|source
argument_list|,
name|name
argument_list|,
name|expected
argument_list|,
name|DFS_REDUNDANCY_INTERVAL
operator|*
literal|500
argument_list|)
return|;
block|}
DECL|method|waitForDnMetricValue (String source, String name, long expected, long sleepInterval)
specifier|private
name|MetricsRecordBuilder
name|waitForDnMetricValue
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|expected
parameter_list|,
name|long
name|sleepInterval
parameter_list|)
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
decl_stmt|;
name|long
name|gauge
decl_stmt|;
comment|// Lots of retries are allowed for slow systems.
comment|// Fast ones will still exit early.
name|int
name|retries
init|=
name|DATANODE_COUNT
operator|*
name|WAIT_GAUGE_VALUE_RETRIES
decl_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|gauge
operator|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
name|name
argument_list|,
name|rb
argument_list|)
expr_stmt|;
while|while
condition|(
name|gauge
operator|!=
name|expected
operator|&&
operator|(
operator|--
name|retries
operator|>
literal|0
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|rb
operator|=
name|getMetrics
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|gauge
operator|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
name|name
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|//at this point the assertion is valid or the retry count ran out
name|assertGauge
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|rb
argument_list|)
expr_stmt|;
return|return
name|rb
return|;
block|}
annotation|@
name|Test
DECL|method|testRenameMetrics ()
specifier|public
name|void
name|testRenameMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
name|getTestPath
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Path
name|target
init|=
name|getTestPath
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|target
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"FilesRenamed"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FilesDeleted"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test numGetBlockLocations metric       *     * Test initiates and performs file operations (create,read,close,open file )    * which results in metrics changes. These metrics changes are updated and     * tested for correctness.    *     *  create file operation does not increment numGetBlockLocation    *  one read file operation increments numGetBlockLocation by 1    *        * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testGetBlockLocationMetric ()
specifier|public
name|void
name|testGetBlockLocationMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1_Path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
literal|"file1.dat"
argument_list|)
decl_stmt|;
comment|// When cluster starts first time there are no file  (read,create,open)
comment|// operations so metric GetBlockLocations should be 0.
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|//Perform create file operation
name|createFile
argument_list|(
name|file1_Path
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|//Create file does not change numGetBlockLocations metric
comment|//expect numGetBlockLocations = 0 for previous and current interval
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Open and read file operation increments GetBlockLocations
comment|// Perform read file operation on earlier created file
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
comment|// Verify read file operation has incremented numGetBlockLocations by 1
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// opening and reading file  twice will increment numGetBlockLocations by 2
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"GetBlockLocations"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing TransactionsSinceLastCheckpoint. Need a new cluster as    * the other tests in here don't use HA. See HDFS-7501.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTransactionSinceLastCheckpointMetrics ()
specifier|public
name|void
name|testTransactionSinceLastCheckpointMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|retryCount
operator|<
literal|5
condition|)
block|{
try|try
block|{
name|int
name|basePort
init|=
literal|10060
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|*
literal|2
decl_stmt|;
name|MiniDFSNNTopology
name|topology
init|=
operator|new
name|MiniDFSNNTopology
argument_list|()
operator|.
name|addNameservice
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NSConf
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn1"
argument_list|)
operator|.
name|setHttpPort
argument_list|(
name|basePort
argument_list|)
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn2"
argument_list|)
operator|.
name|setHttpPort
argument_list|(
name|basePort
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HdfsConfiguration
name|conf2
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Lower the checkpoint condition for purpose of testing.
name|conf2
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_TXNS_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Check for checkpoint condition very often, for purpose of testing.
name|conf2
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_CHECK_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Poll and follow ANN txns very often, for purpose of testing.
name|conf2
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster2
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf2
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|topology
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster2
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs2
init|=
name|cluster2
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn0
init|=
name|cluster2
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn1
init|=
name|cluster2
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cluster2
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp-t1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp-t2"
argument_list|)
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn0
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
comment|// Test to ensure tracking works before the first-ever
comment|// checkpoint.
name|assertEquals
argument_list|(
literal|"SBN failed to track 2 transactions pre-checkpoint."
argument_list|,
literal|4L
argument_list|,
comment|// 2 txns added further when catch-up is called.
name|cluster2
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getTransactionsSinceLastCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete up to the boundary required for
comment|// an auto-checkpoint. Using 94 to expect fsimage
comment|// rounded at 100, as 4 + 94 + 2 (catch-up call) = 100.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|94
condition|;
name|i
operator|++
control|)
block|{
name|fs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn0
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
comment|// Assert 100 transactions in checkpoint.
name|HATestUtil
operator|.
name|waitForCheckpoint
argument_list|(
name|cluster2
argument_list|,
literal|1
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test to ensure number tracks the right state of
comment|// uncheckpointed edits, and does not go negative
comment|// (as fixed in HDFS-7501).
name|assertEquals
argument_list|(
literal|"Should be zero right after the checkpoint."
argument_list|,
literal|0L
argument_list|,
name|cluster2
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getTransactionsSinceLastCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp-t3"
argument_list|)
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp-t4"
argument_list|)
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn0
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
comment|// Test to ensure we track the right numbers after
comment|// the checkpoint resets it to zero again.
name|assertEquals
argument_list|(
literal|"SBN failed to track 2 added txns after the ckpt."
argument_list|,
literal|4L
argument_list|,
name|cluster2
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getTransactionsSinceLastCheckpoint
argument_list|()
argument_list|)
expr_stmt|;
name|cluster2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to set up HA cluster, exception thrown: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|retryCount
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test NN checkpoint and transaction-related metrics.    */
annotation|@
name|Test
DECL|method|testTransactionAndCheckpointMetrics ()
specifier|public
name|void
name|testTransactionAndCheckpointMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastCkptTime
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
decl_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|lastCkptTime
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|6L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|6L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|newLastCkptTime
init|=
name|MetricsAsserts
operator|.
name|getLongGauge
argument_list|(
literal|"LastCheckpointTime"
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lastCkptTime
operator|<
name|newLastCkptTime
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"LastWrittenTransactionId"
argument_list|,
literal|8L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastCheckpoint"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"TransactionsSinceLastLogRoll"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the sync and block report metrics get updated on cluster    * startup.    */
annotation|@
name|Test
DECL|method|testSyncAndBlockReportMetric ()
specifier|public
name|void
name|testSyncAndBlockReportMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
comment|// We have one sync when the cluster starts up, just opening the journal
name|assertCounter
argument_list|(
literal|"SyncsNumOps"
argument_list|,
literal|3L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Each datanode reports in when the cluster comes up
name|assertCounter
argument_list|(
literal|"StorageBlockReportNumOps"
argument_list|,
operator|(
name|long
operator|)
name|DATANODE_COUNT
operator|*
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Sleep for an interval+slop to let the percentiles rollover
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|PERCENTILES_INTERVAL
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Check that the percentiles were updated
name|assertQuantileGauges
argument_list|(
literal|"Syncs1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"StorageBlockReport1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test NN ReadOps Count and WriteOps Count    */
annotation|@
name|Test
DECL|method|testReadWriteOps ()
specifier|public
name|void
name|testReadWriteOps
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
name|long
name|startWriteCounter
init|=
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"TransactionsNumOps"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|Path
name|file1_Path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR_PATH
argument_list|,
literal|"ReadData.dat"
argument_list|)
decl_stmt|;
comment|//Perform create file operation
name|createFile
argument_list|(
name|file1_Path
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|// Perform read file operation on earlier created file
name|readFile
argument_list|(
name|fs
argument_list|,
name|file1_Path
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rbNew
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MetricsAsserts
operator|.
name|getLongCounter
argument_list|(
literal|"TransactionsNumOps"
argument_list|,
name|rbNew
argument_list|)
operator|>
name|startWriteCounter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test metrics indicating the number of active clients and the files under    * construction    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNumActiveClientsAndFilesUnderConstructionMetrics ()
specifier|public
name|void
name|testNumActiveClientsAndFilesUnderConstructionMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file1
init|=
name|getTestPath
argument_list|(
literal|"testFileAdd1"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file1
argument_list|,
literal|100
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/testFileAdd2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|output2
init|=
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|output2
operator|.
name|writeBytes
argument_list|(
literal|"Some test data"
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"/testFileAdd3"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|output3
init|=
name|fs
operator|.
name|create
argument_list|(
name|file3
argument_list|)
decl_stmt|;
name|output3
operator|.
name|writeBytes
argument_list|(
literal|"Some test data"
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// create another DistributedFileSystem client
name|DistributedFileSystem
name|fs1
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getNewFileSystemInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
literal|"/testFileAdd4"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|output4
init|=
name|fs1
operator|.
name|create
argument_list|(
name|file4
argument_list|)
decl_stmt|;
name|output4
operator|.
name|writeBytes
argument_list|(
literal|"Some test data"
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|3L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file5
init|=
operator|new
name|Path
argument_list|(
literal|"/testFileAdd35"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|output5
init|=
name|fs1
operator|.
name|create
argument_list|(
name|file5
argument_list|)
decl_stmt|;
name|output5
operator|.
name|writeBytes
argument_list|(
literal|"Some test data"
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|4L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|output2
operator|.
name|close
argument_list|()
expr_stmt|;
name|output3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|2L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|output4
operator|.
name|close
argument_list|()
expr_stmt|;
name|output5
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumActiveClients"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumFilesUnderConstruction"
argument_list|,
literal|0L
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGenerateEDEKTime ()
specifier|public
name|void
name|testGenerateEDEKTime
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|//Create new MiniDFSCluster with EncryptionZone configurations
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystemTestHelper
name|fsHelper
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
decl_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_ENCRYPTION_ZONES_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|MiniDFSCluster
name|clusterEDEK
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|DistributedFileSystem
name|fsEDEK
init|=
name|clusterEDEK
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileSystemTestWrapper
name|fsWrapper
init|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fsEDEK
argument_list|)
decl_stmt|;
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|clusterEDEK
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fsEDEK
operator|.
name|getClient
argument_list|()
operator|.
name|setKeyProvider
argument_list|(
name|clusterEDEK
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|testKey
init|=
literal|"test_key"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|testKey
argument_list|,
name|clusterEDEK
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
literal|"test_key"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|NO_TRASH
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/zones/zone1/testfile-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fsEDEK
argument_list|,
name|filePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"GenerateEDEKTime1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResourceCheck ()
specifier|public
name|void
name|testResourceCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|tmpCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|MockNameNodeResourceChecker
name|mockResourceChecker
init|=
operator|new
name|MockNameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tmpCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|setNNResourceChecker
argument_list|(
name|mockResourceChecker
argument_list|)
expr_stmt|;
name|NNHAServiceTarget
name|haTarget
init|=
operator|new
name|NNHAServiceTarget
argument_list|(
name|conf
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
argument_list|,
literal|"nn1"
argument_list|)
decl_stmt|;
name|HAServiceProtocol
name|rpc
init|=
name|haTarget
operator|.
name|getHealthMonitorProxy
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HA_HM_RPC_TIMEOUT_KEY
argument_list|,
name|HA_HM_RPC_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|NN_METRICS
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|rpc
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|assertQuantileGauges
argument_list|(
literal|"ResourceCheckTime1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|tmpCluster
operator|!=
literal|null
condition|)
block|{
name|tmpCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

