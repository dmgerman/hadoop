begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|addDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|countContents
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|deleteFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|getFileStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|FederationTestUtils
operator|.
name|verifyFileExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|TEST_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|NamenodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterDFSCluster
operator|.
name|RouterContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The the RPC interface of the {@link Router} implemented by  * {@link RouterRpcServer}.  */
end_comment

begin_class
DECL|class|TestRouterRpc
specifier|public
class|class
name|TestRouterRpc
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRouterRpc
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EC_POLICY_CMP
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
name|EC_POLICY_CMP
init|=
operator|new
name|Comparator
argument_list|<
name|ErasureCodingPolicyInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ErasureCodingPolicyInfo
name|ec0
parameter_list|,
name|ErasureCodingPolicyInfo
name|ec1
parameter_list|)
block|{
name|String
name|name0
init|=
name|ec0
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|name1
init|=
name|ec1
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name0
operator|.
name|compareTo
argument_list|(
name|name1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** Federated HDFS cluster. */
DECL|field|cluster
specifier|private
specifier|static
name|RouterDFSCluster
name|cluster
decl_stmt|;
comment|/** Random Router for this federated cluster. */
DECL|field|router
specifier|private
name|RouterContext
name|router
decl_stmt|;
comment|/** Random nameservice in the federated cluster.  */
DECL|field|ns
specifier|private
name|String
name|ns
decl_stmt|;
comment|/** First namenode in the nameservice. */
DECL|field|namenode
specifier|private
name|NamenodeContext
name|namenode
decl_stmt|;
comment|/** Client interface to the Router. */
DECL|field|routerProtocol
specifier|private
name|ClientProtocol
name|routerProtocol
decl_stmt|;
comment|/** Client interface to the Namenode. */
DECL|field|nnProtocol
specifier|private
name|ClientProtocol
name|nnProtocol
decl_stmt|;
comment|/** Filesystem interface to the Router. */
DECL|field|routerFS
specifier|private
name|FileSystem
name|routerFS
decl_stmt|;
comment|/** Filesystem interface to the Namenode. */
DECL|field|nnFS
specifier|private
name|FileSystem
name|nnFS
decl_stmt|;
comment|/** File in the Router. */
DECL|field|routerFile
specifier|private
name|String
name|routerFile
decl_stmt|;
comment|/** File in the Namenode. */
DECL|field|nnFile
specifier|private
name|String
name|nnFile
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|globalSetUp ()
specifier|public
specifier|static
name|void
name|globalSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|RouterDFSCluster
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// We need 6 DNs to test Erasure Coding with RS-6-3-64k
name|cluster
operator|.
name|setNumDatanodesPerNameservice
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// Start NNs and DNs and wait until ready
name|cluster
operator|.
name|startCluster
argument_list|()
expr_stmt|;
comment|// Start routers with only an RPC service
name|cluster
operator|.
name|addRouterOverrides
argument_list|(
operator|(
operator|new
name|RouterConfigBuilder
argument_list|()
operator|)
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRouters
argument_list|()
expr_stmt|;
comment|// Register and verify all NNs with all routers
name|cluster
operator|.
name|registerNamenodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitNamenodeRegistration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|testSetup ()
specifier|public
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create mock locations
name|cluster
operator|.
name|installMockLocations
argument_list|()
expr_stmt|;
comment|// Delete all files via the NNs and verify
name|cluster
operator|.
name|deleteAllFiles
argument_list|()
expr_stmt|;
comment|// Create test fixtures on NN
name|cluster
operator|.
name|createTestDirectoriesNamenode
argument_list|()
expr_stmt|;
comment|// Wait to ensure NN has fully created its test directories
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Default namenode and random router for this test
name|this
operator|.
name|router
operator|=
name|cluster
operator|.
name|getRandomRouter
argument_list|()
expr_stmt|;
name|this
operator|.
name|ns
operator|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|ns
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Handles to the ClientProtocol interface
name|this
operator|.
name|routerProtocol
operator|=
name|router
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|this
operator|.
name|nnProtocol
operator|=
name|namenode
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
comment|// Handles to the filesystem client
name|this
operator|.
name|nnFS
operator|=
name|namenode
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|routerFS
operator|=
name|router
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Create a test file on the NN
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|randomFile
init|=
literal|"testfile-"
operator|+
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|nnFile
operator|=
name|cluster
operator|.
name|getNamenodeTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
operator|+
literal|"/"
operator|+
name|randomFile
expr_stmt|;
name|this
operator|.
name|routerFile
operator|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
operator|+
literal|"/"
operator|+
name|randomFile
expr_stmt|;
name|createFile
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|verifyFileExists
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRpcService ()
specifier|public
name|void
name|testRpcService
parameter_list|()
throws|throws
name|IOException
block|{
name|Router
name|testRouter
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nss
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
decl_stmt|;
name|String
name|ns0
init|=
name|nss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|routerConfig
init|=
name|cluster
operator|.
name|generateRouterConfiguration
argument_list|(
name|ns0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RouterRpcServer
name|server
init|=
operator|new
name|RouterRpcServer
argument_list|(
name|routerConfig
argument_list|,
name|testRouter
argument_list|,
name|testRouter
operator|.
name|getNamenodeResolver
argument_list|()
argument_list|,
name|testRouter
operator|.
name|getSubclusterResolver
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|init
argument_list|(
name|routerConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|server
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|server
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|server
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|testRouter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getCluster ()
specifier|protected
name|RouterDFSCluster
name|getCluster
parameter_list|()
block|{
return|return
name|TestRouterRpc
operator|.
name|cluster
return|;
block|}
DECL|method|getRouterContext ()
specifier|protected
name|RouterContext
name|getRouterContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|router
return|;
block|}
DECL|method|setRouter (RouterContext r)
specifier|protected
name|void
name|setRouter
parameter_list|(
name|RouterContext
name|r
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
operator|.
name|router
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|routerProtocol
operator|=
name|r
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|this
operator|.
name|routerFS
operator|=
name|r
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|method|getRouterFileSystem ()
specifier|protected
name|FileSystem
name|getRouterFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|routerFS
return|;
block|}
DECL|method|getNamenodeFileSystem ()
specifier|protected
name|FileSystem
name|getNamenodeFileSystem
parameter_list|()
block|{
return|return
name|this
operator|.
name|nnFS
return|;
block|}
DECL|method|getRouterProtocol ()
specifier|protected
name|ClientProtocol
name|getRouterProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|routerProtocol
return|;
block|}
DECL|method|getNamenodeProtocol ()
specifier|protected
name|ClientProtocol
name|getNamenodeProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|nnProtocol
return|;
block|}
DECL|method|getNamenode ()
specifier|protected
name|NamenodeContext
name|getNamenode
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenode
return|;
block|}
DECL|method|setNamenodeFile (String filename)
specifier|protected
name|void
name|setNamenodeFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|nnFile
operator|=
name|filename
expr_stmt|;
block|}
DECL|method|getNamenodeFile ()
specifier|protected
name|String
name|getNamenodeFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|nnFile
return|;
block|}
DECL|method|setRouterFile (String filename)
specifier|protected
name|void
name|setRouterFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|routerFile
operator|=
name|filename
expr_stmt|;
block|}
DECL|method|getRouterFile ()
specifier|protected
name|String
name|getRouterFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|routerFile
return|;
block|}
DECL|method|setNamenode (NamenodeContext nn)
specifier|protected
name|void
name|setNamenode
parameter_list|(
name|NamenodeContext
name|nn
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
operator|.
name|namenode
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|nnProtocol
operator|=
name|nn
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
expr_stmt|;
name|this
operator|.
name|nnFS
operator|=
name|nn
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|method|getNs ()
specifier|protected
name|String
name|getNs
parameter_list|()
block|{
return|return
name|this
operator|.
name|ns
return|;
block|}
DECL|method|setNs (String nameservice)
specifier|protected
name|void
name|setNs
parameter_list|(
name|String
name|nameservice
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|nameservice
expr_stmt|;
block|}
DECL|method|compareResponses ( ClientProtocol protocol1, ClientProtocol protocol2, Method m, Object[] paramList)
specifier|protected
specifier|static
name|void
name|compareResponses
parameter_list|(
name|ClientProtocol
name|protocol1
parameter_list|,
name|ClientProtocol
name|protocol2
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|paramList
parameter_list|)
block|{
name|Object
name|return1
init|=
literal|null
decl_stmt|;
name|Exception
name|exception1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|return1
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|protocol1
argument_list|,
name|paramList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception1
operator|=
name|ex
expr_stmt|;
block|}
name|Object
name|return2
init|=
literal|null
decl_stmt|;
name|Exception
name|exception2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|return2
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|protocol2
argument_list|,
name|paramList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception2
operator|=
name|ex
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|return1
argument_list|,
name|return2
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception1
operator|==
literal|null
operator|&&
name|exception2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertEquals
argument_list|(
name|exception1
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|exception2
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyListFiles ()
specifier|public
name|void
name|testProxyListFiles
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|URISyntaxException
throws|,
name|NoSuchMethodException
throws|,
name|SecurityException
block|{
comment|// Verify that the root listing is a union of the mount table destinations
comment|// and the files stored at all nameservices mounted at the root (ns0 + ns1)
comment|//
comment|// / -->
comment|// /ns0 (from mount table)
comment|// /ns1 (from mount table)
comment|// all items in / of ns0 (default NS)
comment|// Collect the mount table entries from the root mount point
name|Set
argument_list|<
name|String
argument_list|>
name|requiredPaths
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|FileSubclusterResolver
name|fileResolver
init|=
name|router
operator|.
name|getRouter
argument_list|()
operator|.
name|getSubclusterResolver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mount
range|:
name|fileResolver
operator|.
name|getMountPoints
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
name|requiredPaths
operator|.
name|add
argument_list|(
name|mount
argument_list|)
expr_stmt|;
block|}
comment|// Collect all files/dirs on the root path of the default NS
name|String
name|defaultNs
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NamenodeContext
name|nn
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|defaultNs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|iterator
init|=
name|nn
operator|.
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|iterator
control|)
block|{
name|requiredPaths
operator|.
name|add
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fetch listing
name|DirectoryListing
name|listing
init|=
name|routerProtocol
operator|.
name|getListing
argument_list|(
literal|"/"
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|requiredPathsIterator
init|=
name|requiredPaths
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Match each path returned and verify order returned
for|for
control|(
name|HdfsFileStatus
name|f
range|:
name|listing
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
name|String
name|fileName
init|=
name|requiredPathsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|currentFile
init|=
name|f
operator|.
name|getFullPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|currentFile
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// Verify the total number of results found/matched
name|assertEquals
argument_list|(
name|requiredPaths
operator|.
name|size
argument_list|()
argument_list|,
name|listing
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// List a path that doesn't exist and validate error response with NN
comment|// behavior.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getListing"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyListFilesWithConflict ()
specifier|public
name|void
name|testProxyListFilesWithConflict
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Add a directory to the namespace that conflicts with a mount point
name|NamenodeContext
name|nn
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|ns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FileSystem
name|nnFs
init|=
name|nn
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|addDirectory
argument_list|(
name|nnFs
argument_list|,
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|routerFs
init|=
name|router
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|initialCount
init|=
name|countContents
argument_list|(
name|routerFs
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
comment|// Root file system now for NS X:
comment|// / ->
comment|// /ns0 (mount table)
comment|// /ns1 (mount table)
comment|// /target-ns0 (the target folder for the NS0 mapped to /
comment|// /nsX (local directory that duplicates mount table)
name|int
name|newCount
init|=
name|countContents
argument_list|(
name|routerFs
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|initialCount
argument_list|,
name|newCount
argument_list|)
expr_stmt|;
comment|// Verify that each root path is readable and contains one test directory
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countContents
argument_list|(
name|routerFs
argument_list|,
name|cluster
operator|.
name|getFederatedPathForNS
argument_list|(
name|ns
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that real folder for the ns contains a single test directory
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countContents
argument_list|(
name|nnFs
argument_list|,
name|cluster
operator|.
name|getNamenodePathForNS
argument_list|(
name|ns
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRename (RouterContext testRouter, String filename, String renamedFile, boolean exceptionExpected)
specifier|protected
name|void
name|testRename
parameter_list|(
name|RouterContext
name|testRouter
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|renamedFile
parameter_list|,
name|boolean
name|exceptionExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|filename
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// verify
name|verifyFileExists
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|filename
argument_list|)
expr_stmt|;
comment|// rename
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DFSClient
name|client
init|=
name|testRouter
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|clientProtocol
operator|.
name|rename
argument_list|(
name|filename
argument_list|,
name|renamedFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|exceptionExpected
condition|)
block|{
comment|// Error was expected
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|FileContext
name|fileContext
init|=
name|testRouter
operator|.
name|getFileContext
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No error was expected
name|assertFalse
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
comment|// verify
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|renamedFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete
name|FileContext
name|fileContext
init|=
name|testRouter
operator|.
name|getFileContext
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|renamedFile
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRename2 (RouterContext testRouter, String filename, String renamedFile, boolean exceptionExpected)
specifier|protected
name|void
name|testRename2
parameter_list|(
name|RouterContext
name|testRouter
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|renamedFile
parameter_list|,
name|boolean
name|exceptionExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|createFile
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|filename
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// verify
name|verifyFileExists
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|filename
argument_list|)
expr_stmt|;
comment|// rename
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|DFSClient
name|client
init|=
name|testRouter
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|clientProtocol
operator|.
name|rename2
argument_list|(
name|filename
argument_list|,
name|renamedFile
argument_list|,
operator|new
name|Options
operator|.
name|Rename
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|exceptionExpected
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionExpected
condition|)
block|{
comment|// Error was expected
name|FileContext
name|fileContext
init|=
name|testRouter
operator|.
name|getFileContext
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// verify
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|testRouter
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|renamedFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete
name|FileContext
name|fileContext
init|=
name|testRouter
operator|.
name|getFileContext
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileContext
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|renamedFile
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyRenameFiles ()
specifier|public
name|void
name|testProxyRenameFiles
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nss
init|=
name|cluster
operator|.
name|getNameservices
argument_list|()
decl_stmt|;
name|String
name|ns0
init|=
name|nss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|ns1
init|=
name|nss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Rename within the same namespace
comment|// /ns0/testdir/testrename -> /ns0/testdir/testrename-append
name|String
name|filename
init|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns0
argument_list|)
operator|+
literal|"/testrename"
decl_stmt|;
name|String
name|renamedFile
init|=
name|filename
operator|+
literal|"-append"
decl_stmt|;
name|testRename
argument_list|(
name|router
argument_list|,
name|filename
argument_list|,
name|renamedFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testRename2
argument_list|(
name|router
argument_list|,
name|filename
argument_list|,
name|renamedFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Rename a file to a destination that is in a different namespace (fails)
name|filename
operator|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns0
argument_list|)
operator|+
literal|"/testrename"
expr_stmt|;
name|renamedFile
operator|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns1
argument_list|)
operator|+
literal|"/testrename"
expr_stmt|;
name|testRename
argument_list|(
name|router
argument_list|,
name|filename
argument_list|,
name|renamedFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testRename2
argument_list|(
name|router
argument_list|,
name|filename
argument_list|,
name|renamedFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyChownFiles ()
specifier|public
name|void
name|testProxyChownFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newUsername
init|=
literal|"TestUser"
decl_stmt|;
name|String
name|newGroup
init|=
literal|"TestGroup"
decl_stmt|;
comment|// change owner
name|routerProtocol
operator|.
name|setOwner
argument_list|(
name|routerFile
argument_list|,
name|newUsername
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
comment|// Verify with NN
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|namenode
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|nnFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|getOwner
argument_list|()
argument_list|,
name|newUsername
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|getGroup
argument_list|()
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
comment|// Bad request and validate router response matches NN response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setOwner"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
name|newUsername
block|,
name|newGroup
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetStats ()
specifier|public
name|void
name|testProxyGetStats
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Some of the statistics are out of sync because of the mini cluster
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|check
init|=
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|long
index|[]
name|combinedData
init|=
name|routerProtocol
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|long
index|[]
name|individualData
init|=
name|getAggregateStats
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|combinedData
operator|.
name|length
argument_list|,
name|individualData
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|combinedData
index|[
name|i
index|]
operator|!=
name|individualData
index|[
name|i
index|]
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stats for {} don't match: {} != {}"
argument_list|,
name|i
argument_list|,
name|combinedData
index|[
name|i
index|]
argument_list|,
name|individualData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot get stats: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|check
argument_list|,
literal|500
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the sum of each subcluster statistics.    * @return Aggregated statistics.    * @throws Exception If it cannot get the stats from the Router or Namenode.    */
DECL|method|getAggregateStats ()
specifier|private
name|long
index|[]
name|getAggregateStats
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|individualData
init|=
operator|new
name|long
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|String
name|nameservice
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|NamenodeContext
name|n
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|nameservice
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|n
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|long
index|[]
name|data
init|=
name|clientProtocol
operator|.
name|getStats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|individualData
index|[
name|i
index|]
operator|+=
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|individualData
return|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetDatanodeReport ()
specifier|public
name|void
name|testProxyGetDatanodeReport
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeInfo
index|[]
name|combinedData
init|=
name|routerProtocol
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|individualData
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nameservice
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|NamenodeContext
name|n
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|nameservice
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|n
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|data
init|=
name|clientProtocol
operator|.
name|getDatanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Collect unique DNs based on their xfer port
name|DatanodeInfo
name|info
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
name|individualData
operator|.
name|add
argument_list|(
name|info
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|combinedData
operator|.
name|length
argument_list|,
name|individualData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetDatanodeStorageReport ()
specifier|public
name|void
name|testProxyGetDatanodeStorageReport
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|URISyntaxException
block|{
name|DatanodeStorageReport
index|[]
name|combinedData
init|=
name|routerProtocol
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|individualData
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nameservice
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|NamenodeContext
name|n
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|nameservice
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|n
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|ClientProtocol
name|clientProtocol
init|=
name|client
operator|.
name|getNamenode
argument_list|()
decl_stmt|;
name|DatanodeStorageReport
index|[]
name|data
init|=
name|clientProtocol
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
name|report
range|:
name|data
control|)
block|{
comment|// Determine unique DN instances
name|DatanodeInfo
name|dn
init|=
name|report
operator|.
name|getDatanodeInfo
argument_list|()
decl_stmt|;
name|individualData
operator|.
name|add
argument_list|(
name|dn
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|combinedData
operator|.
name|length
argument_list|,
name|individualData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyMkdir ()
specifier|public
name|void
name|testProxyMkdir
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the initial folders
name|FileStatus
index|[]
name|filesInitial
init|=
name|routerFS
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create a directory via the router at the root level
name|String
name|dirPath
init|=
literal|"/testdir"
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"705"
argument_list|)
decl_stmt|;
name|routerProtocol
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Verify the root listing has the item via the router
name|FileStatus
index|[]
name|files
init|=
name|routerFS
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|files
argument_list|)
operator|+
literal|" should be "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|filesInitial
argument_list|)
operator|+
literal|" + "
operator|+
name|dirPath
argument_list|,
name|filesInitial
operator|.
name|length
operator|+
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|routerFS
argument_list|,
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the directory is present in only 1 Namenode
name|int
name|foundCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NamenodeContext
name|n
range|:
name|cluster
operator|.
name|getNamenodes
argument_list|()
control|)
block|{
if|if
condition|(
name|verifyFileExists
argument_list|(
name|n
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|dirPath
argument_list|)
condition|)
block|{
name|foundCount
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|foundCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deleteFile
argument_list|(
name|routerFS
argument_list|,
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"mkdirs"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|FsPermission
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
name|permission
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyChmodFiles ()
specifier|public
name|void
name|testProxyChmodFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"444"
argument_list|)
decl_stmt|;
comment|// change permissions
name|routerProtocol
operator|.
name|setPermission
argument_list|(
name|routerFile
argument_list|,
name|permission
argument_list|)
expr_stmt|;
comment|// Validate permissions NN
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|namenode
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|nnFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|permission
argument_list|,
name|file
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setPermission"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|FsPermission
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
name|permission
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxySetReplication ()
specifier|public
name|void
name|testProxySetReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check current replication via NN
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// increment replication via router
name|routerProtocol
operator|.
name|setReplication
argument_list|(
name|routerFile
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
comment|// Verify via NN
name|file
operator|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|file
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setReplication"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
operator|(
name|short
operator|)
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyTruncateFile ()
specifier|public
name|void
name|testProxyTruncateFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check file size via NN
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|getLen
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Truncate to 0 bytes via router
name|routerProtocol
operator|.
name|truncate
argument_list|(
name|routerFile
argument_list|,
literal|0
argument_list|,
literal|"testclient"
argument_list|)
expr_stmt|;
comment|// Verify via NN
name|file
operator|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"truncate"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
operator|(
name|long
operator|)
literal|0
block|,
literal|"testclient"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetBlockLocations ()
specifier|public
name|void
name|testProxyGetBlockLocations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Fetch block locations via router
name|LocatedBlocks
name|locations
init|=
name|routerProtocol
operator|.
name|getBlockLocations
argument_list|(
name|routerFile
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getBlockLocations"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
operator|(
name|long
operator|)
literal|0
block|,
operator|(
name|long
operator|)
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyStoragePolicy ()
specifier|public
name|void
name|testProxyStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Query initial policy via NN
name|HdfsFileStatus
name|status
init|=
name|namenode
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|nnFile
argument_list|)
decl_stmt|;
comment|// Set a random policy via router
name|BlockStoragePolicy
index|[]
name|policies
init|=
name|namenode
operator|.
name|getClient
argument_list|()
operator|.
name|getStoragePolicies
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
name|policy
init|=
name|policies
index|[
literal|0
index|]
decl_stmt|;
while|while
condition|(
name|policy
operator|.
name|isCopyOnCreateFile
argument_list|()
condition|)
block|{
comment|// Pick a non copy on create policy
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|randIndex
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|policies
operator|.
name|length
argument_list|)
decl_stmt|;
name|policy
operator|=
name|policies
index|[
name|randIndex
index|]
expr_stmt|;
block|}
name|routerProtocol
operator|.
name|setStoragePolicy
argument_list|(
name|routerFile
argument_list|,
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify policy via NN
name|HdfsFileStatus
name|newStatus
init|=
name|namenode
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|nnFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newStatus
operator|.
name|getStoragePolicy
argument_list|()
operator|==
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newStatus
operator|.
name|getStoragePolicy
argument_list|()
operator|!=
name|status
operator|.
name|getStoragePolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setStoragePolicy"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
literal|"badpolicy"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetPreferedBlockSize ()
specifier|public
name|void
name|testProxyGetPreferedBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Query via NN and Router and verify
name|long
name|namenodeSize
init|=
name|nnProtocol
operator|.
name|getPreferredBlockSize
argument_list|(
name|nnFile
argument_list|)
decl_stmt|;
name|long
name|routerSize
init|=
name|routerProtocol
operator|.
name|getPreferredBlockSize
argument_list|(
name|routerFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|routerSize
argument_list|,
name|namenodeSize
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getPreferredBlockSize"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testConcat ( String source, String target, boolean failureExpected)
specifier|private
name|void
name|testConcat
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|target
parameter_list|,
name|boolean
name|failureExpected
parameter_list|)
block|{
name|boolean
name|failure
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Concat test file with fill block length file via router
name|routerProtocol
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|String
index|[]
block|{
name|source
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|failure
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|failureExpected
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyConcatFile ()
specifier|public
name|void
name|testProxyConcatFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a stub file in the primary ns
name|String
name|sameNameservice
init|=
name|ns
decl_stmt|;
name|String
name|existingFile
init|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|sameNameservice
argument_list|)
operator|+
literal|"_concatfile"
decl_stmt|;
name|int
name|existingFileSize
init|=
literal|32
decl_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|existingFile
argument_list|,
name|existingFileSize
argument_list|)
expr_stmt|;
comment|// Identify an alternate nameservice that doesn't match the existing file
name|String
name|alternateNameservice
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|n
operator|.
name|equals
argument_list|(
name|sameNameservice
argument_list|)
condition|)
block|{
name|alternateNameservice
operator|=
name|n
expr_stmt|;
break|break;
block|}
block|}
comment|// Create new files, must be a full block to use concat. One file is in the
comment|// same namespace as the target file, the other is in a different namespace.
name|String
name|altRouterFile
init|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|alternateNameservice
argument_list|)
operator|+
literal|"_newfile"
decl_stmt|;
name|String
name|sameRouterFile
init|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|sameNameservice
argument_list|)
operator|+
literal|"_newfile"
decl_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|altRouterFile
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|sameRouterFile
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
comment|// Concat in different namespaces, fails
name|testConcat
argument_list|(
name|existingFile
argument_list|,
name|altRouterFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Concat in same namespaces, succeeds
name|testConcat
argument_list|(
name|existingFile
argument_list|,
name|sameRouterFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check target file length
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|routerFS
argument_list|,
name|sameRouterFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|existingFileSize
operator|+
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"concat"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
operator|new
name|String
index|[]
block|{
name|routerFile
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyAppend ()
specifier|public
name|void
name|testProxyAppend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Append a test string via router
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
decl_stmt|;
name|DFSClient
name|routerClient
init|=
name|getRouterContext
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|HdfsDataOutputStream
name|stream
init|=
name|routerClient
operator|.
name|append
argument_list|(
name|routerFile
argument_list|,
literal|1024
argument_list|,
name|createFlag
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stream
operator|.
name|writeBytes
argument_list|(
name|TEST_STRING
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify file size via NN
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|nnFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
operator|>
name|TEST_STRING
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate router failure response matches NN failure response.
name|Method
name|m
init|=
name|ClientProtocol
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"append"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|EnumSetWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|badPath
init|=
literal|"/unknownlocation/unknowndir"
decl_stmt|;
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|createFlagWritable
init|=
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|createFlag
argument_list|)
decl_stmt|;
name|compareResponses
argument_list|(
name|routerProtocol
argument_list|,
name|nnProtocol
argument_list|,
name|m
argument_list|,
operator|new
name|Object
index|[]
block|{
name|badPath
block|,
literal|"testClient"
block|,
name|createFlagWritable
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetAdditionalDatanode ()
specifier|public
name|void
name|testProxyGetAdditionalDatanode
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|URISyntaxException
block|{
comment|// Use primitive APIs to open a file, add a block, and get datanode location
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
decl_stmt|;
name|String
name|clientName
init|=
name|getRouterContext
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|String
name|newRouterFile
init|=
name|routerFile
operator|+
literal|"_additionalDatanode"
decl_stmt|;
name|HdfsFileStatus
name|status
init|=
name|routerProtocol
operator|.
name|create
argument_list|(
name|newRouterFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|,
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|createFlag
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1024
argument_list|,
name|CryptoProtocolVersion
operator|.
name|supported
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Add a block via router (requires client to have same lease)
name|LocatedBlock
name|block
init|=
name|routerProtocol
operator|.
name|addBlock
argument_list|(
name|newRouterFile
argument_list|,
name|clientName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|exclusions
init|=
operator|new
name|DatanodeInfo
index|[
literal|0
index|]
decl_stmt|;
name|LocatedBlock
name|newBlock
init|=
name|routerProtocol
operator|.
name|getAdditionalDatanode
argument_list|(
name|newRouterFile
argument_list|,
name|status
operator|.
name|getFileId
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
argument_list|,
name|block
operator|.
name|getStorageIDs
argument_list|()
argument_list|,
name|exclusions
argument_list|,
literal|1
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newBlock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyCreateFileAlternateUser ()
specifier|public
name|void
name|testProxyCreateFileAlternateUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
comment|// Create via Router
name|String
name|routerDir
init|=
name|cluster
operator|.
name|getFederatedTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|namenodeDir
init|=
name|cluster
operator|.
name|getNamenodeTestDirectoryForNS
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|newRouterFile
init|=
name|routerDir
operator|+
literal|"/unknownuser"
decl_stmt|;
name|String
name|newNamenodeFile
init|=
name|namenodeDir
operator|+
literal|"/unknownuser"
decl_stmt|;
name|String
name|username
init|=
literal|"unknownuser"
decl_stmt|;
comment|// Allow all user access to dir
name|namenode
operator|.
name|getFileContext
argument_list|()
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|namenodeDir
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|getRouterContext
argument_list|()
operator|.
name|getClient
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
name|client
operator|.
name|create
argument_list|(
name|newRouterFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Fetch via NN and check user
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|nnFS
argument_list|,
name|newNamenodeFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getOwner
argument_list|()
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyGetFileInfoAcessException ()
specifier|public
name|void
name|testProxyGetFileInfoAcessException
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unknownuser"
argument_list|)
decl_stmt|;
comment|// List files from the NN and trap the exception
name|Exception
name|nnFailure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|testFile
init|=
name|cluster
operator|.
name|getNamenodeTestFileForNS
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|getClient
argument_list|(
name|ugi
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|(
name|testFile
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|nnFailure
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|nnFailure
argument_list|)
expr_stmt|;
comment|// List files from the router and trap the exception
name|Exception
name|routerFailure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|testFile
init|=
name|cluster
operator|.
name|getFederatedTestFileForNS
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|getRouterContext
argument_list|()
operator|.
name|getClient
argument_list|(
name|ugi
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|(
name|testFile
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|routerFailure
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|routerFailure
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routerFailure
operator|.
name|getClass
argument_list|()
argument_list|,
name|nnFailure
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testErasureCoding ()
specifier|public
name|void
name|testErasureCoding
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"List the available erasurce coding policies"
argument_list|)
expr_stmt|;
name|ErasureCodingPolicyInfo
index|[]
name|policies
init|=
name|checkErasureCodingPolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicyInfo
name|policy
range|:
name|policies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  {}"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"List the erasure coding codecs"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|codecsRouter
init|=
name|routerProtocol
operator|.
name|getErasureCodingCodecs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|codecsNamenode
init|=
name|nnProtocol
operator|.
name|getErasureCodingCodecs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Maps
operator|.
name|difference
argument_list|(
name|codecsRouter
argument_list|,
name|codecsNamenode
argument_list|)
operator|.
name|areEqual
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|codecsRouter
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  {}: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Create a testing directory via the router at the root level"
argument_list|)
expr_stmt|;
name|String
name|dirPath
init|=
literal|"/testec"
decl_stmt|;
name|String
name|filePath1
init|=
name|dirPath
operator|+
literal|"/testfile1"
decl_stmt|;
name|FsPermission
name|permission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
decl_stmt|;
name|routerProtocol
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|filePath1
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|routerFS
argument_list|,
name|filePath1
argument_list|)
argument_list|)
expr_stmt|;
name|DFSClient
name|file1Protocol
init|=
name|getFileDFSClient
argument_list|(
name|filePath1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The policy for the new file should not be set"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|routerProtocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|file1Protocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|policyName
init|=
literal|"RS-6-3-1024k"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set policy \"{}\" for \"{}\""
argument_list|,
name|policyName
argument_list|,
name|dirPath
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|String
name|filePath2
init|=
name|dirPath
operator|+
literal|"/testfile2"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create {} in the path with the new EC policy"
argument_list|,
name|filePath2
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|filePath2
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|routerFS
argument_list|,
name|filePath2
argument_list|)
argument_list|)
expr_stmt|;
name|DFSClient
name|file2Protocol
init|=
name|getFileDFSClient
argument_list|(
name|filePath2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Check that the policy is set for {}"
argument_list|,
name|filePath2
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policyRouter1
init|=
name|routerProtocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath2
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|policyNamenode1
init|=
name|file2Protocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policyRouter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|policyName
argument_list|,
name|policyRouter1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|policyName
argument_list|,
name|policyNamenode1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create a new erasure coding policy"
argument_list|)
expr_stmt|;
name|String
name|newPolicyName
init|=
literal|"RS-6-3-128k"
decl_stmt|;
name|ECSchema
name|ecSchema
init|=
operator|new
name|ECSchema
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_CODEC_NAME
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|newPolicyName
argument_list|,
name|ecSchema
argument_list|,
literal|128
operator|*
literal|1024
argument_list|,
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
index|[]
name|newPolicies
init|=
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|ecPolicy
block|}
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|routerProtocol
operator|.
name|addErasureCodingPolicies
argument_list|(
name|newPolicies
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responses
index|[
literal|0
index|]
operator|.
name|isSucceed
argument_list|()
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|newPolicyName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The new policy should be there and disabled"
argument_list|)
expr_stmt|;
name|policies
operator|=
name|checkErasureCodingPolicies
argument_list|()
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicyInfo
name|policy
range|:
name|policies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  {}"
operator|+
name|policy
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newPolicyName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|ErasureCodingPolicyState
operator|.
name|DISABLED
argument_list|,
name|policy
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set the test folder to use the new policy"
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|newPolicyName
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|newPolicyName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create a file in the path with the new EC policy"
argument_list|)
expr_stmt|;
name|String
name|filePath3
init|=
name|dirPath
operator|+
literal|"/testfile3"
decl_stmt|;
name|createFile
argument_list|(
name|routerFS
argument_list|,
name|filePath3
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyFileExists
argument_list|(
name|routerFS
argument_list|,
name|filePath3
argument_list|)
argument_list|)
expr_stmt|;
name|DFSClient
name|file3Protocol
init|=
name|getFileDFSClient
argument_list|(
name|filePath3
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|policyRouterFile3
init|=
name|routerProtocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newPolicyName
argument_list|,
name|policyRouterFile3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policyNamenodeFile3
init|=
name|file3Protocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newPolicyName
argument_list|,
name|policyNamenodeFile3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove the policy and check the one for the test folder"
argument_list|)
expr_stmt|;
name|routerProtocol
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|newPolicyName
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policyRouter3
init|=
name|routerProtocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newPolicyName
argument_list|,
name|policyRouter3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ErasureCodingPolicy
name|policyNamenode3
init|=
name|file3Protocol
operator|.
name|getErasureCodingPolicy
argument_list|(
name|filePath3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newPolicyName
argument_list|,
name|policyNamenode3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Check the stats"
argument_list|)
expr_stmt|;
name|ECBlockGroupStats
name|statsRouter
init|=
name|routerProtocol
operator|.
name|getECBlockGroupStats
argument_list|()
decl_stmt|;
name|ECBlockGroupStats
name|statsNamenode
init|=
name|nnProtocol
operator|.
name|getECBlockGroupStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|statsNamenode
operator|.
name|toString
argument_list|()
argument_list|,
name|statsRouter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the erasure coding policies in the Router and the Namenode.    * @return The erasure coding policies.    */
DECL|method|checkErasureCodingPolicies ()
specifier|private
name|ErasureCodingPolicyInfo
index|[]
name|checkErasureCodingPolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|ErasureCodingPolicyInfo
index|[]
name|policiesRouter
init|=
name|routerProtocol
operator|.
name|getErasureCodingPolicies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|policiesRouter
argument_list|)
expr_stmt|;
name|ErasureCodingPolicyInfo
index|[]
name|policiesNamenode
init|=
name|nnProtocol
operator|.
name|getErasureCodingPolicies
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|policiesRouter
argument_list|,
name|EC_POLICY_CMP
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|policiesNamenode
argument_list|,
name|EC_POLICY_CMP
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|policiesRouter
argument_list|,
name|policiesNamenode
argument_list|)
expr_stmt|;
return|return
name|policiesRouter
return|;
block|}
comment|/**    * Find the Namenode for a particular file and return the DFSClient.    * @param path Path of the file to check.    * @return The DFSClient to the Namenode holding the file.    */
DECL|method|getFileDFSClient (final String path)
specifier|private
name|DFSClient
name|getFileDFSClient
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|String
name|nsId
range|:
name|cluster
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking {} for {}"
argument_list|,
name|nsId
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|NamenodeContext
name|nn
init|=
name|cluster
operator|.
name|getNamenode
argument_list|(
name|nsId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|DFSClient
name|nnClientProtocol
init|=
name|nn
operator|.
name|getClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnClientProtocol
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|nnClientProtocol
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

