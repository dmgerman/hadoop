begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|CreateEncryptionZoneFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|ReencryptAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Test class for re-encryption.  */
end_comment

begin_class
DECL|class|TestReencryption
specifier|public
class|class
name|TestReencryption
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReencryption
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsHelper
specifier|private
name|FileSystemTestHelper
name|fsHelper
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfsAdmin
specifier|protected
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|fsn
specifier|private
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|testRootDir
specifier|private
name|File
name|testRootDir
decl_stmt|;
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"test_key"
decl_stmt|;
DECL|field|fsWrapper
specifier|private
name|FileSystemTestWrapper
name|fsWrapper
decl_stmt|;
DECL|field|fcWrapper
specifier|private
name|FileContextTestWrapper
name|fcWrapper
decl_stmt|;
DECL|field|NO_TRASH
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|CreateEncryptionZoneFlag
argument_list|>
name|NO_TRASH
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|NO_TRASH
argument_list|)
decl_stmt|;
DECL|method|getKeyProviderURI ()
specifier|protected
name|String
name|getKeyProviderURI
parameter_list|()
block|{
return|return
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
return|;
block|}
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|fsHelper
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
expr_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|testRootDir
operator|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Lower the batch size for testing
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_ENCRYPTION_ZONES_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Lower the listing limit for testing
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Adjust configs for re-encrypt test cases
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_KEY
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsWrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fcWrapper
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setProvider
argument_list|()
expr_stmt|;
comment|// Create a test key
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|EncryptionZoneManager
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|ReencryptionHandler
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|ReencryptionStatus
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|ReencryptionUpdater
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
DECL|method|setProvider ()
specifier|protected
name|void
name|setProvider
parameter_list|()
block|{
comment|// Need to set the client's KeyProvider to the NN's for JKS,
comment|// else the updates do not get flushed properly
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setKeyProvider
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
operator|new
name|EncryptionFaultInjector
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileEncryptionInfo (Path path)
specifier|private
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|fsn
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|getFileEncryptionInfo
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionBasic ()
specifier|public
name|void
name|testReencryptionBasic
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      * /dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// test re-encrypt without keyroll
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile1
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
comment|// key not rolled, so no edeks need to be updated.
name|verifyZoneStatus
argument_list|(
name|zone
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// test re-encrypt after keyroll
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|FileEncryptionInfo
name|fei1
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile1
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
comment|// test listReencryptionStatus
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|fei0
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|zs
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fei1
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|zs
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// test re-encrypt on same zone again
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile1
argument_list|,
name|fei1
argument_list|)
expr_stmt|;
comment|// test non-EZ submission
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|subdir
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting non-EZ should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"not the root of an encryption zone"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// test non-existing dir
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"notexist"
argument_list|)
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting non-existing dir should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
comment|// test directly on a EZ file
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|encFile1
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting on a file should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"not the root of an encryption zone"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// test same command resubmission
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"already submitted"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// test empty EZ
specifier|final
name|Path
name|emptyZone
init|=
operator|new
name|Path
argument_list|(
literal|"/emptyZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|emptyZone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|emptyZone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|emptyZone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|emptyZone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// test rename ez and listReencryptionStatus
specifier|final
name|Path
name|renamedZone
init|=
operator|new
name|Path
argument_list|(
literal|"/renamedZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|rename
argument_list|(
name|zone
argument_list|,
name|renamedZone
argument_list|)
expr_stmt|;
name|it
operator|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|zs
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|renamedZone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptOrdering ()
specifier|public
name|void
name|testReencryptOrdering
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /zones/zone/[0-3]      * /zones/zone/dir/f      * /zones/zone/f[0-4]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"f"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// /zones/zone/f[0-4] should be re-encrypted after /zones/zone/dir/f
specifier|final
name|Path
name|lastReencryptedFile
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|notReencrypted
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"f0"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei
init|=
name|getFileEncryptionInfo
argument_list|(
name|lastReencryptedFile
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|feiLast
init|=
name|getFileEncryptionInfo
argument_list|(
name|notReencrypted
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|lastReencryptedFile
argument_list|,
name|fei
argument_list|)
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|notReencrypted
argument_list|,
name|feiLast
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDuringReencrypt ()
specifier|public
name|void
name|testDeleteDuringReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// test zone deleted during re-encrypt
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resetMetricsForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|zone
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForTotalZones
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZoneDeleteDuringReencrypt ()
specifier|public
name|void
name|testZoneDeleteDuringReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// test zone deleted during re-encrypt's checkpointing
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resetMetricsForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|zoneParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForTotalZones
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getEzManager
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify zone is cleared
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartAfterReencrypt ()
specifier|public
name|void
name|testRestartAfterReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /zones      * /zones/zone      * /zones/zone/[0-9]      * /zones/zone/dir      * /zones/zone/dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile0
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile9
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile0
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile9
argument_list|,
name|fei9
argument_list|)
expr_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0new
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9new
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile0
argument_list|,
name|fei0new
argument_list|)
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile9
argument_list|,
name|fei9new
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Re-encrypt queue should be empty after restart"
argument_list|,
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartWithRenames ()
specifier|public
name|void
name|testRestartWithRenames
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /zones      * /zones/zone      * /zones/zone/f --> renamed to f1      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"f"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-encrypt
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// make sure NN can successfully restart (rename can load ok with
comment|// re-encrypt since they're in correct order)
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartDuringReencrypt ()
specifier|public
name|void
name|testRestartDuringReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /zones      * /zones/zone      * /zones/zone/dir_empty      * /zones/zone/dir1/[0-9]      * /zones/zone/dir1/dir_empty1      * /zones/zone/dir2      * /zones/zone/dir2/dir_empty2      * /zones/zone/dir2/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir_empty"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"dir_empty2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|subdir
operator|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir1"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|fsWrapper
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"dir_empty1"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile0
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile9
init|=
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
specifier|final
name|Long
name|zoneId
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Re-encrypt should restore to the last checkpoint zone"
argument_list|,
name|zoneId
argument_list|,
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Re-encrypt should restore to the last checkpoint file"
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"4"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|getEzManager
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLastCheckpointFile
argument_list|()
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile0
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile9
argument_list|,
name|fei9
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Re-encrypt queue should be empty after restart"
argument_list|,
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestartAfterReencryptAndCheckpoint ()
specifier|public
name|void
name|testRestartAfterReencryptAndCheckpoint
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile0
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile9
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile0
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile9
argument_list|,
name|fei9
argument_list|)
expr_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0new
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9new
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile0
argument_list|,
name|fei0new
argument_list|)
expr_stmt|;
name|assertKeyVersionEquals
argument_list|(
name|encFile9
argument_list|,
name|fei9new
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Re-encrypt queue should be empty after restart"
argument_list|,
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptLoadedFromEdits ()
specifier|public
name|void
name|testReencryptLoadedFromEdits
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * /zones/zone/[0-9]      * /zones/zone/dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile0
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile9
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// disable re-encrypt for testing, and issue a command
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
comment|// verify after restart the command is loaded
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Let the re-encrypt to start running.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile0
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile9
argument_list|,
name|fei9
argument_list|)
expr_stmt|;
comment|// verify status
name|verifyZoneStatus
argument_list|(
name|zone
argument_list|,
name|fei0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyZoneStatus (final Path zone, final FileEncryptionInfo fei, final long expectedFiles)
specifier|private
name|void
name|verifyZoneStatus
parameter_list|(
specifier|final
name|Path
name|zone
parameter_list|,
specifier|final
name|FileEncryptionInfo
name|fei
parameter_list|,
specifier|final
name|long
name|expectedFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fei
operator|!=
literal|null
condition|)
block|{
name|assertNotEquals
argument_list|(
name|fei
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|zs
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptLoadedFromFsimage ()
specifier|public
name|void
name|testReencryptLoadedFromFsimage
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * /zones/zone/[0-9]      * /zones/zone/dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile0
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|encFile9
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile0
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei9
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile9
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// disable re-encrypt for testing, and issue a command
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// verify after loading from fsimage the command is loaded
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Let the re-encrypt to start running.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile0
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile9
argument_list|,
name|fei9
argument_list|)
expr_stmt|;
comment|// verify status
name|verifyZoneStatus
argument_list|(
name|zone
argument_list|,
name|fei0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptCommandsQueuedOrdering ()
specifier|public
name|void
name|testReencryptCommandsQueuedOrdering
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|zoneBaseName
init|=
name|zoneParent
operator|.
name|toString
argument_list|()
operator|+
literal|"/zone"
decl_stmt|;
specifier|final
name|int
name|numZones
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numZones
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneBaseName
operator|+
name|i
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
block|}
comment|// Disable re-encrypt for testing, and issue commands
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numZones
condition|;
operator|++
name|i
control|)
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
operator|new
name|Path
argument_list|(
name|zoneBaseName
operator|+
name|i
argument_list|)
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
block|}
name|waitForQueuedZones
argument_list|(
name|numZones
argument_list|)
expr_stmt|;
comment|// Verify commands are queued in the same order submitted
name|ReencryptionStatus
name|rzs
init|=
operator|new
name|ReencryptionStatus
argument_list|(
name|getReencryptionStatus
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numZones
condition|;
operator|++
name|i
control|)
block|{
name|Long
name|zoneId
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zoneBaseName
operator|+
name|i
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zoneId
argument_list|,
name|rzs
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|rzs
operator|.
name|removeZone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
comment|// Cancel some zones
name|Set
argument_list|<
name|Integer
argument_list|>
name|cancelled
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cancel
range|:
name|cancelled
control|)
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
operator|new
name|Path
argument_list|(
name|zoneBaseName
operator|+
name|cancel
argument_list|)
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
block|}
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|waitForQueuedZones
argument_list|(
name|numZones
operator|-
name|cancelled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rzs
operator|=
operator|new
name|ReencryptionStatus
argument_list|(
name|getReencryptionStatus
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numZones
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cancelled
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Long
name|zoneId
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zoneBaseName
operator|+
name|i
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zoneId
argument_list|,
name|rzs
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|rzs
operator|.
name|removeZone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
comment|// Verify the same is true after loading from FSImage
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|waitForQueuedZones
argument_list|(
name|numZones
operator|-
name|cancelled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rzs
operator|=
operator|new
name|ReencryptionStatus
argument_list|(
name|getReencryptionStatus
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cancelled
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Long
name|zoneId
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zoneBaseName
operator|+
name|i
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zoneId
argument_list|,
name|rzs
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|rzs
operator|.
name|removeZone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReencryptNestedZones ()
specifier|public
name|void
name|testReencryptNestedZones
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /<- EZ      * /file      * /dir/dfile      * /level1<- nested EZ      * /level1/fileL1-[0~2]      * /level1/level2/<- nested EZ      * /level1/level2/fileL2-[0~3]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneRoot
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneL1
init|=
operator|new
name|Path
argument_list|(
name|zoneRoot
argument_list|,
literal|"level1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneL2
init|=
operator|new
name|Path
argument_list|(
name|zoneL1
argument_list|,
literal|"level2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonzoneDir
init|=
operator|new
name|Path
argument_list|(
name|zoneRoot
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneRoot
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zoneRoot
argument_list|,
literal|"file"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|nonzoneDir
argument_list|,
literal|"dfile"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zoneL1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneL1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zoneL1
argument_list|,
literal|"fileL1-"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zoneL2
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneL2
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zoneL2
argument_list|,
literal|"fileL2-"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Disable re-encrypt, send re-encrypt on '/', verify queue
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zoneRoot
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ReencryptionStatus
name|rzs
init|=
name|getReencryptionStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Long
operator|)
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zoneRoot
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|rzs
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resume re-encrypt, verify files re-encrypted
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zoneRoot
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getZoneStatus
argument_list|(
name|zoneRoot
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same tests on a child EZ.
name|getEzManager
argument_list|()
operator|.
name|resetMetricsForTesting
argument_list|()
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zoneL1
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rzs
operator|=
name|getReencryptionStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Long
operator|)
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|zoneL1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|rzs
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zoneL1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getZoneStatus
argument_list|(
name|zoneL1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceCreateHandler ()
specifier|public
name|void
name|testRaceCreateHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Resume the re-encrypt thread
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|/* creates the following:      * /dir/file8[0~5]      * /dir/dirsub/file[10-14]      * /dir/sub/file[15-19]      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file8"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// we don't care newly created files since they should already use new edek.
comment|// so naturally processes the listing from last checkpoint
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"dirsub"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// the above are created before checkpoint position, so not re-encrypted.
specifier|final
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|sub
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|15
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// resume re-encrypt thread which was paused after first checkpoint
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteHandler ()
specifier|public
name|void
name|testRaceDeleteHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      * /dir/subdir/file[10-14]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// proceed to first checkpoint (5 files), delete files/subdir, then resume
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file5"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file8"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|2
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|5
expr_stmt|;
comment|// resume re-encrypt thread which was paused after first checkpoint
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteUpdater ()
specifier|public
name|void
name|testRaceDeleteUpdater
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      * /dir/subdir/file[10-14]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// proceed to first checkpoint (5 files), delete files/subdir, then resume
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthCheckpoint
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
comment|// give handler thread some time to process the files before deletion.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file5"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file8"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|2
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|5
expr_stmt|;
comment|// resume updater thread which was paused after first checkpoint, verify
comment|// deleted files are skipped.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteCurrentDirHandler ()
specifier|public
name|void
name|testRaceDeleteCurrentDirHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/subdir/file[0~9]      * /dir/subdir2/file[10-14]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir2
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir2
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// proceed to first checkpoint (5 files), delete subdir, then resume
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|5
expr_stmt|;
comment|// resume re-encrypt thread which was paused after first checkpoint
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteCurrentDirUpdater ()
specifier|public
name|void
name|testRaceDeleteCurrentDirUpdater
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/subdir/file[0~9]      * /dir/subdir2/file[10-14]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir2
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir2
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// proceed to first checkpoint (5 files), delete subdir, then resume
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthCheckpoint
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
comment|// give handler thread some time to process the files before deletion.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|subdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|5
expr_stmt|;
comment|// resume updater thread which was paused after first checkpoint, verify
comment|// deleted files are skipped.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteZoneHandler ()
specifier|public
name|void
name|testRaceDeleteZoneHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~10]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// let both handler and updater pause, then delete zone.
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthCheckpoint
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|ZoneSubmissionTracker
argument_list|>
name|tasks
init|=
operator|(
name|Map
argument_list|<
name|Long
argument_list|,
name|ZoneSubmissionTracker
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|getHandler
argument_list|()
argument_list|,
literal|"submissions"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|>
name|futures
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ZoneSubmissionTracker
name|zst
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Future
name|f
range|:
name|zst
operator|.
name|getTasks
argument_list|()
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
comment|// verify no running tasks
for|for
control|(
name|Future
name|f
range|:
name|futures
control|)
block|{
name|assertTrue
argument_list|(
name|f
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForTotalZones
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteCreateHandler ()
specifier|public
name|void
name|testRaceDeleteCreateHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Resume the re-encrypt thread
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|recreated
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file9"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|recreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|recreated
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|1
expr_stmt|;
comment|// newly created files use new edek, no need to re-encrypt
comment|// resume re-encrypt thread which was paused after first checkpoint
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRaceDeleteCreateUpdater ()
specifier|public
name|void
name|testRaceDeleteCreateUpdater
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthCheckpoint
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
comment|// give handler thread some time to process the files before deletion.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|recreated
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file9"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|feiOrig
init|=
name|getFileEncryptionInfo
argument_list|(
name|recreated
argument_list|)
decl_stmt|;
specifier|final
name|String
name|contentOrig
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|recreated
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|recreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|recreated
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|expected
operator|-=
literal|1
expr_stmt|;
comment|// resume updater thread which was paused after first checkpoint
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify new file is using it's own edeks, with new keyversions,
comment|// and can be decrypted correctly.
name|assertKeyVersionChanged
argument_list|(
name|recreated
argument_list|,
name|feiOrig
argument_list|)
expr_stmt|;
specifier|final
name|String
name|content
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|recreated
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contentOrig
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|// TODO: update test once HDFS-11203 is implemented.
annotation|@
name|Test
DECL|method|testReencryptRaceRename ()
specifier|public
name|void
name|testReencryptRaceRename
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup dir as follows:      * /dir/file[0~9]      * /dir/subdir/file[10-14]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// Issue the command re-encrypt and pause it
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Resume the re-encrypt thread
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|fsWrapper
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file8"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file08"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"rename a file in an EZ should be disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"under re-encryption"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// resume handler and pause updater, test again.
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
try|try
block|{
name|fsWrapper
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file8"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"file08"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"rename a file in an EZ should be disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"under re-encryption"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReencryptSnapshots ()
specifier|public
name|void
name|testReencryptSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      * /dir/f      *      * /zones/zone is snapshottable, and rename file 5 to 5new,       * 6 to 6new then delete (so the file is only referred from a snapshot).      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// create a snapshot and rename a file, so INodeReference is created.
specifier|final
name|Path
name|zoneSnap
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zone
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"5"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"5new"
argument_list|)
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"6"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"6new"
argument_list|)
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"6new"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test re-encrypt on snapshot dir
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei0
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zoneSnap
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Reencrypt command on snapshot path should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|SnapshotAccessControlException
argument_list|)
expr_stmt|;
block|}
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertKeyVersionChanged
argument_list|(
name|encFile1
argument_list|,
name|fei0
argument_list|)
expr_stmt|;
block|}
DECL|method|restartClusterDisableReencrypt ()
specifier|private
name|void
name|restartClusterDisableReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForReencryptedZones (final int expected)
specifier|private
name|void
name|waitForReencryptedZones
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for re-encrypted zones to be {}"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|getReencryptionStatus
argument_list|()
operator|.
name|getNumZonesReencrypted
argument_list|()
operator|==
name|expected
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encrypted zones = {} "
argument_list|,
name|getReencryptionStatus
argument_list|()
operator|.
name|getNumZonesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForQueuedZones (final int expected)
specifier|private
name|void
name|waitForQueuedZones
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for queued zones for re-encryption to be {}"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|getReencryptionStatus
argument_list|()
operator|.
name|zonesQueued
argument_list|()
operator|==
name|expected
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForTotalZones (final int expected)
specifier|private
name|void
name|waitForTotalZones
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for queued zones for re-encryption to be {}"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|getReencryptionStatus
argument_list|()
operator|.
name|zonesTotal
argument_list|()
operator|==
name|expected
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForZoneCompletes (final String zone)
specifier|private
name|void
name|waitForZoneCompletes
parameter_list|(
specifier|final
name|String
name|zone
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for re-encryption zone {} to complete."
argument_list|,
name|zone
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|getZoneStatus
argument_list|(
name|zone
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|getEzManager ()
specifier|private
name|EncryptionZoneManager
name|getEzManager
parameter_list|()
block|{
return|return
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|ezManager
return|;
block|}
DECL|method|getReencryptionStatus ()
specifier|private
name|ReencryptionStatus
name|getReencryptionStatus
parameter_list|()
block|{
return|return
name|getEzManager
argument_list|()
operator|.
name|getReencryptionStatus
argument_list|()
return|;
block|}
DECL|method|getZoneStatus (final String zone)
specifier|private
name|ZoneReencryptionStatus
name|getZoneStatus
parameter_list|(
specifier|final
name|String
name|zone
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getEzManager
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zone
argument_list|)
return|;
block|}
DECL|method|waitForReencryptedFiles (final String zone, final int expected)
specifier|private
name|void
name|waitForReencryptedFiles
parameter_list|(
specifier|final
name|String
name|zone
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for total re-encrypted file count to be {}"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|getZoneStatus
argument_list|(
name|zone
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
operator|==
name|expected
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyVersionChanged (final Path file, final FileEncryptionInfo original)
specifier|private
name|void
name|assertKeyVersionChanged
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|FileEncryptionInfo
name|original
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FileEncryptionInfo
name|actual
init|=
name|getFileEncryptionInfo
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"KeyVersion should be different"
argument_list|,
name|original
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|actual
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyVersionEquals (final Path file, final FileEncryptionInfo expected)
specifier|private
name|void
name|assertKeyVersionEquals
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|FileEncryptionInfo
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FileEncryptionInfo
name|actual
init|=
name|getFileEncryptionInfo
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"KeyVersion should be the same"
argument_list|,
name|expected
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|actual
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptCancel ()
specifier|public
name|void
name|testReencryptCancel
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      * /dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// disable, test basic
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// test same command resubmission
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"not under re-encryption"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// test cancelling half-way
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getEzManager
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLastCheckpointFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
argument_list|)
expr_stmt|;
comment|// test cancelling non-EZ dir
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|subdir
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting non-EZ should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"not the root of an encryption zone"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// test cancelling non-existing dir
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"notexist"
argument_list|)
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting non-existing dir should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
comment|// test cancelling directly on a EZ file
specifier|final
name|Path
name|encFile
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"0"
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|encFile
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Re-encrypting on a file should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception caught."
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
literal|"not the root of an encryption zone"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// final check - should only had 5 files re-encrypted overall.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cancelFutureDuringReencryption (final Path zone)
specifier|private
name|void
name|cancelFutureDuringReencryption
parameter_list|(
specifier|final
name|Path
name|zone
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|callableRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
specifier|private
specifier|volatile
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
name|MyInjector
parameter_list|(
name|int
name|numFailures
parameter_list|)
block|{
name|exceptionCount
operator|=
name|numFailures
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reencryptEncryptedKeys
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
name|exceptionCount
operator|--
expr_stmt|;
try|try
block|{
name|callableRunning
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fault injector interrupted"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
comment|/* Setup test dir:      * /zones/zone/[0-9]      * /dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// re-encrypt 10 files, so 2 callables. Hang 1, pause the updater so the
comment|// callable is taken from the executor but not processed.
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForQueuedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for re-encrypt callables to run"
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|callableRunning
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
comment|// now resume updater and verify status.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getUpdater
argument_list|()
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelFutureThenReencrypt ()
specifier|public
name|void
name|testCancelFutureThenReencrypt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|cancelFutureDuringReencryption
argument_list|(
name|zone
argument_list|)
expr_stmt|;
comment|// make sure new re-encryption after cancellation works.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zs
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelFutureThenRestart ()
specifier|public
name|void
name|testCancelFutureThenRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|cancelFutureDuringReencryption
argument_list|(
name|zone
argument_list|)
expr_stmt|;
comment|// restart, and check status.
name|restartClusterDisableReencrypt
argument_list|()
expr_stmt|;
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify re-encryption works after restart.
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
expr_stmt|;
name|zs
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zs
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptCancelForUpdater ()
specifier|public
name|void
name|testReencryptCancelForUpdater
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      * /dir/f      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|subdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|subdir
argument_list|,
literal|"f"
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// disable, test basic
name|getEzManager
argument_list|()
operator|.
name|pauseReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptUpdaterForTesting
argument_list|()
expr_stmt|;
name|waitForZoneCompletes
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getZoneStatus
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionWithoutProvider ()
specifier|public
name|void
name|testReencryptionWithoutProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// re-encrypt the zone
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// start NN without providers
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
comment|// test re-encrypt should fail
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to re-encrypt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"rejected"
argument_list|,
name|expected
operator|.
name|unwrapRemoteException
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to cancel re-encrypt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|expected
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"rejected"
argument_list|,
name|expected
operator|.
name|unwrapRemoteException
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test listReencryptionStatus should still work
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionNNSafeMode ()
specifier|public
name|void
name|testReencryptionNNSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
comment|// mark pause after first checkpoint (5 files)
name|getEzManager
argument_list|()
operator|.
name|pauseForTestingAfterNthSubmission
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|getEzManager
argument_list|()
operator|.
name|resumeReencryptForTesting
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zs
operator|.
name|getCompletionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
comment|// trigger the background thread to run, without having to
comment|// wait for DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_KEY
name|getHandler
argument_list|()
operator|.
name|notifyNewSubmission
argument_list|()
expr_stmt|;
name|waitForReencryptedFiles
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionKMSDown ()
specifier|public
name|void
name|testReencryptionKMSDown
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
specifier|private
specifier|volatile
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
name|MyInjector
parameter_list|(
name|int
name|numFailures
parameter_list|)
block|{
name|exceptionCount
operator|=
name|numFailures
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reencryptEncryptedKeys
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
operator|--
name|exceptionCount
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected KMS failure"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// re-encrypt the zone
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|injector
operator|.
name|exceptionCount
argument_list|)
expr_stmt|;
comment|// test listReencryptionStatus should still work
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|zs
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionUpdaterFaultOneTask ()
specifier|public
name|void
name|testReencryptionUpdaterFaultOneTask
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
specifier|private
specifier|volatile
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
name|MyInjector
parameter_list|(
name|int
name|numFailures
parameter_list|)
block|{
name|exceptionCount
operator|=
name|numFailures
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reencryptUpdaterProcessOneTask
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
operator|--
name|exceptionCount
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected process task failure"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// re-encrypt the zone
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|injector
operator|.
name|exceptionCount
argument_list|)
expr_stmt|;
comment|// test listReencryptionStatus should still work
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|zs
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionUpdaterFaultCkpt ()
specifier|public
name|void
name|testReencryptionUpdaterFaultCkpt
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
specifier|private
specifier|volatile
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
name|MyInjector
parameter_list|(
name|int
name|numFailures
parameter_list|)
block|{
name|exceptionCount
operator|=
name|numFailures
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reencryptUpdaterProcessCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
operator|--
name|exceptionCount
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected process checkpoint failure"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// re-encrypt the zone
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|injector
operator|.
name|exceptionCount
argument_list|)
expr_stmt|;
comment|// test listReencryptionStatus should still work
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|zs
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptionUpdaterFaultRecover ()
specifier|public
name|void
name|testReencryptionUpdaterFaultRecover
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
specifier|private
specifier|volatile
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
name|MyInjector
parameter_list|(
name|int
name|oneTask
parameter_list|)
block|{
name|exceptionCount
operator|=
name|oneTask
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reencryptUpdaterProcessOneTask
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
operator|--
name|exceptionCount
expr_stmt|;
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Injected process task failure"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|final
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
comment|/* Setup test dir:      * /zones/zone/[0-9]      */
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
block|}
comment|// re-encrypt the zone
name|rollKey
argument_list|(
name|TEST_KEY
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|getUpdater
argument_list|()
argument_list|,
literal|"faultRetryInterval"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|ReencryptAction
operator|.
name|START
argument_list|)
expr_stmt|;
name|waitForReencryptedZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|injector
operator|.
name|exceptionCount
argument_list|)
expr_stmt|;
comment|// test listReencryptionStatus should still work
name|RemoteIterator
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listReencryptionStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|zs
operator|.
name|getZoneName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZoneReencryptionStatus
operator|.
name|State
operator|.
name|Completed
argument_list|,
name|zs
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zs
operator|.
name|getCompletionTime
argument_list|()
operator|>
name|zs
operator|.
name|getSubmissionTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zs
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getHandler ()
specifier|private
name|ReencryptionHandler
name|getHandler
parameter_list|()
block|{
return|return
operator|(
name|ReencryptionHandler
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|getEzManager
argument_list|()
argument_list|,
literal|"reencryptionHandler"
argument_list|)
return|;
block|}
DECL|method|getUpdater ()
specifier|private
name|ReencryptionUpdater
name|getUpdater
parameter_list|()
block|{
return|return
operator|(
name|ReencryptionUpdater
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|getHandler
argument_list|()
argument_list|,
literal|"reencryptionUpdater"
argument_list|)
return|;
block|}
DECL|method|rollKey (final String keyName)
specifier|protected
name|void
name|rollKey
parameter_list|(
specifier|final
name|String
name|keyName
parameter_list|)
throws|throws
name|Exception
block|{
name|dfsAdmin
operator|.
name|getKeyProvider
argument_list|()
operator|.
name|rollNewVersion
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
comment|// need to flush for jceks provider to make the key version it returned
comment|// after NN  restart consistent.
name|dfsAdmin
operator|.
name|getKeyProvider
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

