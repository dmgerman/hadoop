begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestExactSizeInputStream
specifier|public
class|class
name|TestExactSizeInputStream
block|{
annotation|@
name|Test
DECL|method|testBasicsReadSingle ()
specifier|public
name|void
name|testBasicsReadSingle
parameter_list|()
throws|throws
name|IOException
block|{
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|'h'
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|'e'
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|'l'
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicsReadArray ()
specifier|public
name|void
name|testBasicsReadArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'h'
argument_list|,
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'e'
argument_list|,
name|buf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'l'
argument_list|,
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicsSkip ()
specifier|public
name|void
name|testBasicsSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadNotEnough ()
specifier|public
name|void
name|testReadNotEnough
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ask for 5 bytes, only has 2
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"he"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|'h'
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
literal|'e'
argument_list|,
name|s
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Read when should be out of data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testSkipNotEnough ()
specifier|public
name|void
name|testSkipNotEnough
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ask for 5 bytes, only has 2
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"he"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Skip when should be out of data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testReadArrayNotEnough ()
specifier|public
name|void
name|testReadArrayNotEnough
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ask for 5 bytes, only has 2
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"he"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read buf when should be out of data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testMark ()
specifier|public
name|void
name|testMark
parameter_list|()
throws|throws
name|IOException
block|{
name|ExactSizeInputStream
name|s
init|=
operator|new
name|ExactSizeInputStream
argument_list|(
name|byteStream
argument_list|(
literal|"he"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|markSupported
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Mark should not succeed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|byteStream (String data)
specifier|private
specifier|static
name|InputStream
name|byteStream
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

