begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|TestTrash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Trash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test trash using HDFS  */
end_comment

begin_class
DECL|class|TestHDFSTrash
specifier|public
class|class
name|TestHDFSTrash
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHDFSTrash
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|TEST_ROOT
specifier|private
specifier|final
specifier|static
name|Path
name|TEST_ROOT
init|=
operator|new
name|Path
argument_list|(
literal|"/TestHDFSTrash-ROOT"
argument_list|)
decl_stmt|;
DECL|field|TRASH_ROOT
specifier|private
specifier|final
specifier|static
name|Path
name|TRASH_ROOT
init|=
operator|new
name|Path
argument_list|(
literal|"/TestHDFSTrash-TRASH"
argument_list|)
decl_stmt|;
DECL|field|GROUP1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP1_NAME
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP2_NAME
init|=
literal|"group2"
decl_stmt|;
DECL|field|GROUP3_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP3_NAME
init|=
literal|"group3"
decl_stmt|;
DECL|field|USER1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|USER1_NAME
init|=
literal|"user1"
decl_stmt|;
DECL|field|USER2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|USER2_NAME
init|=
literal|"user2"
decl_stmt|;
DECL|field|superUser
specifier|private
specifier|static
name|UserGroupInformation
name|superUser
decl_stmt|;
DECL|field|user1
specifier|private
specifier|static
name|UserGroupInformation
name|user1
decl_stmt|;
DECL|field|user2
specifier|private
specifier|static
name|UserGroupInformation
name|user2
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|superUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|user1
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER1_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|}
argument_list|)
expr_stmt|;
name|user2
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER2_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
argument_list|)
expr_stmt|;
comment|// Init test and trash root dirs in HDFS
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_ROOT
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|TEST_ROOT
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|verifyFilePermission
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TEST_ROOT
argument_list|)
argument_list|,
name|superUser
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|TRASH_ROOT
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|TRASH_ROOT
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|verifyFilePermission
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|TRASH_ROOT
argument_list|)
argument_list|,
name|superUser
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTrash ()
specifier|public
name|void
name|testTrash
parameter_list|()
throws|throws
name|IOException
block|{
name|TestTrash
operator|.
name|trashShell
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonDefaultFS ()
specifier|public
name|void
name|testNonDefaultFS
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|fileSystem
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|fileSystem
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TestTrash
operator|.
name|trashNonDefaultFS
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHDFSTrashPermission ()
specifier|public
name|void
name|testHDFSTrashPermission
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|fileSystem
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
name|TestTrash
operator|.
name|verifyTrashPermission
argument_list|(
name|fileSystem
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveEmptyDirToTrash ()
specifier|public
name|void
name|testMoveEmptyDirToTrash
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|config
init|=
name|fileSystem
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|TestTrash
operator|.
name|verifyMoveEmptyDirToTrash
argument_list|(
name|fileSystem
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteTrash ()
specifier|public
name|void
name|testDeleteTrash
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|Path
name|user1Tmp
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|,
literal|"test-del-u1"
argument_list|)
decl_stmt|;
name|Path
name|user2Tmp
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|,
literal|"test-del-u2"
argument_list|)
decl_stmt|;
comment|// login as user1, move something to trash
comment|// verify user1 can remove its own trash dir
name|fs
operator|=
name|DFSTestUtil
operator|.
name|login
argument_list|(
name|fs
argument_list|,
name|testConf
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|user1Tmp
argument_list|)
expr_stmt|;
name|Trash
name|u1Trash
init|=
name|getPerUserTrash
argument_list|(
name|user1
argument_list|,
name|fs
argument_list|,
name|testConf
argument_list|)
decl_stmt|;
name|Path
name|u1t
init|=
name|u1Trash
operator|.
name|getCurrentTrashDir
argument_list|(
name|user1Tmp
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to move %s to trash"
argument_list|,
name|user1Tmp
argument_list|)
argument_list|,
name|u1Trash
operator|.
name|moveToTrash
argument_list|(
name|user1Tmp
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s should be allowed to remove its own trash directory %s"
argument_list|,
name|user1
operator|.
name|getUserName
argument_list|()
argument_list|,
name|u1t
argument_list|)
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|u1t
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|u1t
argument_list|)
argument_list|)
expr_stmt|;
comment|// login as user2, move something to trash
name|fs
operator|=
name|DFSTestUtil
operator|.
name|login
argument_list|(
name|fs
argument_list|,
name|testConf
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|user2Tmp
argument_list|)
expr_stmt|;
name|Trash
name|u2Trash
init|=
name|getPerUserTrash
argument_list|(
name|user2
argument_list|,
name|fs
argument_list|,
name|testConf
argument_list|)
decl_stmt|;
name|u2Trash
operator|.
name|moveToTrash
argument_list|(
name|user2Tmp
argument_list|)
expr_stmt|;
name|Path
name|u2t
init|=
name|u2Trash
operator|.
name|getCurrentTrashDir
argument_list|(
name|user2Tmp
argument_list|)
decl_stmt|;
try|try
block|{
comment|// user1 should not be able to remove user2's trash dir
name|fs
operator|=
name|DFSTestUtil
operator|.
name|login
argument_list|(
name|fs
argument_list|,
name|testConf
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|u2t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s should not be able to remove %s trash directory"
argument_list|,
name|USER1_NAME
argument_list|,
name|USER2_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|AccessControlException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the username"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return a {@link Trash} instance using giving configuration.    * The trash root directory is set to an unique directory under    * {@link #TRASH_ROOT}. Use this method to isolate trash    * directories for different users.    */
DECL|method|getPerUserTrash (UserGroupInformation ugi, FileSystem fileSystem, Configuration config)
specifier|private
name|Trash
name|getPerUserTrash
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|FileSystem
name|fileSystem
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
comment|// generate an unique path per instance
name|UUID
name|trashId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|trashId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|userTrashRoot
init|=
operator|new
name|Path
argument_list|(
name|TRASH_ROOT
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|spyUserFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fileSystem
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|spyUserFs
operator|.
name|getTrashRoot
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userTrashRoot
argument_list|)
expr_stmt|;
return|return
operator|new
name|Trash
argument_list|(
name|spyUserFs
argument_list|,
name|config
argument_list|)
return|;
block|}
block|}
end_class

end_unit

