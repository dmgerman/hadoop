begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test that we can start several and run with namenodes on the same minicluster  */
end_comment

begin_class
DECL|class|TestSeveralNameNodes
specifier|public
class|class
name|TestSeveralNameNodes
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSeveralNameNodes
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** ms between failovers between NNs */
DECL|field|TIME_BETWEEN_FAILOVERS
specifier|private
specifier|static
specifier|final
name|int
name|TIME_BETWEEN_FAILOVERS
init|=
literal|1000
decl_stmt|;
DECL|field|NUM_NAMENODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NAMENODES
init|=
literal|3
decl_stmt|;
DECL|field|NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|3
decl_stmt|;
DECL|field|LIST_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|LIST_LENGTH
init|=
literal|50
decl_stmt|;
comment|/** ms for length of test */
DECL|field|RUNTIME
specifier|private
specifier|static
specifier|final
name|long
name|RUNTIME
init|=
literal|100000
decl_stmt|;
annotation|@
name|Test
DECL|method|testCircularLinkedListWrites ()
specifier|public
name|void
name|testCircularLinkedListWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|HAStressTestHarness
name|harness
init|=
operator|new
name|HAStressTestHarness
argument_list|()
decl_stmt|;
comment|// setup the harness
name|harness
operator|.
name|setNumberOfNameNodes
argument_list|(
name|NUM_NAMENODES
argument_list|)
expr_stmt|;
name|harness
operator|.
name|addFailoverThread
argument_list|(
name|TIME_BETWEEN_FAILOVERS
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
name|harness
operator|.
name|startCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// setup the a circular writer
name|FileSystem
name|fs
init|=
name|harness
operator|.
name|getFailoverFs
argument_list|()
decl_stmt|;
name|TestContext
name|context
init|=
name|harness
operator|.
name|testCtx
decl_stmt|;
name|List
argument_list|<
name|CircularWriter
argument_list|>
name|writers
init|=
operator|new
name|ArrayList
argument_list|<
name|CircularWriter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|CircularWriter
name|writer
init|=
operator|new
name|CircularWriter
argument_list|(
name|context
argument_list|,
name|LIST_LENGTH
argument_list|,
name|fs
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|context
operator|.
name|addThread
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|harness
operator|.
name|startThreads
argument_list|()
expr_stmt|;
comment|// wait for all the writer threads to finish, or that we exceed the time
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|<
name|RUNTIME
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CircularWriter
name|writer
init|=
name|writers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// remove the writer from the ones to check
if|if
condition|(
name|writer
operator|.
name|done
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|writers
operator|.
name|remove
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Some writers didn't complete in expected runtime! Current writer state:"
operator|+
name|writers
argument_list|,
literal|0
argument_list|,
name|writers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|harness
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"===========================\n\n\n\n"
argument_list|)
expr_stmt|;
name|harness
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CircularWriter
specifier|private
specifier|static
class|class
name|CircularWriter
extends|extends
name|RepeatingTestThread
block|{
DECL|field|maxLength
specifier|private
specifier|final
name|int
name|maxLength
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|currentListIndex
specifier|private
name|int
name|currentListIndex
init|=
literal|0
decl_stmt|;
DECL|field|done
specifier|private
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|CircularWriter (TestContext context, int listLength, FileSystem fs, Path parentDir)
specifier|public
name|CircularWriter
parameter_list|(
name|TestContext
name|context
parameter_list|,
name|int
name|listLength
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|parentDir
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|listLength
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|parentDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Circular Writer:\n"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t directory: "
operator|+
name|dir
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t target length: "
operator|+
name|maxLength
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
comment|// might be a little racy, but we just want a close count
name|builder
operator|.
name|append
argument_list|(
literal|"\t current item: "
operator|+
name|currentListIndex
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t done: "
operator|+
operator|(
name|done
operator|.
name|getCount
argument_list|()
operator|==
literal|0
operator|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doAnAction ()
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|currentListIndex
operator|==
name|maxLength
condition|)
block|{
name|checkList
argument_list|()
expr_stmt|;
name|this
operator|.
name|stopTestThread
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writeList
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Make sure we can traverse the entire linked list      */
DECL|method|checkList ()
specifier|private
name|void
name|checkList
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|nextFile
init|=
name|getNextFile
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|nextFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Next file "
operator|+
name|nextFile
operator|+
literal|" for list does not exist!"
argument_list|)
throw|;
block|}
comment|// read the next file name
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|nextFile
argument_list|)
decl_stmt|;
name|nextFile
operator|=
name|getNextFile
argument_list|(
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|private
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't correctly delete "
operator|+
name|dir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't correctly make directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
DECL|method|writeList ()
specifier|private
name|void
name|writeList
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|nextPath
init|=
name|getNextFile
argument_list|(
name|currentListIndex
operator|++
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing next file: "
operator|+
name|nextPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
name|nextPath
argument_list|)
decl_stmt|;
name|file
operator|.
name|write
argument_list|(
name|currentListIndex
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getNextFile (int i)
specifier|private
name|Path
name|getNextFile
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

