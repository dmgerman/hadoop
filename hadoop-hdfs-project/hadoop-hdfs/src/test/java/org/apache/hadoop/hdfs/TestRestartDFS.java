begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * A JUnit test for checking if restarting DFS preserves integrity.  */
end_comment

begin_class
DECL|class|TestRestartDFS
specifier|public
class|class
name|TestRestartDFS
extends|extends
name|TestCase
block|{
DECL|method|runTests (Configuration conf, boolean serviceTest)
specifier|public
name|void
name|runTests
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|serviceTest
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DFSTestUtil
name|files
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"TestRestartDFS"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dir
init|=
literal|"/srcdat"
decl_stmt|;
specifier|final
name|Path
name|rootpath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dirpath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|long
name|rootmtime
decl_stmt|;
name|FileStatus
name|rootstatus
decl_stmt|;
name|FileStatus
name|dirstatus
decl_stmt|;
try|try
block|{
if|if
condition|(
name|serviceTest
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|files
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|rootmtime
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootpath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|rootstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dirpath
argument_list|)
expr_stmt|;
name|dirstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dirpath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|rootpath
argument_list|,
name|rootstatus
operator|.
name|getOwner
argument_list|()
operator|+
literal|"_XXX"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|dirpath
argument_list|,
literal|null
argument_list|,
name|dirstatus
operator|.
name|getGroup
argument_list|()
operator|+
literal|"_XXX"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|serviceTest
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
comment|// Here we restart the MiniDFScluster without formatting namenode
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Filesystem corrupted after restart."
argument_list|,
name|files
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|newrootstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootpath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rootmtime
argument_list|,
name|newrootstatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootstatus
operator|.
name|getOwner
argument_list|()
operator|+
literal|"_XXX"
argument_list|,
name|newrootstatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootstatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|newrootstatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|newdirstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dirpath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dirstatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|newdirstatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirstatus
operator|.
name|getGroup
argument_list|()
operator|+
literal|"_XXX"
argument_list|,
name|newdirstatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|rootmtime
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootpath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|serviceTest
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
comment|// This is a second restart to check that after the first restart
comment|// the image written in parallel to both places did not get corrupted
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Filesystem corrupted after restart."
argument_list|,
name|files
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|newrootstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootpath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rootmtime
argument_list|,
name|newrootstatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootstatus
operator|.
name|getOwner
argument_list|()
operator|+
literal|"_XXX"
argument_list|,
name|newrootstatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootstatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|newrootstatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|newdirstatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dirpath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dirstatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|newdirstatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirstatus
operator|.
name|getGroup
argument_list|()
operator|+
literal|"_XXX"
argument_list|,
name|newdirstatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** check if DFS remains in proper condition after a restart */
DECL|method|testRestartDFS ()
specifier|public
name|void
name|testRestartDFS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|runTests
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** check if DFS remains in proper condition after a restart     * this rerun is with 2 ports enabled for RPC in the namenode    */
DECL|method|testRestartDualPortDFS ()
specifier|public
name|void
name|testRestartDualPortDFS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|runTests
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

