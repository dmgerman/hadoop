begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|cli
operator|.
name|CBlockCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|util
operator|.
name|MockStorageClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICE_LEVELDB_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * A testing class for cblock command line tool.  */
end_comment

begin_class
DECL|class|TestCBlockCLI
specifier|public
class|class
name|TestCBlockCLI
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|long
name|GB
init|=
literal|1
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
DECL|field|KB
specifier|private
specifier|static
specifier|final
name|int
name|KB
init|=
literal|1024
decl_stmt|;
DECL|field|cmd
specifier|private
specifier|static
name|CBlockCli
name|cmd
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cBlockManager
specifier|private
specifier|static
name|CBlockManager
name|cBlockManager
decl_stmt|;
DECL|field|outContent
specifier|private
specifier|static
name|ByteArrayOutputStream
name|outContent
decl_stmt|;
DECL|field|testPrintOut
specifier|private
specifier|static
name|PrintStream
name|testPrintOut
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|outContent
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|ScmClient
name|storageClient
init|=
operator|new
name|MockStorageClient
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CBLOCK_SERVICE_LEVELDB_PATH_KEY
argument_list|,
literal|"/tmp/testCblockCli.dat"
argument_list|)
expr_stmt|;
name|cBlockManager
operator|=
operator|new
name|CBlockManager
argument_list|(
name|conf
argument_list|,
name|storageClient
argument_list|)
expr_stmt|;
name|cBlockManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|testPrintOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|CBlockCli
argument_list|(
name|conf
argument_list|,
name|testPrintOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|clean ()
specifier|public
specifier|static
name|void
name|clean
parameter_list|()
block|{
name|cBlockManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cBlockManager
operator|.
name|join
argument_list|()
expr_stmt|;
name|cBlockManager
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the help command.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCliHelp ()
specifier|public
name|void
name|testCliHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|initialStdOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|testPrintOut
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-h"
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|helpPrints
init|=
literal|"usage: cblock\n"
operator|+
literal|" -c,--createVolume<user><volume><volumeSize in [GB/TB]> "
operator|+
literal|"<blockSize>   create a fresh new volume\n"
operator|+
literal|" -d,--deleteVolume<user><volume>                         "
operator|+
literal|"              delete a volume\n"
operator|+
literal|" -h,--help                                                 "
operator|+
literal|"              help\n"
operator|+
literal|" -i,--infoVolume<user><volume>                           "
operator|+
literal|"              info a volume\n"
operator|+
literal|" -l,--listVolume<user>                                    "
operator|+
literal|"              list all volumes\n"
operator|+
literal|" -s,--serverAddr<serverAddress>:<serverPort>              "
operator|+
literal|"              specify server address:port\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|helpPrints
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|initialStdOut
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test volume listing command.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCliList ()
specifier|public
name|void
name|testCliList
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName0
init|=
literal|"userTestCliList0"
decl_stmt|;
name|String
name|userName1
init|=
literal|"userTestCliList1"
decl_stmt|;
name|String
name|userTestNotExist
init|=
literal|"userTestNotExist"
decl_stmt|;
name|String
name|volumeName0
init|=
literal|"volumeTest0"
decl_stmt|;
name|String
name|volumeName1
init|=
literal|"volumeTest1"
decl_stmt|;
name|String
name|volumeSize0
init|=
literal|"30GB"
decl_stmt|;
name|String
name|volumeSize1
init|=
literal|"40GB"
decl_stmt|;
name|String
name|blockSize
init|=
name|Integer
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
index|[]
name|argsCreate0
init|=
block|{
literal|"-c"
block|,
name|userName0
block|,
name|volumeName0
block|,
name|volumeSize0
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate0
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsCreate1
init|=
block|{
literal|"-c"
block|,
name|userName0
block|,
name|volumeName1
block|,
name|volumeSize1
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate1
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsCreate2
init|=
block|{
literal|"-c"
block|,
name|userName1
block|,
name|volumeName0
block|,
name|volumeSize0
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate2
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsList0
init|=
block|{
literal|"-l"
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsList0
argument_list|)
expr_stmt|;
name|String
index|[]
name|outExpected1
init|=
block|{
literal|"userTestCliList1:volumeTest0\t32212254720\t4096\n"
block|,
literal|"userTestCliList0:volumeTest0\t32212254720\t4096\n"
block|,
literal|"userTestCliList0:volumeTest1\t42949672960\t4096\n"
block|}
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|outExpected1
control|)
block|{
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|length
operator|+=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|length
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|argsList1
init|=
block|{
literal|"-l"
block|,
name|userName1
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsList1
argument_list|)
expr_stmt|;
name|String
name|outExpected2
init|=
literal|"userTestCliList1:volumeTest0\t32212254720\t4096\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|outExpected2
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|argsList2
init|=
block|{
literal|"-l"
block|,
name|userTestNotExist
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsList2
argument_list|)
expr_stmt|;
name|String
name|outExpected3
init|=
literal|"\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|outExpected3
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test create volume command.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCliCreate ()
specifier|public
name|void
name|testCliCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"userTestCliCreate"
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volumeTest"
decl_stmt|;
name|String
name|volumeSize
init|=
literal|"30GB"
decl_stmt|;
name|String
name|blockSize
init|=
literal|"4"
decl_stmt|;
name|String
index|[]
name|argsCreate
init|=
block|{
literal|"-c"
block|,
name|userName
block|,
name|volumeName
block|,
name|volumeSize
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VolumeDescriptor
argument_list|>
name|allVolumes
init|=
name|cBlockManager
operator|.
name|getAllVolumes
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeDescriptor
name|volume
init|=
name|allVolumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|volume
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|volumeSizeB
init|=
name|volume
operator|.
name|getVolumeSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
call|(
name|int
call|)
argument_list|(
name|volumeSizeB
operator|/
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|volume
operator|.
name|getBlockSize
argument_list|()
operator|/
name|KB
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test delete volume command.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCliDelete ()
specifier|public
name|void
name|testCliDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"userTestCliDelete"
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volumeTest"
decl_stmt|;
name|String
name|volumeSize
init|=
literal|"30GB"
decl_stmt|;
name|String
name|blockSize
init|=
literal|"4"
decl_stmt|;
name|String
index|[]
name|argsCreate
init|=
block|{
literal|"-c"
block|,
name|userName
block|,
name|volumeName
block|,
name|volumeSize
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VolumeDescriptor
argument_list|>
name|allVolumes
init|=
name|cBlockManager
operator|.
name|getAllVolumes
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeDescriptor
name|volume
init|=
name|allVolumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|volume
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|volumeSizeB
init|=
name|volume
operator|.
name|getVolumeSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
call|(
name|int
call|)
argument_list|(
name|volumeSizeB
operator|/
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|volume
operator|.
name|getBlockSize
argument_list|()
operator|/
name|KB
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsDelete
init|=
block|{
literal|"-d"
block|,
name|userName
block|,
name|volumeName
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsDelete
argument_list|)
expr_stmt|;
name|allVolumes
operator|=
name|cBlockManager
operator|.
name|getAllVolumes
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test info volume command.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCliInfoVolume ()
specifier|public
name|void
name|testCliInfoVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName0
init|=
literal|"userTestCliInfo"
decl_stmt|;
name|String
name|volumeName0
init|=
literal|"volumeTest0"
decl_stmt|;
name|String
name|volumeSize
init|=
literal|"8000GB"
decl_stmt|;
name|String
name|blockSize
init|=
literal|"4"
decl_stmt|;
name|String
index|[]
name|argsCreate0
init|=
block|{
literal|"-c"
block|,
name|userName0
block|,
name|volumeName0
block|,
name|volumeSize
block|,
name|blockSize
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsCreate0
argument_list|)
expr_stmt|;
name|String
index|[]
name|argsInfo
init|=
block|{
literal|"-i"
block|,
name|userName0
block|,
name|volumeName0
block|}
decl_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|argsInfo
argument_list|)
expr_stmt|;
comment|// TODO : the usage field is not implemented yet, always 0 now.
name|String
name|outExpected
init|=
literal|" userName:userTestCliInfo "
operator|+
literal|"volumeName:volumeTest0 "
operator|+
literal|"volumeSize:8589934592000 "
operator|+
literal|"blockSize:4096 (sizeInBlocks:2097152000) usageInBlocks:0\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|outExpected
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

