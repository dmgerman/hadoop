begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_comment
comment|/**  * Regression test for HDFS-3597, SecondaryNameNode upgrade -- when a 2NN  * starts up with an existing directory structure with an old VERSION file, it  * should delete the snapshot and download a new one from the NN.  */
end_comment

begin_class
DECL|class|TestSecondaryNameNodeUpgrade
specifier|public
class|class
name|TestSecondaryNameNodeUpgrade
block|{
annotation|@
name|Before
DECL|method|cleanupCluster ()
specifier|public
name|void
name|cleanupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|hdfsDir
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cleanupCluster deleting "
operator|+
name|hdfsDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
DECL|method|doIt (String param, String val)
specifier|private
name|void
name|doIt
parameter_list|(
name|String
name|param
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|SecondaryNameNode
name|snn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|snn
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|snn
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|versionFiles
init|=
name|snn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getFiles
argument_list|(
literal|null
argument_list|,
literal|"VERSION"
argument_list|)
decl_stmt|;
name|snn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|versionFile
range|:
name|versionFiles
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Changing '"
operator|+
name|param
operator|+
literal|"' to '"
operator|+
name|val
operator|+
literal|"' in "
operator|+
name|versionFile
argument_list|)
expr_stmt|;
name|FSImageTestUtil
operator|.
name|corruptVersionFile
argument_list|(
name|versionFile
argument_list|,
name|param
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|snn
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|snn
operator|.
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|snn
operator|!=
literal|null
condition|)
name|snn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpgradeLayoutVersionSucceeds ()
specifier|public
name|void
name|testUpgradeLayoutVersionSucceeds
parameter_list|()
throws|throws
name|IOException
block|{
name|doIt
argument_list|(
literal|"layoutVersion"
argument_list|,
literal|"-39"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeNsIDFails ()
specifier|public
name|void
name|testChangeNsIDFails
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|doIt
argument_list|(
literal|"namespaceID"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw InconsistentFSStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Inconsistent checkpoint fields"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Correctly failed with inconsistent namespaceID: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

