begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests various cases where faults are injected to DataNode.  */
end_comment

begin_class
DECL|class|TestDataNodeFaultInjector
specifier|public
class|class
name|TestDataNodeFaultInjector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDataNodeFaultInjector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|MetricsDataNodeFaultInjector
specifier|private
specifier|static
class|class
name|MetricsDataNodeFaultInjector
extends|extends
name|DataNodeFaultInjector
block|{
DECL|field|DELAY
specifier|public
specifier|static
specifier|final
name|long
name|DELAY
init|=
literal|2000
decl_stmt|;
DECL|field|delayMs
specifier|private
name|long
name|delayMs
init|=
literal|0
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|String
name|err
init|=
literal|"Interrupted while sleeping. Bailing out."
decl_stmt|;
DECL|field|delayTries
specifier|private
name|long
name|delayTries
init|=
literal|1
decl_stmt|;
DECL|method|delayOnce ()
name|void
name|delayOnce
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|delayTries
operator|>
literal|0
condition|)
block|{
name|delayTries
operator|--
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDelayMs ()
name|long
name|getDelayMs
parameter_list|()
block|{
return|return
name|delayMs
return|;
block|}
DECL|method|logDelay (final long duration)
name|void
name|logDelay
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|)
block|{
comment|/**        * delay should be at least longer than DELAY, otherwise, delayXYZ is        * no-op        */
if|if
condition|(
name|duration
operator|>=
name|DELAY
condition|)
block|{
name|this
operator|.
name|delayMs
operator|=
name|duration
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDelaySendingAckToUpstream ()
specifier|public
name|void
name|testDelaySendingAckToUpstream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MetricsDataNodeFaultInjector
name|mdnFaultInjector
init|=
operator|new
name|MetricsDataNodeFaultInjector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|delaySendingAckToUpstream
parameter_list|(
specifier|final
name|String
name|upstreamAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|delayOnce
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logDelaySendingAckToUpstream
parameter_list|(
specifier|final
name|String
name|upstreamAddr
parameter_list|,
specifier|final
name|long
name|delayMs
parameter_list|)
throws|throws
name|IOException
block|{
name|logDelay
argument_list|(
name|delayMs
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|verifyFaultInjectionDelayPipeline
argument_list|(
name|mdnFaultInjector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDelaySendingPacketDownstream ()
specifier|public
name|void
name|testDelaySendingPacketDownstream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MetricsDataNodeFaultInjector
name|mdnFaultInjector
init|=
operator|new
name|MetricsDataNodeFaultInjector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stopSendingPacketDownstream
parameter_list|(
specifier|final
name|String
name|mirrAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|delayOnce
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logDelaySendingPacketDownstream
parameter_list|(
specifier|final
name|String
name|mirrAddr
parameter_list|,
specifier|final
name|long
name|delayMs
parameter_list|)
throws|throws
name|IOException
block|{
name|logDelay
argument_list|(
name|delayMs
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|verifyFaultInjectionDelayPipeline
argument_list|(
name|mdnFaultInjector
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFaultInjectionDelayPipeline ( final MetricsDataNodeFaultInjector mdnFaultInjector)
specifier|private
name|void
name|verifyFaultInjectionDelayPipeline
parameter_list|(
specifier|final
name|MetricsDataNodeFaultInjector
name|mdnFaultInjector
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DataNodeFaultInjector
name|oldDnInjector
init|=
name|DataNodeFaultInjector
operator|.
name|get
argument_list|()
decl_stmt|;
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|mdnFaultInjector
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|/*      * MetricsDataNodeFaultInjector.DELAY/2 ms is viewed as slow.      */
specifier|final
name|long
name|datanodeSlowLogThresholdMs
init|=
name|MetricsDataNodeFaultInjector
operator|.
name|DELAY
operator|/
literal|2
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_KEY
argument_list|,
name|datanodeSlowLogThresholdMs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/**      * configure to avoid resulting in pipeline failure due to read socket      * timeout      */
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|MetricsDataNodeFaultInjector
operator|.
name|DELAY
operator|*
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|POLICY_KEY
argument_list|,
literal|"ALWAYS"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"test.data"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|0x31
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"delay info: "
operator|+
name|mdnFaultInjector
operator|.
name|getDelayMs
argument_list|()
operator|+
literal|":"
operator|+
name|datanodeSlowLogThresholdMs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Injected delay should be longer than the configured one"
argument_list|,
name|mdnFaultInjector
operator|.
name|getDelayMs
argument_list|()
operator|>
name|datanodeSlowLogThresholdMs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|oldDnInjector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

