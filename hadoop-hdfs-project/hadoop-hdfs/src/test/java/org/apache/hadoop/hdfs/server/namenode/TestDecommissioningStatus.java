begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests the decommissioning of nodes.  */
end_comment

begin_class
DECL|class|TestDecommissioningStatus
specifier|public
class|class
name|TestDecommissioningStatus
block|{
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|fileSize
specifier|private
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|16384
decl_stmt|;
DECL|field|numDatanodes
specifier|private
specifier|static
specifier|final
name|int
name|numDatanodes
init|=
literal|2
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fileSys
specifier|private
specifier|static
name|FileSystem
name|fileSys
decl_stmt|;
DECL|field|excludeFile
specifier|private
specifier|static
name|Path
name|excludeFile
decl_stmt|;
DECL|field|localFileSys
specifier|private
specifier|static
name|FileSystem
name|localFileSys
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
name|Path
name|dir
decl_stmt|;
DECL|field|decommissionedNodes
name|ArrayList
argument_list|<
name|String
argument_list|>
name|decommissionedNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numDatanodes
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set up the hosts/exclude files.
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|localFileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
literal|"build/test/data/work-dir/decommission"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFileSys
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|excludeFile
operator|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"exclude"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
name|excludeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|includeFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"include"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|includeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|includeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|writeConfigFile (FileSystem fs, Path name, ArrayList<String> nodes)
specifier|private
specifier|static
name|void
name|writeConfigFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete if it already exists
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fileSys, Path name, short repl)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|short
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains three blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeIncompleteFile (FileSystem fileSys, Path name, short repl)
specifier|private
name|FSDataOutputStream
name|writeIncompleteFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|short
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains three blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// Do not close stream, return it
comment|// so that it is not garbage collected
return|return
name|stm
return|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Decommissions the node at the given index    */
DECL|method|decommissionNode (FSNamesystem namesystem, DFSClient client, FileSystem localFileSys, int nodeIndex)
specifier|private
name|String
name|decommissionNode
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|FileSystem
name|localFileSys
parameter_list|,
name|int
name|nodeIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|String
name|nodename
init|=
name|info
index|[
name|nodeIndex
index|]
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Decommissioning node: "
operator|+
name|nodename
argument_list|)
expr_stmt|;
comment|// write nodename into the exclude file.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|decommissionedNodes
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|nodename
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|nodename
return|;
block|}
DECL|method|checkDecommissionStatus (DatanodeDescriptor decommNode, int expectedUnderRep, int expectedDecommissionOnly, int expectedUnderRepInOpenFiles)
specifier|private
name|void
name|checkDecommissionStatus
parameter_list|(
name|DatanodeDescriptor
name|decommNode
parameter_list|,
name|int
name|expectedUnderRep
parameter_list|,
name|int
name|expectedDecommissionOnly
parameter_list|,
name|int
name|expectedUnderRepInOpenFiles
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|decommNode
operator|.
name|decommissioningStatus
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|,
name|expectedUnderRep
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decommNode
operator|.
name|decommissioningStatus
operator|.
name|getDecommissionOnlyReplicas
argument_list|()
argument_list|,
name|expectedDecommissionOnly
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decommNode
operator|.
name|decommissioningStatus
operator|.
name|getUnderReplicatedInOpenFiles
argument_list|()
argument_list|,
name|expectedUnderRepInOpenFiles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests Decommissioning Status in DFS.    */
annotation|@
name|Test
DECL|method|testDecommissionStatus ()
specifier|public
name|void
name|testDecommissionStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
literal|2
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|short
name|replicas
init|=
literal|2
decl_stmt|;
comment|//
comment|// Decommission one node. Verify the decommission status
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"decommission.dat"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"decommission1.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|st1
init|=
name|writeIncompleteFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|numDatanodes
condition|;
name|iteration
operator|++
control|)
block|{
name|String
name|downnode
init|=
name|decommissionNode
argument_list|(
name|fsn
argument_list|,
name|client
argument_list|,
name|localFileSys
argument_list|,
name|iteration
argument_list|)
decl_stmt|;
name|dm
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|downnode
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decommissioningNodes
init|=
name|dm
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|iteration
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|decommissioningNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|decommNode
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|checkDecommissionStatus
argument_list|(
name|decommNode
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|decommissioningNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|decommNode1
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|decommNode2
init|=
name|decommissioningNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|checkDecommissionStatus
argument_list|(
name|decommNode1
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkDecommissionStatus
argument_list|(
name|decommNode2
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Call refreshNodes on FSNamesystem with empty exclude file.
comment|// This will remove the datanodes from decommissioning list and
comment|// make them available again.
name|writeConfigFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dm
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|st1
operator|.
name|close
argument_list|()
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|localFileSys
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

