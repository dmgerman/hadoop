begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsDatasetTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_class
DECL|class|TestDataNodeHotSwapVolumes
specifier|public
class|class
name|TestDataNodeHotSwapVolumes
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDataNodeHotSwapVolumes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|field|DEFAULT_STORAGES_PER_DATANODE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STORAGES_PER_DATANODE
init|=
literal|2
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|startDFSCluster (int numNameNodes, int numDataNodes)
specifier|private
name|void
name|startDFSCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDataNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDataNodes
argument_list|,
name|DEFAULT_STORAGES_PER_DATANODE
argument_list|)
expr_stmt|;
block|}
DECL|method|startDFSCluster (int numNameNodes, int numDataNodes, int storagePerDataNode)
specifier|private
name|void
name|startDFSCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|storagePerDataNode
parameter_list|)
throws|throws
name|IOException
block|{
name|shutdown
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|/*      * Lower the DN heartbeat, DF rate, and recheck interval to one second      * so state about failures and datanode death propagates faster.      */
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DF_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|/* Allow 1 volume failure */
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_KEY
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|MiniDFSNNTopology
name|nnTopology
init|=
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameNodes
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|nnTopology
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagePerDataNode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|private
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createFile (Path path, int numBlocks)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|short
name|replicateFactor
init|=
literal|1
decl_stmt|;
name|createFile
argument_list|(
name|path
argument_list|,
name|numBlocks
argument_list|,
name|replicateFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (Path path, int numBlocks, short replicateFactor)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|short
name|replicateFactor
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|createFile
argument_list|(
literal|0
argument_list|,
name|path
argument_list|,
name|numBlocks
argument_list|,
name|replicateFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (int fsIdx, Path path, int numBlocks)
specifier|private
name|void
name|createFile
parameter_list|(
name|int
name|fsIdx
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|short
name|replicateFactor
init|=
literal|1
decl_stmt|;
name|createFile
argument_list|(
name|fsIdx
argument_list|,
name|path
argument_list|,
name|numBlocks
argument_list|,
name|replicateFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (int fsIdx, Path path, int numBlocks, short replicateFactor)
specifier|private
name|void
name|createFile
parameter_list|(
name|int
name|fsIdx
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|short
name|replicateFactor
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|seed
init|=
literal|0
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|fsIdx
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|BLOCK_SIZE
operator|*
name|numBlocks
argument_list|,
name|replicateFactor
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|replicateFactor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify whether a file has enough content.    */
DECL|method|verifyFileLength (FileSystem fs, Path path, int numBlocks)
specifier|private
specifier|static
name|void
name|verifyFileLength
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numBlocks
operator|*
name|BLOCK_SIZE
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Return the number of replicas for a given block in the file. */
DECL|method|getNumReplicas (FileSystem fs, Path file, int blockIdx)
specifier|private
specifier|static
name|int
name|getNumReplicas
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|blockIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockLocation
name|locs
index|[]
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|locs
operator|.
name|length
operator|<
name|blockIdx
operator|+
literal|1
condition|?
literal|0
else|:
name|locs
index|[
name|blockIdx
index|]
operator|.
name|getNames
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**    * Wait the block to have the exact number of replicas as expected.    */
DECL|method|waitReplication (FileSystem fs, Path file, int blockIdx, int numReplicas)
specifier|private
specifier|static
name|void
name|waitReplication
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|blockIdx
parameter_list|,
name|int
name|numReplicas
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|int
name|attempts
init|=
literal|50
decl_stmt|;
comment|// Wait 5 seconds.
while|while
condition|(
name|attempts
operator|>
literal|0
condition|)
block|{
name|int
name|actualReplicas
init|=
name|getNumReplicas
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|blockIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualReplicas
operator|==
name|numReplicas
condition|)
block|{
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Block %d of file %s has %d replicas (desired %d).\n"
argument_list|,
name|blockIdx
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|actualReplicas
argument_list|,
name|numReplicas
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|attempts
operator|--
expr_stmt|;
block|}
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting the "
operator|+
name|blockIdx
operator|+
literal|"-th block"
operator|+
literal|" of "
operator|+
name|file
operator|+
literal|" to have "
operator|+
name|numReplicas
operator|+
literal|" replicas."
argument_list|)
throw|;
block|}
comment|/** Parses data dirs from DataNode's configuration. */
DECL|method|getDataDirs (DataNode datanode)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getDataDirs
parameter_list|(
name|DataNode
name|datanode
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
return|;
block|}
comment|/** Force the DataNode to report missing blocks immediately. */
DECL|method|triggerDeleteReport (DataNode datanode)
specifier|private
specifier|static
name|void
name|triggerDeleteReport
parameter_list|(
name|DataNode
name|datanode
parameter_list|)
throws|throws
name|IOException
block|{
name|datanode
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerDeletionReport
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseChangedVolumes ()
specifier|public
name|void
name|testParseChangedVolumes
parameter_list|()
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|dn
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|oldPaths
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|oldLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|oldPaths
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|oldLocations
operator|.
name|add
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|oldLocations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newPaths
init|=
operator|new
name|File
argument_list|(
name|oldLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|",/foo/path1,/foo/path2"
decl_stmt|;
name|DataNode
operator|.
name|ChangedVolumes
name|changedVolumes
init|=
name|dn
operator|.
name|parseChangedVolumes
argument_list|(
name|newPaths
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|newVolumes
init|=
name|changedVolumes
operator|.
name|newLocations
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/foo/path1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|newVolumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"/foo/path2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|newVolumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|removedVolumes
init|=
name|changedVolumes
operator|.
name|deactivateLocations
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|removedVolumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldLocations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|,
name|removedVolumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|changedVolumes
operator|.
name|unchangedLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|,
name|changedVolumes
operator|.
name|unchangedLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseChangedVolumesFailures ()
specifier|public
name|void
name|testParseChangedVolumesFailures
parameter_list|()
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|dn
operator|.
name|parseChangedVolumes
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IOException: empty inputs."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No directory is specified."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParseStorageTypeChanges ()
specifier|public
name|void
name|testParseStorageTypeChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|dn
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|oldLocations
init|=
name|DataNode
operator|.
name|getStorageLocations
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Change storage type of an existing StorageLocation
name|String
name|newLoc
init|=
name|String
operator|.
name|format
argument_list|(
literal|"[%s]%s"
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
name|oldLocations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newDataDirs
init|=
name|oldLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|newLoc
decl_stmt|;
try|try
block|{
name|dn
operator|.
name|parseChangedVolumes
argument_list|(
name|newDataDirs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw IOE because storage type changes."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Changing storage type is not allowed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Add volumes to the first DataNode. */
DECL|method|addVolumes (int numNewVolumes)
specifier|private
name|void
name|addVolumes
parameter_list|(
name|int
name|numNewVolumes
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|ReconfigurationException
block|{
name|addVolumes
argument_list|(
name|numNewVolumes
argument_list|,
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addVolumes (int numNewVolumes, CountDownLatch waitLatch)
specifier|private
name|void
name|addVolumes
parameter_list|(
name|int
name|numNewVolumes
parameter_list|,
name|CountDownLatch
name|waitLatch
parameter_list|)
throws|throws
name|ReconfigurationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// First DataNode.
name|Configuration
name|conf
init|=
name|dn
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|oldDataDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|newVolumeDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|newDataDirBuf
init|=
operator|new
name|StringBuilder
argument_list|(
name|oldDataDir
argument_list|)
decl_stmt|;
name|int
name|startIdx
init|=
name|oldDataDir
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|+
literal|1
decl_stmt|;
comment|// Find the first available (non-taken) directory name for data volume.
while|while
condition|(
literal|true
condition|)
block|{
name|File
name|volumeDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
name|startIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|volumeDir
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
name|startIdx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|startIdx
operator|+
name|numNewVolumes
condition|;
name|i
operator|++
control|)
block|{
name|File
name|volumeDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|newVolumeDirs
operator|.
name|add
argument_list|(
name|volumeDir
argument_list|)
expr_stmt|;
name|volumeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|newDataDirBuf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|newDataDirBuf
operator|.
name|append
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|volumeDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|newDataDir
init|=
name|newDataDirBuf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDataDir
argument_list|)
argument_list|,
name|is
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Await on the latch for needed operations to complete
name|waitLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify the configuration value is appropriately set.
name|String
index|[]
name|effectiveDataDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectDataDirs
init|=
name|newDataDir
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectDataDirs
operator|.
name|length
argument_list|,
name|effectiveDataDirs
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|expectedStorageLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|effectiveStorageLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectDataDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StorageLocation
name|expectLocation
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|expectDataDirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|StorageLocation
name|effectiveLocation
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|effectiveDataDirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|expectedStorageLocations
operator|.
name|add
argument_list|(
name|expectLocation
argument_list|)
expr_stmt|;
name|effectiveStorageLocations
operator|.
name|add
argument_list|(
name|effectiveLocation
argument_list|)
expr_stmt|;
block|}
name|Comparator
argument_list|<
name|StorageLocation
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|StorageLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StorageLocation
name|o1
parameter_list|,
name|StorageLocation
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedStorageLocations
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|effectiveStorageLocations
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Effective volumes doesnt match expected"
argument_list|,
name|expectedStorageLocations
argument_list|,
name|effectiveStorageLocations
argument_list|)
expr_stmt|;
comment|// Check that all newly created volumes are appropriately formatted.
for|for
control|(
name|File
name|volumeDir
range|:
name|newVolumeDirs
control|)
block|{
name|File
name|curDir
init|=
operator|new
name|File
argument_list|(
name|volumeDir
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|curDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumBlocksReport (int namesystemIdx)
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getNumBlocksReport
parameter_list|(
name|int
name|namesystemIdx
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|namesystemIdx
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blockReports
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
name|datanodeReport
range|:
name|blockReports
control|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|numBlocksPerDN
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockListAsLongs
name|blocks
range|:
name|datanodeReport
operator|.
name|values
argument_list|()
control|)
block|{
name|numBlocksPerDN
operator|.
name|add
argument_list|(
name|blocks
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|numBlocksPerDN
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Test adding one volume on a running MiniDFSCluster with only one NameNode.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddOneNewVolume ()
specifier|public
name|void
name|testAddOneNewVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numBlocks
init|=
literal|10
decl_stmt|;
name|addVolumes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blockReports
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 DataNode
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 volumes
comment|// FSVolumeList uses Round-Robin block chooser by default. Thus the new
comment|// blocks should be evenly located in all volumes.
name|int
name|minNumBlocks
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxNumBlocks
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|BlockListAsLongs
name|blockList
range|:
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|minNumBlocks
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minNumBlocks
argument_list|,
name|blockList
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|maxNumBlocks
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxNumBlocks
argument_list|,
name|blockList
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|maxNumBlocks
operator|-
name|maxNumBlocks
argument_list|)
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|verifyFileLength
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddVolumesDuringWrite ()
specifier|public
name|void
name|testAddVolumesDuringWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ReconfigurationException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|numVolumes
init|=
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
decl_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
comment|// Each volume has 2 blocks
name|int
name|initialBlockCount
init|=
name|numVolumes
operator|*
literal|2
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|,
name|initialBlockCount
argument_list|)
expr_stmt|;
name|int
name|newVolumeCount
init|=
literal|5
decl_stmt|;
name|addVolumes
argument_list|(
name|newVolumeCount
argument_list|)
expr_stmt|;
name|numVolumes
operator|+=
name|newVolumeCount
expr_stmt|;
name|int
name|additionalBlockCount
init|=
literal|9
decl_stmt|;
name|int
name|totalBlockCount
init|=
name|initialBlockCount
operator|+
name|additionalBlockCount
decl_stmt|;
comment|// Continue to write the same file, thus the new volumes will have blocks.
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|,
name|BLOCK_SIZE
operator|*
name|additionalBlockCount
argument_list|)
expr_stmt|;
name|verifyFileLength
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|,
name|totalBlockCount
argument_list|)
expr_stmt|;
comment|// After appending data, each new volume added should
comment|// have 1 block each.
name|List
argument_list|<
name|Integer
argument_list|>
name|expectedNumBlocks
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blockReports
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 DataNode
name|assertEquals
argument_list|(
name|numVolumes
argument_list|,
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 7 volumes
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
name|dnReport
init|=
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actualNumBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockListAsLongs
name|blockList
range|:
name|dnReport
operator|.
name|values
argument_list|()
control|)
block|{
name|actualNumBlocks
operator|.
name|add
argument_list|(
name|blockList
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|actualNumBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumBlocks
argument_list|,
name|actualNumBlocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testAddVolumesConcurrently ()
specifier|public
name|void
name|testAddVolumesConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ReconfigurationException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|numVolumes
init|=
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
decl_stmt|;
name|String
name|blockPoolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
comment|// Each volume has 2 blocks
name|int
name|initialBlockCount
init|=
name|numVolumes
operator|*
literal|2
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|,
name|initialBlockCount
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|data
init|=
name|dn
operator|.
name|data
decl_stmt|;
name|dn
operator|.
name|data
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|int
name|newVolumeCount
init|=
literal|40
decl_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|addVolumeDelayedThreads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|addVolumeError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|listStorageError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CountDownLatch
name|addVolumeCompletionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|newVolumeCount
argument_list|)
decl_stmt|;
comment|// Thread to list all storage available at DataNode,
comment|// when the volumes are being added in parallel.
specifier|final
name|Thread
name|listStorageThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|addVolumeCompletionLatch
operator|.
name|getCount
argument_list|()
operator|!=
name|newVolumeCount
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
literal|1000
condition|)
block|{
try|try
block|{
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|listStorageDirectories
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listStorageError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error listing storage: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|listStorageThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// FsDatasetImpl addVolume mocked to perform the operation asynchronously
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Thread
name|addVolThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|r
operator|.
name|setSeed
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let 50% of add volume operations
comment|// start after an initial delay.
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|>
literal|4
condition|)
block|{
name|int
name|s
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|s
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
name|invocationOnMock
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|addVolumeError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error adding volume: "
operator|+
name|throwable
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|addVolumeCompletionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|addVolumeDelayedThreads
operator|.
name|add
argument_list|(
name|addVolThread
argument_list|)
expr_stmt|;
name|addVolThread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|dn
operator|.
name|data
argument_list|)
operator|.
name|addVolume
argument_list|(
name|any
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|addVolumes
argument_list|(
name|newVolumeCount
argument_list|,
name|addVolumeCompletionLatch
argument_list|)
expr_stmt|;
name|numVolumes
operator|+=
name|newVolumeCount
expr_stmt|;
comment|// Wait for all addVolume and listStorage Threads to complete
for|for
control|(
name|Thread
name|t
range|:
name|addVolumeDelayedThreads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|listStorageThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify errors while adding volumes and listing storage directories
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error adding volumes!"
argument_list|,
literal|false
argument_list|,
name|addVolumeError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error listing storage!"
argument_list|,
literal|false
argument_list|,
name|listStorageError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|additionalBlockCount
init|=
literal|9
decl_stmt|;
name|int
name|totalBlockCount
init|=
name|initialBlockCount
operator|+
name|additionalBlockCount
decl_stmt|;
comment|// Continue to write the same file, thus the new volumes will have blocks.
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|,
name|BLOCK_SIZE
operator|*
name|additionalBlockCount
argument_list|)
expr_stmt|;
name|verifyFileLength
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|,
name|totalBlockCount
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blockReports
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|blockPoolId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numVolumes
argument_list|,
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddVolumesToFederationNN ()
specifier|public
name|void
name|testAddVolumesToFederationNN
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|ReconfigurationException
block|{
comment|// Starts a Cluster with 2 NameNode and 3 DataNodes. Each DataNode has 2
comment|// volumes.
specifier|final
name|int
name|numNameNodes
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
name|startDFSCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
comment|// Create a file on the first namespace with 4 blocks.
name|createFile
argument_list|(
literal|0
argument_list|,
name|testFile
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Create a file on the second namespace with 4 blocks.
name|createFile
argument_list|(
literal|1
argument_list|,
name|testFile
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Add 2 volumes to the first DataNode.
specifier|final
name|int
name|numNewVolumes
init|=
literal|2
decl_stmt|;
name|addVolumes
argument_list|(
name|numNewVolumes
argument_list|)
expr_stmt|;
comment|// Append to the file on the first namespace.
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|testFile
argument_list|,
name|BLOCK_SIZE
operator|*
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|actualNumBlocks
init|=
name|getNumBlocksReport
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|actualNumBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|blocksOnFirstDN
init|=
name|actualNumBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|blocksOnFirstDN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|blocksOnFirstDN
argument_list|)
expr_stmt|;
comment|// Verify the second namespace also has the new volumes and they are empty.
name|actualNumBlocks
operator|=
name|getNumBlocksReport
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|actualNumBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numNewVolumes
argument_list|,
name|Collections
operator|.
name|frequency
argument_list|(
name|actualNumBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveOneVolume ()
specifier|public
name|void
name|testRemoveOneVolume
parameter_list|()
throws|throws
name|ReconfigurationException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|,
literal|10
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|oldDirs
init|=
name|getDataDirs
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|String
name|newDirs
init|=
name|oldDirs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Keep the first volume.
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDirs
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFileLocksReleased
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|oldDirs
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|oldDirs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw BlockMissingException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Could not obtain block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
literal|"/newFile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|newFile
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blockReports
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|replFactor
argument_list|,
name|blockReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BlockListAsLongs
name|blocksForVolume1
init|=
name|blockReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// The first volume has half of the testFile and full of newFile.
name|assertEquals
argument_list|(
literal|10
operator|/
literal|2
operator|+
literal|6
argument_list|,
name|blocksForVolume1
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicatingAfterRemoveVolume ()
specifier|public
name|void
name|testReplicatingAfterRemoveVolume
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|IOException
throws|,
name|ReconfigurationException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|short
name|replFactor
init|=
literal|2
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|testFile
argument_list|,
literal|4
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|oldDirs
init|=
name|getDataDirs
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// Findout the storage with block and remove it
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|FsVolumeSpi
name|volumeWithBlock
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolume
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|String
name|dirWithBlock
init|=
literal|"["
operator|+
name|volumeWithBlock
operator|.
name|getStorageType
argument_list|()
operator|+
literal|"]"
operator|+
name|volumeWithBlock
operator|.
name|getStorageLocation
argument_list|()
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|String
name|newDirs
init|=
name|dirWithBlock
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|oldDirs
control|)
block|{
if|if
condition|(
name|dirWithBlock
operator|.
name|startsWith
argument_list|(
name|dir
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|newDirs
operator|=
name|dir
expr_stmt|;
break|break;
block|}
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDirs
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|oldDirs
operator|.
name|remove
argument_list|(
name|newDirs
argument_list|)
expr_stmt|;
name|assertFileLocksReleased
argument_list|(
name|oldDirs
argument_list|)
expr_stmt|;
name|triggerDeleteReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddVolumeFailures ()
specifier|public
name|void
name|testAddVolumeFailures
parameter_list|()
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dataDir
init|=
name|cluster
operator|.
name|getDataDirectory
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newDirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_NEW_DIRS
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NEW_DIRS
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newVolume
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"new_vol"
operator|+
name|i
argument_list|)
decl_stmt|;
name|newDirs
operator|.
name|add
argument_list|(
name|newVolume
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// Make addVolume() fail.
name|newVolume
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|newValue
init|=
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
operator|+
literal|","
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|newDirs
argument_list|)
decl_stmt|;
try|try
block|{
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|messages
index|[]
init|=
name|errorMessage
operator|.
name|split
argument_list|(
literal|"\\r?\\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
index|[
literal|0
index|]
argument_list|,
name|containsString
argument_list|(
literal|"new_vol0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|messages
index|[
literal|1
index|]
argument_list|,
name|containsString
argument_list|(
literal|"new_vol2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that vol0 and vol2's metadata are not left in memory.
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataset
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|FsVolumeSpi
name|volume
range|:
name|volumes
control|)
block|{
name|assertThat
argument_list|(
operator|new
name|File
argument_list|(
name|volume
operator|.
name|getStorageLocation
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|anyOf
argument_list|(
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStorage
name|storage
init|=
name|dn
operator|.
name|getStorage
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storage
operator|.
name|getNumStorageDirs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|storage
operator|.
name|getStorageDir
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|anyOf
argument_list|(
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The newly effective conf does not have vol0 and vol2.
name|String
index|[]
name|effectiveVolumes
init|=
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|effectiveVolumes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ev
range|:
name|effectiveVolumes
control|)
block|{
name|assertThat
argument_list|(
operator|new
name|File
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|ev
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|anyOf
argument_list|(
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|newDirs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that the storage lock file in each given directory has been    * released.  This method works by trying to acquire the lock file itself.  If    * locking fails here, then the main code must have failed to release it.    *    * @param dirs every storage directory to check    * @throws IOException if there is an unexpected I/O error    */
DECL|method|assertFileLocksReleased (Collection<String> dirs)
specifier|private
specifier|static
name|void
name|assertFileLocksReleased
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
try|try
block|{
name|FsDatasetTestUtil
operator|.
name|assertFileLockReleased
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testRemoveVolumeBeingWritten ()
specifier|public
name|void
name|testRemoveVolumeBeingWritten
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
throws|,
name|ReconfigurationException
throws|,
name|IOException
throws|,
name|BrokenBarrierException
block|{
comment|// test against removing volumes on the different DataNode on the pipeline.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|testRemoveVolumeBeingWrittenForDatanode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the case that remove a data volume on a particular DataNode when the    * volume is actively being written.    * @param dataNodeIdx the index of the DataNode to remove a volume.    */
DECL|method|testRemoveVolumeBeingWrittenForDatanode (int dataNodeIdx)
specifier|private
name|void
name|testRemoveVolumeBeingWrittenForDatanode
parameter_list|(
name|int
name|dataNodeIdx
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReconfigurationException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|fs
operator|.
name|getClient
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
name|REPLICATION
argument_list|)
decl_stmt|;
name|Random
name|rb
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|writeBuf
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
operator|/
literal|2
index|]
decl_stmt|;
comment|// half of the block.
name|rb
operator|.
name|nextBytes
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|BlockLocation
index|[]
name|blocks
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|testFile
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|String
index|[]
name|dataNodeNames
init|=
name|blocks
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|String
name|dataNodeName
init|=
name|dataNodeNames
index|[
name|dataNodeIdx
index|]
decl_stmt|;
name|int
name|xferPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dataNodeName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|DataNode
name|dn
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DataNode
name|dataNode
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getXferPort
argument_list|()
operator|==
name|xferPort
condition|)
block|{
name|dn
operator|=
name|dataNode
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|dn
argument_list|)
expr_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DataNodeFaultInjector
name|newInjector
init|=
operator|new
name|DataNodeFaultInjector
argument_list|()
block|{
specifier|public
name|void
name|logDelaySendingAckToUpstream
parameter_list|(
specifier|final
name|String
name|upstreamAddr
parameter_list|,
specifier|final
name|long
name|delayMs
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Make all streams which hold the volume references to wait the
comment|// reconfiguration thread to start.
comment|// It should only block IO during the period of reconfiguration
comment|// task running.
if|if
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Add delays to allow the reconfiguration thread starts before
comment|// IO finish.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|DataNodeFaultInjector
name|oldInjector
init|=
name|DataNodeFaultInjector
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|newInjector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldDirs
init|=
name|getDataDirs
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
literal|"/test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LocatedBlock
name|block
init|=
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolume
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|newDirs
init|=
name|oldDirs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|d
parameter_list|)
lambda|->
operator|!
name|d
operator|.
name|contains
argument_list|(
name|volume
operator|.
name|getStorageLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|DataNode
name|dataNode
init|=
name|dn
decl_stmt|;
specifier|final
name|CyclicBarrier
name|reconfigBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|reconfigThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|reconfigBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wake up writing threads on the pipeline to finish the block.
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dataNode
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDirs
argument_list|)
argument_list|,
name|is
argument_list|(
name|dataNode
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
decl||
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|reconfigThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Write more data to make sure the stream threads wait on the barrier.
name|rb
operator|.
name|nextBytes
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
name|reconfigBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|reconfigThread
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|exceptions
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|DataNodeFaultInjector
operator|.
name|set
argument_list|(
name|oldInjector
argument_list|)
expr_stmt|;
block|}
comment|// Verify if the data directory reconfigure was successful
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|fsDatasetSpi
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|fsVolumeReferences
init|=
name|fsDatasetSpi
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsVolumeReferences
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Vol: "
operator|+
name|fsVolumeReferences
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Volume remove wasn't successful."
argument_list|,
literal|1
argument_list|,
name|fsVolumeReferences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify the file has sufficient replications.
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// Read the content back
name|byte
index|[]
name|content
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Write more files to make sure that the DataNode that has removed volume
comment|// is still alive to receive data.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/after-"
operator|+
name|i
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|REPLICATION
argument_list|)
init|)
block|{
name|rb
operator|.
name|nextBytes
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|writeBuf
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|fsVolumeReferences
init|=
name|fsDatasetSpi
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
literal|"Volume remove wasn't successful."
argument_list|,
literal|1
argument_list|,
name|fsVolumeReferences
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FsVolumeSpi
name|volume
init|=
name|fsVolumeReferences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|FsVolumeSpi
operator|.
name|BlockIterator
name|blkIter
init|=
name|volume
operator|.
name|newBlockIterator
argument_list|(
name|bpid
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|blkIter
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|blkIter
operator|.
name|nextBlock
argument_list|()
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DataNode(%d) should have more than 1 blocks"
argument_list|,
name|dataNodeIdx
argument_list|)
argument_list|,
name|blockCount
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddBackRemovedVolume ()
specifier|public
name|void
name|testAddBackRemovedVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|ReconfigurationException
block|{
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Create some data on every volume.
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|dn
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|oldDataDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|String
name|keepDataDir
init|=
name|oldDataDir
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|removeDataDir
init|=
name|oldDataDir
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|keepDataDir
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getNumNameNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|i
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|BlockPoolSliceStorage
name|bpsStorage
init|=
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|getBPStorage
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
comment|// Make sure that there is no block pool level storage under removeDataDir.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bpsStorage
operator|.
name|getNumStorageDirs
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
name|bpsStorage
operator|.
name|getStorageDir
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|File
argument_list|(
name|removeDataDir
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|getBPStorage
argument_list|(
name|bpid
argument_list|)
operator|.
name|getNumStorageDirs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Bring the removed directory back. It only successes if all metadata about
comment|// this directory were removed from the previous step.
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|oldDataDir
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that {@link DataNode#checkDiskError()} removes all metadata in    * DataNode upon a volume failure. Thus we can run reconfig on the same    * configuration to reload the new volume on the same directory as the failed one.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDirectlyReloadAfterCheckDiskError ()
specifier|public
name|void
name|testDirectlyReloadAfterCheckDiskError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The test uses DataNodeTestUtils#injectDataDirFailure() to simulate
comment|// volume failures which is currently not supported on Windows.
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|startDFSCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|,
literal|32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|oldDataDir
init|=
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|File
name|dirToFail
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FsVolumeImpl
name|failedVolume
init|=
name|DataNodeTestUtils
operator|.
name|getVolume
argument_list|(
name|dn
argument_list|,
name|dirToFail
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No FsVolume was found for "
operator|+
name|dirToFail
argument_list|,
name|failedVolume
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|long
name|used
init|=
name|failedVolume
operator|.
name|getDfsUsed
argument_list|()
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|injectDataDirFailure
argument_list|(
name|dirToFail
argument_list|)
expr_stmt|;
comment|// Call and wait DataNode to detect disk failure.
name|DataNodeTestUtils
operator|.
name|waitForDiskError
argument_list|(
name|dn
argument_list|,
name|failedVolume
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
argument_list|,
literal|32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|used
argument_list|,
name|failedVolume
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|restoreDataDirFromFailure
argument_list|(
name|dirToFail
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"reconfiguring DN "
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|oldDataDir
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test2"
argument_list|)
argument_list|,
literal|32
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|FsVolumeImpl
name|restoredVolume
init|=
name|DataNodeTestUtils
operator|.
name|getVolume
argument_list|(
name|dn
argument_list|,
name|dirToFail
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|restoredVolume
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|restoredVolume
operator|!=
name|failedVolume
argument_list|)
expr_stmt|;
comment|// More data has been written to this volume.
name|assertTrue
argument_list|(
name|restoredVolume
operator|.
name|getDfsUsed
argument_list|()
operator|>
name|used
argument_list|)
expr_stmt|;
block|}
comment|/** Test that a full block report is sent after hot swapping volumes */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testFullBlockReportAfterRemovingVolumes ()
specifier|public
name|void
name|testFullBlockReportAfterRemovingVolumes
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// Similar to TestTriggerBlockReport, set a really long value for
comment|// dfs.heartbeat.interval, so that incremental block reports and heartbeats
comment|// won't be sent during this test unless they're triggered
comment|// manually.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10800000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1080L
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|spy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
decl_stmt|;
comment|// Remove a data dir from datanode
name|File
name|dataDirToKeep
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|dn
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dataDirToKeep
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should get 1 full report
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|timeout
argument_list|(
literal|60000
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|blockReport
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|StorageBlockReport
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|BlockReportContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

