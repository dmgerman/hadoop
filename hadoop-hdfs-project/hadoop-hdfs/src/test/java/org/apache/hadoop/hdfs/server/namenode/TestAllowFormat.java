begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TestGenericJournalConf
operator|.
name|DummyJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Startup and format tests  *   */
end_comment

begin_class
DECL|class|TestAllowFormat
specifier|public
class|class
name|TestAllowFormat
block|{
DECL|field|NAME_NODE_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NAME_NODE_HOST
init|=
literal|"localhost:"
decl_stmt|;
DECL|field|NAME_NODE_HTTP_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NAME_NODE_HTTP_HOST
init|=
literal|"0.0.0.0:"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAllowFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|Configuration
name|config
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|hdfsDir
specifier|private
specifier|static
name|File
name|hdfsDir
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|hdfsDir
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"dfs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Test has multiple name directories.
comment|// Format should not really prompt us if one of the directories exist,
comment|// but is empty. So in case the test hangs on an input, it means something
comment|// could be wrong in the format prompting code. (HDFS-1636)
name|LOG
operator|.
name|info
argument_list|(
literal|"hdfsdir is "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|nameDir1
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name1"
argument_list|)
decl_stmt|;
name|File
name|nameDir2
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name2"
argument_list|)
decl_stmt|;
comment|// To test multiple directory handling, we pre-create one of the name directories.
name|nameDir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Set multiple name directories.
name|config
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir1
operator|.
name|getPath
argument_list|()
operator|+
literal|","
operator|+
name|nameDir2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"data"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"secondary"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|config
argument_list|,
literal|"hdfs://"
operator|+
name|NAME_NODE_HOST
operator|+
literal|"0"
argument_list|)
expr_stmt|;
block|}
comment|/**    * clean up    */
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping mini cluster"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete hdfs directory in tearDown '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * start MiniDFScluster, try formatting with different settings    * @throws IOException    * @throws InterruptedException     */
annotation|@
name|Test
DECL|method|testAllowFormat ()
specifier|public
name|void
name|testAllowFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--starting mini cluster"
argument_list|)
expr_stmt|;
comment|// manage dirs parameter set to false
name|NameNode
name|nn
decl_stmt|;
comment|// 1. Create a new cluster and format DFS
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mini cluster created OK"
argument_list|)
expr_stmt|;
comment|// 2. Try formatting DFS with allowformat false.
comment|// NOTE: the cluster must be shut down for format to work.
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying format will fail with allowformat false"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Format succeeded, when it should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected to fail
comment|// Verify we got message we expected
name|assertTrue
argument_list|(
literal|"Exception was not about formatting Namenode"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"The option "
operator|+
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected failure: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done verifying format will fail with allowformat false"
argument_list|)
expr_stmt|;
block|}
comment|// 3. Try formatting DFS with allowformat true
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying format will succeed with allowformat true"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done verifying format will succeed with allowformat true"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to skip format for non file scheme directory configured    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFormatShouldBeIgnoredForNonFileBasedDirs ()
specifier|public
name|void
name|testFormatShouldBeIgnoredForNonFileBasedDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|logicalName
init|=
literal|"mycluster"
decl_stmt|;
comment|// DFS_NAMENODE_RPC_ADDRESS_KEY are required to identify the NameNode
comment|// is configured in HA, then only DFS_NAMENODE_SHARED_EDITS_DIR_KEY
comment|// is considered.
name|String
name|localhost
init|=
literal|"127.0.0.1"
decl_stmt|;
name|InetSocketAddress
name|nnAddr1
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|localhost
argument_list|,
literal|8020
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|nnAddr2
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|localhost
argument_list|,
literal|9020
argument_list|)
decl_stmt|;
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|conf
argument_list|,
name|logicalName
argument_list|,
name|nnAddr1
argument_list|,
name|nnAddr2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_PLUGIN_PREFIX
argument_list|,
literal|"dummy"
argument_list|)
argument_list|,
name|DummyJournalManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|,
literal|"dummy://"
operator|+
name|localhost
operator|+
literal|":2181/ledgers"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
argument_list|,
literal|"nn1"
argument_list|)
expr_stmt|;
comment|// An internal assert is added to verify the working of test
name|NameNode
operator|.
name|format
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

