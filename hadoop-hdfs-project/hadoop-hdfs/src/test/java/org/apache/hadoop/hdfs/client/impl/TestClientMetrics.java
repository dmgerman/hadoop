begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the FileStatus API.  */
end_comment

begin_class
DECL|class|TestClientMetrics
specifier|public
class|class
name|TestClientMetrics
block|{
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|ProtobufRpcEngine
operator|.
name|LOG
parameter_list|,
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
operator|.
name|DEBUG
parameter_list|)
constructor_decl|;
block|}
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|8192
decl_stmt|;
DECL|field|FILESIZE
specifier|private
specifier|static
specifier|final
name|int
name|FILESIZE
init|=
literal|16384
decl_stmt|;
DECL|field|RPC_DETAILED_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|RPC_DETAILED_METRICS
init|=
literal|"RpcDetailedActivityForPort"
decl_stmt|;
comment|/** Dummy port -1 is used by the client. */
DECL|field|portNum
specifier|private
specifier|final
name|int
name|portNum
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fc
specifier|private
specifier|static
name|FileContext
name|fc
decl_stmt|;
DECL|field|dfsClient
specifier|private
specifier|static
name|DFSClient
name|dfsClient
decl_stmt|;
DECL|field|file1
specifier|private
specifier|static
name|Path
name|file1
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|testSetUp ()
specifier|public
specifier|static
name|void
name|testSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LIST_LIMIT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfsClient
operator|=
operator|new
name|DFSClient
argument_list|(
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|file1
operator|=
operator|new
name|Path
argument_list|(
literal|"filestatus.dat"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|FILESIZE
argument_list|,
name|FILESIZE
argument_list|,
name|BLOCKSIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|testTearDown ()
specifier|public
specifier|static
name|void
name|testTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test for getting the metrics on the client. */
annotation|@
name|Test
DECL|method|testGetMetrics ()
specifier|public
name|void
name|testGetMetrics
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|log
argument_list|)
decl_stmt|;
comment|/** Check that / exists */
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertNotErasureCoded
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|/** Make sure getFileInfo returns null for files which do not exist */
name|HdfsFileStatus
name|fileInfo
init|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
literal|"/noSuchFile"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-existant file should result in null"
argument_list|,
literal|null
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/name1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/name1/name2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|metricsName
init|=
name|RPC_DETAILED_METRICS
operator|+
name|portNum
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileInfo
operator|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|path1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fileInfo
operator|.
name|getChildrenNum
argument_list|()
argument_list|)
expr_stmt|;
name|fileInfo
operator|=
name|dfsClient
operator|.
name|getFileInfo
argument_list|(
name|path2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileInfo
operator|.
name|getChildrenNum
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|logCapturer
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected output in: "
operator|+
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"MkdirsNumOps = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected output in: "
operator|+
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"CreateNumOps = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected output in: "
operator|+
name|output
argument_list|,
name|output
operator|.
name|contains
argument_list|(
literal|"GetFileInfoNumOps = 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"CreateNumOps"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|metricsName
argument_list|)
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"MkdirsNumOps"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|metricsName
argument_list|)
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"GetFileInfoNumOps"
argument_list|,
literal|5L
argument_list|,
name|getMetrics
argument_list|(
name|metricsName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

