begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test a few more conditions not covered by TestDatasetVolumeChecker.  */
end_comment

begin_class
DECL|class|TestDatasetVolumeCheckerFailures
specifier|public
class|class
name|TestDatasetVolumeCheckerFailures
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDatasetVolumeCheckerFailures
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|timer
specifier|private
name|FakeTimer
name|timer
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|MIN_DISK_CHECK_GAP_MS
specifier|private
specifier|static
specifier|final
name|long
name|MIN_DISK_CHECK_GAP_MS
init|=
literal|1000
decl_stmt|;
comment|// 1 second.
annotation|@
name|Before
DECL|method|commonInit ()
specifier|public
name|void
name|commonInit
parameter_list|()
block|{
name|timer
operator|=
operator|new
name|FakeTimer
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_KEY
argument_list|,
name|MIN_DISK_CHECK_GAP_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test timeout in {@link DatasetVolumeChecker#checkAllVolumes}.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTimeout ()
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a volume whose check routine hangs forever.
specifier|final
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|makeHungVolume
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|FsVolumeSpi
argument_list|>
name|dataset
init|=
name|TestDatasetVolumeChecker
operator|.
name|makeDataset
argument_list|(
name|volumes
argument_list|)
decl_stmt|;
comment|// Create a disk checker with a very low timeout.
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
specifier|final
name|DatasetVolumeChecker
name|checker
init|=
operator|new
name|DatasetVolumeChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure that the hung volume is detected as failed.
name|Set
argument_list|<
name|FsVolumeSpi
argument_list|>
name|failedVolumes
init|=
name|checker
operator|.
name|checkAllVolumes
argument_list|(
name|dataset
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|failedVolumes
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test checking a closed volume i.e. one which cannot be referenced.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCheckingClosedVolume ()
specifier|public
name|void
name|testCheckingClosedVolume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a volume that cannot be referenced.
specifier|final
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|makeClosedVolume
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|FsVolumeSpi
argument_list|>
name|dataset
init|=
name|TestDatasetVolumeChecker
operator|.
name|makeDataset
argument_list|(
name|volumes
argument_list|)
decl_stmt|;
name|DatasetVolumeChecker
name|checker
init|=
operator|new
name|DatasetVolumeChecker
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|FsVolumeSpi
argument_list|>
name|failedVolumes
init|=
name|checker
operator|.
name|checkAllVolumes
argument_list|(
name|dataset
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|failedVolumes
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSyncDatasetChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// The closed volume should not have been checked as it cannot
comment|// be referenced.
name|verify
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|check
argument_list|(
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMinGapIsEnforcedForSyncChecks ()
specifier|public
name|void
name|testMinGapIsEnforcedForSyncChecks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|TestDatasetVolumeChecker
operator|.
name|makeVolumes
argument_list|(
literal|1
argument_list|,
name|VolumeCheckResult
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|FsVolumeSpi
argument_list|>
name|dataset
init|=
name|TestDatasetVolumeChecker
operator|.
name|makeDataset
argument_list|(
name|volumes
argument_list|)
decl_stmt|;
specifier|final
name|DatasetVolumeChecker
name|checker
init|=
operator|new
name|DatasetVolumeChecker
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|checker
operator|.
name|checkAllVolumes
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSyncDatasetChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-check without advancing the timer. Ensure the check is skipped.
name|checker
operator|.
name|checkAllVolumes
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSyncDatasetChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSkippedChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-check after advancing the timer. Ensure the check is performed.
name|timer
operator|.
name|advance
argument_list|(
name|MIN_DISK_CHECK_GAP_MS
argument_list|)
expr_stmt|;
name|checker
operator|.
name|checkAllVolumes
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSyncDatasetChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checker
operator|.
name|getNumSkippedChecks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a mock FsVolumeSpi whose {@link FsVolumeSpi#check} routine    * hangs forever.    *    * @return volume    * @throws Exception    */
DECL|method|makeHungVolume ()
specifier|private
specifier|static
name|FsVolumeSpi
name|makeHungVolume
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FsVolumeSpi
name|volume
init|=
name|mock
argument_list|(
name|FsVolumeSpi
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|FsVolumeReference
name|reference
init|=
name|mock
argument_list|(
name|FsVolumeReference
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StorageLocation
name|location
init|=
name|mock
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reference
operator|.
name|getVolume
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|obtainReference
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|check
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VolumeCheckResult
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// Sleep forever.
return|return
name|VolumeCheckResult
operator|.
name|HEALTHY
return|;
comment|// unreachable.
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
comment|/**    * Create a mock FsVolumeSpi which is closed and hence cannot    * be referenced.    *    * @return volume    * @throws Exception    */
DECL|method|makeClosedVolume ()
specifier|private
specifier|static
name|FsVolumeSpi
name|makeClosedVolume
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FsVolumeSpi
name|volume
init|=
name|mock
argument_list|(
name|FsVolumeSpi
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StorageLocation
name|location
init|=
name|mock
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|obtainReference
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ClosedChannelException
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
block|}
end_class

end_unit

