begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests the FileStatus API.  */
end_comment

begin_class
DECL|class|TestListFilesInFileContext
specifier|public
class|class
name|TestListFilesInFileContext
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|FileSystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|conf
specifier|final
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fc
specifier|private
specifier|static
name|FileContext
name|fc
decl_stmt|;
DECL|field|TEST_DIR
specifier|final
specifier|private
specifier|static
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"/main_"
argument_list|)
decl_stmt|;
DECL|field|FILE_LEN
specifier|final
specifier|private
specifier|static
name|int
name|FILE_LEN
init|=
literal|10
decl_stmt|;
DECL|field|FILE1
specifier|final
specifier|private
specifier|static
name|Path
name|FILE1
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|DIR1
specifier|final
specifier|private
specifier|static
name|Path
name|DIR1
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
DECL|field|FILE2
specifier|final
specifier|private
specifier|static
name|Path
name|FILE2
init|=
operator|new
name|Path
argument_list|(
name|DIR1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
DECL|field|FILE3
specifier|final
specifier|private
specifier|static
name|Path
name|FILE3
init|=
operator|new
name|Path
argument_list|(
name|DIR1
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|testSetUp ()
specifier|public
specifier|static
name|void
name|testSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileContext fc, Path name, int fileSize)
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create and write a file that contains three blocks of data
name|FSDataOutputStream
name|stm
init|=
name|fc
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|testShutdown ()
specifier|public
specifier|static
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** Test when input path is a file */
annotation|@
name|Test
DECL|method|testFile ()
specifier|public
name|void
name|testFile
parameter_list|()
throws|throws
name|IOException
block|{
name|fc
operator|.
name|mkdir
argument_list|(
name|TEST_DIR
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE1
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|itor
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|FILE1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LocatedFileStatus
name|stat
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_LEN
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stat
operator|.
name|getBlockLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|FILE1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_LEN
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stat
operator|.
name|getBlockLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanDir ()
specifier|public
name|void
name|cleanDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fc
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Test when input path is a directory */
annotation|@
name|Test
DECL|method|testDirectory ()
specifier|public
name|void
name|testDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|fc
operator|.
name|mkdir
argument_list|(
name|DIR1
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test empty directory
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|itor
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|DIR1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|DIR1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// testing directory with 1 file
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE2
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|DIR1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocatedFileStatus
name|stat
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_LEN
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE2
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stat
operator|.
name|getBlockLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|DIR1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_LEN
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE2
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stat
operator|.
name|getBlockLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test more complicated directory
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE1
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE3
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE2
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE3
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|TEST_DIR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test when input patch has a symbolic links as its children */
annotation|@
name|Test
DECL|method|testSymbolicLinks ()
specifier|public
name|void
name|testSymbolicLinks
parameter_list|()
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE1
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE2
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fc
argument_list|,
name|FILE3
argument_list|,
name|FILE_LEN
argument_list|)
expr_stmt|;
name|Path
name|dir4
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"dir4"
argument_list|)
decl_stmt|;
name|Path
name|dir5
init|=
operator|new
name|Path
argument_list|(
name|dir4
argument_list|,
literal|"dir5"
argument_list|)
decl_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|dir4
argument_list|,
literal|"file4"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|DIR1
argument_list|,
name|dir5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|FILE1
argument_list|,
name|file4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|itor
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|dir4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LocatedFileStatus
name|stat
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE2
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE3
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|itor
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listFiles
argument_list|(
name|dir4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stat
operator|=
name|itor
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fc
operator|.
name|makeQualified
argument_list|(
name|FILE1
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

