begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** This is a comprehensive append test that tries  * all combinations of file length and number of appended bytes  * In each iteration, it creates a file of len1. Then reopen  * the file for append. It first append len2 bytes, calls hflush,  * append len3 bytes and close the file. Afterwards, the content of  * the file is validated.  * Len1 ranges from [0, 2*BLOCK_SIZE+1], len2 ranges from [0, BLOCK_SIZE+1],  * and len3 ranges from [0, BLOCK_SIZE+1].  *  */
end_comment

begin_class
DECL|class|FileAppendTest4
specifier|public
class|class
name|FileAppendTest4
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileAppendTest4
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BYTES_PER_CHECKSUM
specifier|private
specifier|static
specifier|final
name|int
name|BYTES_PER_CHECKSUM
init|=
literal|4
decl_stmt|;
DECL|field|PACKET_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PACKET_SIZE
init|=
name|BYTES_PER_CHECKSUM
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|2
operator|*
name|PACKET_SIZE
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|DATANODE_NUM
specifier|private
specifier|static
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|5
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|method|init (Configuration conf)
specifier|private
specifier|static
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|BYTES_PER_CHECKSUM
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|PACKET_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|startUp ()
specifier|public
specifier|static
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Comprehensive test for append     * @throws IOException an exception might be thrown    */
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxOldFileLen
init|=
literal|2
operator|*
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|maxFlushedBytes
init|=
name|BLOCK_SIZE
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|maxOldFileLen
operator|+
literal|2
operator|*
name|maxFlushedBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|oldFileLen
init|=
literal|0
init|;
name|oldFileLen
operator|<=
name|maxOldFileLen
condition|;
name|oldFileLen
operator|++
control|)
block|{
for|for
control|(
name|int
name|flushedBytes1
init|=
literal|0
init|;
name|flushedBytes1
operator|<=
name|maxFlushedBytes
condition|;
name|flushedBytes1
operator|++
control|)
block|{
for|for
control|(
name|int
name|flushedBytes2
init|=
literal|0
init|;
name|flushedBytes2
operator|<=
name|maxFlushedBytes
condition|;
name|flushedBytes2
operator|++
control|)
block|{
specifier|final
name|int
name|fileLen
init|=
name|oldFileLen
operator|+
name|flushedBytes1
operator|+
name|flushedBytes2
decl_stmt|;
comment|// create the initial file of oldFileLen
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"foo"
operator|+
name|oldFileLen
operator|+
literal|"_"
operator|+
name|flushedBytes1
operator|+
literal|"_"
operator|+
name|flushedBytes2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating file "
operator|+
name|p
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|REPLICATION
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
literal|0
argument_list|,
name|oldFileLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// append flushedBytes bytes to the file
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
name|oldFileLen
argument_list|,
name|flushedBytes1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// write another flushedBytes2 bytes to the file
name|out
operator|.
name|write
argument_list|(
name|contents
argument_list|,
name|oldFileLen
operator|+
name|flushedBytes1
argument_list|,
name|flushedBytes2
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// validate the file content
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|fileLen
argument_list|,
name|contents
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

