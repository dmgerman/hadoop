begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|TestWriteStripedFileWithFailure
specifier|public
class|class
name|TestWriteStripedFileWithFailure
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWriteStripedFileWithFailure
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DFSOutputStream
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|DataStreamer
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
DECL|field|dataBlocks
specifier|private
specifier|final
name|short
name|dataBlocks
init|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|parityBlocks
specifier|private
specifier|final
name|short
name|parityBlocks
init|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|numDNs
specifier|private
specifier|final
name|int
name|numDNs
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
init|=
literal|4
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|smallFileLength
specifier|private
specifier|final
name|int
name|smallFileLength
init|=
name|blockSize
operator|*
name|dataBlocks
operator|-
literal|123
decl_stmt|;
DECL|field|largeFileLength
specifier|private
specifier|final
name|int
name|largeFileLength
init|=
name|blockSize
operator|*
name|dataBlocks
operator|+
literal|123
decl_stmt|;
DECL|field|fileLengths
specifier|private
specifier|final
name|int
index|[]
name|fileLengths
init|=
block|{
name|smallFileLength
block|,
name|largeFileLength
block|}
decl_stmt|;
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/"
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test writing file with some Datanodes failure
comment|// TODO: enable this test after HDFS-8704 and HDFS-9040
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWriteStripedFileWithDNFailure ()
specifier|public
name|void
name|testWriteStripedFileWithDNFailure
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|fileLength
range|:
name|fileLengths
control|)
block|{
for|for
control|(
name|int
name|dataDelNum
init|=
literal|1
init|;
name|dataDelNum
operator|<=
name|parityBlocks
condition|;
name|dataDelNum
operator|++
control|)
block|{
for|for
control|(
name|int
name|parityDelNum
init|=
literal|0
init|;
operator|(
name|dataDelNum
operator|+
name|parityDelNum
operator|)
operator|<=
name|parityBlocks
condition|;
name|parityDelNum
operator|++
control|)
block|{
try|try
block|{
comment|// setup a new cluster with no dead datanode
name|setup
argument_list|()
expr_stmt|;
name|writeFileWithDNFailure
argument_list|(
name|fileLength
argument_list|,
name|dataDelNum
argument_list|,
name|parityDelNum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|fileType
init|=
name|fileLength
operator|<
operator|(
name|blockSize
operator|*
name|dataBlocks
operator|)
condition|?
literal|"smallFile"
else|:
literal|"largeFile"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to write file with DN failure:"
operator|+
literal|" fileType = "
operator|+
name|fileType
operator|+
literal|", dataDelNum = "
operator|+
name|dataDelNum
operator|+
literal|", parityDelNum = "
operator|+
name|parityDelNum
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
comment|// tear down the cluster
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Test writing a file with shutting down some DNs(data DNs or parity DNs or both).    * @param fileLength file length    * @param dataDNFailureNum the shutdown number of data DNs    * @param parityDNFailureNum the shutdown number of parity DNs    * @throws IOException    */
DECL|method|writeFileWithDNFailure (int fileLength, int dataDNFailureNum, int parityDNFailureNum)
specifier|private
name|void
name|writeFileWithDNFailure
parameter_list|(
name|int
name|fileLength
parameter_list|,
name|int
name|dataDNFailureNum
parameter_list|,
name|int
name|parityDNFailureNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileType
init|=
name|fileLength
operator|<
operator|(
name|blockSize
operator|*
name|dataBlocks
operator|)
condition|?
literal|"smallFile"
else|:
literal|"largeFile"
decl_stmt|;
name|String
name|src
init|=
literal|"/dnFailure_"
operator|+
name|dataDNFailureNum
operator|+
literal|"_"
operator|+
name|parityDNFailureNum
operator|+
literal|"_"
operator|+
name|fileType
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"writeFileWithDNFailure: file = "
operator|+
name|src
operator|+
literal|", fileType = "
operator|+
name|fileType
operator|+
literal|", dataDNFailureNum = "
operator|+
name|dataDNFailureNum
operator|+
literal|", parityDNFailureNum = "
operator|+
name|parityDNFailureNum
argument_list|)
expr_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|pos
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
specifier|final
name|DFSStripedOutputStream
name|stripedOut
init|=
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|int
index|[]
name|dataDNFailureIndices
init|=
name|StripedFileTestUtil
operator|.
name|randomArray
argument_list|(
literal|0
argument_list|,
name|dataBlocks
argument_list|,
name|dataDNFailureNum
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dataDNFailureIndices
argument_list|)
expr_stmt|;
name|int
index|[]
name|parityDNFailureIndices
init|=
name|StripedFileTestUtil
operator|.
name|randomArray
argument_list|(
name|dataBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|,
name|parityDNFailureNum
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|parityDNFailureIndices
argument_list|)
expr_stmt|;
name|int
index|[]
name|failedDataNodes
init|=
operator|new
name|int
index|[
name|dataDNFailureNum
operator|+
name|parityDNFailureNum
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|dataDNFailureIndices
argument_list|,
literal|0
argument_list|,
name|failedDataNodes
argument_list|,
literal|0
argument_list|,
name|dataDNFailureIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parityDNFailureIndices
argument_list|,
literal|0
argument_list|,
name|failedDataNodes
argument_list|,
name|dataDNFailureIndices
operator|.
name|length
argument_list|,
name|parityDNFailureIndices
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|int
name|killPos
init|=
name|fileLength
operator|/
literal|2
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|.
name|get
argument_list|()
operator|<
name|fileLength
condition|;
control|)
block|{
specifier|final
name|int
name|i
init|=
name|pos
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|killPos
condition|)
block|{
for|for
control|(
name|int
name|failedDn
range|:
name|failedDataNodes
control|)
block|{
name|StripedFileTestUtil
operator|.
name|killDatanode
argument_list|(
name|cluster
argument_list|,
name|stripedOut
argument_list|,
name|failedDn
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|write
argument_list|(
name|out
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure the expected number of Datanode have been killed
name|int
name|dnFailureNum
init|=
name|dataDNFailureNum
operator|+
name|parityDNFailureNum
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numDNs
operator|-
name|dnFailureNum
argument_list|)
expr_stmt|;
name|byte
index|[]
name|smallBuf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|byte
index|[]
name|largeBuf
init|=
operator|new
name|byte
index|[
name|fileLength
operator|+
literal|100
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyLength
argument_list|(
name|fs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifySeek
argument_list|(
name|fs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|,
name|ecPolicy
argument_list|,
name|blockSize
operator|*
name|dataBlocks
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyStatefulRead
argument_list|(
name|fs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|,
name|expected
argument_list|,
name|smallBuf
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|verifyPread
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|,
name|srcPath
argument_list|,
name|fileLength
argument_list|,
name|expected
argument_list|,
name|largeBuf
argument_list|)
expr_stmt|;
comment|// delete the file
name|fs
operator|.
name|delete
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|write (FSDataOutputStream out, int i)
name|void
name|write
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|StripedFileTestUtil
operator|.
name|getByte
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed at i="
operator|+
name|i
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

