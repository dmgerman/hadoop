begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test StoragePolicyAdmin commands with ViewFileSystem.  */
end_comment

begin_class
DECL|class|TestViewFSStoragePolicyCommands
specifier|public
class|class
name|TestViewFSStoragePolicyCommands
extends|extends
name|TestStoragePolicyCommands
block|{
annotation|@
name|Before
DECL|method|clusterSetUp ()
specifier|public
name|void
name|clusterSetUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|String
name|clusterName
init|=
literal|"cluster"
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|hdfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
operator|+
literal|"://"
operator|+
name|clusterName
argument_list|)
expr_stmt|;
name|Path
name|base1
init|=
operator|new
name|Path
argument_list|(
literal|"/user1"
argument_list|)
decl_stmt|;
name|Path
name|base2
init|=
operator|new
name|Path
argument_list|(
literal|"/user2"
argument_list|)
decl_stmt|;
name|hdfs1
operator|.
name|delete
argument_list|(
name|base1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|delete
argument_list|(
name|base2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs1
operator|.
name|mkdirs
argument_list|(
name|base1
argument_list|)
expr_stmt|;
name|hdfs2
operator|.
name|mkdirs
argument_list|(
name|base2
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
name|clusterName
argument_list|,
literal|"/foo"
argument_list|,
name|hdfs1
operator|.
name|makeQualified
argument_list|(
name|base1
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
name|clusterName
argument_list|,
literal|"/hdfs2"
argument_list|,
name|hdfs2
operator|.
name|makeQualified
argument_list|(
name|base2
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Storage policy operation on the viewfs root should fail.    */
annotation|@
name|Test
DECL|method|testStoragePolicyRoot ()
specifier|public
name|void
name|testStoragePolicyRoot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|StoragePolicyAdmin
name|admin
init|=
operator|new
name|StoragePolicyAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|toolRun
argument_list|(
name|admin
argument_list|,
literal|"-getStoragePolicy -path /"
argument_list|,
literal|2
argument_list|,
literal|"is not supported for filesystem viewfs on path /"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

