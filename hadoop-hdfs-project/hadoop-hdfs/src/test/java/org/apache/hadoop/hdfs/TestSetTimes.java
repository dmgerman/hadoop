begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This class tests the access time on files.  *  */
end_comment

begin_class
DECL|class|TestSetTimes
specifier|public
class|class
name|TestSetTimes
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
literal|16384
decl_stmt|;
DECL|field|numDatanodes
specifier|static
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
DECL|field|dateForm
specifier|static
specifier|final
name|SimpleDateFormat
name|dateForm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|myrand
name|Random
name|myrand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|hostsFile
name|Path
name|hostsFile
decl_stmt|;
DECL|field|excludeFile
name|Path
name|excludeFile
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|FSDataOutputStream
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
name|stm
return|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|printDatanodeReport (DatanodeInfo[] info)
specifier|private
name|void
name|printDatanodeReport
parameter_list|(
name|DatanodeInfo
index|[]
name|info
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-------------------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|info
index|[
name|i
index|]
operator|.
name|getDatanodeReport
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests mod& access time in DFS.    */
annotation|@
name|Test
DECL|method|testTimes ()
specifier|public
name|void
name|testTimes
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_IDLE_TIME
init|=
literal|2000
decl_stmt|;
comment|// 2s
name|conf
operator|.
name|setInt
argument_list|(
literal|"ipc.client.connection.maxidletime"
argument_list|,
name|MAX_IDLE_TIME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|int
name|nnport
init|=
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|replicas
init|=
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
try|try
block|{
comment|//
comment|// create file and record atime/mtime
comment|//
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating testdir1 and testdir1/test1.dat."
argument_list|)
expr_stmt|;
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"testdir1"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"test1.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|long
name|atimeBeforeClose
init|=
name|stat
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|String
name|adate
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|atimeBeforeClose
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"atime on "
operator|+
name|file1
operator|+
literal|" before close is "
operator|+
name|adate
operator|+
literal|" ("
operator|+
name|atimeBeforeClose
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atimeBeforeClose
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|long
name|atime1
init|=
name|stat
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|mtime1
init|=
name|stat
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|adate
operator|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|atime1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mdate
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|mtime1
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"atime on "
operator|+
name|file1
operator|+
literal|" is "
operator|+
name|adate
operator|+
literal|" ("
operator|+
name|atime1
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mtime on "
operator|+
name|file1
operator|+
literal|" is "
operator|+
name|mdate
operator|+
literal|" ("
operator|+
name|mtime1
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atime1
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|//
comment|// record dir times
comment|//
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|long
name|mdir1
init|=
name|stat
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mdir1
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// set the access time to be one day in the past
name|long
name|atime2
init|=
name|atime1
operator|-
operator|(
literal|24L
operator|*
literal|3600L
operator|*
literal|1000L
operator|)
decl_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|file1
argument_list|,
operator|-
literal|1
argument_list|,
name|atime2
argument_list|)
expr_stmt|;
comment|// check new access time on file
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|long
name|atime3
init|=
name|stat
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|String
name|adate3
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|atime3
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"new atime on "
operator|+
name|file1
operator|+
literal|" is "
operator|+
name|adate3
operator|+
literal|" ("
operator|+
name|atime3
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atime2
operator|==
name|atime3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtime1
operator|==
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the modification time to be 1 hour in the past
name|long
name|mtime2
init|=
name|mtime1
operator|-
operator|(
literal|3600L
operator|*
literal|1000L
operator|)
decl_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|file1
argument_list|,
name|mtime2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check new modification time on file
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|long
name|mtime3
init|=
name|stat
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|String
name|mdate3
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|mtime3
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"new mtime on "
operator|+
name|file1
operator|+
literal|" is "
operator|+
name|mdate3
operator|+
literal|" ("
operator|+
name|mtime3
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atime2
operator|==
name|stat
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtime2
operator|==
name|mtime3
argument_list|)
expr_stmt|;
name|long
name|mtime4
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
operator|(
literal|3600L
operator|*
literal|1000L
operator|)
decl_stmt|;
name|long
name|atime4
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|dir1
argument_list|,
name|mtime4
argument_list|,
name|atime4
argument_list|)
expr_stmt|;
comment|// check new modification time on file
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not matching the modification times"
argument_list|,
name|mtime4
operator|==
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not matching the access times"
argument_list|,
name|atime4
operator|==
name|stat
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|nonExistingDir
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"/nonExistingDir/"
argument_list|)
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|setTimes
argument_list|(
name|nonExistingDir
argument_list|,
name|mtime4
argument_list|,
name|atime4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"File/Directory "
operator|+
name|nonExistingDir
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shutdown cluster and restart
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|MAX_IDLE_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|nnport
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// verify that access times and modification times persist after a
comment|// cluster restart.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying times after cluster restart"
argument_list|)
expr_stmt|;
name|stat
operator|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|atime2
operator|==
name|stat
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtime3
operator|==
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|info
operator|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|printDatanodeReport
argument_list|(
name|info
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests mod time change at close in DFS.    */
annotation|@
name|Test
DECL|method|testTimesAtClose ()
specifier|public
name|void
name|testTimesAtClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_IDLE_TIME
init|=
literal|2000
decl_stmt|;
comment|// 2s
name|int
name|replicas
init|=
literal|1
decl_stmt|;
comment|// parameter initialization
name|conf
operator|.
name|setInt
argument_list|(
literal|"ipc.client.connection.maxidletime"
argument_list|,
name|MAX_IDLE_TIME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HANDLER_COUNT_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Datanodes "
argument_list|,
name|numDatanodes
argument_list|,
name|info
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
try|try
block|{
comment|// create a new file and write to it
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/simple.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created and wrote file simple.dat"
argument_list|)
expr_stmt|;
name|FileStatus
name|statBeforeClose
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|long
name|mtimeBeforeClose
init|=
name|statBeforeClose
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|String
name|mdateBeforeClose
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|mtimeBeforeClose
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mtime on "
operator|+
name|file1
operator|+
literal|" before close is "
operator|+
name|mdateBeforeClose
operator|+
literal|" ("
operator|+
name|mtimeBeforeClose
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtimeBeforeClose
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|//close file after writing
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closed file."
argument_list|)
expr_stmt|;
name|FileStatus
name|statAfterClose
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|long
name|mtimeAfterClose
init|=
name|statAfterClose
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|String
name|mdateAfterClose
init|=
name|dateForm
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|mtimeAfterClose
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mtime on "
operator|+
name|file1
operator|+
literal|" after close is "
operator|+
name|mdateAfterClose
operator|+
literal|" ("
operator|+
name|mtimeAfterClose
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtimeAfterClose
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mtimeBeforeClose
operator|!=
name|mtimeAfterClose
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|info
operator|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|printDatanodeReport
argument_list|(
name|info
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that when access time updates are not needed, the FSNamesystem    * write lock is not taken by getBlockLocations.    * Regression test for HDFS-3981.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetBlockLocationsOnlyUsesReadLock ()
specifier|public
name|void
name|testGetBlockLocationsOnlyUsesReadLock
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ReentrantReadWriteLock
name|spyLock
init|=
name|NameNodeAdapter
operator|.
name|spyOnFsLock
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create empty file in the FSN.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/empty-file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// getBlockLocations() should not need the write lock, since we just created
comment|// the file (and thus its access time is already within the 100-second
comment|// accesstime precision configured above).
name|MockitoUtil
operator|.
name|doThrowWhenCallStackMatches
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"Should not need write lock"
argument_list|)
argument_list|,
literal|".*getBlockLocations.*"
argument_list|)
operator|.
name|when
argument_list|(
name|spyLock
argument_list|)
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileBlockLocations
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test whether atime can be set explicitly even when the atime support is    * disabled.    */
annotation|@
name|Test
DECL|method|testAtimeUpdate ()
specifier|public
name|void
name|testAtimeUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Create an empty file
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testAtimeUpdate"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|p
argument_list|,
operator|-
literal|1L
argument_list|,
literal|123456L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123456L
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestSetTimes
argument_list|()
operator|.
name|testTimes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

