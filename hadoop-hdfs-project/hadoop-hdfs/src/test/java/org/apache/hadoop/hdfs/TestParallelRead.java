begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestParallelRead
specifier|public
class|class
name|TestParallelRead
extends|extends
name|TestParallelReadUtil
block|{
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|static
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|(
name|DEFAULT_REPLICATION_FACTOR
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownCluster ()
specifier|static
specifier|public
name|void
name|teardownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|TestParallelReadUtil
operator|.
name|teardownCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Do parallel read several times with different number of files and threads.    *    * Note that while this is the only "test" in a junit sense, we're actually    * dispatching a lot more. Failures in the other methods (and other threads)    * need to be manually collected, which is inconvenient.    */
annotation|@
name|Test
DECL|method|testParallelReadCopying ()
specifier|public
name|void
name|testParallelReadCopying
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestWorkload
argument_list|(
operator|new
name|CopyingReadWorkerHelper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReadByteBuffer ()
specifier|public
name|void
name|testParallelReadByteBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestWorkload
argument_list|(
operator|new
name|DirectReadWorkerHelper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReadMixed ()
specifier|public
name|void
name|testParallelReadMixed
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestWorkload
argument_list|(
operator|new
name|MixedWorkloadHelper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelNoChecksums ()
specifier|public
name|void
name|testParallelNoChecksums
parameter_list|()
throws|throws
name|IOException
block|{
name|verifyChecksums
operator|=
literal|false
expr_stmt|;
name|runTestWorkload
argument_list|(
operator|new
name|MixedWorkloadHelper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

