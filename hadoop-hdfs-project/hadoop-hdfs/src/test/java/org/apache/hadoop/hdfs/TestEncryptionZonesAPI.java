begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestEncryptionZonesAPI
specifier|public
class|class
name|TestEncryptionZonesAPI
block|{
DECL|field|TEST_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
DECL|field|TEST_PATH_WITH_CHILD
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH_WITH_CHILD
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
DECL|field|TEST_PATH_WITH_MULTIPLE_CHILDREN
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_PATH_WITH_MULTIPLE_CHILDREN
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH_WITH_CHILD
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
DECL|field|TEST_KEYID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEYID
init|=
literal|"mykeyid"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|tmpDir
specifier|private
specifier|static
name|File
name|tmpDir
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpCluster ()
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|tmpDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target"
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|tmpDir
operator|+
literal|"/test.jks"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|createFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileSystem (Configuration conf)
specifier|protected
name|FileSystem
name|createFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test failure of Create EZ on a directory that doesn't exist. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneDirectoryDoesntExist ()
specifier|public
name|void
name|testCreateEncryptionZoneDirectoryDoesntExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected /test doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cannot find"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test failure of Create EZ on a directory which is already an EZ. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneWhichAlreadyExists ()
specifier|public
name|void
name|testCreateEncryptionZoneWhichAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"already in an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test success of Create EZ in which a key is created. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneAndGenerateKeyDirectoryEmpty ()
specifier|public
name|void
name|testCreateEncryptionZoneAndGenerateKeyDirectoryEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Test failure of Create EZ operation in an existing EZ. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneInExistingEncryptionZone ()
specifier|public
name|void
name|testCreateEncryptionZoneInExistingEncryptionZone
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_CHILD
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH_WITH_CHILD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EZ in an EZ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"already in an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test failure of creating an EZ using a non-empty directory. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneAndGenerateKeyDirectoryNotEmpty ()
specifier|public
name|void
name|testCreateEncryptionZoneAndGenerateKeyDirectoryNotEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected key doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test failure of creating an EZ passing a key that doesn't exist. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneKeyDoesntExist ()
specifier|public
name|void
name|testCreateEncryptionZoneKeyDoesntExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
name|TEST_KEYID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected key doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"doesn't exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|,
literal|"More than one zone found?"
argument_list|)
expr_stmt|;
block|}
comment|/** Test success of creating an EZ when they key exists. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateEncryptionZoneKeyExist ()
specifier|public
name|void
name|testCreateEncryptionZoneKeyExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|createAKey
argument_list|(
name|TEST_KEYID
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
name|TEST_KEYID
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"More than one zone found?"
argument_list|)
expr_stmt|;
specifier|final
name|EncryptionZone
name|ez
init|=
name|zones
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|ez
operator|.
name|toString
argument_list|()
argument_list|,
literal|"EncryptionZone \\[path=/test, keyId="
argument_list|)
expr_stmt|;
block|}
comment|/** Helper function to create a key in the Key Provider. */
DECL|method|createAKey (String keyId)
specifier|private
name|void
name|createAKey
parameter_list|(
name|String
name|keyId
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|KeyProvider
name|provider
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
decl_stmt|;
specifier|final
name|KeyProvider
operator|.
name|Options
name|options
init|=
name|KeyProvider
operator|.
name|options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createKey
argument_list|(
name|keyId
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/** Test failure of create/delete encryption zones as a non super user. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateAndDeleteEncryptionZoneAsNonSuperUser ()
specifier|public
name|void
name|testCreateAndDeleteEncryptionZoneAsNonSuperUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createEncryptionZone is superuser-only operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"deleteEncryptionZone is superuser-only operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Test failure of deleting an EZ passing a directory that doesn't exist. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDeleteEncryptionZoneDirectoryDoesntExist ()
specifier|public
name|void
name|testDeleteEncryptionZoneDirectoryDoesntExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Directory doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"is not the root of an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test failure of deleting an EZ which is not empty. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDeleteEncryptionZoneAndGenerateKeyDirectoryNotEmpty ()
specifier|public
name|void
name|testDeleteEncryptionZoneAndGenerateKeyDirectoryNotEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test/foo"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Directory not empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"non-empty directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test success of deleting an EZ. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDeleteEncryptionZone ()
specifier|public
name|void
name|testDeleteEncryptionZone
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"More than one zone found?"
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|zones
operator|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|,
literal|"More than one zone found?"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test failure of deleting an EZ on a subdir that is not the root of an EZ.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDeleteEncryptionZoneInExistingEncryptionZone ()
specifier|public
name|void
name|testDeleteEncryptionZoneInExistingEncryptionZone
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_CHILD
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH_WITH_CHILD
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EZ in an EZ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"is not the root of an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test success of creating and deleting an encryption zone a few levels down.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateAndDeleteEncryptionZoneDownAFewLevels ()
specifier|public
name|void
name|testCreateAndDeleteEncryptionZoneDownAFewLevels
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_MULTIPLE_CHILDREN
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|deleteEncryptionZone
argument_list|(
name|TEST_PATH_WITH_MULTIPLE_CHILDREN
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EZ in an EZ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"is not the root of an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"More than one zone found?"
argument_list|)
expr_stmt|;
specifier|final
name|EncryptionZone
name|ez
init|=
name|zones
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|ez
operator|.
name|toString
argument_list|()
argument_list|,
literal|"EncryptionZone \\[path=/test, keyId="
argument_list|)
expr_stmt|;
block|}
comment|/** Test failure of creating an EZ using a non-empty directory. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateFileInEncryptionZone ()
specifier|public
name|void
name|testCreateFileInEncryptionZone
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_CHILD
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
specifier|final
name|EncryptionZone
name|ez
init|=
name|zones
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertMatches
argument_list|(
name|ez
operator|.
name|toString
argument_list|()
argument_list|,
literal|"EncryptionZone \\[path=/test, keyId="
argument_list|)
expr_stmt|;
block|}
comment|/** Test listing encryption zones. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testListEncryptionZones ()
specifier|public
name|void
name|testListEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|N_EZs
init|=
literal|5
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ezPathNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|N_EZs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N_EZs
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|ezPathNames
operator|.
name|add
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|zones
operator|.
name|size
argument_list|()
operator|==
name|N_EZs
argument_list|,
literal|"wrong number of EZs returned"
argument_list|)
expr_stmt|;
for|for
control|(
name|EncryptionZone
name|z
range|:
name|zones
control|)
block|{
specifier|final
name|String
name|ezPathName
init|=
name|z
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ezPathNames
operator|.
name|remove
argument_list|(
name|ezPathName
argument_list|)
argument_list|,
literal|"Path "
operator|+
name|ezPathName
operator|+
literal|" not returned from listEZ"
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ezPathNames
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** Test listing encryption zones as a non super user. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testListEncryptionZonesAsNonSuperUser ()
specifier|public
name|void
name|testListEncryptionZonesAsNonSuperUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH_SUPERUSER_ONLY
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|"superuseronly"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH_ALL
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
literal|"accessall"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_SUPERUSER_ONLY
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH_SUPERUSER_ONLY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_ALL
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0707
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH_ALL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|userAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** Test success of Rename EZ on a directory which is already an EZ. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRenameEncryptionZone ()
specifier|public
name|void
name|testRenameEncryptionZone
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_CHILD
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|TEST_PATH_WITH_CHILD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|TEST_PATH_WITH_MULTIPLE_CHILDREN
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|TEST_PATH_WITH_MULTIPLE_CHILDREN
argument_list|,
name|TEST_PATH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"/test/foo/baz can't be moved from an encryption zone."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCipherSuiteNegotiation ()
specifier|public
name|void
name|testCipherSuiteNegotiation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Create a file in an EZ, which should succeed
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Pass no cipherSuites, fail
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a CipherSuite!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCipherSuiteException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No cipher suites"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown cipherSuites, fail
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a CipherSuite!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCipherSuiteException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No cipher suites"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown and a good cipherSuites, success
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success3"
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Check that the specified CipherSuite was correctly saved on the NN
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlocks
name|blocks
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
operator|+
literal|"/success2"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FileEncryptionInfo
name|feInfo
init|=
name|blocks
operator|.
name|getFileEncryptionInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|feInfo
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
comment|// TODO: validate against actual key/iv in HDFS-6474
name|byte
index|[]
name|key
init|=
name|feInfo
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|key
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected key byte"
argument_list|,
operator|(
name|byte
operator|)
name|j
argument_list|,
name|key
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|iv
init|=
name|feInfo
operator|.
name|getIV
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iv
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected IV byte"
argument_list|,
call|(
name|byte
call|)
argument_list|(
literal|3
operator|+
name|j
operator|*
literal|2
argument_list|)
argument_list|,
name|iv
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

