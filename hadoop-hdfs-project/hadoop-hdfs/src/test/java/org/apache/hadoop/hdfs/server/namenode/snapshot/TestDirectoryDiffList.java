begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|ChildrenDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|DirectoryDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class tests the DirectoryDiffList API's.  */
end_comment

begin_class
DECL|class|TestDirectoryDiffList
specifier|public
class|class
name|TestDirectoryDiffList
block|{
static|static
block|{
name|SnapshotTestHelper
operator|.
name|disableLogs
argument_list|()
expr_stmt|;
block|}
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|private
specifier|static
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsdir
specifier|private
specifier|static
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|assertList (List<INode> expected, List<INode> computed)
specifier|static
name|void
name|assertList
parameter_list|(
name|List
argument_list|<
name|INode
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|computed
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|computed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|computed
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyChildrenList (DirectoryDiffList skip, INodeDirectory dir)
specifier|static
name|void
name|verifyChildrenList
parameter_list|(
name|DirectoryDiffList
name|skip
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|skip
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|skip
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|expected
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|getChildrenList
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|computed
init|=
name|getChildrenList
argument_list|(
name|skip
argument_list|,
name|i
argument_list|,
name|n
argument_list|,
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|assertList
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"i = "
operator|+
name|i
operator|+
literal|"\ncomputed = "
operator|+
name|computed
operator|+
literal|"\nexpected = "
operator|+
name|expected
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|verifyChildrenList ( DiffList<DirectoryDiff> array, DirectoryDiffList skip, INodeDirectory dir, List<INode> childrenList)
specifier|static
name|void
name|verifyChildrenList
parameter_list|(
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|array
parameter_list|,
name|DirectoryDiffList
name|skip
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|childrenList
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|array
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n
argument_list|,
name|skip
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|n
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|expected
init|=
name|getCombined
argument_list|(
name|array
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|dir
argument_list|)
operator|.
name|apply2Previous
argument_list|(
name|childrenList
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|computed
init|=
name|getCombined
argument_list|(
name|skip
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|dir
argument_list|)
operator|.
name|apply2Previous
argument_list|(
name|childrenList
argument_list|)
decl_stmt|;
try|try
block|{
name|assertList
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"i = "
operator|+
name|i
operator|+
literal|", j = "
operator|+
name|j
operator|+
literal|"\ncomputed = "
operator|+
name|computed
operator|+
literal|"\nexpected = "
operator|+
name|expected
operator|+
literal|"\n"
operator|+
name|skip
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|getCombined ( DiffList<DirectoryDiff> list, int from, int to, INodeDirectory dir)
specifier|private
specifier|static
name|ChildrenDiff
name|getCombined
parameter_list|(
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|list
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|minList
init|=
name|list
operator|.
name|getMinListForRange
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|ChildrenDiff
name|combined
init|=
operator|new
name|ChildrenDiff
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|minList
control|)
block|{
name|combined
operator|.
name|combinePosterior
argument_list|(
name|d
operator|.
name|getChildrenDiff
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|combined
return|;
block|}
DECL|method|getChildrenList ( DiffList<DirectoryDiff> list, int from, int to, INodeDirectory dir)
specifier|static
name|List
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|list
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
specifier|final
name|ChildrenDiff
name|combined
init|=
name|getCombined
argument_list|(
name|list
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|dir
argument_list|)
decl_stmt|;
return|return
name|combined
operator|.
name|apply2Current
argument_list|(
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getChildPath (Path parent, int i)
specifier|static
name|Path
name|getChildPath
parameter_list|(
name|Path
name|parent
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"c"
operator|+
name|i
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testAddLast ()
specifier|public
name|void
name|testAddLast
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddLast
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddLast (int n)
specifier|static
name|void
name|testAddLast
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/testAddLast"
operator|+
name|n
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|child
init|=
name|getChildPath
argument_list|(
name|root
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|INodeDirectory
name|dir
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffs
init|=
name|dir
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
specifier|final
name|DirectoryDiffList
name|skipList
init|=
operator|new
name|DirectoryDiffList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|arrayList
init|=
operator|new
name|DiffListByArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|diffs
control|)
block|{
name|skipList
operator|.
name|addLast
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|arrayList
operator|.
name|addLast
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|// verify that the both the children list obtained from hdfs and
comment|// DirectoryDiffList are same
name|verifyChildrenList
argument_list|(
name|skipList
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|verifyChildrenList
argument_list|(
name|arrayList
argument_list|,
name|skipList
argument_list|,
name|dir
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFirst ()
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|testAddFirst
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddFirst (int n)
specifier|static
name|void
name|testAddFirst
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/testAddFirst"
operator|+
name|n
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|child
init|=
name|getChildPath
argument_list|(
name|root
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|INodeDirectory
name|dir
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|root
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|child
init|=
name|getChildPath
argument_list|(
name|root
argument_list|,
name|n
operator|-
name|i
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffs
init|=
name|dir
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|getChildrenList
argument_list|(
name|diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DirectoryDiffList
name|skipList
init|=
operator|new
name|DirectoryDiffList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|arrayList
init|=
operator|new
name|DiffListByArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|DirectoryDiff
name|d
init|=
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|skipList
operator|.
name|addFirst
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|arrayList
operator|.
name|addFirst
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|// verify that the both the children list obtained from hdfs and
comment|// DirectoryDiffList are same
name|verifyChildrenList
argument_list|(
name|skipList
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|verifyChildrenList
argument_list|(
name|arrayList
argument_list|,
name|skipList
argument_list|,
name|dir
argument_list|,
name|childrenList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

