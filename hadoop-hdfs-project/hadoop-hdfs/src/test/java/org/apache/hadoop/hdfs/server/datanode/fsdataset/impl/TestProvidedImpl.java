begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DirectoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ShortCircuitRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
operator|.
name|BlockIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Basic test cases for provided implementation.  */
end_comment

begin_class
DECL|class|TestProvidedImpl
specifier|public
class|class
name|TestProvidedImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFsDatasetImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
DECL|field|NUM_LOCAL_INIT_VOLUMES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_LOCAL_INIT_VOLUMES
init|=
literal|1
decl_stmt|;
DECL|field|NUM_PROVIDED_INIT_VOLUMES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PROVIDED_INIT_VOLUMES
init|=
literal|1
decl_stmt|;
DECL|field|BLOCK_POOL_IDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|BLOCK_POOL_IDS
init|=
block|{
literal|"bpid-0"
block|,
literal|"bpid-1"
block|}
decl_stmt|;
DECL|field|NUM_PROVIDED_BLKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_PROVIDED_BLKS
init|=
literal|10
decl_stmt|;
DECL|field|BLK_LEN
specifier|private
specifier|static
specifier|final
name|long
name|BLK_LEN
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
DECL|field|MIN_BLK_ID
specifier|private
specifier|static
specifier|final
name|int
name|MIN_BLK_ID
init|=
literal|0
decl_stmt|;
DECL|field|CHOSEN_BP_ID
specifier|private
specifier|static
specifier|final
name|int
name|CHOSEN_BP_ID
init|=
literal|0
decl_stmt|;
DECL|field|providedBasePath
specifier|private
specifier|static
name|String
name|providedBasePath
init|=
name|BASE_DIR
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|datanode
specifier|private
name|DataNode
name|datanode
decl_stmt|;
DECL|field|storage
specifier|private
name|DataStorage
name|storage
decl_stmt|;
DECL|field|dataset
specifier|private
name|FsDatasetImpl
name|dataset
decl_stmt|;
DECL|field|blkToPathMap
specifier|private
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|blkToPathMap
decl_stmt|;
DECL|field|providedVolumes
specifier|private
specifier|static
name|List
argument_list|<
name|FsVolumeImpl
argument_list|>
name|providedVolumes
decl_stmt|;
comment|/**    * A simple FileRegion iterator for tests.    */
DECL|class|TestFileRegionIterator
specifier|public
specifier|static
class|class
name|TestFileRegionIterator
implements|implements
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
block|{
DECL|field|numBlocks
specifier|private
name|int
name|numBlocks
decl_stmt|;
DECL|field|currentCount
specifier|private
name|int
name|currentCount
decl_stmt|;
DECL|field|basePath
specifier|private
name|String
name|basePath
decl_stmt|;
DECL|method|TestFileRegionIterator (String basePath, int minID, int numBlocks)
specifier|public
name|TestFileRegionIterator
parameter_list|(
name|String
name|basePath
parameter_list|,
name|int
name|minID
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|this
operator|.
name|currentCount
operator|=
name|minID
expr_stmt|;
name|this
operator|.
name|numBlocks
operator|=
name|numBlocks
expr_stmt|;
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentCount
operator|<
name|numBlocks
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|FileRegion
name|next
parameter_list|()
block|{
name|FileRegion
name|region
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
name|basePath
argument_list|,
literal|"file"
operator|+
name|currentCount
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating file for blkid "
operator|+
name|currentCount
argument_list|)
expr_stmt|;
name|blkToPathMap
operator|.
name|put
argument_list|(
operator|(
name|long
operator|)
name|currentCount
argument_list|,
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Block id "
operator|+
name|currentCount
operator|+
literal|" corresponds to file "
operator|+
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLK_LEN
operator|/
operator|(
name|Integer
operator|.
name|SIZE
operator|/
literal|8
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|currentCount
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|region
operator|=
operator|new
name|FileRegion
argument_list|(
name|currentCount
argument_list|,
operator|new
name|Path
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|BLK_LEN
argument_list|,
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
return|return
name|region
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|//do nothing.
block|}
DECL|method|resetMinBlockId (int minId)
specifier|public
name|void
name|resetMinBlockId
parameter_list|(
name|int
name|minId
parameter_list|)
block|{
name|currentCount
operator|=
name|minId
expr_stmt|;
block|}
DECL|method|resetBlockCount (int numBlocks)
specifier|public
name|void
name|resetBlockCount
parameter_list|(
name|int
name|numBlocks
parameter_list|)
block|{
name|this
operator|.
name|numBlocks
operator|=
name|numBlocks
expr_stmt|;
block|}
block|}
comment|/**    * A simple FileRegion provider for tests.    */
DECL|class|TestFileRegionProvider
specifier|public
specifier|static
class|class
name|TestFileRegionProvider
extends|extends
name|FileRegionProvider
implements|implements
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|minId
specifier|private
name|int
name|minId
decl_stmt|;
DECL|field|numBlocks
specifier|private
name|int
name|numBlocks
decl_stmt|;
DECL|method|TestFileRegionProvider ()
name|TestFileRegionProvider
parameter_list|()
block|{
name|minId
operator|=
name|MIN_BLK_ID
expr_stmt|;
name|numBlocks
operator|=
name|NUM_PROVIDED_BLKS
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|TestFileRegionIterator
argument_list|(
name|providedBasePath
argument_list|,
name|minId
argument_list|,
name|numBlocks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
comment|//do nothing!
block|}
DECL|method|setMinBlkId (int minId)
specifier|public
name|void
name|setMinBlkId
parameter_list|(
name|int
name|minId
parameter_list|)
block|{
name|this
operator|.
name|minId
operator|=
name|minId
expr_stmt|;
block|}
DECL|method|setBlockCount (int numBlocks)
specifier|public
name|void
name|setBlockCount
parameter_list|(
name|int
name|numBlocks
parameter_list|)
block|{
name|this
operator|.
name|numBlocks
operator|=
name|numBlocks
expr_stmt|;
block|}
block|}
DECL|method|createLocalStorageDirectory ( File root, Configuration conf)
specifier|private
specifier|static
name|Storage
operator|.
name|StorageDirectory
name|createLocalStorageDirectory
parameter_list|(
name|File
name|root
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|IOException
block|{
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
operator|new
name|Storage
operator|.
name|StorageDirectory
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|root
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|createStorageID
argument_list|(
name|sd
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
DECL|method|createProvidedStorageDirectory ( String confString, Configuration conf)
specifier|private
specifier|static
name|Storage
operator|.
name|StorageDirectory
name|createProvidedStorageDirectory
parameter_list|(
name|String
name|confString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|IOException
block|{
name|Storage
operator|.
name|StorageDirectory
name|sd
init|=
operator|new
name|Storage
operator|.
name|StorageDirectory
argument_list|(
name|StorageLocation
operator|.
name|parse
argument_list|(
name|confString
argument_list|)
argument_list|)
decl_stmt|;
name|DataStorage
operator|.
name|createStorageID
argument_list|(
name|sd
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
DECL|method|createStorageDirs (DataStorage storage, Configuration conf, int numDirs, int numProvidedDirs)
specifier|private
specifier|static
name|void
name|createStorageDirs
parameter_list|(
name|DataStorage
name|storage
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numDirs
parameter_list|,
name|int
name|numProvidedDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dirStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|,
literal|"data"
operator|+
name|i
argument_list|)
decl_stmt|;
name|dirStrings
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|loc
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|loc
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|createLocalStorageDirectory
argument_list|(
name|loc
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getStorageDir
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|numDirs
init|;
name|i
operator|<
name|numDirs
operator|+
name|numProvidedDirs
condition|;
name|i
operator|++
control|)
block|{
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|BASE_DIR
argument_list|,
literal|"data"
operator|+
name|i
argument_list|)
decl_stmt|;
name|providedBasePath
operator|=
name|loc
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|loc
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|dirString
init|=
literal|"[PROVIDED]"
operator|+
operator|new
name|Path
argument_list|(
name|loc
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dirStrings
operator|.
name|add
argument_list|(
name|dirString
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|createProvidedStorageDirectory
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getStorageDir
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|dataDir
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|dirStrings
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|dirIterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dirs
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getNumStorageDirs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numDirs
operator|+
name|numProvidedDirs
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumVolumes ()
specifier|private
name|int
name|getNumVolumes
parameter_list|()
block|{
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
return|return
name|volumes
operator|.
name|size
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|compareBlkFile (InputStream ins, String filepath)
specifier|private
name|void
name|compareBlkFile
parameter_list|(
name|InputStream
name|ins
parameter_list|,
name|String
name|filepath
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|ReadableByteChannel
name|i
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|filepath
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
name|ReadableByteChannel
name|j
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|ins
argument_list|)
init|)
block|{
name|ByteBuffer
name|ib
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|ByteBuffer
name|jb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|il
init|=
name|i
operator|.
name|read
argument_list|(
name|ib
argument_list|)
decl_stmt|;
name|int
name|jl
init|=
name|j
operator|.
name|read
argument_list|(
name|jb
argument_list|)
decl_stmt|;
if|if
condition|(
name|il
operator|<
literal|0
operator|||
name|jl
operator|<
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|il
argument_list|,
name|jl
argument_list|)
expr_stmt|;
break|break;
block|}
name|ib
operator|.
name|flip
argument_list|()
expr_stmt|;
name|jb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|cmp
init|=
name|Math
operator|.
name|min
argument_list|(
name|ib
operator|.
name|remaining
argument_list|()
argument_list|,
name|jb
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|cmp
condition|;
operator|++
name|k
control|)
block|{
name|assertEquals
argument_list|(
name|ib
operator|.
name|get
argument_list|()
argument_list|,
name|jb
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ib
operator|.
name|compact
argument_list|()
expr_stmt|;
name|jb
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|datanode
operator|=
name|mock
argument_list|(
name|DataNode
operator|.
name|class
argument_list|)
expr_stmt|;
name|storage
operator|=
name|mock
argument_list|(
name|DataStorage
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|DNConf
name|dnConf
init|=
operator|new
name|DNConf
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dnConf
argument_list|)
expr_stmt|;
specifier|final
name|BlockScanner
name|disabledBlockScanner
init|=
operator|new
name|BlockScanner
argument_list|(
name|datanode
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getBlockScanner
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|disabledBlockScanner
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitRegistry
name|shortCircuitRegistry
init|=
operator|new
name|ShortCircuitRegistry
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|shortCircuitRegistry
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_CLASS
argument_list|,
name|TestFileRegionProvider
operator|.
name|class
argument_list|,
name|FileRegionProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|blkToPathMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|providedVolumes
operator|=
operator|new
name|LinkedList
argument_list|<
name|FsVolumeImpl
argument_list|>
argument_list|()
expr_stmt|;
name|createStorageDirs
argument_list|(
name|storage
argument_list|,
name|conf
argument_list|,
name|NUM_LOCAL_INIT_VOLUMES
argument_list|,
name|NUM_PROVIDED_INIT_VOLUMES
argument_list|)
expr_stmt|;
name|dataset
operator|=
operator|new
name|FsDatasetImpl
argument_list|(
name|datanode
argument_list|,
name|storage
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FsVolumeSpi
name|vol
init|=
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|vol
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageType
operator|.
name|PROVIDED
condition|)
block|{
name|providedVolumes
operator|.
name|add
argument_list|(
operator|(
name|FsVolumeImpl
operator|)
name|vol
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|bpid
range|:
name|BLOCK_POOL_IDS
control|)
block|{
name|dataset
operator|.
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_LOCAL_INIT_VOLUMES
operator|+
name|NUM_PROVIDED_INIT_VOLUMES
argument_list|,
name|getNumVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dataset
operator|.
name|getNumFailedVolumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProvidedStorageID ()
specifier|public
name|void
name|testProvidedStorageID
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|providedVolumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_STORAGEUUID_DEFAULT
argument_list|,
name|providedVolumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockLoad ()
specifier|public
name|void
name|testBlockLoad
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|providedVolumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FsVolumeImpl
name|vol
init|=
name|providedVolumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ReplicaMap
name|volumeMap
init|=
operator|new
name|ReplicaMap
argument_list|(
operator|new
name|AutoCloseableLock
argument_list|()
argument_list|)
decl_stmt|;
name|vol
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getBlockPoolList
argument_list|()
operator|.
name|length
argument_list|,
name|BLOCK_POOL_IDS
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BLOCK_POOL_IDS
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|!=
name|CHOSEN_BP_ID
condition|)
block|{
comment|//this block pool should not have any blocks
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|volumeMap
operator|.
name|replicas
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|NUM_PROVIDED_BLKS
argument_list|,
name|volumeMap
operator|.
name|replicas
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProvidedBlockRead ()
specifier|public
name|void
name|testProvidedBlockRead
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|NUM_PROVIDED_BLKS
condition|;
name|id
operator|++
control|)
block|{
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|,
name|id
argument_list|,
name|BLK_LEN
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|)
decl_stmt|;
name|InputStream
name|ins
init|=
name|dataset
operator|.
name|getBlockInputStream
argument_list|(
name|eb
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|filepath
init|=
name|blkToPathMap
operator|.
name|get
argument_list|(
operator|(
name|long
operator|)
name|id
argument_list|)
decl_stmt|;
name|compareBlkFile
argument_list|(
name|ins
argument_list|,
name|filepath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProvidedBlockIterator ()
specifier|public
name|void
name|testProvidedBlockIterator
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|providedVolumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FsVolumeImpl
name|vol
init|=
name|providedVolumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlockIterator
name|iter
init|=
name|vol
operator|.
name|newBlockIterator
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|,
literal|"temp"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|blockIdsUsed
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|iter
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|ExtendedBlock
name|eb
init|=
name|iter
operator|.
name|nextBlock
argument_list|()
decl_stmt|;
name|long
name|blkId
init|=
name|eb
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|blkId
operator|>=
name|MIN_BLK_ID
operator|&&
name|blkId
operator|<
name|NUM_PROVIDED_BLKS
argument_list|)
expr_stmt|;
comment|//all block ids must be unique!
name|assertTrue
argument_list|(
operator|!
name|blockIdsUsed
operator|.
name|contains
argument_list|(
name|blkId
argument_list|)
argument_list|)
expr_stmt|;
name|blockIdsUsed
operator|.
name|add
argument_list|(
name|blkId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_PROVIDED_BLKS
argument_list|,
name|blockIdsUsed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefresh ()
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|providedVolumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ProvidedVolumeImpl
name|vol
init|=
operator|(
name|ProvidedVolumeImpl
operator|)
name|providedVolumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TestFileRegionProvider
name|provider
init|=
operator|(
name|TestFileRegionProvider
operator|)
name|vol
operator|.
name|getFileRegionProvider
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|)
decl_stmt|;
comment|//equivalent to two new blocks appearing
name|provider
operator|.
name|setBlockCount
argument_list|(
name|NUM_PROVIDED_BLKS
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|//equivalent to deleting the first block
name|provider
operator|.
name|setMinBlkId
argument_list|(
name|MIN_BLK_ID
operator|+
literal|1
argument_list|)
expr_stmt|;
name|DirectoryScanner
name|scanner
init|=
operator|new
name|DirectoryScanner
argument_list|(
name|datanode
argument_list|,
name|dataset
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|reconcile
argument_list|()
expr_stmt|;
name|ReplicaInfo
name|info
init|=
name|dataset
operator|.
name|getBlockReplica
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|,
name|NUM_PROVIDED_BLKS
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//new replica should be added to the dataset
name|assertTrue
argument_list|(
name|info
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|info
operator|=
name|dataset
operator|.
name|getBlockReplica
argument_list|(
name|BLOCK_POOL_IDS
index|[
name|CHOSEN_BP_ID
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception expected: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

