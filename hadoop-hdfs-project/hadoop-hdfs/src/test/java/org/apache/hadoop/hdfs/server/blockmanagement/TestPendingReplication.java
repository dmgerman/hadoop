begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests the internals of PendingReplicationBlocks.java,  * as well as how PendingReplicationBlocks acts in BlockManager  */
end_comment

begin_class
DECL|class|TestPendingReplication
specifier|public
class|class
name|TestPendingReplication
block|{
DECL|field|TIMEOUT
specifier|final
specifier|static
name|int
name|TIMEOUT
init|=
literal|3
decl_stmt|;
comment|// 3 seconds
DECL|field|DFS_REPLICATION_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|DFS_REPLICATION_INTERVAL
init|=
literal|1
decl_stmt|;
comment|// Number of datanodes in the cluster
DECL|field|DATANODE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|DATANODE_COUNT
init|=
literal|5
decl_stmt|;
annotation|@
name|Test
DECL|method|testPendingReplication ()
specifier|public
name|void
name|testPendingReplication
parameter_list|()
block|{
name|PendingReplicationBlocks
name|pendingReplications
decl_stmt|;
name|pendingReplications
operator|=
operator|new
name|PendingReplicationBlocks
argument_list|(
name|TIMEOUT
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|pendingReplications
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//
comment|// Add 10 blocks to pendingReplications.
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pendingReplications
operator|.
name|increment
argument_list|(
name|block
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Size of pendingReplications "
argument_list|,
literal|10
argument_list|,
name|pendingReplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// remove one item and reinsert it
comment|//
name|Block
name|blk
init|=
operator|new
name|Block
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pendingReplications
operator|.
name|decrement
argument_list|(
name|blk
argument_list|)
expr_stmt|;
comment|// removes one replica
name|assertEquals
argument_list|(
literal|"pendingReplications.getNumReplicas "
argument_list|,
literal|7
argument_list|,
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|blk
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|pendingReplications
operator|.
name|decrement
argument_list|(
name|blk
argument_list|)
expr_stmt|;
comment|// removes all replicas
block|}
name|assertTrue
argument_list|(
name|pendingReplications
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|pendingReplications
operator|.
name|increment
argument_list|(
name|blk
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pendingReplications
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|//
comment|// verify that the number of replicas returned
comment|// are sane.
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|numReplicas
operator|==
name|i
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// verify that nothing has timed out so far
comment|//
name|assertTrue
argument_list|(
name|pendingReplications
operator|.
name|getTimedOutBlocks
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//
comment|// Wait for one second and then insert some more items.
comment|//
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pendingReplications
operator|.
name|increment
argument_list|(
name|block
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|pendingReplications
operator|.
name|size
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
comment|//
comment|// Wait for everything to timeout.
comment|//
name|int
name|loop
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pendingReplications
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
name|loop
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Had to wait for "
operator|+
name|loop
operator|+
literal|" seconds for the lot to timeout"
argument_list|)
expr_stmt|;
comment|//
comment|// Verify that everything has timed out.
comment|//
name|assertEquals
argument_list|(
literal|"Size of pendingReplications "
argument_list|,
literal|0
argument_list|,
name|pendingReplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Block
index|[]
name|timedOut
init|=
name|pendingReplications
operator|.
name|getTimedOutBlocks
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|timedOut
operator|!=
literal|null
operator|&&
name|timedOut
operator|.
name|length
operator|==
literal|15
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timedOut
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|timedOut
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
operator|<
literal|15
argument_list|)
expr_stmt|;
block|}
name|pendingReplications
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if BlockManager can correctly remove corresponding pending records    * when a file is deleted    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testPendingAndInvalidate ()
specifier|public
name|void
name|testPendingAndInvalidate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFS_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
name|DFS_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// 1. create a file
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp.txt"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// 2. disable the heartbeats
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// 3. mark a couple of blocks as corrupt
name|LocatedBlock
name|block
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|BlockManagerTestUtil
operator|.
name|computeAllPendingWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bm
operator|.
name|getPendingReplicationBlocksCount
argument_list|()
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bm
operator|.
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 4. delete the file
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// retry at most 10 times, each time sleep for 1s. Note that 10s is much
comment|// less than the default pending record timeout (5~10min)
name|int
name|retries
init|=
literal|10
decl_stmt|;
name|long
name|pendingNum
init|=
name|bm
operator|.
name|getPendingReplicationBlocksCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|pendingNum
operator|!=
literal|0
operator|&&
name|retries
operator|--
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// let NN do the deletion
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|pendingNum
operator|=
name|bm
operator|.
name|getPendingReplicationBlocksCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|pendingNum
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

