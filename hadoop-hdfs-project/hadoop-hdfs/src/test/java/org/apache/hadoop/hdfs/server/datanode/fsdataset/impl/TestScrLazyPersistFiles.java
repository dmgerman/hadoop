begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test Lazy persist behavior with short-circuit reads. These tests  * will be run on Linux only with Native IO enabled. The tests fake  * RAM_DISK storage using local disk.  */
end_comment

begin_class
DECL|class|TestScrLazyPersistFiles
specifier|public
class|class
name|TestScrLazyPersistFiles
extends|extends
name|LazyPersistTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Assume
operator|.
name|assumeThat
argument_list|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
operator|&&
operator|!
name|Path
operator|.
name|WINDOWS
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|osPageSize
init|=
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getOperatingSystemPageSize
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|BLOCK_SIZE
operator|>=
name|osPageSize
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|BLOCK_SIZE
operator|%
name|osPageSize
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Read in-memory block with Short Circuit Read    * Note: the test uses faked RAM_DISK from physical disk.    */
annotation|@
name|Test
DECL|method|testRamDiskShortCircuitRead ()
specifier|public
name|void
name|testRamDiskShortCircuitRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
comment|// Create a file and wait till it is persisted.
name|makeRandomTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|fis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Verify SCR read counters
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUFFER_LENGTH
argument_list|,
name|fis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUFFER_LENGTH
argument_list|,
name|fis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalShortCircuitBytesRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Eviction of lazy persisted blocks with Short Circuit Read handle open    * Note: the test uses faked RAM_DISK from physical disk.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|tesScrDuringEviction ()
specifier|public
name|void
name|tesScrDuringEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
comment|// Create a file and wait till it is persisted.
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|fis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fs
operator|.
name|open
argument_list|(
name|path1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Keep and open read handle to path1 while creating path2
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
name|triggerEviction
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure path1 is still readable from the open SCR handle.
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
literal|2
operator|*
name|BUFFER_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalShortCircuitBytesRead
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
literal|2
operator|*
name|BUFFER_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScrAfterEviction ()
specifier|public
name|void
name|testScrAfterEviction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadAfterEvictionTest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyScrAfterEviction ()
specifier|public
name|void
name|testLegacyScrAfterEviction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadAfterEvictionTest
argument_list|()
expr_stmt|;
comment|// In the implementation of legacy short-circuit reads, any failure is
comment|// trapped silently, reverts back to a remote read, and also disables all
comment|// subsequent legacy short-circuit reads in the ClientContext.
comment|// Assert that it didn't get disabled.
name|ClientContext
name|clientContext
init|=
name|client
operator|.
name|getClientContext
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|clientContext
operator|.
name|getDisableLegacyBlockReaderLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doShortCircuitReadAfterEvictionTest ()
specifier|private
name|void
name|doShortCircuitReadAfterEvictionTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify short-circuit read from RAM_DISK.
name|File
name|metaFile
init|=
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
literal|0
argument_list|,
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metaFile
operator|.
name|length
argument_list|()
operator|<=
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyReadRandomFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|SEED
argument_list|)
argument_list|)
expr_stmt|;
name|triggerEviction
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify short-circuit read still works from DEFAULT storage.  This time,
comment|// we'll have a checksum written during lazy persistence.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
name|metaFile
operator|=
name|cluster
operator|.
name|getBlockMetadataFile
argument_list|(
literal|0
argument_list|,
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metaFile
operator|.
name|length
argument_list|()
operator|>
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|verifyReadRandomFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|SEED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScrBlockFileCorruption ()
specifier|public
name|void
name|testScrBlockFileCorruption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadBlockFileCorruptionTest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyScrBlockFileCorruption ()
specifier|public
name|void
name|testLegacyScrBlockFileCorruption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadBlockFileCorruptionTest
argument_list|()
expr_stmt|;
block|}
DECL|method|doShortCircuitReadBlockFileCorruptionTest ()
specifier|public
name|void
name|doShortCircuitReadBlockFileCorruptionTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|triggerEviction
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corrupt the lazy-persisted block file, and verify that checksum
comment|// verification catches it.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|corruptReplica
argument_list|(
literal|0
argument_list|,
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ChecksumException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScrMetaFileCorruption ()
specifier|public
name|void
name|testScrMetaFileCorruption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadMetaFileCorruptionTest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegacyScrMetaFileCorruption ()
specifier|public
name|void
name|testLegacyScrMetaFileCorruption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setUseScr
argument_list|(
literal|true
argument_list|)
operator|.
name|setUseLegacyBlockReaderLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|doShortCircuitReadMetaFileCorruptionTest
argument_list|()
expr_stmt|;
block|}
DECL|method|doShortCircuitReadMetaFileCorruptionTest ()
specifier|public
name|void
name|doShortCircuitReadMetaFileCorruptionTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|waitForMetric
argument_list|(
literal|"RamDiskBlocksLazyPersisted"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|triggerEviction
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Corrupt the lazy-persisted checksum file, and verify that checksum
comment|// verification catches it.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|corruptMeta
argument_list|(
literal|0
argument_list|,
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|ChecksumException
operator|.
name|class
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

