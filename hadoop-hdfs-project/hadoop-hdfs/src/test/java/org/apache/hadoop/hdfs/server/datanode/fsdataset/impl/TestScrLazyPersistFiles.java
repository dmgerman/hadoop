begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|LAZY_PERSIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestScrLazyPersistFiles
specifier|public
class|class
name|TestScrLazyPersistFiles
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLazyPersistFiles
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|blockStateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FsDatasetImpl
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|REPL_FACTOR
specifier|private
specifier|static
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|10485760
decl_stmt|;
comment|// 10 MB
DECL|field|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|int
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
init|=
literal|3
decl_stmt|;
DECL|field|HEARTBEAT_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|long
name|HEARTBEAT_INTERVAL_SEC
init|=
literal|1
decl_stmt|;
DECL|field|HEARTBEAT_RECHECK_INTERVAL_MSEC
specifier|private
specifier|static
specifier|final
name|int
name|HEARTBEAT_RECHECK_INTERVAL_MSEC
init|=
literal|500
decl_stmt|;
DECL|field|LAZY_WRITER_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|int
name|LAZY_WRITER_INTERVAL_SEC
init|=
literal|1
decl_stmt|;
DECL|field|BUFFER_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_LENGTH
init|=
literal|4096
decl_stmt|;
DECL|field|sockDir
specifier|private
specifier|static
name|TemporarySocketDirectory
name|sockDir
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|sockDir
operator|=
operator|new
name|TemporarySocketDirectory
argument_list|()
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Assume
operator|.
name|assumeThat
argument_list|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
operator|&&
operator|!
name|Path
operator|.
name|WINDOWS
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Read in-memory block with Short Circuit Read    * Note: the test uses faked RAM_DISK from physical disk.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRamDiskShortCircuitRead ()
specifier|public
name|void
name|testRamDiskShortCircuitRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
name|REPL_FACTOR
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|RAM_DISK
block|,
name|DEFAULT
block|}
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 1 replica + delta, SCR read
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//assertThat(verifyReadRandomFile(path, BLOCK_SIZE, SEED), is(true));
name|FSDataInputStream
name|fis
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Verify SCR read counters
try|try
block|{
name|fis
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dfsis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fis
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUFFER_LENGTH
argument_list|,
name|dfsis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BUFFER_LENGTH
argument_list|,
name|dfsis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalShortCircuitBytesRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Eviction of lazy persisted blocks with Short Circuit Read handle open    * Note: the test uses faked RAM_DISK from physical disk.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000000
argument_list|)
DECL|method|testRamDiskEvictionWithShortCircuitReadHandle ()
specifier|public
name|void
name|testRamDiskEvictionWithShortCircuitReadHandle
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
name|REPL_FACTOR
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|RAM_DISK
block|,
name|DEFAULT
block|}
argument_list|,
operator|(
literal|6
operator|*
name|BLOCK_SIZE
operator|-
literal|1
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 5 replica + delta, SCR.
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job.
comment|// However the block replica should not be evicted from RAM_DISK yet.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// No eviction should happen as the free ratio is below the threshold
name|FSDataInputStream
name|fis
init|=
name|fs
operator|.
name|open
argument_list|(
name|path1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Keep and open read handle to path1 while creating path2
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
name|fis
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
comment|// Create the 2nd file that will trigger RAM_DISK eviction.
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path2
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Ensure path1 is still readable from the open SCR handle.
name|fis
operator|.
name|read
argument_list|(
name|fis
operator|.
name|getPos
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|BUFFER_LENGTH
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dfsis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fis
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|BUFFER_LENGTH
argument_list|,
name|dfsis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|BUFFER_LENGTH
argument_list|,
name|dfsis
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalShortCircuitBytesRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
comment|// After the open handle is closed, path1 should be evicted to DISK.
name|triggerBlockReport
argument_list|()
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|// ---- Utility functions for all test cases -------------------------------
comment|/**    * If ramDiskStorageLimit is>=0, then RAM_DISK capacity is artificially    * capped. If ramDiskStorageLimit< 0 then it is ignored.    */
DECL|method|startUpCluster (final int numDataNodes, final StorageType[] storageTypes, final long ramDiskStorageLimit, final boolean useSCR)
specifier|private
name|void
name|startUpCluster
parameter_list|(
specifier|final
name|int
name|numDataNodes
parameter_list|,
specifier|final
name|StorageType
index|[]
name|storageTypes
parameter_list|,
specifier|final
name|long
name|ramDiskStorageLimit
parameter_list|,
specifier|final
name|boolean
name|useSCR
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
argument_list|,
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL_SEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_RECHECK_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_LAZY_WRITER_INTERVAL_SEC
argument_list|,
name|LAZY_WRITER_INTERVAL_SEC
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSCR
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_READ_SHORTCIRCUIT_KEY
argument_list|,
name|useSCR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"TestShortCircuitLocalReadHandle._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|REPL_FACTOR
operator|=
literal|1
expr_stmt|;
comment|//Reset in case a test has modified the value
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
operator|!=
literal|null
condition|?
name|storageTypes
else|:
operator|new
name|StorageType
index|[]
block|{
name|DEFAULT
block|,
name|DEFAULT
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|client
operator|=
name|fs
operator|.
name|getClient
argument_list|()
expr_stmt|;
comment|// Artificially cap the storage capacity of the RAM_DISK volume.
if|if
condition|(
name|ramDiskStorageLimit
operator|>=
literal|0
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
for|for
control|(
name|FsVolumeSpi
name|volume
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|volume
operator|.
name|getStorageType
argument_list|()
operator|==
name|RAM_DISK
condition|)
block|{
operator|(
operator|(
name|FsVolumeImpl
operator|)
name|volume
operator|)
operator|.
name|setCapacityForTesting
argument_list|(
name|ramDiskStorageLimit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster startup complete"
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestFile (Path path, long length, final boolean isLazyPersist)
specifier|private
name|void
name|makeTestFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|isLazyPersist
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLazyPersist
condition|)
block|{
name|createFlags
operator|.
name|add
argument_list|(
name|LAZY_PERSIST
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|createFlags
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|REPL_FACTOR
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Allocate a block.
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
for|for
control|(
name|int
name|bytesWritten
init|=
literal|0
init|;
name|bytesWritten
operator|<
name|length
condition|;
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureFileReplicasOnStorageType ( Path path, StorageType storageType)
specifier|private
name|LocatedBlocks
name|ensureFileReplicasOnStorageType
parameter_list|(
name|Path
name|path
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ensure that returned block locations returned are correct!
name|LOG
operator|.
name|info
argument_list|(
literal|"Ensure path: "
operator|+
name|path
operator|+
literal|" is on StorageType: "
operator|+
name|storageType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|fileLength
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|is
argument_list|(
name|storageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|locatedBlocks
return|;
block|}
DECL|method|makeRandomTestFile (Path path, long length, final boolean isLazyPersist, long seed)
specifier|private
name|void
name|makeRandomTestFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|isLazyPersist
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|isLazyPersist
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|length
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|seed
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerBlockReport ()
specifier|private
name|void
name|triggerBlockReport
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Trigger block report to NN
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

