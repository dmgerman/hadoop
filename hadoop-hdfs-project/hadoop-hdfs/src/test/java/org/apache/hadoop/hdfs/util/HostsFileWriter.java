begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|HostConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|HostFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeAdminProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|HostsFileWriter
specifier|public
class|class
name|HostsFileWriter
block|{
DECL|field|localFileSys
specifier|private
name|FileSystem
name|localFileSys
decl_stmt|;
DECL|field|fullDir
specifier|private
name|Path
name|fullDir
decl_stmt|;
DECL|field|excludeFile
specifier|private
name|Path
name|excludeFile
decl_stmt|;
DECL|field|includeFile
specifier|private
name|Path
name|includeFile
decl_stmt|;
DECL|field|combinedFile
specifier|private
name|Path
name|combinedFile
decl_stmt|;
DECL|field|isLegacyHostsFile
specifier|private
name|boolean
name|isLegacyHostsFile
init|=
literal|false
decl_stmt|;
DECL|method|initialize (Configuration conf, String dir)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|fullDir
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFileSys
operator|.
name|mkdirs
argument_list|(
name|this
operator|.
name|fullDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY
argument_list|,
name|HostFileManager
operator|.
name|class
argument_list|,
name|HostConfigManager
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
name|HostFileManager
operator|.
name|class
argument_list|)
condition|)
block|{
name|isLegacyHostsFile
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isLegacyHostsFile
condition|)
block|{
name|excludeFile
operator|=
operator|new
name|Path
argument_list|(
name|fullDir
argument_list|,
literal|"exclude"
argument_list|)
expr_stmt|;
name|includeFile
operator|=
operator|new
name|Path
argument_list|(
name|fullDir
argument_list|,
literal|"include"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|localFileSys
argument_list|,
name|includeFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
name|excludeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|includeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|combinedFile
operator|=
operator|new
name|Path
argument_list|(
name|fullDir
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|combinedFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initExcludeHost (String hostNameAndPort)
specifier|public
name|void
name|initExcludeHost
parameter_list|(
name|String
name|hostNameAndPort
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|hostNameAndPort
argument_list|)
expr_stmt|;
name|initExcludeHosts
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|initExcludeHosts (List<String> hostNameAndPorts)
specifier|public
name|void
name|initExcludeHosts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hostNameAndPorts
parameter_list|)
throws|throws
name|IOException
block|{
name|initOutOfServiceHosts
argument_list|(
name|hostNameAndPorts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|initOutOfServiceHosts (List<String> decommissionHostNameAndPorts, Map<String, Long> maintenanceHosts)
specifier|public
name|void
name|initOutOfServiceHosts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|decommissionHostNameAndPorts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|maintenanceHosts
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|excludeHosts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLegacyHostsFile
condition|)
block|{
if|if
condition|(
name|maintenanceHosts
operator|!=
literal|null
operator|&&
name|maintenanceHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"maintenance support isn't supported by legacy hosts file"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|hostNameAndPort
range|:
name|decommissionHostNameAndPorts
control|)
block|{
name|excludeHosts
operator|.
name|append
argument_list|(
name|hostNameAndPort
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|localFileSys
argument_list|,
name|excludeFile
argument_list|,
name|excludeHosts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HashSet
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|allDNs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|decommissionHostNameAndPorts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|hostNameAndPort
range|:
name|decommissionHostNameAndPorts
control|)
block|{
name|DatanodeAdminProperties
name|dn
init|=
operator|new
name|DatanodeAdminProperties
argument_list|()
decl_stmt|;
name|String
index|[]
name|hostAndPort
init|=
name|hostNameAndPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|dn
operator|.
name|setHostName
argument_list|(
name|hostAndPort
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostAndPort
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setAdminState
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|allDNs
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maintenanceHosts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|hostEntry
range|:
name|maintenanceHosts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DatanodeAdminProperties
name|dn
init|=
operator|new
name|DatanodeAdminProperties
argument_list|()
decl_stmt|;
name|String
index|[]
name|hostAndPort
init|=
name|hostEntry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|dn
operator|.
name|setHostName
argument_list|(
name|hostAndPort
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostAndPort
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setAdminState
argument_list|(
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setMaintenanceExpireTimeInMS
argument_list|(
name|hostEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|allDNs
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
name|CombinedHostsFileWriter
operator|.
name|writeFile
argument_list|(
name|combinedFile
operator|.
name|toString
argument_list|()
argument_list|,
name|allDNs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initIncludeHost (String hostNameAndPort)
specifier|public
name|void
name|initIncludeHost
parameter_list|(
name|String
name|hostNameAndPort
parameter_list|)
throws|throws
name|IOException
block|{
name|initIncludeHosts
argument_list|(
operator|new
name|String
index|[]
block|{
name|hostNameAndPort
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initIncludeHosts (String[] hostNameAndPorts)
specifier|public
name|void
name|initIncludeHosts
parameter_list|(
name|String
index|[]
name|hostNameAndPorts
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|includeHosts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLegacyHostsFile
condition|)
block|{
for|for
control|(
name|String
name|hostNameAndPort
range|:
name|hostNameAndPorts
control|)
block|{
name|includeHosts
operator|.
name|append
argument_list|(
name|hostNameAndPort
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|localFileSys
argument_list|,
name|includeFile
argument_list|,
name|includeHosts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HashSet
argument_list|<
name|DatanodeAdminProperties
argument_list|>
name|allDNs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hostNameAndPort
range|:
name|hostNameAndPorts
control|)
block|{
name|String
index|[]
name|hostAndPort
init|=
name|hostNameAndPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|DatanodeAdminProperties
name|dn
init|=
operator|new
name|DatanodeAdminProperties
argument_list|()
decl_stmt|;
name|dn
operator|.
name|setHostName
argument_list|(
name|hostAndPort
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hostAndPort
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|allDNs
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|CombinedHostsFileWriter
operator|.
name|writeFile
argument_list|(
name|combinedFile
operator|.
name|toString
argument_list|()
argument_list|,
name|allDNs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initIncludeHosts (DatanodeAdminProperties[] datanodes)
specifier|public
name|void
name|initIncludeHosts
parameter_list|(
name|DatanodeAdminProperties
index|[]
name|datanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|CombinedHostsFileWriter
operator|.
name|writeFile
argument_list|(
name|combinedFile
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|datanodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localFileSys
operator|.
name|exists
argument_list|(
name|fullDir
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|fullDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIncludeFile ()
specifier|public
name|Path
name|getIncludeFile
parameter_list|()
block|{
return|return
name|includeFile
return|;
block|}
DECL|method|getExcludeFile ()
specifier|public
name|Path
name|getExcludeFile
parameter_list|()
block|{
return|return
name|excludeFile
return|;
block|}
block|}
end_class

end_unit

