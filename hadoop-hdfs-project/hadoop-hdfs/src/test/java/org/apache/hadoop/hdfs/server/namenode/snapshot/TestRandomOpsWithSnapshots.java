begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Testing random FileSystem operations with random Snapshot operations.  */
end_comment

begin_class
DECL|class|TestRandomOpsWithSnapshots
specifier|public
class|class
name|TestRandomOpsWithSnapshots
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRandomOpsWithSnapshots
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPL
specifier|private
specifier|static
specifier|final
name|short
name|REPL
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|TOTAL_FILECOUNT
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_FILECOUNT
init|=
literal|250
decl_stmt|;
DECL|field|MAX_NUM_ITERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_ITERATIONS
init|=
literal|10
decl_stmt|;
DECL|field|MAX_NUM_FILESYSTEM_OPERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_FILESYSTEM_OPERATIONS
init|=
literal|50
decl_stmt|;
DECL|field|MAX_NUM_SNAPSHOT_OPERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_SNAPSHOT_OPERATIONS
init|=
literal|50
decl_stmt|;
DECL|field|MAX_NUM_SUB_DIRECTORIES_LEVEL
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_SUB_DIRECTORIES_LEVEL
init|=
literal|10
decl_stmt|;
DECL|field|MAX_NUM_FILE_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_FILE_LENGTH
init|=
literal|100
decl_stmt|;
DECL|field|MIN_NUM_OPERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MIN_NUM_OPERATIONS
init|=
literal|25
decl_stmt|;
DECL|field|TESTDIRSTRING
specifier|private
specifier|static
specifier|final
name|String
name|TESTDIRSTRING
init|=
literal|"/testDir"
decl_stmt|;
DECL|field|WITNESSDIRSTRING
specifier|private
specifier|static
specifier|final
name|String
name|WITNESSDIRSTRING
init|=
literal|"/WITNESSDIR"
decl_stmt|;
DECL|field|TESTDIR
specifier|private
specifier|static
specifier|final
name|Path
name|TESTDIR
init|=
operator|new
name|Path
argument_list|(
name|TESTDIRSTRING
argument_list|)
decl_stmt|;
DECL|field|WITNESSDIR
specifier|private
specifier|static
specifier|final
name|Path
name|WITNESSDIR
init|=
operator|new
name|Path
argument_list|(
name|WITNESSDIRSTRING
argument_list|)
decl_stmt|;
DECL|field|snapshottableDirectories
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|snapshottableDirectories
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|pathToSnapshotsMap
specifier|private
specifier|static
name|Map
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToSnapshotsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|CONFIG
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONFIG
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|hdfs
specifier|private
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|generator
specifier|private
specifier|static
name|Random
name|generator
init|=
literal|null
decl_stmt|;
DECL|field|numberFileCreated
specifier|private
name|int
name|numberFileCreated
init|=
literal|0
decl_stmt|;
DECL|field|numberFileDeleted
specifier|private
name|int
name|numberFileDeleted
init|=
literal|0
decl_stmt|;
DECL|field|numberFileRenamed
specifier|private
name|int
name|numberFileRenamed
init|=
literal|0
decl_stmt|;
DECL|field|numberDirectoryCreated
specifier|private
name|int
name|numberDirectoryCreated
init|=
literal|0
decl_stmt|;
DECL|field|numberDirectoryDeleted
specifier|private
name|int
name|numberDirectoryDeleted
init|=
literal|0
decl_stmt|;
DECL|field|numberDirectoryRenamed
specifier|private
name|int
name|numberDirectoryRenamed
init|=
literal|0
decl_stmt|;
DECL|field|numberSnapshotCreated
specifier|private
name|int
name|numberSnapshotCreated
init|=
literal|0
decl_stmt|;
DECL|field|numberSnapshotDeleted
specifier|private
name|int
name|numberSnapshotDeleted
init|=
literal|0
decl_stmt|;
DECL|field|numberSnapshotRenamed
specifier|private
name|int
name|numberSnapshotRenamed
init|=
literal|0
decl_stmt|;
comment|// Operation directories
DECL|enum|OperationDirectories
specifier|private
enum|enum
name|OperationDirectories
block|{
DECL|enumConstant|TestDir
name|TestDir
block|,
DECL|enumConstant|WitnessDir
name|WitnessDir
block|;   }
comment|// Operation type
DECL|enum|OperationType
specifier|private
enum|enum
name|OperationType
block|{
DECL|enumConstant|FileSystem
name|FileSystem
block|,
DECL|enumConstant|Snapshot
name|Snapshot
block|;   }
comment|// FileSystem& Snapshot operation
DECL|enum|Operations
specifier|private
enum|enum
name|Operations
block|{
DECL|enumConstant|FileSystem_CreateFile
name|FileSystem_CreateFile
argument_list|(
literal|2
comment|/*operation weight*/
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|FileSystem_DeleteFile
name|FileSystem_DeleteFile
argument_list|(
literal|2
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|FileSystem_RenameFile
name|FileSystem_RenameFile
argument_list|(
literal|2
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|FileSystem_CreateDir
name|FileSystem_CreateDir
argument_list|(
literal|1
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|FileSystem_DeleteDir
name|FileSystem_DeleteDir
argument_list|(
literal|1
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|FileSystem_RenameDir
name|FileSystem_RenameDir
argument_list|(
literal|2
argument_list|,
name|OperationType
operator|.
name|FileSystem
argument_list|)
block|,
DECL|enumConstant|Snapshot_CreateSnapshot
name|Snapshot_CreateSnapshot
argument_list|(
literal|5
argument_list|,
name|OperationType
operator|.
name|Snapshot
argument_list|)
block|,
DECL|enumConstant|Snapshot_DeleteSnapshot
name|Snapshot_DeleteSnapshot
argument_list|(
literal|3
argument_list|,
name|OperationType
operator|.
name|Snapshot
argument_list|)
block|,
DECL|enumConstant|Snapshot_RenameSnapshot
name|Snapshot_RenameSnapshot
argument_list|(
literal|2
argument_list|,
name|OperationType
operator|.
name|Snapshot
argument_list|)
block|;
DECL|field|weight
specifier|private
name|int
name|weight
decl_stmt|;
DECL|field|operationType
specifier|private
name|OperationType
name|operationType
decl_stmt|;
DECL|method|Operations (int weight, OperationType type)
name|Operations
parameter_list|(
name|int
name|weight
parameter_list|,
name|OperationType
name|type
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|this
operator|.
name|operationType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getWeight ()
specifier|private
name|int
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|Operations
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|sumWeights (OperationType type)
specifier|private
specifier|static
name|int
name|sumWeights
parameter_list|(
name|OperationType
name|type
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Operations
name|value
range|:
name|VALUES
control|)
block|{
if|if
condition|(
name|value
operator|.
name|operationType
operator|==
name|type
condition|)
block|{
name|sum
operator|+=
name|value
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sum
return|;
block|}
DECL|field|TOTAL_WEIGHT_FILESYSTEM
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_WEIGHT_FILESYSTEM
init|=
name|sumWeights
argument_list|(
name|OperationType
operator|.
name|FileSystem
argument_list|)
decl_stmt|;
DECL|field|TOTAL_WEIGHT_SNAPSHOT
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_WEIGHT_SNAPSHOT
init|=
name|sumWeights
argument_list|(
name|OperationType
operator|.
name|Snapshot
argument_list|)
decl_stmt|;
DECL|method|getRandomOperation (OperationType type)
specifier|public
specifier|static
name|Operations
name|getRandomOperation
parameter_list|(
name|OperationType
name|type
parameter_list|)
block|{
name|int
name|randomNum
init|=
literal|0
decl_stmt|;
name|Operations
name|randomOperation
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FileSystem
case|:
name|randomNum
operator|=
name|generator
operator|.
name|nextInt
argument_list|(
name|TOTAL_WEIGHT_FILESYSTEM
argument_list|)
expr_stmt|;
break|break;
case|case
name|Snapshot
case|:
name|randomNum
operator|=
name|generator
operator|.
name|nextInt
argument_list|(
name|TOTAL_WEIGHT_SNAPSHOT
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|int
name|currentWeightSum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Operations
name|currentValue
range|:
name|VALUES
control|)
block|{
if|if
condition|(
name|currentValue
operator|.
name|operationType
operator|==
name|type
condition|)
block|{
if|if
condition|(
name|randomNum
operator|<=
operator|(
name|currentWeightSum
operator|+
name|currentValue
operator|.
name|getWeight
argument_list|()
operator|)
condition|)
block|{
name|randomOperation
operator|=
name|currentValue
expr_stmt|;
break|break;
block|}
name|currentWeightSum
operator|+=
name|currentValue
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|randomOperation
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CONFIG
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONFIG
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|TESTDIR
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|WITNESSDIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/*    * Random file system operations with snapshot operations in between.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|900000
argument_list|)
DECL|method|testRandomOperationsWithSnapshots ()
specifier|public
name|void
name|testRandomOperationsWithSnapshots
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// Set
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testRandomOperationsWithSnapshots, seed to be used: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|int
name|fileLen
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|MAX_NUM_FILE_LENGTH
argument_list|)
decl_stmt|;
name|createFiles
argument_list|(
name|TESTDIRSTRING
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
comment|// Get list of snapshottable directories
name|SnapshottableDirectoryStatus
index|[]
name|snapshottableDirectoryStatus
init|=
name|hdfs
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshottableDirectoryStatus
name|ssds
range|:
name|snapshottableDirectoryStatus
control|)
block|{
name|snapshottableDirectories
operator|.
name|add
argument_list|(
name|ssds
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|snapshottableDirectories
operator|.
name|add
argument_list|(
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfIterations
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|MAX_NUM_ITERATIONS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of iterations: "
operator|+
name|numberOfIterations
argument_list|)
expr_stmt|;
name|int
name|numberFileSystemOperations
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|MAX_NUM_FILESYSTEM_OPERATIONS
operator|-
name|MIN_NUM_OPERATIONS
operator|+
literal|1
argument_list|)
operator|+
name|MIN_NUM_OPERATIONS
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of FileSystem operations: "
operator|+
name|numberFileSystemOperations
argument_list|)
expr_stmt|;
name|int
name|numberSnapshotOperations
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|MAX_NUM_SNAPSHOT_OPERATIONS
operator|-
name|MIN_NUM_OPERATIONS
argument_list|)
operator|+
name|MIN_NUM_OPERATIONS
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Snapshot operations: "
operator|+
name|numberSnapshotOperations
argument_list|)
expr_stmt|;
comment|// Act&& Verify
name|randomOperationsWithSnapshots
argument_list|(
name|numberOfIterations
argument_list|,
name|numberFileSystemOperations
argument_list|,
name|numberSnapshotOperations
argument_list|)
expr_stmt|;
block|}
comment|/*    * Based on input we're performing:    *   random number of file system operations    *   random number of snapshot operations    *   restart name node making sure fsimage can be loaded successfully.    */
DECL|method|randomOperationsWithSnapshots (int numberOfIterations, int numberFileSystemOperations, int numberSnapshotOperations)
specifier|public
name|void
name|randomOperationsWithSnapshots
parameter_list|(
name|int
name|numberOfIterations
parameter_list|,
name|int
name|numberFileSystemOperations
parameter_list|,
name|int
name|numberSnapshotOperations
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// random number of iterations
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIterations
condition|;
name|i
operator|++
control|)
block|{
comment|// random number of FileSystem operations
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberFileSystemOperations
condition|;
name|j
operator|++
control|)
block|{
name|Operations
name|fsOperation
init|=
name|Operations
operator|.
name|getRandomOperation
argument_list|(
name|OperationType
operator|.
name|FileSystem
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fsOperation: "
operator|+
name|fsOperation
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|fsOperation
condition|)
block|{
case|case
name|FileSystem_CreateDir
case|:
name|createTestDir
argument_list|()
expr_stmt|;
break|break;
case|case
name|FileSystem_DeleteDir
case|:
name|deleteTestDir
argument_list|()
expr_stmt|;
break|break;
case|case
name|FileSystem_RenameDir
case|:
name|renameTestDir
argument_list|()
expr_stmt|;
break|break;
case|case
name|FileSystem_CreateFile
case|:
name|createTestFile
argument_list|()
expr_stmt|;
break|break;
case|case
name|FileSystem_DeleteFile
case|:
name|deleteTestFile
argument_list|()
expr_stmt|;
break|break;
case|case
name|FileSystem_RenameFile
case|:
name|renameTestFile
argument_list|()
expr_stmt|;
break|break;
default|default:
name|assertNull
argument_list|(
literal|"Invalid FileSystem operation"
argument_list|,
name|fsOperation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// random number of Snapshot operations
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberSnapshotOperations
condition|;
name|k
operator|++
control|)
block|{
name|Operations
name|snapshotOperation
init|=
name|Operations
operator|.
name|getRandomOperation
argument_list|(
name|OperationType
operator|.
name|Snapshot
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"snapshotOperation: "
operator|+
name|snapshotOperation
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|snapshotOperation
condition|)
block|{
case|case
name|Snapshot_CreateSnapshot
case|:
name|createSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|Snapshot_DeleteSnapshot
case|:
name|deleteSnapshot
argument_list|()
expr_stmt|;
break|break;
case|case
name|Snapshot_RenameSnapshot
case|:
name|renameSnapshot
argument_list|()
expr_stmt|;
break|break;
default|default:
name|assertNull
argument_list|(
literal|"Invalid Snapshot operation"
argument_list|,
name|snapshotOperation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Verification
name|checkClusterHealth
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Create a new test directory. */
DECL|method|createTestDir ()
specifier|private
name|void
name|createTestDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parentDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"createTestDir_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|newDir
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Directory exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory created: "
operator|+
name|newDir
argument_list|)
expr_stmt|;
name|numberDirectoryCreated
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/* Delete an existing test directory. */
DECL|method|deleteTestDir ()
specifier|private
name|void
name|deleteTestDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|deleteDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathToSnapshotsMap
operator|.
name|containsKey
argument_list|(
name|deleteDir
argument_list|)
condition|)
block|{
name|boolean
name|isWitnessDir
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|isWitnessDir
operator|=
literal|true
expr_stmt|;
name|deleteDir
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|deleteDir
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|delete
argument_list|(
name|deleteDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Directory does not exist"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|deleteDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isWitnessDir
condition|)
block|{
name|snapshottableDirectories
operator|.
name|remove
argument_list|(
name|deleteDir
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory removed: "
operator|+
name|deleteDir
argument_list|)
expr_stmt|;
name|numberDirectoryDeleted
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* Rename an existing test directory. */
DECL|method|renameTestDir ()
specifier|private
name|void
name|renameTestDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|oldDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathToSnapshotsMap
operator|.
name|containsKey
argument_list|(
name|oldDir
argument_list|)
condition|)
block|{
name|Path
name|newDir
init|=
name|oldDir
operator|.
name|suffix
argument_list|(
literal|"_renameDir+"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|oldDir
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|oldDir
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
name|newDir
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|newDir
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|rename
argument_list|(
name|oldDir
argument_list|,
name|newDir
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Target directory exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Source directory does not exist"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|oldDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|TestDir
condition|)
block|{
name|snapshottableDirectories
operator|.
name|remove
argument_list|(
name|oldDir
argument_list|)
expr_stmt|;
name|snapshottableDirectories
operator|.
name|add
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed directory:"
operator|+
name|oldDir
operator|+
literal|" to directory: "
operator|+
name|newDir
argument_list|)
expr_stmt|;
name|numberDirectoryRenamed
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* Create a new snapshot. */
DECL|method|createSnapshot ()
specifier|private
name|void
name|createSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|randomDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|snapshotName
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|generator
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|".ss"
decl_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|randomDir
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createSnapshot, directory: "
operator|+
name|randomDir
operator|+
literal|", snapshot name: "
operator|+
name|snapshotName
argument_list|)
expr_stmt|;
name|numberSnapshotCreated
operator|++
expr_stmt|;
if|if
condition|(
name|pathToSnapshotsMap
operator|.
name|containsKey
argument_list|(
name|randomDir
argument_list|)
condition|)
block|{
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|randomDir
argument_list|)
operator|.
name|add
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathToSnapshotsMap
operator|.
name|put
argument_list|(
name|randomDir
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Delete an existing snapshot. */
DECL|method|deleteSnapshot ()
specifier|private
name|void
name|deleteSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|pathToSnapshotsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|pathToSnapshotsMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Object
index|[]
name|snapshotPaths
init|=
name|pathToSnapshotsMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Path
name|snapshotPath
init|=
operator|(
name|Path
operator|)
name|snapshotPaths
index|[
name|index
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|snapshotNameList
init|=
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|String
name|snapshotNameToBeDeleted
init|=
name|snapshotNameList
operator|.
name|get
argument_list|(
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshotNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotPath
argument_list|,
name|snapshotNameToBeDeleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleteSnapshot, directory: "
operator|+
name|snapshotPath
operator|+
literal|", snapshot name: "
operator|+
name|snapshotNameToBeDeleted
argument_list|)
expr_stmt|;
name|numberSnapshotDeleted
operator|++
expr_stmt|;
comment|// Adjust pathToSnapshotsMap after snapshot deletion
if|if
condition|(
name|snapshotNameList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|pathToSnapshotsMap
operator|.
name|remove
argument_list|(
name|snapshotPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|snapshotPath
argument_list|)
operator|.
name|remove
argument_list|(
name|snapshotNameToBeDeleted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Rename an existing snapshot. */
DECL|method|renameSnapshot ()
specifier|private
name|void
name|renameSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|pathToSnapshotsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|pathToSnapshotsMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Object
index|[]
name|snapshotPaths
init|=
name|pathToSnapshotsMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Path
name|snapshotPath
init|=
operator|(
name|Path
operator|)
name|snapshotPaths
index|[
name|index
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|snapshotNameList
init|=
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|snapshotPath
argument_list|)
decl_stmt|;
name|String
name|snapshotOldName
init|=
name|snapshotNameList
operator|.
name|get
argument_list|(
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshotNameList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|snapshotOldNameNoExt
init|=
name|snapshotOldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|snapshotOldName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|snapshotNewName
init|=
name|snapshotOldNameNoExt
operator|+
literal|"_rename.ss"
decl_stmt|;
name|hdfs
operator|.
name|renameSnapshot
argument_list|(
name|snapshotPath
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"renameSnapshot, directory:"
operator|+
name|snapshotPath
operator|+
literal|", snapshot name:"
operator|+
name|snapshotOldName
operator|+
literal|" to "
operator|+
name|snapshotNewName
argument_list|)
expr_stmt|;
name|numberSnapshotRenamed
operator|++
expr_stmt|;
comment|// Adjust pathToSnapshotsMap after snapshot deletion
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|snapshotPath
argument_list|)
operator|.
name|remove
argument_list|(
name|snapshotOldName
argument_list|)
expr_stmt|;
name|pathToSnapshotsMap
operator|.
name|get
argument_list|(
name|snapshotPath
argument_list|)
operator|.
name|add
argument_list|(
name|snapshotNewName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Create a new test file. */
DECL|method|createTestFile ()
specifier|private
name|void
name|createTestFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|randomDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|randomDir
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|randomDir
operator|=
name|randomDir
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|randomDir
argument_list|,
literal|"createTestFile.log"
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|newFile
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|createNewFile
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createTestFile, file created: "
operator|+
name|newFile
argument_list|)
expr_stmt|;
name|numberFileCreated
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/* Delete an existing test file. */
DECL|method|deleteTestFile ()
specifier|private
name|void
name|deleteTestFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|randomDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatusList
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|randomDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fsEntry
range|:
name|fileStatusList
control|)
block|{
if|if
condition|(
name|fsEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|Path
name|deleteFile
init|=
name|fsEntry
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|deleteFile
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|deleteFile
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|delete
argument_list|(
name|deleteFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File does not exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|deleteFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"deleteTestFile, file deleted: "
operator|+
name|deleteFile
argument_list|)
expr_stmt|;
name|numberFileDeleted
operator|++
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
comment|/* Rename an existing test file. */
DECL|method|renameTestFile ()
specifier|private
name|void
name|renameTestFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|index
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|snapshottableDirectories
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|randomDir
init|=
name|snapshottableDirectories
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatusList
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|randomDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fsEntry
range|:
name|fileStatusList
control|)
block|{
if|if
condition|(
name|fsEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|Path
name|oldFile
init|=
name|fsEntry
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|newFile
init|=
name|oldFile
operator|.
name|suffix
argument_list|(
literal|"_renameFile"
argument_list|)
decl_stmt|;
for|for
control|(
name|OperationDirectories
name|dir
range|:
name|OperationDirectories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dir
operator|==
name|OperationDirectories
operator|.
name|WitnessDir
condition|)
block|{
name|oldFile
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|oldFile
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
name|newFile
operator|=
operator|new
name|Path
argument_list|(
name|getNewPathString
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|,
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hdfs
operator|.
name|rename
argument_list|(
name|oldFile
argument_list|,
name|newFile
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Target file exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Source file does not exist"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
name|oldFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed file: "
operator|+
name|oldFile
operator|+
literal|" to file: "
operator|+
name|newFile
argument_list|)
expr_stmt|;
name|numberFileRenamed
operator|++
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
comment|/* Check cluster health. */
DECL|method|checkClusterHealth ()
specifier|private
name|void
name|checkClusterHealth
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
comment|// 1. FileStatus comparison between test and witness directory
name|FileStatus
index|[]
name|testDirStatus
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|TESTDIR
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|witnessDirStatus
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|WITNESSDIR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
operator|.
name|length
argument_list|,
name|testDirStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkClusterHealth, number of entries verified."
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|testDirStatus
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|witnessDirStatus
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDirStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|getPermission
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|getOwner
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|getGroup
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|hasAcl
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|isEncrypted
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|witnessDirStatus
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
argument_list|,
name|testDirStatus
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"checkClusterHealth, metadata verified."
argument_list|)
expr_stmt|;
comment|// Randomly decide whether we want to do a check point
if|if
condition|(
name|generator
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"checkClusterHealth, doing a checkpoint on NN."
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
block|}
comment|/** Restart name node making sure loading from image successfully */
name|LOG
operator|.
name|info
argument_list|(
literal|"checkClusterHealth, restarting NN."
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|!
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"NameNode is up"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isActiveState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"DataNode is up and running"
argument_list|,
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cluster is up and running"
argument_list|,
name|cluster
operator|.
name|isClusterUp
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checkClusterHealth, cluster is healthy."
argument_list|)
expr_stmt|;
name|printOperationStats
argument_list|()
expr_stmt|;
block|}
comment|/* Helper: create a file with a length of filelen. */
DECL|method|createFile (final String fileName, final long filelen, boolean enableSnapshot)
specifier|private
name|void
name|createFile
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|long
name|filelen
parameter_list|,
name|boolean
name|enableSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|filelen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Randomly allow snapshot on parent directly
if|if
condition|(
name|enableSnapshot
operator|&&
name|generator
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
try|try
block|{
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|filePath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"createFile, exception setting snapshotable directory: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* Helper: create a large number of directories and files. */
DECL|method|createFiles (String rootDir, int fileLength)
specifier|private
name|void
name|createFiles
parameter_list|(
name|String
name|rootDir
parameter_list|,
name|int
name|fileLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rootDir
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rootDir
operator|+=
literal|"/"
expr_stmt|;
block|}
comment|// Create files in a directory with random depth, ranging from 0-10.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_FILECOUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|filename
init|=
name|rootDir
decl_stmt|;
name|int
name|dirs
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|MAX_NUM_SUB_DIRECTORIES_LEVEL
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|>=
operator|(
name|i
operator|-
name|dirs
operator|)
condition|;
name|j
operator|--
control|)
block|{
name|filename
operator|+=
name|j
operator|+
literal|"/"
expr_stmt|;
block|}
name|filename
operator|+=
literal|"file"
operator|+
name|i
expr_stmt|;
name|createFile
argument_list|(
name|filename
argument_list|,
name|fileLength
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file created"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createFiles, file: "
operator|+
name|filename
operator|+
literal|"was created"
argument_list|)
expr_stmt|;
name|String
name|witnessFile
init|=
name|filename
operator|.
name|replaceAll
argument_list|(
name|TESTDIRSTRING
argument_list|,
name|WITNESSDIRSTRING
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|witnessFile
argument_list|,
name|fileLength
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Witness file exists"
argument_list|,
name|hdfs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|witnessFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createFiles, file: "
operator|+
name|witnessFile
operator|+
literal|"was created"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Helper: replace all target string with replacement string in original    * string. */
DECL|method|getNewPathString (String originalString, String targetString, String replacementString)
specifier|private
name|String
name|getNewPathString
parameter_list|(
name|String
name|originalString
parameter_list|,
name|String
name|targetString
parameter_list|,
name|String
name|replacementString
parameter_list|)
block|{
name|String
name|str
init|=
name|originalString
operator|.
name|replaceAll
argument_list|(
name|targetString
argument_list|,
name|replacementString
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Original string: "
operator|+
name|originalString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"New string: "
operator|+
name|str
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
DECL|method|printOperationStats ()
specifier|private
name|void
name|printOperationStats
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Operation statistics for this iteration: "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files created: "
operator|+
name|numberFileCreated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files deleted: "
operator|+
name|numberFileDeleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files renamed: "
operator|+
name|numberFileRenamed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of directories created: "
operator|+
name|numberDirectoryCreated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of directories deleted: "
operator|+
name|numberDirectoryDeleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of directories renamed: "
operator|+
name|numberDirectoryRenamed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of snapshots created: "
operator|+
name|numberSnapshotCreated
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of snapshots deleted: "
operator|+
name|numberSnapshotDeleted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of snapshots renamed: "
operator|+
name|numberSnapshotRenamed
argument_list|)
expr_stmt|;
name|numberFileCreated
operator|=
literal|0
expr_stmt|;
name|numberFileDeleted
operator|=
literal|0
expr_stmt|;
name|numberFileRenamed
operator|=
literal|0
expr_stmt|;
name|numberDirectoryCreated
operator|=
literal|0
expr_stmt|;
name|numberDirectoryDeleted
operator|=
literal|0
expr_stmt|;
name|numberDirectoryRenamed
operator|=
literal|0
expr_stmt|;
name|numberSnapshotCreated
operator|=
literal|0
expr_stmt|;
name|numberSnapshotDeleted
operator|=
literal|0
expr_stmt|;
name|numberSnapshotRenamed
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

