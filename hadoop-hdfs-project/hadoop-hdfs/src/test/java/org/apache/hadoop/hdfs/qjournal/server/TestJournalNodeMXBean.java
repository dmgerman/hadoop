begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/**  * Test {@link JournalNodeMXBean}  */
end_comment

begin_class
DECL|class|TestJournalNodeMXBean
specifier|public
class|class
name|TestJournalNodeMXBean
block|{
DECL|field|NAMESERVICE
specifier|private
specifier|static
specifier|final
name|String
name|NAMESERVICE
init|=
literal|"ns1"
decl_stmt|;
DECL|field|NUM_JN
specifier|private
specifier|static
specifier|final
name|int
name|NUM_JN
init|=
literal|1
decl_stmt|;
DECL|field|jCluster
specifier|private
name|MiniJournalCluster
name|jCluster
decl_stmt|;
DECL|field|jn
specifier|private
name|JournalNode
name|jn
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// start 1 journal node
name|jCluster
operator|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numJournalNodes
argument_list|(
name|NUM_JN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|jCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|jn
operator|=
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jCluster
operator|!=
literal|null
condition|)
block|{
name|jCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|jCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJournalNodeMXBean ()
specifier|public
name|void
name|testJournalNodeMXBean
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we have not formatted the journals yet, and the journal status in jmx
comment|// should be empty since journal objects are created lazily
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=JournalNode,name=JournalNodeInfo"
argument_list|)
decl_stmt|;
comment|// getJournalsStatus
name|String
name|journalStatus
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"JournalsStatus"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|jn
operator|.
name|getJournalsStatus
argument_list|()
argument_list|,
name|journalStatus
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|journalStatus
operator|.
name|contains
argument_list|(
name|NAMESERVICE
argument_list|)
argument_list|)
expr_stmt|;
comment|// format the journal ns1
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|12345
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|jn
operator|.
name|getOrCreateJournal
argument_list|(
name|NAMESERVICE
argument_list|)
operator|.
name|format
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// check again after format
comment|// getJournalsStatus
name|journalStatus
operator|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"JournalsStatus"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jn
operator|.
name|getJournalsStatus
argument_list|()
argument_list|,
name|journalStatus
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|jMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|infoMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|infoMap
operator|.
name|put
argument_list|(
literal|"Formatted"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jMap
operator|.
name|put
argument_list|(
name|NAMESERVICE
argument_list|,
name|infoMap
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|infoMap1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|infoMap1
operator|.
name|put
argument_list|(
literal|"Formatted"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|jMap
operator|.
name|put
argument_list|(
name|MiniJournalCluster
operator|.
name|CLUSTER_WAITACTIVE_URI
argument_list|,
name|infoMap1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JSON
operator|.
name|toString
argument_list|(
name|jMap
argument_list|)
argument_list|,
name|journalStatus
argument_list|)
expr_stmt|;
comment|// restart journal node without formatting
name|jCluster
operator|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numJournalNodes
argument_list|(
name|NUM_JN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|jCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|jn
operator|=
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// re-check
name|journalStatus
operator|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"JournalsStatus"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jn
operator|.
name|getJournalsStatus
argument_list|()
argument_list|,
name|journalStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JSON
operator|.
name|toString
argument_list|(
name|jMap
argument_list|)
argument_list|,
name|journalStatus
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

