begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for BlockPlacementStatusWithUpgradeDomain class.  */
end_comment

begin_class
DECL|class|TestBlockPlacementStatusWithUpgradeDomain
specifier|public
class|class
name|TestBlockPlacementStatusWithUpgradeDomain
block|{
DECL|field|upgradeDomains
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeDomains
decl_stmt|;
DECL|field|bpsd
specifier|private
name|BlockPlacementStatusDefault
name|bpsd
init|=
name|mock
argument_list|(
name|BlockPlacementStatusDefault
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|upgradeDomains
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|upgradeDomains
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|upgradeDomains
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|upgradeDomains
operator|.
name|add
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bpsd
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsPolicySatisfiedParentFalse ()
specifier|public
name|void
name|testIsPolicySatisfiedParentFalse
parameter_list|()
block|{
name|when
argument_list|(
name|bpsd
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|BlockPlacementStatusWithUpgradeDomain
name|bps
init|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|bpsd
argument_list|,
name|upgradeDomains
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Parent policy is not satisfied but upgrade domain policy is
name|assertFalse
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsPolicySatisfiedAllEqual ()
specifier|public
name|void
name|testIsPolicySatisfiedAllEqual
parameter_list|()
block|{
name|BlockPlacementStatusWithUpgradeDomain
name|bps
init|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|bpsd
argument_list|,
name|upgradeDomains
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Number of domains, replicas and upgradeDomainFactor is equal and parent
comment|// policy is satisfied
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsPolicySatisifedSmallDomains ()
specifier|public
name|void
name|testIsPolicySatisifedSmallDomains
parameter_list|()
block|{
comment|// Number of domains is less than replicas but equal to factor
name|BlockPlacementStatusWithUpgradeDomain
name|bps
init|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|bpsd
argument_list|,
name|upgradeDomains
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same as above but replicas is greater than factor
name|bps
operator|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|bpsd
argument_list|,
name|upgradeDomains
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
comment|// Number of domains is less than replicas and factor
name|bps
operator|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|bpsd
argument_list|,
name|upgradeDomains
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bps
operator|.
name|isPlacementPolicySatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

