begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRefreshUserMappings
specifier|public
class|class
name|TestRefreshUserMappings
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|config
name|Configuration
name|config
decl_stmt|;
DECL|field|groupRefreshTimeoutSec
specifier|private
specifier|static
specifier|final
name|long
name|groupRefreshTimeoutSec
init|=
literal|1
decl_stmt|;
DECL|field|tempResource
specifier|private
name|String
name|tempResource
init|=
literal|null
decl_stmt|;
DECL|class|MockUnixGroupsMapping
specifier|public
specifier|static
class|class
name|MockUnixGroupsMapping
implements|implements
name|GroupMappingServiceProvider
block|{
DECL|field|i
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Getting groups in MockUnixGroupsMapping"
argument_list|)
expr_stmt|;
name|String
name|g1
init|=
name|user
operator|+
operator|(
literal|10
operator|*
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|g2
init|=
name|user
operator|+
operator|(
literal|10
operator|*
name|i
operator|+
literal|2
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
return|return
name|l
return|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refreshing groups in MockUnixGroupsMapping"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|setClass
argument_list|(
literal|"hadoop.security.group.mapping"
argument_list|,
name|TestRefreshUserMappings
operator|.
name|MockUnixGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
literal|"hadoop.security.groups.cache.secs"
argument_list|,
name|groupRefreshTimeoutSec
argument_list|)
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|config
argument_list|,
literal|"hdfs://localhost:"
operator|+
literal|"0"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempResource
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|tempResource
argument_list|)
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGroupMappingRefresh ()
specifier|public
name|void
name|testGroupMappingRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshUserToGroupsMappings"
block|}
decl_stmt|;
name|Groups
name|groups
init|=
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"first attempt:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g1
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
index|[]
name|str_groups
init|=
operator|new
name|String
index|[
name|g1
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|g1
operator|.
name|toArray
argument_list|(
name|str_groups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|str_groups
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"second attempt, should be same:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g2
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|g2
operator|.
name|toArray
argument_list|(
name|str_groups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|str_groups
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g2
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Should be same group "
argument_list|,
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|g2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"third attempt(after refresh command), should be different:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g3
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|g3
operator|.
name|toArray
argument_list|(
name|str_groups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|str_groups
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g3
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
literal|"Should be different group: "
operator|+
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" and "
operator|+
name|g3
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|g1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|g3
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test time out
name|Thread
operator|.
name|sleep
argument_list|(
name|groupRefreshTimeoutSec
operator|*
literal|1100
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fourth attempt(after timeout), should be different:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|g4
init|=
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|g4
operator|.
name|toArray
argument_list|(
name|str_groups
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|str_groups
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g4
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
literal|"Should be different group "
argument_list|,
name|g3
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|g4
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|SUPER_USER
init|=
literal|"super_user"
decl_stmt|;
specifier|final
name|String
index|[]
name|GROUP_NAMES1
init|=
operator|new
name|String
index|[]
block|{
literal|"gr1"
block|,
literal|"gr2"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|GROUP_NAMES2
init|=
operator|new
name|String
index|[]
block|{
literal|"gr3"
block|,
literal|"gr4"
block|}
decl_stmt|;
comment|//keys in conf
name|String
name|userKeyGroups
init|=
name|ProxyUsers
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|SUPER_USER
argument_list|)
decl_stmt|;
name|String
name|userKeyHosts
init|=
name|ProxyUsers
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|SUPER_USER
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|userKeyGroups
argument_list|,
literal|"gr3,gr4,gr5"
argument_list|)
expr_stmt|;
comment|// superuser can proxy for this group
name|config
operator|.
name|set
argument_list|(
name|userKeyHosts
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi1
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi2
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|suUgi
init|=
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ugi1
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|suUgi
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|suUgi
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|suUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SUPER_USER
argument_list|)
expr_stmt|;
comment|// super user
name|when
argument_list|(
name|suUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SUPER_USER
operator|+
literal|"L"
argument_list|)
expr_stmt|;
comment|// super user
name|when
argument_list|(
name|ugi1
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi1
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"userL1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"userL2"
argument_list|)
expr_stmt|;
comment|// set groups for users
name|when
argument_list|(
name|ugi1
operator|.
name|getGroupNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|GROUP_NAMES1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ugi2
operator|.
name|getGroupNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|GROUP_NAMES2
argument_list|)
expr_stmt|;
comment|// check before
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi1
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"first auth for "
operator|+
name|ugi1
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've failed "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expected
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"auth for "
operator|+
name|ugi1
operator|.
name|getUserName
argument_list|()
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi2
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"auth for "
operator|+
name|ugi2
operator|.
name|getUserName
argument_list|()
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
comment|// expected
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"first auth for "
operator|+
name|ugi2
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've succeeded: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// refresh will look at configuration on the server side
comment|// add additional resource with the new value
comment|// so the server side will pick it up
name|String
name|rsrc
init|=
literal|"testGroupMappingRefresh_rsrc.xml"
decl_stmt|;
name|addNewConfigResource
argument_list|(
name|rsrc
argument_list|,
name|userKeyGroups
argument_list|,
literal|"gr2"
argument_list|,
name|userKeyHosts
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
decl_stmt|;
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi2
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"second auth for "
operator|+
name|ugi2
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've failed "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expected
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"auth for "
operator|+
name|ugi2
operator|.
name|getUserName
argument_list|()
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi1
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"auth for "
operator|+
name|ugi1
operator|.
name|getUserName
argument_list|()
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
comment|// expected
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"second auth for "
operator|+
name|ugi1
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" should've succeeded: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addNewConfigResource (String rsrcName, String keyGroup, String groups, String keyHosts, String hosts)
specifier|private
name|void
name|addNewConfigResource
parameter_list|(
name|String
name|rsrcName
parameter_list|,
name|String
name|keyGroup
parameter_list|,
name|String
name|groups
parameter_list|,
name|String
name|keyHosts
parameter_list|,
name|String
name|hosts
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|// location for temp resource should be in CLASSPATH
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|conf
operator|.
name|getResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|tempResource
operator|=
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|rsrcName
expr_stmt|;
name|String
name|newResource
init|=
literal|"<configuration>"
operator|+
literal|"<property><name>"
operator|+
name|keyGroup
operator|+
literal|"</name><value>"
operator|+
name|groups
operator|+
literal|"</value></property>"
operator|+
literal|"<property><name>"
operator|+
name|keyHosts
operator|+
literal|"</name><value>"
operator|+
name|hosts
operator|+
literal|"</value></property>"
operator|+
literal|"</configuration>"
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tempResource
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|newResource
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|rsrcName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

