begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|TestStripedBlockUtil
specifier|public
class|class
name|TestStripedBlockUtil
block|{
DECL|field|DATA_BLK_NUM
specifier|private
specifier|final
name|short
name|DATA_BLK_NUM
init|=
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|PARITY_BLK_NUM
specifier|private
specifier|final
name|short
name|PARITY_BLK_NUM
init|=
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|BLK_GROUP_SIZE
specifier|private
specifier|final
name|short
name|BLK_GROUP_SIZE
init|=
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
decl_stmt|;
DECL|field|CELLSIZE
specifier|private
specifier|final
name|int
name|CELLSIZE
init|=
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|method|createDummyLocatedBlock ()
specifier|private
name|LocatedStripedBlock
name|createDummyLocatedBlock
parameter_list|()
block|{
specifier|final
name|long
name|blockGroupID
init|=
operator|-
literal|1048576
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[
name|BLK_GROUP_SIZE
index|]
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
operator|new
name|String
index|[
name|BLK_GROUP_SIZE
index|]
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|BLK_GROUP_SIZE
index|]
decl_stmt|;
name|int
index|[]
name|indices
init|=
operator|new
name|int
index|[
name|BLK_GROUP_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLK_GROUP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|+
literal|2
operator|)
operator|%
name|DATA_BLK_NUM
expr_stmt|;
comment|// Location port always equal to logical index of a block,
comment|// for easier verification
name|locs
index|[
name|i
index|]
operator|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|storageIDs
index|[
name|i
index|]
operator|=
name|locs
index|[
name|i
index|]
operator|.
name|getDatanodeUuid
argument_list|()
expr_stmt|;
name|storageTypes
index|[
name|i
index|]
operator|=
name|StorageType
operator|.
name|DISK
expr_stmt|;
block|}
return|return
operator|new
name|LocatedStripedBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"pool"
argument_list|,
name|blockGroupID
argument_list|)
argument_list|,
name|locs
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testParseDummyStripedBlock ()
specifier|public
name|void
name|testParseDummyStripedBlock
parameter_list|()
block|{
name|LocatedStripedBlock
name|lsb
init|=
name|createDummyLocatedBlock
argument_list|()
decl_stmt|;
name|LocatedBlock
index|[]
name|blocks
init|=
name|parseStripedBlockGroup
argument_list|(
name|lsb
argument_list|,
name|CELLSIZE
argument_list|,
name|DATA_BLK_NUM
argument_list|,
name|PARITY_BLK_NUM
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATA_BLK_NUM
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|BlockIdManager
operator|.
name|getBlockIndex
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
name|CELLSIZE
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyInternalBlocks (long numBytesInGroup, long[] expected)
specifier|private
name|void
name|verifyInternalBlocks
parameter_list|(
name|long
name|numBytesInGroup
parameter_list|,
name|long
index|[]
name|expected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|BLK_GROUP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|getInternalBlockLength
argument_list|(
name|numBytesInGroup
argument_list|,
name|CELLSIZE
argument_list|,
name|DATA_BLK_NUM
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetInternalBlockLength ()
specifier|public
name|void
name|testGetInternalBlockLength
parameter_list|()
block|{
comment|// A small delta that is smaller than a cell
specifier|final
name|int
name|delta
init|=
literal|10
decl_stmt|;
assert|assert
name|delta
operator|<
name|CELLSIZE
assert|;
comment|// Block group is smaller than a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
operator|-
name|delta
argument_list|,
operator|new
name|long
index|[]
block|{
name|CELLSIZE
operator|-
name|delta
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
operator|-
name|delta
block|,
name|CELLSIZE
operator|-
name|delta
block|,
name|CELLSIZE
operator|-
name|delta
block|}
argument_list|)
expr_stmt|;
comment|// Block group is exactly as large as a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
argument_list|,
operator|new
name|long
index|[]
block|{
name|CELLSIZE
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group is a little larger than a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
operator|+
name|delta
argument_list|,
operator|new
name|long
index|[]
block|{
name|CELLSIZE
block|,
name|delta
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and ends at stripe boundary
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and ends at cell boundary
comment|// (not ending at stripe boundary)
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
operator|+
name|CELLSIZE
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and doesn't end at cell boundary
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
operator|-
name|delta
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
operator|-
name|delta
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

