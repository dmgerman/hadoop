begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Need to cover the following combinations:  * 1. Block group size:  *  1.1 One byte  *  1.2 Smaller than cell  *  1.3 One full cell  *  1.4 x full cells, where x is smaller than number of data blocks  *  1.5 x full cells plus a partial cell  *  1.6 One full stripe  *  1.7 One full stripe plus a partial cell  *  1.8 One full stripe plus x full cells  *  1.9 One full stripe plus x full cells plus a partial cell  *  1.10 y full stripes, but smaller than full block group size  *  1.11 Full block group size  *  * 2. Byte range start  *  2.1 Zero  *  2.2 Within first cell  *  2.3 End of first cell  *  2.4 Start of a middle* cell in the first stripe (* neither first or last)  *  2.5 End of middle cell in the first stripe  *  2.6 Within a middle cell in the first stripe  *  2.7 Start of the last cell in the first stripe  *  2.8 Within the last cell in the first stripe  *  2.9 End of the last cell in the first stripe  *  2.10 Start of a middle stripe  *  2.11 Within a middle stripe  *  2.12 End of a middle stripe  *  2.13 Start of the last stripe  *  2.14 Within the last stripe  *  2.15 End of the last stripe (last byte)  *  * 3. Byte range length: same settings as block group size  *  * We should test in total 11 x 15 x 11 = 1815 combinations  * TODO: test parity block logic  */
end_comment

begin_class
DECL|class|TestStripedBlockUtil
specifier|public
class|class
name|TestStripedBlockUtil
block|{
comment|// use hard coded policy - see HDFS-9816
DECL|field|EC_POLICY
specifier|private
specifier|final
name|ErasureCodingPolicy
name|EC_POLICY
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemPolicies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
DECL|field|DATA_BLK_NUM
specifier|private
specifier|final
name|short
name|DATA_BLK_NUM
init|=
operator|(
name|short
operator|)
name|EC_POLICY
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|PARITY_BLK_NUM
specifier|private
specifier|final
name|short
name|PARITY_BLK_NUM
init|=
operator|(
name|short
operator|)
name|EC_POLICY
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|BLK_GROUP_WIDTH
specifier|private
specifier|final
name|short
name|BLK_GROUP_WIDTH
init|=
call|(
name|short
call|)
argument_list|(
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
argument_list|)
decl_stmt|;
DECL|field|CELLSIZE
specifier|private
specifier|final
name|int
name|CELLSIZE
init|=
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|FULL_STRIPE_SIZE
specifier|private
specifier|final
name|int
name|FULL_STRIPE_SIZE
init|=
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
decl_stmt|;
comment|/** number of full stripes in a full block group */
DECL|field|BLK_GROUP_STRIPE_NUM
specifier|private
specifier|final
name|int
name|BLK_GROUP_STRIPE_NUM
init|=
literal|16
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|blockGroupSizes
specifier|private
name|int
index|[]
name|blockGroupSizes
decl_stmt|;
DECL|field|byteRangeStartOffsets
specifier|private
name|int
index|[]
name|byteRangeStartOffsets
decl_stmt|;
DECL|field|byteRangeSizes
specifier|private
name|int
index|[]
name|byteRangeSizes
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|blockGroupSizes
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|CELLSIZE
block|,
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
block|,
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|FULL_STRIPE_SIZE
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|getDelta
argument_list|(
name|BLK_GROUP_STRIPE_NUM
argument_list|)
operator|*
name|FULL_STRIPE_SIZE
block|,
name|BLK_GROUP_STRIPE_NUM
operator|*
name|FULL_STRIPE_SIZE
block|}
expr_stmt|;
name|byteRangeStartOffsets
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|CELLSIZE
operator|-
literal|1
block|}
expr_stmt|;
name|byteRangeSizes
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|CELLSIZE
block|,
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
block|,
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|FULL_STRIPE_SIZE
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
block|,
name|FULL_STRIPE_SIZE
operator|+
name|getDelta
argument_list|(
name|DATA_BLK_NUM
argument_list|)
operator|*
name|CELLSIZE
operator|+
name|getDelta
argument_list|(
name|CELLSIZE
argument_list|)
block|,
name|getDelta
argument_list|(
name|BLK_GROUP_STRIPE_NUM
argument_list|)
operator|*
name|FULL_STRIPE_SIZE
block|,
name|BLK_GROUP_STRIPE_NUM
operator|*
name|FULL_STRIPE_SIZE
block|}
expr_stmt|;
block|}
DECL|method|getDelta (int size)
specifier|private
name|int
name|getDelta
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|size
operator|-
literal|2
argument_list|)
return|;
block|}
DECL|method|hashIntToByte (int i)
specifier|private
name|byte
name|hashIntToByte
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|BYTE_MASK
init|=
literal|0xff
decl_stmt|;
return|return
call|(
name|byte
call|)
argument_list|(
operator|(
operator|(
name|i
operator|+
literal|13
operator|)
operator|*
literal|29
operator|)
operator|&
name|BYTE_MASK
argument_list|)
return|;
block|}
DECL|method|createDummyLocatedBlock (int bgSize)
specifier|private
name|LocatedStripedBlock
name|createDummyLocatedBlock
parameter_list|(
name|int
name|bgSize
parameter_list|)
block|{
specifier|final
name|long
name|blockGroupID
init|=
operator|-
literal|1048576
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[
name|BLK_GROUP_WIDTH
index|]
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
operator|new
name|String
index|[
name|BLK_GROUP_WIDTH
index|]
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|BLK_GROUP_WIDTH
index|]
decl_stmt|;
name|byte
index|[]
name|indices
init|=
operator|new
name|byte
index|[
name|BLK_GROUP_WIDTH
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLK_GROUP_WIDTH
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|%
name|DATA_BLK_NUM
argument_list|)
expr_stmt|;
comment|// Location port always equal to logical index of a block,
comment|// for easier verification
name|locs
index|[
name|i
index|]
operator|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|storageIDs
index|[
name|i
index|]
operator|=
name|locs
index|[
name|i
index|]
operator|.
name|getDatanodeUuid
argument_list|()
expr_stmt|;
name|storageTypes
index|[
name|i
index|]
operator|=
name|StorageType
operator|.
name|DISK
expr_stmt|;
block|}
return|return
operator|new
name|LocatedStripedBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"pool"
argument_list|,
name|blockGroupID
argument_list|,
name|bgSize
argument_list|,
literal|1001
argument_list|)
argument_list|,
name|locs
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createInternalBlkBuffers (int bgSize)
specifier|private
name|byte
index|[]
index|[]
name|createInternalBlkBuffers
parameter_list|(
name|int
name|bgSize
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|bufs
init|=
operator|new
name|byte
index|[
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
index|]
index|[]
decl_stmt|;
name|int
index|[]
name|pos
init|=
operator|new
name|int
index|[
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bufSize
init|=
operator|(
name|int
operator|)
name|getInternalBlockLength
argument_list|(
name|bgSize
argument_list|,
name|CELLSIZE
argument_list|,
name|DATA_BLK_NUM
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|bufs
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|bufSize
index|]
expr_stmt|;
name|pos
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|done
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|done
operator|<
name|bgSize
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|done
operator|%
name|CELLSIZE
operator|==
literal|0
argument_list|)
expr_stmt|;
name|StripingCell
name|cell
init|=
operator|new
name|StripingCell
argument_list|(
name|EC_POLICY
argument_list|,
name|CELLSIZE
argument_list|,
name|done
operator|/
name|CELLSIZE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|idxInStripe
init|=
name|cell
operator|.
name|idxInStripe
decl_stmt|;
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|CELLSIZE
argument_list|,
name|bgSize
operator|-
name|done
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|bufs
index|[
name|idxInStripe
index|]
index|[
name|pos
index|[
name|idxInStripe
index|]
operator|+
name|i
index|]
operator|=
name|hashIntToByte
argument_list|(
name|done
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|done
operator|+=
name|size
expr_stmt|;
name|pos
index|[
name|idxInStripe
index|]
operator|+=
name|size
expr_stmt|;
block|}
return|return
name|bufs
return|;
block|}
annotation|@
name|Test
DECL|method|testParseDummyStripedBlock ()
specifier|public
name|void
name|testParseDummyStripedBlock
parameter_list|()
block|{
name|LocatedStripedBlock
name|lsb
init|=
name|createDummyLocatedBlock
argument_list|(
name|BLK_GROUP_STRIPE_NUM
operator|*
name|FULL_STRIPE_SIZE
argument_list|)
decl_stmt|;
name|LocatedBlock
index|[]
name|blocks
init|=
name|parseStripedBlockGroup
argument_list|(
name|lsb
argument_list|,
name|CELLSIZE
argument_list|,
name|DATA_BLK_NUM
argument_list|,
name|PARITY_BLK_NUM
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DATA_BLK_NUM
operator|+
name|PARITY_BLK_NUM
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATA_BLK_NUM
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|BlockIdManager
operator|.
name|getBlockIndex
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyInternalBlocks (int numBytesInGroup, int[] expected)
specifier|private
name|void
name|verifyInternalBlocks
parameter_list|(
name|int
name|numBytesInGroup
parameter_list|,
name|int
index|[]
name|expected
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|BLK_GROUP_WIDTH
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|getInternalBlockLength
argument_list|(
name|numBytesInGroup
argument_list|,
name|CELLSIZE
argument_list|,
name|DATA_BLK_NUM
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetInternalBlockLength ()
specifier|public
name|void
name|testGetInternalBlockLength
parameter_list|()
block|{
comment|// A small delta that is smaller than a cell
specifier|final
name|int
name|delta
init|=
literal|10
decl_stmt|;
comment|// Block group is smaller than a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
operator|-
name|delta
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
operator|-
name|delta
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
operator|-
name|delta
block|,
name|CELLSIZE
operator|-
name|delta
block|,
name|CELLSIZE
operator|-
name|delta
block|}
argument_list|)
expr_stmt|;
comment|// Block group is exactly as large as a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group is a little larger than a cell
name|verifyInternalBlocks
argument_list|(
name|CELLSIZE
operator|+
name|delta
argument_list|,
operator|new
name|int
index|[]
block|{
name|CELLSIZE
block|,
name|delta
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|,
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and ends at stripe boundary
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and ends at cell boundary
comment|// (not ending at stripe boundary)
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
operator|+
name|CELLSIZE
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|,
literal|3
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
comment|// Block group contains multiple stripes and doesn't end at cell boundary
name|verifyInternalBlocks
argument_list|(
literal|2
operator|*
name|DATA_BLK_NUM
operator|*
name|CELLSIZE
operator|-
name|delta
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
operator|-
name|delta
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|,
literal|2
operator|*
name|CELLSIZE
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test dividing a byte range into aligned stripes and verify the aligned    * ranges can be translated back to the byte range.    */
annotation|@
name|Test
DECL|method|testDivideByteRangeIntoStripes ()
specifier|public
name|void
name|testDivideByteRangeIntoStripes
parameter_list|()
block|{
name|ByteBuffer
name|assembled
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|BLK_GROUP_STRIPE_NUM
operator|*
name|FULL_STRIPE_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bgSize
range|:
name|blockGroupSizes
control|)
block|{
name|LocatedStripedBlock
name|blockGroup
init|=
name|createDummyLocatedBlock
argument_list|(
name|bgSize
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|internalBlkBufs
init|=
name|createInternalBlkBuffers
argument_list|(
name|bgSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|brStart
range|:
name|byteRangeStartOffsets
control|)
block|{
for|for
control|(
name|int
name|brSize
range|:
name|byteRangeSizes
control|)
block|{
if|if
condition|(
name|brStart
operator|+
name|brSize
operator|>
name|bgSize
condition|)
block|{
continue|continue;
block|}
name|AlignedStripe
index|[]
name|stripes
init|=
name|divideByteRangeIntoStripes
argument_list|(
name|EC_POLICY
argument_list|,
name|CELLSIZE
argument_list|,
name|blockGroup
argument_list|,
name|brStart
argument_list|,
name|brStart
operator|+
name|brSize
operator|-
literal|1
argument_list|,
name|assembled
argument_list|)
decl_stmt|;
for|for
control|(
name|AlignedStripe
name|stripe
range|:
name|stripes
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DATA_BLK_NUM
condition|;
name|i
operator|++
control|)
block|{
name|StripingChunk
name|chunk
init|=
name|stripe
operator|.
name|chunks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
operator|||
name|chunk
operator|.
name|state
operator|!=
name|StripingChunk
operator|.
name|REQUESTED
condition|)
block|{
continue|continue;
block|}
name|int
name|done
init|=
literal|0
decl_stmt|;
name|int
name|len
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|slice
range|:
name|chunk
operator|.
name|getChunkBuffer
argument_list|()
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|len
operator|=
name|slice
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|slice
operator|.
name|put
argument_list|(
name|internalBlkBufs
index|[
name|i
index|]
argument_list|,
operator|(
name|int
operator|)
name|stripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
name|done
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|done
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hashIntToByte
argument_list|(
name|brStart
operator|+
name|i
argument_list|)
operator|!=
name|assembled
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Oops"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Byte at "
operator|+
operator|(
name|brStart
operator|+
name|i
operator|)
operator|+
literal|" should be the same"
argument_list|,
name|hashIntToByte
argument_list|(
name|brStart
operator|+
name|i
argument_list|)
argument_list|,
name|assembled
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

