begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|getDefaultBlockSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|getFileData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test of FileContext apis on Webhdfs.  */
end_comment

begin_class
DECL|class|TestWebHdfsFileContextMainOperations
specifier|public
class|class
name|TestWebHdfsFileContextMainOperations
extends|extends
name|FileContextMainOperationsBaseTest
block|{
DECL|field|cluster
specifier|protected
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|defaultWorkingDirectory
specifier|private
specifier|static
name|Path
name|defaultWorkingDirectory
decl_stmt|;
DECL|field|webhdfsUrl
specifier|protected
specifier|static
name|URI
name|webhdfsUrl
decl_stmt|;
DECL|field|numBlocks
specifier|protected
specifier|static
name|int
name|numBlocks
init|=
literal|2
decl_stmt|;
DECL|field|data
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|data
init|=
name|getFileData
argument_list|(
name|numBlocks
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|CONF
specifier|protected
specifier|static
specifier|final
name|HdfsConfiguration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getDefaultWorkingDirectory ()
specifier|public
name|Path
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|defaultWorkingDirectory
return|;
block|}
annotation|@
name|Override
DECL|method|createFileContextHelper ()
specifier|protected
name|FileContextTestHelper
name|createFileContextHelper
parameter_list|()
block|{
return|return
operator|new
name|FileContextTestHelper
argument_list|()
return|;
block|}
DECL|method|getWebhdfsUrl ()
specifier|public
name|URI
name|getWebhdfsUrl
parameter_list|()
block|{
return|return
name|webhdfsUrl
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|clusterSetupAtBeginning ()
specifier|public
specifier|static
name|void
name|clusterSetupAtBeginning
parameter_list|()
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|webhdfsUrl
operator|=
operator|new
name|URI
argument_list|(
name|WebHdfs
operator|.
name|SCHEME
operator|+
literal|"://"
operator|+
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|webhdfsUrl
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|defaultWorkingDirectory
operator|=
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|defaultWorkingDirectory
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|webhdfsUrlReal
init|=
name|getWebhdfsUrl
argument_list|()
decl_stmt|;
name|Path
name|testBuildData
init|=
operator|new
name|Path
argument_list|(
name|webhdfsUrlReal
operator|+
literal|"/"
operator|+
name|GenericTestUtils
operator|.
name|DEFAULT_TEST_DATA_PATH
operator|+
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|testBuildData
argument_list|,
literal|"root-uri"
argument_list|)
decl_stmt|;
name|localFsRootPath
operator|=
name|rootPath
operator|.
name|makeQualified
argument_list|(
name|webhdfsUrlReal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestRootPath (FileContext fc, String path)
specifier|private
name|Path
name|getTestRootPath
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listCorruptedBlocksSupported ()
specifier|protected
name|boolean
name|listCorruptedBlocksSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Test FileContext APIs when symlinks are not supported    * TODO: Open separate JIRA for full support of the Symlink in webhdfs    */
annotation|@
name|Test
DECL|method|testUnsupportedSymlink ()
specifier|public
name|void
name|testUnsupportedSymlink
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * WebHdfs client Partially supports the Symlink.      * creation of Symlink is supported, but the getLinkTargetPath() api is not supported currently,      * Implement the test case once the full support is available.      */
block|}
comment|/**    * TODO: Open JIRA for the idiosyncrasies between hdfs and webhdfs    */
DECL|method|testSetVerifyChecksum ()
specifier|public
name|void
name|testSetVerifyChecksum
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|rootPath
init|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"zoo"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//In webhdfs scheme fc.setVerifyChecksum() can be called only after
comment|// writing first few bytes but in case of the hdfs scheme we can call
comment|// immediately after the creation call.
comment|// instruct FS to verify checksum through the FileContext:
name|fc
operator|.
name|setVerifyChecksum
argument_list|(
literal|true
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|long
name|len
init|=
name|fileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|len
operator|==
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bb
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|fsdis
init|=
name|fc
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|fsdis
operator|.
name|readFully
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsdis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|data
argument_list|,
name|bb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|ClusterShutdownAtEnd ()
specifier|public
specifier|static
name|void
name|ClusterShutdownAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

