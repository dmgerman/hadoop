begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.mover
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_MOVER_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KEYTAB_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DATA_TRANSFER_PROTECTION_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
operator|.
name|DBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|TestBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|InternalDataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
operator|.
name|Mover
operator|.
name|MLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
DECL|class|TestMover
specifier|public
class|class
name|TestMover
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMover
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|keytabFile
specifier|private
name|File
name|keytabFile
decl_stmt|;
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
static|static
block|{
name|TestBalancer
operator|.
name|initTestSetup
argument_list|()
expr_stmt|;
block|}
DECL|method|initConf (Configuration conf)
specifier|static
name|void
name|initConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_MOVEDWINWIDTH_KEY
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|newMover (Configuration conf)
specifier|static
name|Mover
name|newMover
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|nnMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|nn
range|:
name|namenodes
control|)
block|{
name|nnMap
operator|.
name|put
argument_list|(
name|nn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|nncs
init|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|nnMap
argument_list|,
name|Mover
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|,
name|conf
argument_list|,
name|NameNodeConnector
operator|.
name|DEFAULT_MAX_IDLE_ITERATIONS
argument_list|)
decl_stmt|;
return|return
operator|new
name|Mover
argument_list|(
name|nncs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testScheduleSameBlock ()
specifier|public
name|void
name|testScheduleSameBlock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testScheduleSameBlock/file"
decl_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleSameBlock"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Mover
name|mover
init|=
name|newMover
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|mover
operator|.
name|init
argument_list|()
expr_stmt|;
specifier|final
name|Mover
operator|.
name|Processor
name|processor
init|=
name|mover
operator|.
expr|new
name|Processor
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MLocation
argument_list|>
name|locations
init|=
name|MLocation
operator|.
name|toLocations
argument_list|(
name|lb
argument_list|)
decl_stmt|;
specifier|final
name|MLocation
name|ml
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DBlock
name|db
init|=
name|mover
operator|.
name|newDBlock
argument_list|(
name|lb
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|processor
operator|.
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|ml
argument_list|,
name|storageTypes
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|processor
operator|.
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|ml
argument_list|,
name|storageTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testWithinSameNode (Configuration conf)
specifier|private
name|void
name|testWithinSameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testScheduleWithinSameNode/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testScheduleWithinSameNode"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// write to DISK
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleWithinSameNode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupStoragePoliciesAndPaths (DistributedFileSystem dfs1, DistributedFileSystem dfs2, Path dir, String file)
specifier|private
name|void
name|setupStoragePoliciesAndPaths
parameter_list|(
name|DistributedFileSystem
name|dfs1
parameter_list|,
name|DistributedFileSystem
name|dfs2
parameter_list|,
name|Path
name|dir
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|dfs1
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs2
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|//Write to DISK on nn1
name|dfs1
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs1
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleWithinSameNode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Write to Archive on nn2
name|dfs2
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|out
operator|=
name|dfs2
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleWithinSameNode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs1
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|//verify before movement
name|lb
operator|=
name|dfs2
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|storageTypes
operator|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
expr_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForLocatedBlockWithDiskStorageType ( final DistributedFileSystem dfs, final String file, int expectedDiskCount)
specifier|private
name|void
name|waitForLocatedBlockWithDiskStorageType
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|String
name|file
parameter_list|,
name|int
name|expectedDiskCount
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|LocatedBlock
name|lb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting located blocks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|diskCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
condition|)
block|{
name|diskCount
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Archive replica count, expected={} and actual={}"
argument_list|,
name|expectedDiskCount
argument_list|,
name|diskCount
argument_list|)
expr_stmt|;
return|return
name|expectedDiskCount
operator|==
name|diskCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithFederateClusterWithinSameNode ()
specifier|public
name|void
name|testWithFederateClusterWithinSameNode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/test/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|URI
name|nn1
init|=
name|dfs1
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|dfs2
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|setupStoragePoliciesAndPaths
argument_list|(
name|dfs1
argument_list|,
name|dfs2
argument_list|,
name|dir
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|dfs1
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|nn1
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|//move to DISK
name|dfs2
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|nn2
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to DISK should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs1
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|waitForLocatedBlockWithDiskStorageType
argument_list|(
name|dfs2
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithFederatedCluster ()
specifier|public
name|void
name|testWithFederatedCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/test/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs1
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs2
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|URI
name|nn1
init|=
name|dfs1
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|dfs2
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|setupStoragePoliciesAndPaths
argument_list|(
name|dfs1
argument_list|,
name|dfs2
argument_list|,
name|dir
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|//Changing storage policies
name|dfs1
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|dfs2
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|nn1
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|,
name|nn2
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to DISK should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs1
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|waitForLocatedBlockWithDiskStorageType
argument_list|(
name|dfs2
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testWithFederatedHACluster ()
specifier|public
name|void
name|testWithFederatedHACluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedHAConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|URI
name|nn1
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/test/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs1
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|nn1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs2
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|nn2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|setupStoragePoliciesAndPaths
argument_list|(
name|dfs1
argument_list|,
name|dfs2
argument_list|,
name|dir
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|//Changing Storage Policies
name|dfs1
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|dfs2
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|nn1
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|,
name|nn2
operator|+
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to DISK should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs1
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|waitForLocatedBlockWithDiskStorageType
argument_list|(
name|dfs2
argument_list|,
name|file
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForLocatedBlockWithArchiveStorageType ( final DistributedFileSystem dfs, final String file, int expectedArchiveCount)
specifier|private
name|void
name|waitForLocatedBlockWithArchiveStorageType
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|String
name|file
parameter_list|,
name|int
name|expectedArchiveCount
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|LocatedBlock
name|lb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting located blocks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|archiveCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|StorageType
operator|.
name|ARCHIVE
operator|==
name|storageType
condition|)
block|{
name|archiveCount
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Archive replica count, expected={} and actual={}"
argument_list|,
name|expectedArchiveCount
argument_list|,
name|archiveCount
argument_list|)
expr_stmt|;
return|return
name|expectedArchiveCount
operator|==
name|archiveCount
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScheduleBlockWithinSameNode ()
specifier|public
name|void
name|testScheduleBlockWithinSameNode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testWithinSameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMovePaths (List<Path> actual, Path... expected)
specifier|private
name|void
name|checkMovePaths
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|actual
parameter_list|,
name|Path
modifier|...
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|expected
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test Mover Cli by specifying a list of files/directories using option "-p".    * There is only one namenode (and hence name service) specified in the conf.    */
annotation|@
name|Test
DECL|method|testMoverCli ()
specifier|public
name|void
name|testMoverCli
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|clusterConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception for illegal path bar"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"bar is not absolute"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|nn
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|movePaths
operator|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|namenodes
operator|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithHAConf ()
specifier|public
name|void
name|testMoverCliWithHAConf
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
literal|"MyCluster"
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|nn
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://MyCluster"
argument_list|)
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithFederation ()
specifier|public
name|void
name|testMoverCliWithFederation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|clusterConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for missing authority information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"does not contain scheme and authority"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"hdfs:///foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for missing authority information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"does not contain scheme and authority"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"wrong-hdfs://ns1/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for wrong scheme"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot resolve the path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|URI
name|nn1
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
name|nn1
operator|+
literal|"/foo"
argument_list|,
name|nn1
operator|+
literal|"/bar"
argument_list|,
name|nn2
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn1
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn2
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithFederationHA ()
specifier|public
name|void
name|testMoverCliWithFederationHA
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|clusterConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedHAConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|URI
name|nn1
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn3
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
name|nn1
operator|+
literal|"/foo"
argument_list|,
name|nn1
operator|+
literal|"/bar"
argument_list|,
name|nn2
operator|+
literal|"/foo/bar"
argument_list|,
name|nn3
operator|+
literal|"/foobar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn1
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn2
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn3
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTwoReplicaSameStorageTypeShouldNotSelect ()
specifier|public
name|void
name|testTwoReplicaSameStorageTypeShouldNotSelect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HDFS-8147
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testForTwoReplicaSameStorageTypeShouldNotSelect"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testForTwoReplicaSameStorageTypeShouldNotSelect"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoveWhenStoragePolicyNotSatisfying ()
specifier|public
name|void
name|testMoveWhenStoragePolicyNotSatisfying
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HDFS-8147
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoveWhenStoragePolicyNotSatisfying"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testMoveWhenStoragePolicyNotSatisfying"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|int
name|exitcode
init|=
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exit code should be "
operator|+
name|exitcode
argument_list|,
name|exitcode
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoveWhenStoragePolicySatisfierIsRunning ()
specifier|public
name|void
name|testMoveWhenStoragePolicySatisfierIsRunning
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoveWhenStoragePolicySatisfierIsRunning"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testMoveWhenStoragePolicySatisfierIsRunning"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|int
name|exitcode
init|=
name|ExitStatus
operator|.
name|SKIPPED_DUE_TO_SPS
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exit code should be "
operator|+
name|exitcode
argument_list|,
name|exitcode
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverFailedRetry ()
specifier|public
name|void
name|testMoverFailedRetry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HDFS-8147
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoverFailedRetry"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testMoverFailedRetry"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete block file so, block move will fail with FileNotFoundException
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|corruptBlockOnDataNodesByDeletingBlockFile
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement should fail after some retry"
argument_list|,
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testBalancerMaxIterationTimeNotAffectMover ()
specifier|public
name|void
name|testBalancerMaxIterationTimeNotAffectMover
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|blockSize
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set a fairly large block size to run into the limitation
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// set a somewhat grater than zero max iteration time to have the move time
comment|// to surely exceed it
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BALANCER_MAX_ITERATION_TIME_KEY
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set client socket timeout to have an IN_PROGRESS notification back from
comment|// the DataNode about the copy in every second.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMaxIterationTime.dat"
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|short
name|rep_factor
init|=
literal|1
decl_stmt|;
name|int
name|seed
init|=
literal|0xFAFAFA
decl_stmt|;
comment|// write to DISK
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|4L
operator|*
name|blockSize
argument_list|,
name|rep_factor
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|fs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Retcode expected to be ExitStatus.SUCCESS (0)."
argument_list|,
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
DECL|field|dataBlocks
specifier|private
specifier|final
name|int
name|dataBlocks
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|parityBlocks
specifier|private
specifier|final
name|int
name|parityBlocks
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|stripesPerBlock
specifier|private
specifier|final
name|int
name|stripesPerBlock
init|=
literal|4
decl_stmt|;
DECL|field|defaultBlockSize
specifier|private
specifier|final
name|int
name|defaultBlockSize
init|=
name|cellSize
operator|*
name|stripesPerBlock
decl_stmt|;
DECL|method|initConfWithStripe (Configuration conf)
name|void
name|initConfWithStripe
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|defaultBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoverWithStripedFile ()
specifier|public
name|void
name|testMoverWithStripedFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConfWithStripe
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start 10 datanodes
name|int
name|numOfDatanodes
init|=
literal|10
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|10
operator|*
name|defaultBlockSize
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set "/bar" directory with HOT storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|barDir
init|=
literal|"/bar"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set an EC policy on "/bar" directory
name|client
operator|.
name|setErasureCodingPolicy
argument_list|(
name|barDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|String
name|fooFile
init|=
literal|"/bar/foo"
decl_stmt|;
name|long
name|fileLen
init|=
literal|20
operator|*
name|defaultBlockSize
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// start 5 more datanodes
name|numOfDatanodes
operator|+=
literal|5
expr_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
literal|5
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// move file to ARCHIVE
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// run Mover
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|barDir
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|locatedBlocks
operator|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|StripedFileTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// start 5 more datanodes
name|numOfDatanodes
operator|+=
literal|5
expr_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
literal|5
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// move file blocks to ONE_SSD policy
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"ONE_SSD"
argument_list|)
expr_stmt|;
comment|// run Mover
name|rc
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|barDir
block|}
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
comment|// Movements should have been ignored for the unsupported policy on
comment|// striped file
name|locatedBlocks
operator|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initSecureConf (Configuration conf)
specifier|private
name|void
name|initSecureConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|username
init|=
literal|"mover"
decl_stmt|;
name|File
name|baseDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestMover
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|baseDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|MiniKdc
name|kdc
init|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|baseDir
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|KerberosName
operator|.
name|resetDefaultRealm
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected configuration to enable security"
argument_list|,
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|keytabFile
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|username
operator|+
literal|".keytab"
argument_list|)
expr_stmt|;
name|String
name|keytab
init|=
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// Windows will not reverse name lookup "127.0.0.1" to "localhost".
name|String
name|krbInstance
init|=
name|Path
operator|.
name|WINDOWS
condition|?
literal|"127.0.0.1"
else|:
literal|"localhost"
decl_stmt|;
name|principal
operator|=
name|username
operator|+
literal|"/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
expr_stmt|;
name|String
name|spnegoPrincipal
init|=
literal|"HTTP/"
operator|+
name|krbInstance
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|username
argument_list|,
name|username
operator|+
literal|"/"
operator|+
name|krbInstance
argument_list|,
literal|"HTTP/"
operator|+
name|krbInstance
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|spnegoPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATA_TRANSFER_PROTECTION_KEY
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_MOVER_KEYTAB_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_MOVER_ADDRESS_KEY
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_MOVER_KEYTAB_FILE_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_MOVER_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|String
name|keystoresDir
init|=
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestMover
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getClientSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|KeyStoreTestUtil
operator|.
name|getServerSSLConfigFileName
argument_list|()
argument_list|)
expr_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Mover runs fine when logging in with a keytab in kerberized env.    * Reusing testWithinSameNode here for basic functionality testing.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoverWithKeytabs ()
specifier|public
name|void
name|testMoverWithKeytabs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
name|initSecureConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that mover runs Ok.
name|testWithinSameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify that UGI was logged in using keytab.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Reset UGI so that other tests are not affected.
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that mover can't move pinned blocks.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testMoverWithPinnedBlocks ()
specifier|public
name|void
name|testMoverWithPinnedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Sets bigger retry max attempts value so that test case will timed out if
comment|// block pinning errors are not handled properly during block movement.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoverWithPinnedBlocks/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testMoverWithPinnedBlocks"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// write to DISK
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|DEFAULT_BLOCK_SIZE
operator|*
literal|3
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// Adding one SSD based data node to the cluster.
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|SSD
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
name|newtypes
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
comment|// Mock FsDatasetSpi#getPinning to show that the block is pinned.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulate block pinning in datanode {}"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|InternalDataNodeTestUtils
operator|.
name|mockDatanodeBlkPinning
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// move file blocks to ONE_SSD policy
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"ONE_SSD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|int
name|exitcode
init|=
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement should fail"
argument_list|,
name|exitcode
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that mover should work well with pinned blocks as well as    * failed blocks. Mover should continue retrying the failed blocks only.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testMoverFailedRetryWithPinnedBlocks ()
specifier|public
name|void
name|testMoverFailedRetryWithPinnedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|parenDir
init|=
literal|"/parent"
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|parenDir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|file1
init|=
literal|"/parent/testMoverFailedRetryWithPinnedBlocks1"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|DEFAULT_BLOCK_SIZE
operator|*
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Adding pinned blocks.
name|createFileWithFavoredDatanodes
argument_list|(
name|conf
argument_list|,
name|cluster
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
comment|// Delete block file so, block move will fail with FileNotFoundException
name|LocatedBlocks
name|locatedBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong block count"
argument_list|,
literal|2
argument_list|,
name|locatedBlocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|lb
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|corruptBlockOnDataNodesByDeletingBlockFile
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|parenDir
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|parenDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement should fail after some retry"
argument_list|,
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoverWhenStoragePolicyUnset ()
specifier|public
name|void
name|testMoverWhenStoragePolicyUnset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoverWhenStoragePolicyUnset"
decl_stmt|;
comment|// write to DISK
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified about the block location details
name|waitForLocatedBlockWithArchiveStorageType
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify before unset policy
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
operator|==
operator|(
name|lb
operator|.
name|getStorageTypes
argument_list|()
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// unset storage policy
name|dfs
operator|.
name|unsetStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to DISK should be successful"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
operator|(
name|lb
operator|.
name|getStorageTypes
argument_list|()
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFileWithFavoredDatanodes (final Configuration conf, final MiniDFSCluster cluster, final DistributedFileSystem dfs)
specifier|private
name|void
name|createFileWithFavoredDatanodes
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Adding two DISK based data node to the cluster.
comment|// Also, ensure that blocks are pinned in these new data nodes.
name|StorageType
index|[]
index|[]
name|newtypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
name|startAdditionalDNs
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
name|newtypes
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|InetSocketAddress
index|[]
name|favoredNodes
init|=
operator|new
name|InetSocketAddress
index|[
literal|2
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|dataNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|2
condition|;
name|i
operator|--
control|)
block|{
name|favoredNodes
index|[
name|j
operator|++
index|]
operator|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|file
init|=
literal|"/parent/testMoverFailedRetryWithPinnedBlocks2"
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
name|favoredNodes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|DEFAULT_BLOCK_SIZE
operator|*
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fileData
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Mock FsDatasetSpi#getPinning to show that the block is pinned.
name|LocatedBlocks
name|locatedBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong block count"
argument_list|,
literal|2
argument_list|,
name|locatedBlocks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|lb
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|datanodeInfo
init|=
name|lb
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulate block pinning in datanode {}"
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
name|InternalDataNodeTestUtils
operator|.
name|mockDatanodeBlkPinning
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|startAdditionalDNs (final Configuration conf, int newNodesRequired, StorageType[][] newTypes, final MiniDFSCluster cluster)
specifier|private
name|void
name|startAdditionalDNs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|int
name|newNodesRequired
parameter_list|,
name|StorageType
index|[]
index|[]
name|newTypes
parameter_list|,
specifier|final
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
name|newNodesRequired
argument_list|,
name|newTypes
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

