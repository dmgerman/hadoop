begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.mover
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
operator|.
name|DBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
operator|.
name|Mover
operator|.
name|MLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMover
specifier|public
class|class
name|TestMover
block|{
DECL|method|newMover (Configuration conf)
specifier|static
name|Mover
name|newMover
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|nnMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|nn
range|:
name|namenodes
control|)
block|{
name|nnMap
operator|.
name|put
argument_list|(
name|nn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|nncs
init|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|nnMap
argument_list|,
name|Mover
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|Mover
operator|.
name|MOVER_ID_PATH
argument_list|,
name|conf
argument_list|,
name|NameNodeConnector
operator|.
name|DEFAULT_MAX_IDLE_ITERATIONS
argument_list|)
decl_stmt|;
return|return
operator|new
name|Mover
argument_list|(
name|nncs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testScheduleSameBlock ()
specifier|public
name|void
name|testScheduleSameBlock
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testScheduleSameBlock/file"
decl_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleSameBlock"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Mover
name|mover
init|=
name|newMover
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|mover
operator|.
name|init
argument_list|()
expr_stmt|;
specifier|final
name|Mover
operator|.
name|Processor
name|processor
init|=
name|mover
operator|.
expr|new
name|Processor
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MLocation
argument_list|>
name|locations
init|=
name|MLocation
operator|.
name|toLocations
argument_list|(
name|lb
argument_list|)
decl_stmt|;
specifier|final
name|MLocation
name|ml
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DBlock
name|db
init|=
name|mover
operator|.
name|newDBlock
argument_list|(
name|lb
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|processor
operator|.
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|ml
argument_list|,
name|storageTypes
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|processor
operator|.
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|ml
argument_list|,
name|storageTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScheduleBlockWithinSameNode ()
specifier|public
name|void
name|testScheduleBlockWithinSameNode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testScheduleWithinSameNode/file"
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/testScheduleWithinSameNode"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// write to DISK
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"HOT"
argument_list|)
expr_stmt|;
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testScheduleWithinSameNode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successfull"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|storageTypes
operator|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
expr_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkMovePaths (List<Path> actual, Path... expected)
specifier|private
name|void
name|checkMovePaths
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|actual
parameter_list|,
name|Path
modifier|...
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|expected
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test Mover Cli by specifying a list of files/directories using option "-p".    * There is only one namenode (and hence name service) specified in the conf.    */
annotation|@
name|Test
DECL|method|testMoverCli ()
specifier|public
name|void
name|testMoverCli
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception for illegal path bar"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"bar is not absolute"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|nn
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|movePaths
operator|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
name|namenodes
operator|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithHAConf ()
specifier|public
name|void
name|testMoverCliWithHAConf
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
literal|"MyCluster"
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|nn
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"hdfs://MyCluster"
argument_list|)
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|movePaths
operator|.
name|containsKey
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithFederation ()
specifier|public
name|void
name|testMoverCliWithFederation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for missing authority information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"does not contain scheme and authority"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"hdfs:///foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for missing authority information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"does not contain scheme and authority"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"wrong-hdfs://ns1/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect exception for wrong scheme"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot resolve the path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|URI
name|nn1
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
name|nn1
operator|+
literal|"/foo"
argument_list|,
name|nn1
operator|+
literal|"/bar"
argument_list|,
name|nn2
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn1
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn2
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverCliWithFederationHA ()
specifier|public
name|void
name|testMoverCliWithFederationHA
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedHAConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|namenodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|URI
name|nn1
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn2
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|URI
name|nn3
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|movePaths
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
literal|"-p"
argument_list|,
name|nn1
operator|+
literal|"/foo"
argument_list|,
name|nn1
operator|+
literal|"/bar"
argument_list|,
name|nn2
operator|+
literal|"/foo/bar"
argument_list|,
name|nn3
operator|+
literal|"/foobar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|movePaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn1
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn2
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMovePaths
argument_list|(
name|movePaths
operator|.
name|get
argument_list|(
name|nn3
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTwoReplicaSameStorageTypeShouldNotSelect ()
specifier|public
name|void
name|testTwoReplicaSameStorageTypeShouldNotSelect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HDFS-8147
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testForTwoReplicaSameStorageTypeShouldNotSelect"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testForTwoReplicaSameStorageTypeShouldNotSelect"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify before movement
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|StorageType
operator|.
name|DISK
operator|==
name|storageType
argument_list|)
expr_stmt|;
block|}
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successfull"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Wait till namenode notified
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|storageTypes
operator|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
expr_stmt|;
name|int
name|archiveCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
if|if
condition|(
name|StorageType
operator|.
name|ARCHIVE
operator|==
name|storageType
condition|)
block|{
name|archiveCount
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|archiveCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoverFailedRetry ()
specifier|public
name|void
name|testMoverFailedRetry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HDFS-8147
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|file
init|=
literal|"/testMoverFailedRetry"
decl_stmt|;
comment|// write to DISK
specifier|final
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"testMoverFailedRetry"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete block file so, block move will fail with FileNotFoundException
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|corruptBlockOnDataNodesByDeletingBlockFile
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
comment|// move to ARCHIVE
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|file
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement should fail after some retry"
argument_list|,
name|ExitStatus
operator|.
name|IO_EXCEPTION
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|dataBlocks
name|int
name|dataBlocks
init|=
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|parityBlocks
name|int
name|parityBlocks
init|=
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
specifier|static
name|int
name|cellSize
init|=
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|stripesPerBlock
specifier|private
specifier|final
specifier|static
name|int
name|stripesPerBlock
init|=
literal|4
decl_stmt|;
DECL|field|DEFAULT_STRIPE_BLOCK_SIZE
specifier|static
name|int
name|DEFAULT_STRIPE_BLOCK_SIZE
init|=
name|cellSize
operator|*
name|stripesPerBlock
decl_stmt|;
DECL|method|initConfWithStripe (Configuration conf)
specifier|static
name|void
name|initConfWithStripe
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_STRIPE_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Dispatcher
operator|.
name|setBlockMoveWaitTime
argument_list|(
literal|3000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMoverWithStripedFile ()
specifier|public
name|void
name|testMoverWithStripedFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|initConfWithStripe
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start 10 datanodes
name|int
name|numOfDatanodes
init|=
literal|10
decl_stmt|;
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
name|long
name|capacity
init|=
literal|10
operator|*
name|DEFAULT_STRIPE_BLOCK_SIZE
decl_stmt|;
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numOfDatanodes
index|]
index|[
name|storagesPerDatanode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDatanode
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// set "/bar" directory with HOT storage policy.
name|ClientProtocol
name|client
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|barDir
init|=
literal|"/bar"
decl_stmt|;
name|client
operator|.
name|mkdirs
argument_list|(
name|barDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
name|HdfsServerConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
comment|// set "/bar" directory with EC zone.
name|client
operator|.
name|createErasureCodingZone
argument_list|(
name|barDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// write file to barDir
specifier|final
name|String
name|fooFile
init|=
literal|"/bar/foo"
decl_stmt|;
name|long
name|fileLen
init|=
literal|20
operator|*
name|DEFAULT_STRIPE_BLOCK_SIZE
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fooFile
argument_list|)
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|DFSTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
comment|// start 5 more datanodes
name|numOfDatanodes
operator|+=
literal|5
expr_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[
literal|5
index|]
index|[
name|storagesPerDatanode
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDatanode
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|capacity
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|,
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|capacities
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
comment|// move file to ARCHIVE
name|client
operator|.
name|setStoragePolicy
argument_list|(
name|barDir
argument_list|,
literal|"COLD"
argument_list|)
expr_stmt|;
comment|// run Mover
name|int
name|rc
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Mover
operator|.
name|Cli
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
block|,
name|barDir
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Movement to ARCHIVE should be successfull"
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// verify storage types and locations
name|locatedBlocks
operator|=
name|client
operator|.
name|getBlockLocations
argument_list|(
name|fooFile
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
for|for
control|(
name|StorageType
name|type
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|DFSTestUtil
operator|.
name|verifyLocatedStripedBlocks
argument_list|(
name|locatedBlocks
argument_list|,
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

