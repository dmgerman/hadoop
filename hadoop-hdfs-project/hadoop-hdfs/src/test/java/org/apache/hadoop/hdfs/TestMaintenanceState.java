begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This class tests node maintenance.  */
end_comment

begin_class
DECL|class|TestMaintenanceState
specifier|public
class|class
name|TestMaintenanceState
extends|extends
name|AdminStatesBaseTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMaintenanceState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXPIRATION_IN_MS
specifier|static
specifier|private
specifier|final
name|long
name|EXPIRATION_IN_MS
init|=
literal|50
decl_stmt|;
DECL|field|minMaintenanceR
specifier|private
name|int
name|minMaintenanceR
init|=
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_DEFAULT
decl_stmt|;
DECL|method|TestMaintenanceState ()
specifier|public
name|TestMaintenanceState
parameter_list|()
block|{
name|setUseCombinedHostFileManager
argument_list|()
expr_stmt|;
block|}
DECL|method|setMinMaintenanceR (int minMaintenanceR)
name|void
name|setMinMaintenanceR
parameter_list|(
name|int
name|minMaintenanceR
parameter_list|)
block|{
name|this
operator|.
name|minMaintenanceR
operator|=
name|minMaintenanceR
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_KEY
argument_list|,
name|minMaintenanceR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test valid value range for the config namenode.maintenance.replication.min.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMaintenanceMinReplConfigRange ()
specifier|public
name|void
name|testMaintenanceMinReplConfigRange
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting testMaintenanceMinReplConfigRange"
argument_list|)
expr_stmt|;
comment|// Case 1: Maintenance min replication less allowed minimum 0
name|setMinMaintenanceR
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cluster start should fail when 'dfs.namenode.maintenance"
operator|+
literal|".replication.min=-1'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Case 2: Maintenance min replication greater
comment|// allowed max of DFSConfigKeys.DFS_REPLICATION_KEY
name|int
name|defaultRepl
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
decl_stmt|;
name|setMinMaintenanceR
argument_list|(
name|defaultRepl
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cluster start should fail when 'dfs.namenode.maintenance"
operator|+
literal|".replication.min> "
operator|+
name|defaultRepl
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify a node can transition from AdminStates.ENTERING_MAINTENANCE to    * AdminStates.NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTakeNodeOutOfEnteringMaintenance ()
specifier|public
name|void
name|testTakeNodeOutOfEnteringMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTakeNodeOutOfEnteringMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testTakeNodeOutOfEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// When node is in ENTERING_MAINTENANCE state, it can still serve read
comment|// requests
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a AdminStates.ENTERING_MAINTENANCE node can expire and transition    * to AdminStates.NORMAL upon timeout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testEnteringMaintenanceExpiration ()
specifier|public
name|void
name|testEnteringMaintenanceExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testEnteringMaintenanceExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testEnteringMaintenanceExpiration.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// Adjust the expiration.
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify node stays in AdminStates.NORMAL with invalid expiration.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testInvalidExpiration ()
specifier|public
name|void
name|testInvalidExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testInvalidExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testInvalidExpiration.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// expiration has to be greater than Time.now().
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a dead node is put to maintenance, it transitions directly to    * AdminStates.IN_MAINTENANCE.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testPutDeadNodeToMaintenance ()
specifier|public
name|void
name|testPutDeadNodeToMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testPutDeadNodeToMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testPutDeadNodeToMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|int
name|deadInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadInMaintenance
operator|+
literal|1
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a dead node is put to maintenance, it transitions directly to    * AdminStates.IN_MAINTENANCE. Then AdminStates.IN_MAINTENANCE expires and    * transitions to AdminStates.NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testPutDeadNodeToMaintenanceWithExpiration ()
specifier|public
name|void
name|testPutDeadNodeToMaintenanceWithExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testPutDeadNodeToMaintenanceWithExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testPutDeadNodeToMaintenanceWithExpiration.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|int
name|deadInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// Adjust the expiration.
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// no change
name|assertEquals
argument_list|(
name|deadInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition from decommissioned state to maintenance state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionFromDecommissioned ()
specifier|public
name|void
name|testTransitionFromDecommissioned
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionFromDecommissioned"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testTransitionFromDecommissioned.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition from decommissioned state to maintenance state.    * After the maintenance state expires, it is transitioned to NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionFromDecommissionedAndExpired ()
specifier|public
name|void
name|testTransitionFromDecommissionedAndExpired
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionFromDecommissionedAndExpired"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testTransitionFromDecommissionedAndExpired.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
comment|// Adjust the expiration.
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a node is put to maintenance, it first transitions to    * AdminStates.ENTERING_MAINTENANCE. It makes sure all blocks have minimal    * replication before it can be transitioned to AdminStates.IN_MAINTENANCE.    * If node becomes dead when it is in AdminStates.ENTERING_MAINTENANCE, it    * should stay in AdminStates.ENTERING_MAINTENANCE state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testNodeDeadWhenInEnteringMaintenance ()
specifier|public
name|void
name|testNodeDeadWhenInEnteringMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testNodeDeadWhenInEnteringMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testNodeDeadWhenInEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
name|nodeOutofService
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"maintenance node shouldn't be live"
argument_list|,
name|numDatanodes
operator|-
literal|1
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|restartDataNode
argument_list|(
name|dnProp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|waitNodeState
argument_list|(
name|nodeOutofService
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maintenance node should be live"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a node is put to maintenance, it first transitions to    * AdminStates.ENTERING_MAINTENANCE. It makes sure all blocks have    * been properly replicated before it can be transitioned to    * AdminStates.IN_MAINTENANCE. The expected replication count takes    * DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_KEY and    * its file's replication factor into account.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testExpectedReplications ()
specifier|public
name|void
name|testExpectedReplications
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testExpectedReplications"
argument_list|)
expr_stmt|;
name|testExpectedReplication
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testExpectedReplication
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|testExpectedReplication
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|testExpectedReplication
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpectedReplication (int replicationFactor)
specifier|private
name|void
name|testExpectedReplication
parameter_list|(
name|int
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|testExpectedReplication
argument_list|(
name|replicationFactor
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|replicationFactor
operator|-
literal|1
argument_list|,
name|this
operator|.
name|minMaintenanceR
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testExpectedReplication (int replicationFactor, int expectedReplicasInRead)
specifier|private
name|void
name|testExpectedReplication
parameter_list|(
name|int
name|replicationFactor
parameter_list|,
name|int
name|expectedReplicasInRead
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testExpectedReplication.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicationFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// The block should be replicated to another datanode to meet
comment|// expected replication count.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|expectedReplicasInRead
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify a node can transition directly to AdminStates.IN_MAINTENANCE when    * DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_KEY is set to zero.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testZeroMinMaintenanceReplication ()
specifier|public
name|void
name|testZeroMinMaintenanceReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testZeroMinMaintenanceReplication"
argument_list|)
expr_stmt|;
name|setMinMaintenanceR
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testZeroMinMaintenanceReplication.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a node can transition directly to AdminStates.IN_MAINTENANCE when    * DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_KEY is set to zero. Then later    * transition to NORMAL after maintenance expiration.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testZeroMinMaintenanceReplicationWithExpiration ()
specifier|public
name|void
name|testZeroMinMaintenanceReplicationWithExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testZeroMinMaintenanceReplicationWithExpiration"
argument_list|)
expr_stmt|;
name|setMinMaintenanceR
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testZeroMinMaintenanceReplicationWithExpiration.dat"
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// Adjust the expiration.
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test file block replication lesser than maintenance minimum.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testFileBlockReplicationAffectingMaintenance ()
specifier|public
name|void
name|testFileBlockReplicationAffectingMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|defaultReplication
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|defaultMaintenanceMinRepl
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAINTENANCE_REPLICATION_MIN_DEFAULT
argument_list|)
decl_stmt|;
comment|// Case 1:
comment|//  * Maintenance min larger than default min replication
comment|//  * File block replication larger than maintenance min
comment|//  * Initial data nodes not sufficient to remove all maintenance nodes
comment|//    as file block replication is greater than maintenance min.
comment|//  * Data nodes added later for the state transition to progress
name|int
name|maintenanceMinRepl
init|=
name|defaultMaintenanceMinRepl
operator|+
literal|1
decl_stmt|;
name|int
name|fileBlockReplication
init|=
name|maintenanceMinRepl
operator|+
literal|1
decl_stmt|;
name|int
name|numAddedDataNodes
init|=
literal|1
decl_stmt|;
name|int
name|numInitialDataNodes
init|=
operator|(
name|maintenanceMinRepl
operator|*
literal|2
operator|-
name|numAddedDataNodes
operator|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|maintenanceMinRepl
operator|<=
name|defaultReplication
argument_list|)
expr_stmt|;
name|testFileBlockReplicationImpl
argument_list|(
name|maintenanceMinRepl
argument_list|,
name|numInitialDataNodes
argument_list|,
name|numAddedDataNodes
argument_list|,
name|fileBlockReplication
argument_list|)
expr_stmt|;
comment|// Case 2:
comment|//  * Maintenance min larger than default min replication
comment|//  * File block replication lesser than maintenance min
comment|//  * Initial data nodes after removal of maintenance nodes is still
comment|//    sufficient for the file block replication.
comment|//  * No new data nodes to be added, still the state transition happens
name|maintenanceMinRepl
operator|=
name|defaultMaintenanceMinRepl
operator|+
literal|1
expr_stmt|;
name|fileBlockReplication
operator|=
name|maintenanceMinRepl
operator|-
literal|1
expr_stmt|;
name|numAddedDataNodes
operator|=
literal|0
expr_stmt|;
name|numInitialDataNodes
operator|=
operator|(
name|maintenanceMinRepl
operator|*
literal|2
operator|-
name|numAddedDataNodes
operator|)
expr_stmt|;
name|testFileBlockReplicationImpl
argument_list|(
name|maintenanceMinRepl
argument_list|,
name|numInitialDataNodes
argument_list|,
name|numAddedDataNodes
argument_list|,
name|fileBlockReplication
argument_list|)
expr_stmt|;
block|}
DECL|method|testFileBlockReplicationImpl ( int maintenanceMinRepl, int numDataNodes, int numNewDataNodes, int fileBlockRepl)
specifier|private
name|void
name|testFileBlockReplicationImpl
parameter_list|(
name|int
name|maintenanceMinRepl
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|numNewDataNodes
parameter_list|,
name|int
name|fileBlockRepl
parameter_list|)
throws|throws
name|Exception
block|{
name|setup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testLargerMinMaintenanceReplication - maintMinRepl: "
operator|+
name|maintenanceMinRepl
operator|+
literal|", numDNs: "
operator|+
name|numDataNodes
operator|+
literal|", numNewDNs: "
operator|+
name|numNewDataNodes
operator|+
literal|", fileRepl: "
operator|+
name|fileBlockRepl
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting maintenance minimum replication: "
operator|+
name|maintenanceMinRepl
argument_list|)
expr_stmt|;
name|setMinMaintenanceR
argument_list|(
name|maintenanceMinRepl
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testLargerMinMaintenanceReplication.dat"
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|fileBlockRepl
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|nodes
init|=
name|getFirstBlockReplicasDatanodeInfos
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeUuids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maintenanceMinRepl
operator|&&
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodeUuids
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|maintenanceDNs
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeUuids
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNewDataNodes
condition|;
name|i
operator|++
control|)
block|{
name|getCluster
argument_list|()
operator|.
name|startDataNodes
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|refreshNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|waitNodeState
argument_list|(
name|maintenanceDNs
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Transition from IN_MAINTENANCE to DECOMMISSIONED.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionToDecommission ()
specifier|public
name|void
name|testTransitionToDecommission
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionToDecommission"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"testTransitionToDecommission.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test 1, verify the replica in IN_MAINTENANCE state isn't in LocatedBlock
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
comment|// test 2 after decommission has completed, the replication count is
comment|// replicas + 1 which includes the decommissioned node.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test 3, put the node in service, replication count should restore.
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition from decommissioning state to maintenance state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionFromDecommissioning ()
specifier|public
name|void
name|testTransitionFromDecommissioning
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionFromDecommissioning"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testTransitionFromDecommissioning.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * First put a node in maintenance, then put a different node    * in decommission. Make sure decommission process take    * maintenance replica into account.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testDecommissionDifferentNodeAfterMaintenances ()
specifier|public
name|void
name|testDecommissionDifferentNodeAfterMaintenances
parameter_list|()
throws|throws
name|Exception
block|{
name|testDecommissionDifferentNodeAfterMaintenance
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|testDecommissionDifferentNodeAfterMaintenance
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|testDecommissionDifferentNodeAfterMaintenance
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecommissionDifferentNodeAfterMaintenance (int repl)
specifier|private
name|void
name|testDecommissionDifferentNodeAfterMaintenance
parameter_list|(
name|int
name|repl
parameter_list|)
throws|throws
name|Exception
block|{
name|setup
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testDecommissionDifferentNodeAfterMaintenance.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|nodes
init|=
name|getFirstBlockReplicasDatanodeInfos
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|maintenanceDNUuid
init|=
name|nodes
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
decl_stmt|;
name|String
name|decommissionDNUuid
init|=
name|nodes
index|[
literal|1
index|]
operator|.
name|getDatanodeUuid
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|maintenanceDN
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|maintenanceDNUuid
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|DatanodeInfo
argument_list|,
name|Long
argument_list|>
name|maintenanceNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maintenanceNodes
operator|.
name|put
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|decommissionDNUuid
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|maintenanceNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
comment|// Out of the replicas returned, one is the decommissioned node.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
argument_list|,
name|maintenanceDN
argument_list|)
expr_stmt|;
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|maintenanceDN
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify if multiple DataNodes can transition to maintenance state    * at the same time.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testMultipleNodesMaintenance ()
specifier|public
name|void
name|testMultipleNodesMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testMultipleNodesMaintenance.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|repl
init|=
literal|3
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|nodes
init|=
name|getFirstBlockReplicasDatanodeInfos
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
decl_stmt|;
comment|// Request maintenance for DataNodes 1 and 2 which has the file blocks.
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|maintenanceDN
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|nodes
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|nodes
index|[
literal|1
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// Verify file replication matches maintenance state min replication
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|nodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Put the maintenance nodes back in service
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|maintenanceDN
control|)
block|{
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
comment|// Verify file replication catching up to the old state
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|repl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testChangeReplicationFactors ()
specifier|public
name|void
name|testChangeReplicationFactors
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Prior to any change, there is 1 maintenance node and 2 live nodes.
comment|// Replication factor is adjusted from 3 to 4.
comment|// After the change, given 1 maintenance + 2 live is less than the
comment|// newFactor, one live nodes will be added.
name|testChangeReplicationFactor
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Replication factor is adjusted from 3 to 2.
comment|// After the change, given 2 live nodes is the same as the newFactor,
comment|// no live nodes will be invalidated.
name|testChangeReplicationFactor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Replication factor is adjusted from 3 to 1.
comment|// After the change, given 2 live nodes is greater than the newFactor,
comment|// one live nodes will be invalidated.
name|testChangeReplicationFactor
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * After the change of replication factor, # of live replicas<=    * the new replication factor.    */
DECL|method|testChangeReplicationFactor (int oldFactor, int newFactor, int expectedLiveReplicas)
specifier|private
name|void
name|testChangeReplicationFactor
parameter_list|(
name|int
name|oldFactor
parameter_list|,
name|int
name|newFactor
parameter_list|,
name|int
name|expectedLiveReplicas
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testChangeReplicationFactor {} {} {}"
argument_list|,
name|oldFactor
argument_list|,
name|newFactor
argument_list|,
name|expectedLiveReplicas
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testChangeReplicationFactor.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|oldFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
comment|// Verify that the nodeOutofService remains in blocksMap and
comment|// # of live replicas For read operation is expected.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|oldFactor
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
operator|.
name|setReplication
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|newFactor
argument_list|)
expr_stmt|;
comment|// Verify that the nodeOutofService remains in blocksMap and
comment|// # of live replicas for read operation.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|expectedLiveReplicas
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|newFactor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify the following scenario.    * a. Put a live node to maintenance => 1 maintenance, 2 live.    * b. The maintenance node becomes dead => block map still has 1 maintenance,    *    2 live.    * c. Take the node out of maintenance => NN should schedule the replication    *    and end up with 3 live.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTakeDeadNodeOutOfMaintenance ()
specifier|public
name|void
name|testTakeDeadNodeOutOfMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTakeDeadNodeOutOfMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testTakeDeadNodeOutOfMaintenance.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
name|nodeOutofService
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maintenance node shouldn't be alive"
argument_list|,
name|numDatanodes
operator|-
literal|1
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Dead maintenance node's blocks should remain in block map.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
comment|// When dead maintenance mode is transitioned to out of maintenance mode,
comment|// its blocks should be removed from block map.
comment|// This will then trigger replication to restore the live replicas back
comment|// to replication factor.
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
name|nodeOutofService
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the following scenario.    * a. Put a live node to maintenance => 1 maintenance, 2 live.    * b. The maintenance node becomes dead => block map still has 1 maintenance,    *    2 live.    * c. Restart nn => block map only has 2 live => restore the 3 live.    * d. Restart the maintenance dn => 1 maintenance, 3 live.    * e. Take the node out of maintenance => over replication => 3 live.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testWithNNAndDNRestart ()
specifier|public
name|void
name|testWithNNAndDNRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testWithNNAndDNRestart"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testWithNNAndDNRestart.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDatanodes
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
name|nodeOutofService
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maintenance node shouldn't be alive"
argument_list|,
name|numDatanodes
operator|-
literal|1
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Dead maintenance node's blocks should remain in block map.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
comment|// restart nn, nn will restore 3 live replicas given it doesn't
comment|// know the maintenance node has the replica.
name|getCluster
argument_list|()
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ns
operator|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// restart dn, nn has 1 maintenance replica and 3 live replicas.
name|getCluster
argument_list|()
operator|.
name|restartDataNode
argument_list|(
name|dnProp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
comment|// Put the node in service, a redundant replica should be removed.
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Machine under maintenance state won't be chosen for new block allocation.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3600000
argument_list|)
DECL|method|testWriteAfterMaintenance ()
specifier|public
name|void
name|testWriteAfterMaintenance
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testWriteAfterMaintenance"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testWriteAfterMaintenance.dat"
argument_list|)
decl_stmt|;
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Verify nodeOutofService wasn't chosen for write operation.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
operator|-
literal|1
argument_list|,
name|nodeOutofService
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Put the node back to service, live replicas should be restored.
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * A node has blocks under construction when it is put to maintenance.    * Given there are minReplication replicas somewhere else,    * it can be transitioned to AdminStates.IN_MAINTENANCE.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testEnterMaintenanceWhenFileOpen ()
specifier|public
name|void
name|testEnterMaintenanceWhenFileOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testEnterMaintenanceWhenFileOpen"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testEnterMaintenanceWhenFileOpen.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeIncompleteFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Machine under maintenance state won't be chosen for invalidation.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testInvalidation ()
specifier|public
name|void
name|testInvalidation
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testInvalidation"
argument_list|)
expr_stmt|;
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
name|int
name|numDatanodes
init|=
literal|3
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testInvalidation.dat"
argument_list|)
decl_stmt|;
name|int
name|replicas
init|=
literal|3
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|replicas
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|client
operator|.
name|setReplication
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// Verify the nodeOutofService remains in blocksMap.
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
comment|// Restart NN and verify the nodeOutofService remains in blocksMap.
name|getCluster
argument_list|()
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ns
operator|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
name|nodeOutofService
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileCloseAfterEnteringMaintenance ()
specifier|public
name|void
name|testFileCloseAfterEnteringMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testFileCloseAfterEnteringMaintenance"
argument_list|)
expr_stmt|;
name|int
name|expirationInMs
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
name|int
name|numDataNodes
init|=
literal|3
decl_stmt|;
name|int
name|numNameNodes
init|=
literal|1
decl_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MIN_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|numNameNodes
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|getCluster
argument_list|()
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|getCluster
argument_list|()
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numDataNodes
argument_list|,
name|fsn
operator|.
name|getNumLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|openFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testClosingFileInMaintenance.dat"
argument_list|)
decl_stmt|;
comment|// Lets write 2 blocks of data to the openFile
name|writeFile
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|openFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
comment|// Lets write some more data and keep the file open
name|FSDataOutputStream
name|fsDataOutputStream
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|openFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|fsDataOutputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fsDataOutputStream
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|openFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
operator|*
name|blockSize
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnInfos4LastBlock
init|=
name|lbs
operator|.
name|getLastLocatedBlock
argument_list|()
operator|.
name|getLocations
argument_list|()
decl_stmt|;
comment|// Request maintenance for DataNodes 1 and 2 which has the last block.
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dnInfos4LastBlock
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dnInfos4LastBlock
index|[
literal|1
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|expirationInMs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
expr_stmt|;
comment|// Closing the file should succeed even when the
comment|// last blocks' nodes are entering maintenance.
name|fsDataOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|cleanupFile
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|openFile
argument_list|)
expr_stmt|;
block|}
DECL|method|getFirstBlockFirstReplicaUuid (FileSystem fileSys, Path name)
specifier|static
name|String
name|getFirstBlockFirstReplicaUuid
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|nodes
init|=
name|getFirstBlockReplicasDatanodeInfos
argument_list|(
name|fileSys
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
operator|&&
name|nodes
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|nodes
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/*   * Verify that the number of replicas are as expected for each block in   * the given file.   *   * @return - null if no failure found, else an error message string.   */
DECL|method|checkFile (FSNamesystem ns, FileSystem fileSys, Path name, int repl, DatanodeInfo expectedExcludedNode, DatanodeInfo expectedMaintenanceNode)
specifier|static
name|String
name|checkFile
parameter_list|(
name|FSNamesystem
name|ns
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|DatanodeInfo
name|expectedExcludedNode
parameter_list|,
name|DatanodeInfo
name|expectedMaintenanceNode
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need a raw stream
name|assertTrue
argument_list|(
literal|"Not HDFS:"
operator|+
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BlockManager
name|bm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|dinfo
init|=
name|dis
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
name|String
name|output
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|dinfo
control|)
block|{
comment|// for each block
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// for each replica
if|if
condition|(
name|expectedExcludedNode
operator|!=
literal|null
operator|&&
name|nodes
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|expectedExcludedNode
argument_list|)
condition|)
block|{
comment|//excluded node must not be in LocatedBlock.
name|output
operator|=
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" found in LocatedBlock."
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
else|else
block|{
if|if
condition|(
name|nodes
index|[
name|j
index|]
operator|.
name|isInMaintenance
argument_list|()
condition|)
block|{
comment|//IN_MAINTENANCE node must not be in LocatedBlock.
name|output
operator|=
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" which is in maintenance state."
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
block|}
block|}
if|if
condition|(
name|repl
operator|!=
name|nodes
operator|.
name|length
condition|)
block|{
name|output
operator|=
literal|"Wrong number of replicas for block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|": expected "
operator|+
name|repl
operator|+
literal|", got "
operator|+
name|nodes
operator|.
name|length
operator|+
literal|" ,"
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// for each replica
name|output
operator|+=
name|nodes
index|[
name|j
index|]
operator|+
literal|","
expr_stmt|;
block|}
name|output
operator|+=
literal|"pending block # "
operator|+
name|ns
operator|.
name|getPendingReplicationBlocks
argument_list|()
operator|+
literal|" ,"
expr_stmt|;
name|output
operator|+=
literal|"under replicated # "
operator|+
name|ns
operator|.
name|getUnderReplicatedBlocks
argument_list|()
operator|+
literal|" ,"
expr_stmt|;
if|if
condition|(
name|expectedExcludedNode
operator|!=
literal|null
condition|)
block|{
name|output
operator|+=
literal|"excluded node "
operator|+
name|expectedExcludedNode
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
comment|// Verify it has the expected maintenance node
name|Iterator
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|storageInfoIter
init|=
name|bm
operator|.
name|getStorages
argument_list|(
name|blk
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|maintenanceNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|storageInfoIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeInfo
name|node
init|=
name|storageInfoIter
operator|.
name|next
argument_list|()
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isMaintenance
argument_list|()
condition|)
block|{
name|maintenanceNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedMaintenanceNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|maintenanceNodes
operator|.
name|contains
argument_list|(
name|expectedMaintenanceNode
argument_list|)
condition|)
block|{
name|output
operator|=
literal|"No maintenance replica on "
operator|+
name|expectedMaintenanceNode
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|maintenanceNodes
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|output
operator|=
literal|"Has maintenance replica(s)"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkWithRetry (FSNamesystem ns, FileSystem fileSys, Path name, int repl, DatanodeInfo inMaintenanceNode)
specifier|static
name|void
name|checkWithRetry
parameter_list|(
name|FSNamesystem
name|ns
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|DatanodeInfo
name|inMaintenanceNode
parameter_list|)
block|{
name|checkWithRetry
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|,
name|inMaintenanceNode
argument_list|,
name|inMaintenanceNode
argument_list|)
expr_stmt|;
block|}
DECL|method|checkWithRetry (final FSNamesystem ns, final FileSystem fileSys, final Path name, final int repl, final DatanodeInfo excludedNode, final DatanodeInfo underMaintenanceNode)
specifier|static
name|void
name|checkWithRetry
parameter_list|(
specifier|final
name|FSNamesystem
name|ns
parameter_list|,
specifier|final
name|FileSystem
name|fileSys
parameter_list|,
specifier|final
name|Path
name|name
parameter_list|,
specifier|final
name|int
name|repl
parameter_list|,
specifier|final
name|DatanodeInfo
name|excludedNode
parameter_list|,
specifier|final
name|DatanodeInfo
name|underMaintenanceNode
parameter_list|)
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|String
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
name|checkFile
argument_list|(
name|ns
argument_list|,
name|fileSys
argument_list|,
name|name
argument_list|,
name|repl
argument_list|,
name|excludedNode
argument_list|,
name|underMaintenanceNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{           }
return|return
operator|(
name|output
operator|==
literal|null
operator|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{     }
block|}
DECL|method|getFirstBlockReplicasDatanodeInfos ( FileSystem fileSys, Path name)
specifier|static
specifier|private
name|DatanodeInfo
index|[]
name|getFirstBlockReplicasDatanodeInfos
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need a raw stream
name|assertTrue
argument_list|(
literal|"Not HDFS:"
operator|+
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|dinfo
init|=
name|dis
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|dinfo
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// for the first block
return|return
name|dinfo
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLocations
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

