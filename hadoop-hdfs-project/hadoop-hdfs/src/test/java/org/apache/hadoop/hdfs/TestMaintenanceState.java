begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests node maintenance.  */
end_comment

begin_class
DECL|class|TestMaintenanceState
specifier|public
class|class
name|TestMaintenanceState
extends|extends
name|AdminStatesBaseTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMaintenanceState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EXPIRATION_IN_MS
specifier|static
specifier|private
specifier|final
name|long
name|EXPIRATION_IN_MS
init|=
literal|500
decl_stmt|;
DECL|method|TestMaintenanceState ()
specifier|public
name|TestMaintenanceState
parameter_list|()
block|{
name|setUseCombinedHostFileManager
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify a node can transition from AdminStates.ENTERING_MAINTENANCE to    * AdminStates.NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTakeNodeOutOfEnteringMaintenance ()
specifier|public
name|void
name|testTakeNodeOutOfEnteringMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTakeNodeOutOfEnteringMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testTakeNodeOutOfEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
name|putNodeInService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a AdminStates.ENTERING_MAINTENANCE node can expire and transition    * to AdminStates.NORMAL upon timeout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testEnteringMaintenanceExpiration ()
specifier|public
name|void
name|testEnteringMaintenanceExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testEnteringMaintenanceExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testTakeNodeOutOfEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// expires in 500 milliseconds
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|nodeOutofService
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify node stays in AdminStates.NORMAL with invalid expiration.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testInvalidExpiration ()
specifier|public
name|void
name|testInvalidExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testInvalidExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testTakeNodeOutOfEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// expiration has to be greater than Time.monotonicNow().
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a dead node is put to maintenance, it transitions directly to    * AdminStates.IN_MAINTENANCE.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testPutDeadNodeToMaintenance ()
specifier|public
name|void
name|testPutDeadNodeToMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testPutDeadNodeToMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testPutDeadNodeToMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|int
name|deadInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadInMaintenance
operator|+
literal|1
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a dead node is put to maintenance, it transitions directly to    * AdminStates.IN_MAINTENANCE. Then AdminStates.IN_MAINTENANCE expires and    * transitions to AdminStates.NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testPutDeadNodeToMaintenanceWithExpiration ()
specifier|public
name|void
name|testPutDeadNodeToMaintenanceWithExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testPutDeadNodeToMaintenanceWithExpiration"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testPutDeadNodeToMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|int
name|deadInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveInMaintenance
init|=
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|dnProp
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|nodeOutofService
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// no change
name|assertEquals
argument_list|(
name|deadInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveInMaintenance
argument_list|,
name|ns
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition from decommissioned state to maintenance state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionFromDecommissioned ()
specifier|public
name|void
name|testTransitionFromDecommissioned
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionFromDecommissioned"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testTransitionFromDecommissioned.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transition from decommissioned state to maintenance state.    * After the maintenance state expires, it is transitioned to NORMAL.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testTransitionFromDecommissionedAndExpired ()
specifier|public
name|void
name|testTransitionFromDecommissionedAndExpired
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testTransitionFromDecommissionedAndExpired"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|3
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testTransitionFromDecommissioned.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
decl_stmt|;
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|EXPIRATION_IN_MS
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|IN_MAINTENANCE
argument_list|)
expr_stmt|;
name|waitNodeState
argument_list|(
name|nodeOutofService
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
comment|/**    * When a node is put to maintenance, it first transitions to    * AdminStates.ENTERING_MAINTENANCE. It makes sure all blocks have minimal    * replication before it can be transitioned to AdminStates.IN_MAINTENANCE.    * If node becomes dead when it is in AdminStates.ENTERING_MAINTENANCE, admin    * state should stay in AdminStates.ENTERING_MAINTENANCE state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
DECL|method|testNodeDeadWhenInEnteringMaintenance ()
specifier|public
name|void
name|testNodeDeadWhenInEnteringMaintenance
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testNodeDeadWhenInEnteringMaintenance"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numNamenodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|replicas
init|=
literal|1
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/testNodeDeadWhenInEnteringMaintenance.dat"
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|numNamenodes
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|getCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|ns
init|=
name|getCluster
argument_list|()
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|replicas
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|nodeOutofService
init|=
name|takeNodeOutofService
argument_list|(
literal|0
argument_list|,
name|getFirstBlockFirstReplicaUuid
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|null
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnProp
init|=
name|getCluster
argument_list|()
operator|.
name|stopDataNode
argument_list|(
name|nodeOutofService
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForDatanodeState
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|nodeOutofService
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"maintenance node shouldn't be alive"
argument_list|,
name|numDatanodes
operator|-
literal|1
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|restartDataNode
argument_list|(
name|dnProp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|waitNodeState
argument_list|(
name|nodeOutofService
argument_list|,
name|AdminStates
operator|.
name|ENTERING_MAINTENANCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
DECL|method|getFirstBlockFirstReplicaUuid (FileSystem fileSys, Path name)
specifier|static
specifier|protected
name|String
name|getFirstBlockFirstReplicaUuid
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need a raw stream
name|assertTrue
argument_list|(
literal|"Not HDFS:"
operator|+
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|dinfo
init|=
name|dis
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|dinfo
control|)
block|{
comment|// for each block
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|nodes
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

