begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one   * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|BPOfferService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_comment
comment|/**  * Utility class for accessing package-private DataNode information during tests.  *  */
end_comment

begin_class
DECL|class|DataNodeTestUtils
specifier|public
class|class
name|DataNodeTestUtils
block|{
specifier|public
specifier|static
name|DatanodeRegistration
DECL|method|getDNRegistrationByMachineName (DataNode dn, String mName)
name|getDNRegistrationByMachineName
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|String
name|mName
parameter_list|)
block|{
return|return
name|dn
operator|.
name|getDNRegistrationByMachineName
argument_list|(
name|mName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DatanodeRegistration
DECL|method|getDNRegistrationForBP (DataNode dn, String bpid)
name|getDNRegistrationForBP
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|bpid
argument_list|)
return|;
block|}
comment|/**    * manually setup datanode to testing    * @param dn - datanode    * @param nsifno - namenode info    * @param bpid - block pool id    * @param nn - namenode object    * @throws IOException    */
DECL|method|setBPNamenodeByIndex (DataNode dn, NamespaceInfo nsifno, String bpid, DatanodeProtocol nn)
specifier|public
specifier|static
name|void
name|setBPNamenodeByIndex
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|NamespaceInfo
name|nsifno
parameter_list|,
name|String
name|bpid
parameter_list|,
name|DatanodeProtocol
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup the right BPOS..
name|BPOfferService
index|[]
name|bposs
init|=
name|dn
operator|.
name|getAllBpOs
argument_list|()
decl_stmt|;
if|if
condition|(
name|bposs
operator|.
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Datanode wasn't initializes with at least one NN"
argument_list|)
throw|;
block|}
for|for
control|(
name|BPOfferService
name|bpos
range|:
name|bposs
control|)
block|{
name|bpos
operator|.
name|setNamespaceInfo
argument_list|(
name|nsifno
argument_list|)
expr_stmt|;
name|dn
operator|.
name|setBPNamenode
argument_list|(
name|bpid
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|dn
operator|.
name|initBlockPool
argument_list|(
name|bpos
argument_list|,
name|nsifno
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

