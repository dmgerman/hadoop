begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestGlobPaths
specifier|public
class|class
name|TestGlobPaths
block|{
DECL|field|unprivilegedUser
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|unprivilegedUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
DECL|class|RegexPathFilter
specifier|static
class|class
name|RegexPathFilter
implements|implements
name|PathFilter
block|{
DECL|field|regex
specifier|private
specifier|final
name|String
name|regex
decl_stmt|;
DECL|method|RegexPathFilter (String regex)
specifier|public
name|RegexPathFilter
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
return|;
block|}
block|}
DECL|field|dfsCluster
specifier|static
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|fs
specifier|static
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|privilegedFs
specifier|static
specifier|private
name|FileSystem
name|privilegedFs
decl_stmt|;
DECL|field|fc
specifier|static
specifier|private
name|FileContext
name|fc
decl_stmt|;
DECL|field|privilegedFc
specifier|static
specifier|private
name|FileContext
name|privilegedFc
decl_stmt|;
DECL|field|NUM_OF_PATHS
specifier|static
specifier|final
specifier|private
name|int
name|NUM_OF_PATHS
init|=
literal|4
decl_stmt|;
DECL|field|USER_DIR
specifier|static
specifier|private
name|String
name|USER_DIR
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
name|NUM_OF_PATHS
index|]
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|privilegedFs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|privilegedFc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// allow unpriviledged user ability to create paths
name|privilegedFs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|unprivilegedUser
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|USER_DIR
operator|=
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test case to ensure that globs work on files with special characters.    * Tests with a file pair where one has a \r at end and other does not.    */
annotation|@
name|Test
DECL|method|testCRInPathGlob ()
specifier|public
name|void
name|testCRInPathGlob
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|statuses
decl_stmt|;
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|fNormal
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|Path
name|fWithCR
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1\r"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|fNormal
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|fWithCR
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"f1*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected both normal and CR-carrying files in result: "
argument_list|,
literal|2
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiGlob ()
specifier|public
name|void
name|testMultiGlob
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|status
decl_stmt|;
comment|/*      *  /dir1/subdir1      *  /dir1/subdir1/f1      *  /dir1/subdir1/f2      *  /dir1/subdir2/f1      *  /dir2/subdir1      *  /dir2/subdir2      *  /dir2/subdir2/f1      *  /dir3/f1      *  /dir3/f1      *  /dir3/f2(dir)      *  /dir3/subdir2(file)      *  /dir3/subdir3      *  /dir3/subdir3/f1      *  /dir3/subdir3/f1/f1      *  /dir3/subdir3/f3      *  /dir4      */
name|Path
name|d1
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|d11
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|Path
name|d12
init|=
operator|new
name|Path
argument_list|(
name|d1
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|Path
name|f111
init|=
operator|new
name|Path
argument_list|(
name|d11
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f111
argument_list|)
expr_stmt|;
name|Path
name|f112
init|=
operator|new
name|Path
argument_list|(
name|d11
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f112
argument_list|)
expr_stmt|;
name|Path
name|f121
init|=
operator|new
name|Path
argument_list|(
name|d12
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f121
argument_list|)
expr_stmt|;
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|Path
name|d21
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|d21
argument_list|)
expr_stmt|;
name|Path
name|d22
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|Path
name|f221
init|=
operator|new
name|Path
argument_list|(
name|d22
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f221
argument_list|)
expr_stmt|;
name|Path
name|d3
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir3"
argument_list|)
decl_stmt|;
name|Path
name|f31
init|=
operator|new
name|Path
argument_list|(
name|d3
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f31
argument_list|)
expr_stmt|;
name|Path
name|d32
init|=
operator|new
name|Path
argument_list|(
name|d3
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|d32
argument_list|)
expr_stmt|;
name|Path
name|f32
init|=
operator|new
name|Path
argument_list|(
name|d3
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
comment|// fake as a subdir!
name|fs
operator|.
name|createNewFile
argument_list|(
name|f32
argument_list|)
expr_stmt|;
name|Path
name|d33
init|=
operator|new
name|Path
argument_list|(
name|d3
argument_list|,
literal|"subdir3"
argument_list|)
decl_stmt|;
name|Path
name|f333
init|=
operator|new
name|Path
argument_list|(
name|d33
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f333
argument_list|)
expr_stmt|;
name|Path
name|d331
init|=
operator|new
name|Path
argument_list|(
name|d33
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|Path
name|f3311
init|=
operator|new
name|Path
argument_list|(
name|d331
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|f3311
argument_list|)
expr_stmt|;
name|Path
name|d4
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir4"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|d4
argument_list|)
expr_stmt|;
comment|/*      * basic       */
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
decl_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"x/x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"x/x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|,
name|d3
argument_list|,
name|d4
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|,
name|d3
argument_list|,
name|d4
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"*/x"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"*/x"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"x/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"x/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// make sure full pattern is scanned instead of bailing early with undef
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"x/x/x/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"x/x/x/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
comment|/*      * one level deep      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir*/subdir*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/f*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir*/f*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f31
argument_list|,
name|d32
argument_list|)
expr_stmt|;
comment|/*      * subdir1 globs      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d21
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|,
name|f112
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/x"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/x*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      * subdir2 globs      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir2"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d12
argument_list|,
name|d22
argument_list|,
name|f32
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir2/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f121
argument_list|,
name|f221
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir2/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      * subdir3 globs      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir3"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir3/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d331
argument_list|,
name|f333
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir3/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir3/*/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      * file1 single dir globs      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f1"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f1*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f1/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f1*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      * file1 multi-dir globs      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|,
name|f121
argument_list|,
name|f221
argument_list|,
name|d331
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|,
name|f121
argument_list|,
name|f221
argument_list|,
name|d331
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1*/x"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f1*/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      *  file glob multiple files      */
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d11
argument_list|,
name|d12
argument_list|,
name|d21
argument_list|,
name|d22
argument_list|,
name|f32
argument_list|,
name|d33
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|,
name|f112
argument_list|,
name|f121
argument_list|,
name|f221
argument_list|,
name|d331
argument_list|,
name|f333
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f111
argument_list|,
name|f112
argument_list|,
name|f121
argument_list|,
name|f221
argument_list|,
name|d331
argument_list|,
name|f333
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/f*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/*/f1"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir*/*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f3311
argument_list|)
expr_stmt|;
comment|// doesn't exist
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f3"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"dir*/subdir1/f3*"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"{x}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"{x,y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir*/{x,y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dir*/{f1,y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|f31
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"{x,y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/{x/x,y/y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"{x/x,y/y}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"{/dir1}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"{/dir*}"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|,
name|d3
argument_list|,
name|d4
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|d1
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"*"
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|,
name|d3
argument_list|,
name|d4
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/*"
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/x"
argument_list|)
argument_list|,
name|trueFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|/*      * false filter      */
name|PathFilter
name|falseFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|,
literal|"*"
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/*"
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|checkStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x/x"
argument_list|)
argument_list|,
name|falseFilter
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
DECL|method|checkStatus (FileStatus[] status, Path ... expectedMatches)
specifier|private
name|void
name|checkStatus
parameter_list|(
name|FileStatus
index|[]
name|status
parameter_list|,
name|Path
modifier|...
name|expectedMatches
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|String
index|[]
name|paths
init|=
operator|new
name|String
index|[
name|status
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|status
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|getPathFromStatus
argument_list|(
name|status
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|String
name|got
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|paths
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expectedMatches
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
DECL|method|getPathFromStatus (FileStatus status)
specifier|private
name|String
name|getPathFromStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
return|return
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testPathFilter ()
specifier|public
name|void
name|testPathFilter
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/a/b"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/*"
argument_list|,
name|files
argument_list|,
operator|new
name|RegexPathFilter
argument_list|(
literal|"^.*"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|USER_DIR
argument_list|)
operator|+
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matchedPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
index|[
literal|1
index|]
argument_list|,
name|matchedPath
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPathFilterWithFixedLastComponent ()
specifier|public
name|void
name|testPathFilterWithFixedLastComponent
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/a/b"
block|,
name|USER_DIR
operator|+
literal|"/c"
block|,
name|USER_DIR
operator|+
literal|"/c/b"
block|, }
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/b"
argument_list|,
name|files
argument_list|,
operator|new
name|RegexPathFilter
argument_list|(
literal|"^.*"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|USER_DIR
argument_list|)
operator|+
literal|"/a/b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestLiteral ()
specifier|public
name|void
name|pTestLiteral
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a2c"
block|,
name|USER_DIR
operator|+
literal|"/abc.d"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/abc.d"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestEscape ()
specifier|public
name|void
name|pTestEscape
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Skip the test case on Windows because backslash will be treated as a
comment|// path separator instead of an escaping character on Windows.
name|assumeNotWindows
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/ab\\[c.d"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/ab\\[c.d"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestAny ()
specifier|public
name|void
name|pTestAny
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/abc"
block|,
name|USER_DIR
operator|+
literal|"/a2c"
block|,
name|USER_DIR
operator|+
literal|"/a.c"
block|,
name|USER_DIR
operator|+
literal|"/abcd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a?c"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestClosure1 ()
specifier|public
name|void
name|pTestClosure1
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a"
block|,
name|USER_DIR
operator|+
literal|"/abc"
block|,
name|USER_DIR
operator|+
literal|"/abc.p"
block|,
name|USER_DIR
operator|+
literal|"/bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestClosure2 ()
specifier|public
name|void
name|pTestClosure2
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a."
block|,
name|USER_DIR
operator|+
literal|"/a.txt"
block|,
name|USER_DIR
operator|+
literal|"/a.old.java"
block|,
name|USER_DIR
operator|+
literal|"/.java"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestClosure3 ()
specifier|public
name|void
name|pTestClosure3
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.txt.x"
block|,
name|USER_DIR
operator|+
literal|"/ax"
block|,
name|USER_DIR
operator|+
literal|"/ab37x"
block|,
name|USER_DIR
operator|+
literal|"/bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a*x"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestClosure4 ()
specifier|public
name|void
name|pTestClosure4
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/dir1/file1"
block|,
name|USER_DIR
operator|+
literal|"/dir2/file2"
block|,
name|USER_DIR
operator|+
literal|"/dir3/file1"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/file1"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestClosure5 ()
specifier|public
name|void
name|pTestClosure5
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/dir1/file1"
block|,
name|USER_DIR
operator|+
literal|"/file1"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/*/file1"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestSet ()
specifier|public
name|void
name|pTestSet
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.c"
block|,
name|USER_DIR
operator|+
literal|"/a.cpp"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.hxy"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[ch]??"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestRange ()
specifier|public
name|void
name|pTestRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.d"
block|,
name|USER_DIR
operator|+
literal|"/a.e"
block|,
name|USER_DIR
operator|+
literal|"/a.f"
block|,
name|USER_DIR
operator|+
literal|"/a.h"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[d-fm]"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestSetExcl ()
specifier|public
name|void
name|pTestSetExcl
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.d"
block|,
name|USER_DIR
operator|+
literal|"/a.e"
block|,
name|USER_DIR
operator|+
literal|"/a.0"
block|,
name|USER_DIR
operator|+
literal|"/a.h"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.[^a-cg-z0-9]"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|pTestCombination ()
specifier|public
name|void
name|pTestCombination
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
literal|"/user/aa/a.c"
block|,
literal|"/user/bb/a.cpp"
block|,
literal|"/user1/cc/b.hlp"
block|,
literal|"/user/dd/a.hxy"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
literal|"/use?/*/a.[ch]{lp,xy}"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Test {xx,yy} */
annotation|@
name|Test
DECL|method|pTestCurlyBracket ()
specifier|public
name|void
name|pTestCurlyBracket
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|matchedPath
decl_stmt|;
name|String
index|[]
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.abcxx"
block|,
name|USER_DIR
operator|+
literal|"/a.abxy"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.jhyy"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.{abc,jh}??"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// nested curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a.abcxx"
block|,
name|USER_DIR
operator|+
literal|"/a.abdxy"
block|,
name|USER_DIR
operator|+
literal|"/a.hlp"
block|,
name|USER_DIR
operator|+
literal|"/a.jhyy"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/a.{ab{c,d},jh}??"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|2
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// cross-component curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/a/b"
block|,
name|USER_DIR
operator|+
literal|"/a/d"
block|,
name|USER_DIR
operator|+
literal|"/c/b"
block|,
name|USER_DIR
operator|+
literal|"/c/d"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/{a/b,c/d}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
comment|// cross-component absolute curlies
try|try
block|{
name|files
operator|=
operator|new
name|String
index|[]
block|{
literal|"/a/b"
block|,
literal|"/a/d"
block|,
literal|"/c/b"
block|,
literal|"/c/d"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
literal|"{/a/b,/c/d}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// test standalone }
name|files
operator|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/}bc"
block|,
name|USER_DIR
operator|+
literal|"/}c"
block|}
expr_stmt|;
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{a,b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {b}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{}bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {,}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{,}bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test {b,}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{b,}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test {,b}
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{,b}c"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|1
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test a combination of {} and ?
name|matchedPath
operator|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/}{ac,?}"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test ill-formed curly
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"}{bc"
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Illegal file pattern:"
argument_list|)
argument_list|)
expr_stmt|;
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hasException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* test that a path name can contain Java regex special characters */
annotation|@
name|Test
DECL|method|pTestJavaRegexSpecialChars ()
specifier|public
name|void
name|pTestJavaRegexSpecialChars
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
name|USER_DIR
operator|+
literal|"/($.|+)bc"
block|,
name|USER_DIR
operator|+
literal|"/abc"
block|}
decl_stmt|;
name|Path
index|[]
name|matchedPath
init|=
name|prepareTesting
argument_list|(
name|USER_DIR
operator|+
literal|"/($.|+)*"
argument_list|,
name|files
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchedPath
index|[
literal|0
index|]
argument_list|,
name|path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|prepareTesting (String pattern, String[] files)
specifier|private
name|Path
index|[]
name|prepareTesting
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
index|[]
name|files
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|NUM_OF_PATHS
argument_list|,
name|files
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|path
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|path
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Path
name|patternPath
init|=
operator|new
name|Path
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Path
index|[]
name|globResults
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|patternPath
argument_list|)
argument_list|,
name|patternPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|globResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|globResults
index|[
name|i
index|]
operator|=
name|globResults
index|[
name|i
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|globResults
return|;
block|}
DECL|method|prepareTesting (String pattern, String[] files, PathFilter filter)
specifier|private
name|Path
index|[]
name|prepareTesting
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
index|[]
name|files
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|NUM_OF_PATHS
argument_list|,
name|files
operator|.
name|length
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|path
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|path
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Path
name|patternPath
init|=
operator|new
name|Path
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|Path
index|[]
name|globResults
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|patternPath
argument_list|,
name|filter
argument_list|)
argument_list|,
name|patternPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|globResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|globResults
index|[
name|i
index|]
operator|=
name|globResults
index|[
name|i
index|]
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|globResults
return|;
block|}
DECL|method|cleanupDFS ()
specifier|private
name|void
name|cleanupDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * A glob test that can be run on either FileContext or FileSystem.    */
DECL|class|FSTestWrapperGlobTest
specifier|private
specifier|abstract
class|class
name|FSTestWrapperGlobTest
block|{
DECL|method|FSTestWrapperGlobTest (boolean useFc)
name|FSTestWrapperGlobTest
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
if|if
condition|(
name|useFc
condition|)
block|{
name|this
operator|.
name|privWrap
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|privilegedFc
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrap
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|privWrap
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|privilegedFs
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrap
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run ()
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|field|privWrap
specifier|final
name|FSTestWrapper
name|privWrap
decl_stmt|;
DECL|field|wrap
specifier|final
name|FSTestWrapper
name|wrap
decl_stmt|;
block|}
comment|/**    * Run a glob test on FileSystem.    */
DECL|method|testOnFileSystem (FSTestWrapperGlobTest test)
specifier|private
name|void
name|testOnFileSystem
parameter_list|(
name|FSTestWrapperGlobTest
name|test
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|fc
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fc
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run a glob test on FileContext.    */
DECL|method|testOnFileContext (FSTestWrapperGlobTest test)
specifier|private
name|void
name|testOnFileContext
parameter_list|(
name|FSTestWrapperGlobTest
name|test
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupDFS
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Accept all paths.    */
DECL|class|AcceptAllPathFilter
specifier|private
specifier|static
class|class
name|AcceptAllPathFilter
implements|implements
name|PathFilter
block|{
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|field|trueFilter
specifier|private
specifier|static
specifier|final
name|PathFilter
name|trueFilter
init|=
operator|new
name|AcceptAllPathFilter
argument_list|()
decl_stmt|;
comment|/**    * Accept only paths ending in Z.    */
DECL|class|AcceptPathsEndingInZ
specifier|private
specifier|static
class|class
name|AcceptPathsEndingInZ
implements|implements
name|PathFilter
block|{
annotation|@
name|Override
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|stringPath
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|stringPath
operator|.
name|endsWith
argument_list|(
literal|"z"
argument_list|)
return|;
block|}
block|}
comment|/**    * Test globbing through symlinks.    */
DECL|class|TestGlobWithSymlinks
specifier|private
class|class
name|TestGlobWithSymlinks
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobWithSymlinks (boolean useFc)
name|TestGlobWithSymlinks
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that globbing through a symlink to a directory yields a path
comment|// containing that symlink.
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink/beta"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test simple glob
name|FileStatus
index|[]
name|statuses
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test glob through symlink
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink/beta"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the terminal path component in a globbed path is a symlink,
comment|// we don't dereference that link.
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
literal|"beta"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink/betaLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/betaLi*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/betaLink"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// todo: test symlink-to-symlink-to-dir, etc.
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobWithSymlinksOnFS ()
specifier|public
name|void
name|testGlobWithSymlinksOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobWithSymlinks
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobWithSymlinksOnFC ()
specifier|public
name|void
name|testGlobWithSymlinksOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobWithSymlinks
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test globbing symlinks to symlinks.    *    * Also test globbing dangling symlinks.  It should NOT throw any exceptions!    */
DECL|class|TestGlobWithSymlinksToSymlinks
specifier|private
class|class
name|TestGlobWithSymlinksToSymlinks
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobWithSymlinksToSymlinks (boolean useFc)
name|TestGlobWithSymlinksToSymlinks
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that globbing through a symlink to a symlink to a directory
comment|// fully resolves
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test glob through symlink to a symlink to a directory
name|FileStatus
name|statuses
index|[]
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkLink"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkLink"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkLink/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkLink/beta"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test glob of dangling symlink (theta does not actually exist)
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"theta"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/kappa"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/kappa/kappa"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
comment|// Test glob of symlinks
name|wrap
operator|.
name|createFile
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gamma"
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"gamma"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"gammaLink"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLinkLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"gammaLinkLink"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLinkLinkLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/*/gammaLinkLinkLink"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLinkLinkLink"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta/gamma;"
operator|+
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLink;"
operator|+
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLinkLink;"
operator|+
name|USER_DIR
operator|+
literal|"/alpha/beta/gammaLinkLinkLink"
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|statuses
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let's create two symlinks that point to each other, and glob on them.
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"tweedledee"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/tweedledum"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"tweedledum"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/tweedledee"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/tweedledee/unobtainium"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobWithSymlinksToSymlinksOnFS ()
specifier|public
name|void
name|testGlobWithSymlinksToSymlinksOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobWithSymlinksToSymlinks
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobWithSymlinksToSymlinksOnFC ()
specifier|public
name|void
name|testGlobWithSymlinksToSymlinksOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobWithSymlinksToSymlinks
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test globbing symlinks with a custom PathFilter    */
DECL|class|TestGlobSymlinksWithCustomPathFilter
specifier|private
class|class
name|TestGlobSymlinksWithCustomPathFilter
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobSymlinksWithCustomPathFilter (boolean useFc)
name|TestGlobSymlinksWithCustomPathFilter
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that globbing through a symlink to a symlink to a directory
comment|// fully resolves
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkz"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/betaz"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test glob through symlink to a symlink to a directory, with a
comment|// PathFilter
name|FileStatus
name|statuses
index|[]
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta"
argument_list|)
argument_list|,
operator|new
name|AcceptPathsEndingInZ
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|statuses
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkz/betaz"
argument_list|)
argument_list|,
operator|new
name|AcceptPathsEndingInZ
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLinkz/betaz"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/*/*"
argument_list|)
argument_list|,
operator|new
name|AcceptPathsEndingInZ
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/betaz;"
operator|+
name|USER_DIR
operator|+
literal|"/alphaLinkz/betaz"
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|statuses
argument_list|)
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/*/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha/beta;"
operator|+
name|USER_DIR
operator|+
literal|"/alpha/betaz;"
operator|+
name|USER_DIR
operator|+
literal|"/alphaLinkz/beta;"
operator|+
name|USER_DIR
operator|+
literal|"/alphaLinkz/betaz"
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|statuses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobSymlinksWithCustomPathFilterOnFS ()
specifier|public
name|void
name|testGlobSymlinksWithCustomPathFilterOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobSymlinksWithCustomPathFilter
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testGlobSymlinksWithCustomPathFilterOnFC ()
specifier|public
name|void
name|testGlobSymlinksWithCustomPathFilterOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobSymlinksWithCustomPathFilter
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that globStatus fills in the scheme even when it is not provided.    */
DECL|class|TestGlobFillsInScheme
specifier|private
class|class
name|TestGlobFillsInScheme
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobFillsInScheme (boolean useFc)
name|TestGlobFillsInScheme
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify that the default scheme is hdfs, when we don't supply one.
name|wrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileStatus
name|statuses
index|[]
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|USER_DIR
operator|+
literal|"/alphaLink"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|USER_DIR
operator|+
literal|"/alpha"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
comment|// FileContext can list a file:/// URI.
comment|// Since everyone should have the root directory, we list that.
name|statuses
operator|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file"
argument_list|,
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|filePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// The FileSystem should have scheme 'hdfs'
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hdfs"
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobFillsInSchemeOnFS ()
specifier|public
name|void
name|testGlobFillsInSchemeOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobFillsInScheme
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobFillsInSchemeOnFC ()
specifier|public
name|void
name|testGlobFillsInSchemeOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobFillsInScheme
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that globStatus works with relative paths.    **/
DECL|class|TestRelativePath
specifier|private
class|class
name|TestRelativePath
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestRelativePath (boolean useFc)
name|TestRelativePath
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"abc"
block|,
literal|"abc.p"
block|,
literal|"bacd"
block|}
decl_stmt|;
name|Path
index|[]
name|path
init|=
operator|new
name|Path
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
index|[
name|i
index|]
operator|=
name|wrap
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|wrap
operator|.
name|mkdir
argument_list|(
name|path
index|[
name|i
index|]
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Path
name|patternPath
init|=
operator|new
name|Path
argument_list|(
literal|"a*"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|globResults
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|wrap
operator|.
name|globStatus
argument_list|(
name|patternPath
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
argument_list|,
name|patternPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|globResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|globResults
index|[
name|i
index|]
operator|=
name|wrap
operator|.
name|makeQualified
argument_list|(
name|globResults
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|globResults
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// The default working directory for FileSystem is the user's home
comment|// directory.  For FileContext, the default is based on the UNIX user that
comment|// started the jvm.  This is arguably a bug (see HADOOP-10944 for
comment|// details).  We work around it here by explicitly calling
comment|// getWorkingDirectory and going from there.
name|String
name|pwd
init|=
name|wrap
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pwd
operator|+
literal|"/a;"
operator|+
name|pwd
operator|+
literal|"/abc;"
operator|+
name|pwd
operator|+
literal|"/abc.p"
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|globResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRelativePathOnFS ()
specifier|public
name|void
name|testRelativePathOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestRelativePath
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativePathOnFC ()
specifier|public
name|void
name|testRelativePathOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestRelativePath
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that trying to glob through a directory we don't have permission    * to list fails with AccessControlException rather than succeeding or    * throwing any other exception.    **/
DECL|class|TestGlobAccessDenied
specifier|private
class|class
name|TestGlobAccessDenied
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobAccessDenied (boolean useFc)
name|TestGlobAccessDenied
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|privWrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nopermission/val"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/norestrictions/val"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/nopermission"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/no*/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an AccessControlException when "
operator|+
literal|"globbing through a directory we don't have permissions "
operator|+
literal|"to list."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ioe
parameter_list|)
block|{       }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/norestrictions/val"
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/norestrictions/*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobAccessDeniedOnFS ()
specifier|public
name|void
name|testGlobAccessDeniedOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobAccessDenied
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobAccessDeniedOnFC ()
specifier|public
name|void
name|testGlobAccessDeniedOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobAccessDenied
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that trying to list a reserved path on HDFS via the globber works.    **/
DECL|class|TestReservedHdfsPaths
specifier|private
class|class
name|TestReservedHdfsPaths
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestReservedHdfsPaths (boolean useFc)
name|TestReservedHdfsPaths
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|reservedRoot
init|=
literal|"/.reserved/.inodes/"
operator|+
name|INodeId
operator|.
name|ROOT_INODE_ID
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reservedRoot
argument_list|,
name|TestPath
operator|.
name|mergeStatuses
argument_list|(
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|reservedRoot
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReservedHdfsPathsOnFS ()
specifier|public
name|void
name|testReservedHdfsPathsOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestReservedHdfsPaths
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservedHdfsPathsOnFC ()
specifier|public
name|void
name|testReservedHdfsPathsOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestReservedHdfsPaths
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test trying to glob the root.  Regression test for HDFS-5888.    **/
DECL|class|TestGlobRoot
specifier|private
class|class
name|TestGlobRoot
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestGlobRoot (boolean useFc)
name|TestGlobRoot
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|FileStatus
name|oldRootStatus
init|=
name|wrap
operator|.
name|getFileStatus
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|String
name|newOwner
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|privWrap
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|newOwner
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
name|rootPath
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newOwner
argument_list|,
name|status
index|[
literal|0
index|]
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|oldRootStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGlobRootOnFS ()
specifier|public
name|void
name|testGlobRootOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestGlobRoot
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobRootOnFC ()
specifier|public
name|void
name|testGlobRootOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestGlobRoot
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test glob expressions that don't appear at the end of the path.  Regression    * test for HADOOP-10957.    **/
DECL|class|TestNonTerminalGlobs
specifier|private
class|class
name|TestNonTerminalGlobs
extends|extends
name|FSTestWrapperGlobTest
block|{
DECL|method|TestNonTerminalGlobs (boolean useFc)
name|TestNonTerminalGlobs
parameter_list|(
name|boolean
name|useFc
parameter_list|)
block|{
name|super
argument_list|(
name|useFc
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|privWrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed_away/alpha"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed*/alpha"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/filed_away/alpha"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed_away/alphabet"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed_away/alphabet/abc"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|statuses
operator|=
name|wrap
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed*/alph*/*b*"
argument_list|)
argument_list|,
operator|new
name|AcceptAllPathFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/filed_away/alphabet/abc"
argument_list|,
name|statuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|privWrap
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|privWrap
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/filed_away"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNonTerminalGlobsOnFS ()
specifier|public
name|void
name|testNonTerminalGlobsOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileSystem
argument_list|(
operator|new
name|TestNonTerminalGlobs
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonTerminalGlobsOnFC ()
specifier|public
name|void
name|testNonTerminalGlobsOnFC
parameter_list|()
throws|throws
name|Exception
block|{
name|testOnFileContext
argument_list|(
operator|new
name|TestNonTerminalGlobs
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalFilesystem ()
specifier|public
name|void
name|testLocalFilesystem
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|localTmp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|localTmp
argument_list|)
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|status
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sorted
init|=
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|isOrdered
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

