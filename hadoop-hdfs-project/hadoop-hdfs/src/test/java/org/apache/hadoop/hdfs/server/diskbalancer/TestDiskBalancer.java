begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|TestBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancer
operator|.
name|DiskBalancerMover
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancer
operator|.
name|VolumePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ClusterConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|NodePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_comment
comment|/**  * Test Disk Balancer.  */
end_comment

begin_class
DECL|class|TestDiskBalancer
specifier|public
class|class
name|TestDiskBalancer
block|{
DECL|field|PLAN_FILE
specifier|private
specifier|static
specifier|final
name|String
name|PLAN_FILE
init|=
literal|"/system/current.plan.json"
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDiskBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testDiskBalancerNameNodeConnectivity ()
specifier|public
name|void
name|testDiskBalancerNameNodeConnectivity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDatanodes
init|=
literal|2
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|ClusterConnector
name|nameNodeConnector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DiskBalancerCluster
name|diskBalancerCluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nameNodeConnector
argument_list|)
decl_stmt|;
name|diskBalancerCluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|diskBalancerCluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|numDatanodes
argument_list|)
expr_stmt|;
name|DataNode
name|dnNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DiskBalancerDataNode
name|dbDnNode
init|=
name|diskBalancerCluster
operator|.
name|getNodeByUUID
argument_list|(
name|dnNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dnNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dbDnNode
operator|.
name|getDataNodeUUID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dnNode
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dbDnNode
operator|.
name|getDataNodeIP
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dnNode
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dbDnNode
operator|.
name|getDataNodeName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|ref
init|=
name|dnNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
name|ref
operator|.
name|size
argument_list|()
argument_list|,
name|dbDnNode
operator|.
name|getVolumeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Shutdown the DN first, to verify that calling diskbalancer APIs on
comment|// uninitialized DN doesn't NPE
name|dnNode
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|dnNode
operator|.
name|getDiskBalancerStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test simulates a real Data node working with DiskBalancer.    *<p>    * Here is the overview of this test.    *<p>    * 1. Write a bunch of blocks and move them to one disk to create imbalance.    * 2. Rewrite  the capacity of the disks in DiskBalancer Model so that planner    * will produce a move plan. 3. Execute the move plan and wait unitl the plan    * is done. 4. Verify the source disk has blocks now.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDiskBalancerEndToEnd ()
specifier|public
name|void
name|testDiskBalancerEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blockCount
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|diskCount
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|dataNodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|dataNodeIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sourceDiskIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|cap
init|=
name|blockSize
operator|*
literal|2L
operator|*
name|blockCount
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|ClusterBuilder
argument_list|()
operator|.
name|setBlockCount
argument_list|(
name|blockCount
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setDiskCount
argument_list|(
name|diskCount
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|dataNodeCount
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|cap
block|,
name|cap
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DataMover
name|dataMover
init|=
operator|new
name|DataMover
argument_list|(
name|cluster
argument_list|,
name|dataNodeIndex
argument_list|,
name|sourceDiskIndex
argument_list|,
name|conf
argument_list|,
name|blockSize
argument_list|,
name|blockCount
argument_list|)
decl_stmt|;
name|dataMover
operator|.
name|moveDataToSourceDisk
argument_list|()
expr_stmt|;
name|NodePlan
name|plan
init|=
name|dataMover
operator|.
name|generatePlan
argument_list|()
decl_stmt|;
name|dataMover
operator|.
name|executePlan
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyPlanExectionDone
argument_list|()
expr_stmt|;
name|dataMover
operator|.
name|verifyAllVolumesHaveData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyTolerance
argument_list|(
name|plan
argument_list|,
literal|0
argument_list|,
name|sourceDiskIndex
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDiskBalancerWithFederatedCluster ()
specifier|public
name|void
name|testDiskBalancerWithFederatedCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blockCount
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|diskCount
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|dataNodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|dataNodeIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sourceDiskIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|cap
init|=
name|blockSize
operator|*
literal|3L
operator|*
name|blockCount
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dataNodeCount
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|diskCount
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|cap
block|,
name|cap
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/tmp.txt"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|blockCount
operator|*
name|blockSize
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TestBalancer
operator|.
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|DataMover
name|dataMover
init|=
operator|new
name|DataMover
argument_list|(
name|cluster
argument_list|,
name|dataNodeIndex
argument_list|,
name|sourceDiskIndex
argument_list|,
name|conf
argument_list|,
name|blockSize
argument_list|,
name|blockCount
argument_list|)
decl_stmt|;
name|dataMover
operator|.
name|moveDataToSourceDisk
argument_list|()
expr_stmt|;
name|NodePlan
name|plan
init|=
name|dataMover
operator|.
name|generatePlan
argument_list|()
decl_stmt|;
name|dataMover
operator|.
name|executePlan
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyPlanExectionDone
argument_list|()
expr_stmt|;
name|dataMover
operator|.
name|verifyAllVolumesHaveData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyTolerance
argument_list|(
name|plan
argument_list|,
literal|0
argument_list|,
name|sourceDiskIndex
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDiskBalancerWithFedClusterWithOneNameServiceEmpty ()
specifier|public
name|void
name|testDiskBalancerWithFedClusterWithOneNameServiceEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blockCount
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|diskCount
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|dataNodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|dataNodeIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sourceDiskIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|cap
init|=
name|blockSize
operator|*
literal|3L
operator|*
name|blockCount
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dataNodeCount
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|diskCount
argument_list|)
operator|.
name|storageCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|cap
block|,
name|cap
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/tmp.txt"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|blockCount
operator|*
name|blockSize
decl_stmt|;
comment|//Writing data only to one nameservice.
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TestBalancer
operator|.
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|DiskBalancer
operator|.
name|LOG
argument_list|)
decl_stmt|;
try|try
block|{
name|DataMover
name|dataMover
init|=
operator|new
name|DataMover
argument_list|(
name|cluster
argument_list|,
name|dataNodeIndex
argument_list|,
name|sourceDiskIndex
argument_list|,
name|conf
argument_list|,
name|blockSize
argument_list|,
name|blockCount
argument_list|)
decl_stmt|;
name|dataMover
operator|.
name|moveDataToSourceDisk
argument_list|()
expr_stmt|;
name|NodePlan
name|plan
init|=
name|dataMover
operator|.
name|generatePlan
argument_list|()
decl_stmt|;
name|dataMover
operator|.
name|executePlan
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyPlanExectionDone
argument_list|()
expr_stmt|;
comment|//Because here we have one nameservice empty, don't check
comment|// blockPoolCount.
name|dataMover
operator|.
name|verifyAllVolumesHaveData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"There are no "
operator|+
literal|"blocks in the blockPool"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBalanceDataBetweenMultiplePairsOfVolumes ()
specifier|public
name|void
name|testBalanceDataBetweenMultiplePairsOfVolumes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blockCount
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
comment|// create 3 disks, that means we will have 2 plans
comment|// Move Data from disk0->disk1 and disk0->disk2.
specifier|final
name|int
name|diskCount
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|dataNodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|dataNodeIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sourceDiskIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|cap
init|=
name|blockSize
operator|*
literal|2L
operator|*
name|blockCount
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|ClusterBuilder
argument_list|()
operator|.
name|setBlockCount
argument_list|(
name|blockCount
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setDiskCount
argument_list|(
name|diskCount
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|dataNodeCount
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|cap
block|,
name|cap
block|,
name|cap
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DataMover
name|dataMover
init|=
operator|new
name|DataMover
argument_list|(
name|cluster
argument_list|,
name|dataNodeIndex
argument_list|,
name|sourceDiskIndex
argument_list|,
name|conf
argument_list|,
name|blockSize
argument_list|,
name|blockCount
argument_list|)
decl_stmt|;
name|dataMover
operator|.
name|moveDataToSourceDisk
argument_list|()
expr_stmt|;
name|NodePlan
name|plan
init|=
name|dataMover
operator|.
name|generatePlan
argument_list|()
decl_stmt|;
comment|// 3 disks , The plan should move data both disks,
comment|// so we must have 2 plan steps.
name|assertEquals
argument_list|(
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|executePlan
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyPlanExectionDone
argument_list|()
expr_stmt|;
name|dataMover
operator|.
name|verifyAllVolumesHaveData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyTolerance
argument_list|(
name|plan
argument_list|,
literal|0
argument_list|,
name|sourceDiskIndex
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test disk balancer behavior when one of the disks involved    * in balancing operation is removed after submitting the plan.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDiskBalancerWhenRemovingVolumes ()
specifier|public
name|void
name|testDiskBalancerWhenRemovingVolumes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|blockCount
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|blockSize
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|diskCount
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|dataNodeCount
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|dataNodeIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|sourceDiskIndex
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|cap
init|=
name|blockSize
operator|*
literal|2L
operator|*
name|blockCount
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|ClusterBuilder
argument_list|()
operator|.
name|setBlockCount
argument_list|(
name|blockCount
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setDiskCount
argument_list|(
name|diskCount
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|dataNodeCount
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setCapacities
argument_list|(
operator|new
name|long
index|[]
block|{
name|cap
block|,
name|cap
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DataMover
name|dataMover
init|=
operator|new
name|DataMover
argument_list|(
name|cluster
argument_list|,
name|dataNodeIndex
argument_list|,
name|sourceDiskIndex
argument_list|,
name|conf
argument_list|,
name|blockSize
argument_list|,
name|blockCount
argument_list|)
decl_stmt|;
name|dataMover
operator|.
name|moveDataToSourceDisk
argument_list|()
expr_stmt|;
name|NodePlan
name|plan
init|=
name|dataMover
operator|.
name|generatePlan
argument_list|()
decl_stmt|;
name|dataMover
operator|.
name|executePlanDuringDiskRemove
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyAllVolumesHaveData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataMover
operator|.
name|verifyTolerance
argument_list|(
name|plan
argument_list|,
literal|0
argument_list|,
name|sourceDiskIndex
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper class that allows us to create different kinds of MiniDFSClusters    * and populate data.    */
DECL|class|ClusterBuilder
specifier|static
class|class
name|ClusterBuilder
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|numDatanodes
specifier|private
name|int
name|numDatanodes
decl_stmt|;
DECL|field|fileLen
specifier|private
name|int
name|fileLen
decl_stmt|;
DECL|field|blockCount
specifier|private
name|int
name|blockCount
decl_stmt|;
DECL|field|diskCount
specifier|private
name|int
name|diskCount
decl_stmt|;
DECL|field|capacities
specifier|private
name|long
index|[]
name|capacities
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|ClusterBuilder
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBlockSize (int blockSize)
specifier|public
name|ClusterBuilder
name|setBlockSize
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNumDatanodes (int datanodeCount)
specifier|public
name|ClusterBuilder
name|setNumDatanodes
parameter_list|(
name|int
name|datanodeCount
parameter_list|)
block|{
name|this
operator|.
name|numDatanodes
operator|=
name|datanodeCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBlockCount (int blockCount)
specifier|public
name|ClusterBuilder
name|setBlockCount
parameter_list|(
name|int
name|blockCount
parameter_list|)
block|{
name|this
operator|.
name|blockCount
operator|=
name|blockCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDiskCount (int diskCount)
specifier|public
name|ClusterBuilder
name|setDiskCount
parameter_list|(
name|int
name|diskCount
parameter_list|)
block|{
name|this
operator|.
name|diskCount
operator|=
name|diskCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCapacities (final long[] caps)
specifier|private
name|ClusterBuilder
name|setCapacities
parameter_list|(
specifier|final
name|long
index|[]
name|caps
parameter_list|)
block|{
name|this
operator|.
name|capacities
operator|=
name|caps
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getStorageTypes (int diskCount)
specifier|private
name|StorageType
index|[]
name|getStorageTypes
parameter_list|(
name|int
name|diskCount
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|diskCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|array
init|=
operator|new
name|StorageType
index|[
name|diskCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|diskCount
condition|;
name|x
operator|++
control|)
block|{
name|array
index|[
name|x
index|]
operator|=
name|StorageType
operator|.
name|DISK
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|build ()
specifier|public
name|MiniDFSCluster
name|build
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|numDatanodes
operator|>
literal|0
argument_list|)
expr_stmt|;
name|fileLen
operator|=
name|blockCount
operator|*
name|blockSize
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fileLen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fileName
init|=
literal|"/tmp.txt"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|fileLen
operator|=
name|blockCount
operator|*
name|blockSize
expr_stmt|;
comment|// Write a file and restart the cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|getStorageTypes
argument_list|(
name|diskCount
argument_list|)
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|diskCount
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|generateData
argument_list|(
name|filePath
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
return|return
name|cluster
return|;
block|}
DECL|method|generateData (Path filePath, MiniDFSCluster cluster)
specifier|private
name|void
name|generateData
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TestBalancer
operator|.
name|createFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|numDatanodes
operator|-
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DataMover
class|class
name|DataMover
block|{
DECL|field|cluster
specifier|private
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|sourceDiskIndex
specifier|private
specifier|final
name|int
name|sourceDiskIndex
decl_stmt|;
DECL|field|dataNodeIndex
specifier|private
specifier|final
name|int
name|dataNodeIndex
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|blockCount
specifier|private
specifier|final
name|int
name|blockCount
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
DECL|field|node
specifier|private
name|DataNode
name|node
decl_stmt|;
comment|/**      * Constructs a DataMover class.      *      * @param cluster         - MiniDFSCluster.      * @param dataNodeIndex   - Datanode to operate against.      * @param sourceDiskIndex - source Disk Index.      */
DECL|method|DataMover (MiniDFSCluster cluster, int dataNodeIndex, int sourceDiskIndex, Configuration conf, int blockSize, int blockCount)
specifier|public
name|DataMover
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|dataNodeIndex
parameter_list|,
name|int
name|sourceDiskIndex
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|int
name|blockCount
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|dataNodeIndex
operator|=
name|dataNodeIndex
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceDiskIndex
operator|=
name|sourceDiskIndex
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|blockCount
operator|=
name|blockCount
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
comment|/**      * Moves all data to a source disk to create disk imbalance so we can run a      * planner.      *      * @throws IOException      */
DECL|method|moveDataToSourceDisk ()
specifier|public
name|void
name|moveDataToSourceDisk
parameter_list|()
throws|throws
name|IOException
block|{
name|moveAllDataToDestDisk
argument_list|(
name|this
operator|.
name|node
argument_list|,
name|sourceDiskIndex
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**      * Moves all data in the data node to one disk.      *      * @param dataNode      - Datanode      * @param destDiskindex - Index of the destination disk.      */
DECL|method|moveAllDataToDestDisk (DataNode dataNode, int destDiskindex)
specifier|private
name|void
name|moveAllDataToDestDisk
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|int
name|destDiskindex
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|destDiskindex
operator|>=
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|dataNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
if|if
condition|(
name|refs
operator|.
name|size
argument_list|()
operator|<=
name|destDiskindex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Disk index."
argument_list|)
throw|;
block|}
name|FsVolumeImpl
name|dest
init|=
operator|(
name|FsVolumeImpl
operator|)
name|refs
operator|.
name|get
argument_list|(
name|destDiskindex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|refs
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|x
operator|==
name|destDiskindex
condition|)
block|{
continue|continue;
block|}
name|FsVolumeImpl
name|source
init|=
operator|(
name|FsVolumeImpl
operator|)
name|refs
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|DiskBalancerTestUtil
operator|.
name|moveAllDataToDestVolume
argument_list|(
name|dataNode
operator|.
name|getFSDataset
argument_list|()
argument_list|,
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Generates a NodePlan for the datanode specified.      *      * @return NodePlan.      */
DECL|method|generatePlan ()
specifier|public
name|NodePlan
name|generatePlan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start up a disk balancer and read the cluster info.
name|node
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
expr_stmt|;
name|ClusterConnector
name|nameNodeConnector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|dataNodeIndex
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DiskBalancerCluster
name|diskBalancerCluster
init|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|nameNodeConnector
argument_list|)
decl_stmt|;
name|diskBalancerCluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DiskBalancerDataNode
argument_list|>
name|nodesToProcess
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Pick a node to process.
name|nodesToProcess
operator|.
name|add
argument_list|(
name|diskBalancerCluster
operator|.
name|getNodeByUUID
argument_list|(
name|node
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diskBalancerCluster
operator|.
name|setNodesToProcess
argument_list|(
name|nodesToProcess
argument_list|)
expr_stmt|;
comment|// Compute a plan.
name|List
argument_list|<
name|NodePlan
argument_list|>
name|clusterplan
init|=
name|diskBalancerCluster
operator|.
name|computePlan
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
comment|// Now we must have a plan,since the node is imbalanced and we
comment|// asked the disk balancer to create a plan.
name|assertTrue
argument_list|(
name|clusterplan
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|NodePlan
name|plan
init|=
name|clusterplan
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setNodeUUID
argument_list|(
name|node
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setTimeStamp
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setTolerancePercent
argument_list|(
literal|10
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/**      * Waits for a plan executing to finish.      */
DECL|method|executePlan (NodePlan plan)
specifier|public
name|void
name|executePlan
parameter_list|(
name|NodePlan
name|plan
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|node
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
expr_stmt|;
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|shaHex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
comment|// Submit the plan and wait till the execution is done.
name|node
operator|.
name|submitDiskBalancerPlan
argument_list|(
name|planID
argument_list|,
literal|1
argument_list|,
name|PLAN_FILE
argument_list|,
name|planJson
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|jmxString
init|=
name|node
operator|.
name|getDiskBalancerStatus
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jmxString
argument_list|)
expr_stmt|;
name|DiskBalancerWorkStatus
name|status
init|=
name|DiskBalancerWorkStatus
operator|.
name|parseJson
argument_list|(
name|jmxString
argument_list|)
decl_stmt|;
name|DiskBalancerWorkStatus
name|realStatus
init|=
name|node
operator|.
name|queryDiskBalancerPlan
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|realStatus
operator|.
name|getPlanID
argument_list|()
argument_list|,
name|status
operator|.
name|getPlanID
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|node
operator|.
name|queryDiskBalancerPlan
argument_list|()
operator|.
name|getResult
argument_list|()
operator|==
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|PLAN_DONE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
block|}
DECL|method|executePlanDuringDiskRemove (NodePlan plan)
specifier|public
name|void
name|executePlanDuringDiskRemove
parameter_list|(
name|NodePlan
name|plan
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|CountDownLatch
name|createWorkPlanLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|removeDiskLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|errorCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FSDataSet: "
operator|+
name|node
operator|.
name|getFSDataset
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|fsDatasetSpy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|node
operator|.
name|getFSDataset
argument_list|()
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
try|try
block|{
name|node
operator|.
name|getFSDataset
argument_list|()
operator|.
name|moveBlockAcrossVolumes
argument_list|(
operator|(
name|ExtendedBlock
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|FsVolumeSpi
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|fsDatasetSpy
argument_list|)
operator|.
name|moveBlockAcrossVolumes
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FsVolumeSpi
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DiskBalancerMover
name|diskBalancerMover
init|=
operator|new
name|DiskBalancerMover
argument_list|(
name|fsDatasetSpy
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|diskBalancerMover
operator|.
name|setRunnable
argument_list|()
expr_stmt|;
name|DiskBalancerMover
name|diskBalancerMoverSpy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|diskBalancerMover
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
name|createWorkPlanLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the disk removal!"
argument_list|)
expr_stmt|;
try|try
block|{
name|removeDiskLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Encountered "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got disk removal notification, resuming copyBlocks!"
argument_list|)
expr_stmt|;
name|diskBalancerMover
operator|.
name|copyBlocks
argument_list|(
call|(
name|VolumePair
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
call|(
name|DiskBalancerWorkItem
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|diskBalancerMoverSpy
argument_list|)
operator|.
name|copyBlocks
argument_list|(
name|any
argument_list|(
name|VolumePair
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DiskBalancerWorkItem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DiskBalancer
name|diskBalancer
init|=
operator|new
name|DiskBalancer
argument_list|(
name|node
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|conf
argument_list|,
name|diskBalancerMoverSpy
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oldDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|node
operator|.
name|getConf
argument_list|()
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|newDirs
init|=
name|oldDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reconfigure newDirs:"
operator|+
name|newDirs
argument_list|)
expr_stmt|;
name|Thread
name|reconfigThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for work plan creation!"
argument_list|)
expr_stmt|;
name|createWorkPlanLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Work plan created. Removing disk!"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"DN did not update its own config"
argument_list|,
name|node
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDirs
argument_list|)
argument_list|,
name|is
argument_list|(
name|node
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed disk!"
argument_list|)
expr_stmt|;
name|removeDiskLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected error while reconfiguring: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|reconfigThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|shaHex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
name|diskBalancer
operator|.
name|submitPlan
argument_list|(
name|planID
argument_list|,
literal|1
argument_list|,
name|PLAN_FILE
argument_list|,
name|planJson
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Work Status: "
operator|+
name|diskBalancer
operator|.
name|queryWorkStatus
argument_list|()
operator|.
name|toJsonString
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|diskBalancer
operator|.
name|queryWorkStatus
argument_list|()
operator|.
name|getResult
argument_list|()
decl_stmt|;
return|return
operator|(
name|result
operator|==
name|Result
operator|.
name|PLAN_DONE
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Disk balancer operation hit max errors!"
argument_list|,
name|errorCount
operator|.
name|get
argument_list|()
operator|<
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_MAX_DISK_ERRORS_DEFAULT
argument_list|)
expr_stmt|;
name|createWorkPlanLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|removeDiskLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
comment|/**      * Verifies the Plan Execution has been done.      */
DECL|method|verifyPlanExectionDone ()
specifier|public
name|void
name|verifyPlanExectionDone
parameter_list|()
throws|throws
name|IOException
block|{
name|node
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|queryDiskBalancerPlan
argument_list|()
operator|.
name|getResult
argument_list|()
argument_list|,
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|PLAN_DONE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Once diskBalancer is run, all volumes mush has some data.      */
DECL|method|verifyAllVolumesHaveData (boolean checkblockPoolCount)
specifier|public
name|void
name|verifyAllVolumesHaveData
parameter_list|(
name|boolean
name|checkblockPoolCount
parameter_list|)
throws|throws
name|IOException
block|{
name|node
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dataNodeIndex
argument_list|)
expr_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|node
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|FsVolumeSpi
name|volume
range|:
name|refs
control|)
block|{
name|assertTrue
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|getBlockCount
argument_list|(
name|volume
argument_list|,
name|checkblockPoolCount
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} : Block Count : {}"
argument_list|,
name|refs
argument_list|,
name|DiskBalancerTestUtil
operator|.
name|getBlockCount
argument_list|(
name|volume
argument_list|,
name|checkblockPoolCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Verifies that tolerance values are honored correctly.      */
DECL|method|verifyTolerance (NodePlan plan, int planIndex, int sourceDiskIndex, int tolerance)
specifier|public
name|void
name|verifyTolerance
parameter_list|(
name|NodePlan
name|plan
parameter_list|,
name|int
name|planIndex
parameter_list|,
name|int
name|sourceDiskIndex
parameter_list|,
name|int
name|tolerance
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Tolerance
name|long
name|delta
init|=
operator|(
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
name|planIndex
argument_list|)
operator|.
name|getBytesToMove
argument_list|()
operator|*
name|tolerance
operator|)
operator|/
literal|100
decl_stmt|;
name|FsVolumeImpl
name|volume
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|node
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|volume
operator|=
operator|(
name|FsVolumeImpl
operator|)
name|refs
operator|.
name|get
argument_list|(
name|sourceDiskIndex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|getBlockCount
argument_list|(
name|volume
argument_list|,
literal|true
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|DiskBalancerTestUtil
operator|.
name|getBlockCount
argument_list|(
name|volume
argument_list|,
literal|true
argument_list|)
operator|*
operator|(
name|blockSize
operator|+
name|delta
operator|)
operator|)
operator|>=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytesToMove
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

