begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|LogVerificationAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_class
DECL|class|TestThrottledAsyncCheckerTimeout
specifier|public
class|class
name|TestThrottledAsyncCheckerTimeout
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestThrottledAsyncCheckerTimeout
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
DECL|field|DISK_CHECK_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|DISK_CHECK_TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|lock
specifier|private
name|ReentrantLock
name|lock
decl_stmt|;
DECL|method|getExecutorService ()
specifier|private
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|initializeLock ()
specifier|public
name|void
name|initializeLock
parameter_list|()
block|{
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiskCheckTimeout ()
specifier|public
name|void
name|testDiskCheckTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DummyCheckable
name|target
init|=
operator|new
name|DummyCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
literal|0
argument_list|,
name|DISK_CHECK_TIMEOUT
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Acquire lock to halt checker. Release after timeout occurs.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|numCallbackInvocationsSuccess
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|numCallbackInvocationsFailure
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|callbackResult
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Throwable
index|[]
name|throwable
init|=
operator|new
name|Throwable
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|olf
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|olf
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|numCallbackInvocationsSuccess
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callbackResult
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwable
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
name|numCallbackInvocationsFailure
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|callbackResult
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|callbackResult
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Wait for the callback
name|Thread
operator|.
name|sleep
argument_list|(
name|DISK_CHECK_TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|numCallbackInvocationsFailure
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numCallbackInvocationsSuccess
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|throwable
index|[
literal|0
index|]
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiskCheckTimeoutInvokesOneCallbackOnly ()
specifier|public
name|void
name|testDiskCheckTimeoutInvokesOneCallbackOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DummyCheckable
name|target
init|=
operator|new
name|DummyCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
literal|0
argument_list|,
name|DISK_CHECK_TIMEOUT
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
name|FutureCallback
argument_list|<
name|Boolean
argument_list|>
name|futureCallback
init|=
name|mock
argument_list|(
name|FutureCallback
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Acquire lock to halt disk checker. Release after timeout occurs.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf1
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|olf1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|olf1
operator|.
name|get
argument_list|()
argument_list|,
name|futureCallback
argument_list|)
expr_stmt|;
comment|// Verify that timeout results in only 1 onFailure call and 0 onSuccess
comment|// calls.
name|verify
argument_list|(
name|futureCallback
argument_list|,
name|timeout
argument_list|(
operator|(
name|int
operator|)
name|DISK_CHECK_TIMEOUT
operator|*
literal|10
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onFailure
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|futureCallback
argument_list|,
name|timeout
argument_list|(
operator|(
name|int
operator|)
name|DISK_CHECK_TIMEOUT
operator|*
literal|10
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release lock so that target can acquire it.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf2
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|olf2
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|olf2
operator|.
name|get
argument_list|()
argument_list|,
name|futureCallback
argument_list|)
expr_stmt|;
comment|// Verify that normal check (dummy) results in only 1 onSuccess call.
comment|// Number of times onFailure is invoked should remain the same i.e. 1.
name|verify
argument_list|(
name|futureCallback
argument_list|,
name|timeout
argument_list|(
operator|(
name|int
operator|)
name|DISK_CHECK_TIMEOUT
operator|*
literal|10
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onFailure
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|futureCallback
argument_list|,
name|timeout
argument_list|(
operator|(
name|int
operator|)
name|DISK_CHECK_TIMEOUT
operator|*
literal|10
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeoutExceptionIsNotThrownForGoodDisk ()
specifier|public
name|void
name|testTimeoutExceptionIsNotThrownForGoodDisk
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DummyCheckable
name|target
init|=
operator|new
name|DummyCheckable
argument_list|()
decl_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|ThrottledAsyncChecker
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
name|checker
init|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
literal|0
argument_list|,
name|DISK_CHECK_TIMEOUT
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|olf
init|=
name|checker
operator|.
name|schedule
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|callbackResult
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Throwable
index|[]
name|throwable
init|=
operator|new
name|Throwable
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|olf
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|olf
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|callbackResult
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwable
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
name|callbackResult
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|callbackResult
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Wait for the callback
name|Thread
operator|.
name|sleep
argument_list|(
name|DISK_CHECK_TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|throwable
index|[
literal|0
index|]
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * A dummy Checkable that just returns true after acquiring lock.    */
DECL|class|DummyCheckable
specifier|protected
class|class
name|DummyCheckable
implements|implements
name|Checkable
argument_list|<
name|Boolean
argument_list|,
name|Boolean
argument_list|>
block|{
annotation|@
name|Override
DECL|method|check (Boolean context)
specifier|public
name|Boolean
name|check
parameter_list|(
name|Boolean
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Wait to acquire lock
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

