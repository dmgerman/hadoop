begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|RollingUpgradeStartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNameNodeOptionParsing
specifier|public
class|class
name|TestNameNodeOptionParsing
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testUpgrade ()
specifier|public
name|void
name|testUpgrade
parameter_list|()
block|{
name|StartupOption
name|opt
init|=
literal|null
decl_stmt|;
comment|// UPGRADE is set, but nothing else
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|opt
argument_list|,
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|opt
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// cluster ID is set
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-clusterid"
block|,
literal|"mycid"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycid"
argument_list|,
name|opt
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Everything is set
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-clusterid"
block|,
literal|"mycid"
block|,
literal|"-renameReserved"
block|,
literal|".snapshot=.my-snapshot,.reserved=.my-reserved"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycid"
argument_list|,
name|opt
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".my-snapshot"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".snapshot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".my-reserved"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".reserved"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset the map
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Everything is set, but in a different order
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-renameReserved"
block|,
literal|".reserved=.my-reserved,.snapshot=.my-snapshot"
block|,
literal|"-clusterid"
block|,
literal|"mycid"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycid"
argument_list|,
name|opt
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".my-snapshot"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".snapshot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".my-reserved"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".reserved"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try the default renameReserved
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-renameReserved"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".snapshot."
operator|+
name|HdfsConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
operator|+
literal|".UPGRADE_RENAMED"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".snapshot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".reserved."
operator|+
name|HdfsConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
operator|+
literal|".UPGRADE_RENAMED"
argument_list|,
name|FSImageFormat
operator|.
name|renameReservedMap
operator|.
name|get
argument_list|(
literal|".reserved"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try some error conditions
try|try
block|{
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-renameReserved"
block|,
literal|".reserved=.my-reserved,.not-reserved=.my-not-reserved"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Unknown reserved path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-renameReserved"
block|,
literal|".reserved=.my-reserved,.snapshot=.snapshot"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Invalid rename path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-renameReserved"
block|,
literal|".snapshot=.reserved"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Invalid rename path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|opt
operator|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-upgrade"
block|,
literal|"-cid"
block|}
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRollingUpgrade ()
specifier|public
name|void
name|testRollingUpgrade
parameter_list|()
block|{
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-rollingUpgrade"
block|}
decl_stmt|;
specifier|final
name|StartupOption
name|opt
init|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-rollingUpgrade"
block|,
literal|"started"
block|}
decl_stmt|;
specifier|final
name|StartupOption
name|opt
init|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|ROLLINGUPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|STARTED
argument_list|,
name|opt
operator|.
name|getRollingUpgradeStartupOption
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|STARTED
operator|.
name|matches
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-rollingUpgrade"
block|,
literal|"downgrade"
block|}
decl_stmt|;
specifier|final
name|StartupOption
name|opt
init|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|ROLLINGUPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|DOWNGRADE
argument_list|,
name|opt
operator|.
name|getRollingUpgradeStartupOption
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|DOWNGRADE
operator|.
name|matches
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-rollingUpgrade"
block|,
literal|"rollback"
block|}
decl_stmt|;
specifier|final
name|StartupOption
name|opt
init|=
name|NameNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|StartupOption
operator|.
name|ROLLINGUPGRADE
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|ROLLBACK
argument_list|,
name|opt
operator|.
name|getRollingUpgradeStartupOption
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RollingUpgradeStartupOption
operator|.
name|ROLLBACK
operator|.
name|matches
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|String
index|[]
name|args
init|=
block|{
literal|"-rollingUpgrade"
block|,
literal|"foo"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// the exception is expected.
block|}
block|}
block|}
block|}
end_class

end_unit

