begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|BestEffortLongFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|PersistentLongFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_comment
comment|/**  * Tests for upgrading with HA enabled.  */
end_comment

begin_class
DECL|class|TestDFSUpgradeWithHA
specifier|public
class|class
name|TestDFSUpgradeWithHA
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSUpgradeWithHA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|createConfiguration ()
specifier|public
name|void
name|createConfiguration
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// Turn off persistent IPC, so that the DFSClient can survive NN restart
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCTimesEqual (MiniDFSCluster cluster)
specifier|private
specifier|static
name|void
name|assertCTimesEqual
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
name|long
name|nn1CTime
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
name|long
name|nn2CTime
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|nn1CTime
argument_list|,
name|nn2CTime
argument_list|)
expr_stmt|;
block|}
DECL|method|checkClusterPreviousDirExistence (MiniDFSCluster cluster, boolean shouldExist)
specifier|private
specifier|static
name|void
name|checkClusterPreviousDirExistence
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|boolean
name|shouldExist
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
name|i
argument_list|,
name|shouldExist
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkNnPreviousDirExistence (MiniDFSCluster cluster, int index, boolean shouldExist)
specifier|private
specifier|static
name|void
name|checkNnPreviousDirExistence
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|shouldExist
parameter_list|)
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|nameDirs
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|nnDir
range|:
name|nameDirs
control|)
block|{
name|checkPreviousDirExistence
argument_list|(
operator|new
name|File
argument_list|(
name|nnDir
argument_list|)
argument_list|,
name|shouldExist
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkJnPreviousDirExistence (MiniQJMHACluster jnCluster, boolean shouldExist)
specifier|private
specifier|static
name|void
name|checkJnPreviousDirExistence
parameter_list|(
name|MiniQJMHACluster
name|jnCluster
parameter_list|,
name|boolean
name|shouldExist
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|checkPreviousDirExistence
argument_list|(
name|jnCluster
operator|.
name|getJournalCluster
argument_list|()
operator|.
name|getJournalDir
argument_list|(
name|i
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
name|shouldExist
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shouldExist
condition|)
block|{
name|assertEpochFilesCopied
argument_list|(
name|jnCluster
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEpochFilesCopied (MiniQJMHACluster jnCluster)
specifier|private
specifier|static
name|void
name|assertEpochFilesCopied
parameter_list|(
name|MiniQJMHACluster
name|jnCluster
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|File
name|journalDir
init|=
name|jnCluster
operator|.
name|getJournalCluster
argument_list|()
operator|.
name|getJournalDir
argument_list|(
name|i
argument_list|,
literal|"ns1"
argument_list|)
decl_stmt|;
name|File
name|currDir
init|=
operator|new
name|File
argument_list|(
name|journalDir
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|File
name|prevDir
init|=
operator|new
name|File
argument_list|(
name|journalDir
argument_list|,
literal|"previous"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
operator|new
name|String
index|[]
block|{
name|Journal
operator|.
name|LAST_PROMISED_FILENAME
block|,
name|Journal
operator|.
name|LAST_WRITER_EPOCH
block|}
control|)
block|{
name|File
name|prevFile
init|=
operator|new
name|File
argument_list|(
name|prevDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
comment|// Possible the prev file doesn't exist, e.g. if there has never been a
comment|// writer before the upgrade.
if|if
condition|(
name|prevFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|PersistentLongFile
name|prevLongFile
init|=
operator|new
name|PersistentLongFile
argument_list|(
name|prevFile
argument_list|,
operator|-
literal|10
argument_list|)
decl_stmt|;
name|PersistentLongFile
name|currLongFile
init|=
operator|new
name|PersistentLongFile
argument_list|(
operator|new
name|File
argument_list|(
name|currDir
argument_list|,
name|fileName
argument_list|)
argument_list|,
operator|-
literal|11
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Value in "
operator|+
name|fileName
operator|+
literal|" has decreased on upgrade in "
operator|+
name|journalDir
argument_list|,
name|prevLongFile
operator|.
name|get
argument_list|()
operator|<=
name|currLongFile
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkPreviousDirExistence (File rootDir, boolean shouldExist)
specifier|private
specifier|static
name|void
name|checkPreviousDirExistence
parameter_list|(
name|File
name|rootDir
parameter_list|,
name|boolean
name|shouldExist
parameter_list|)
block|{
name|File
name|previousDir
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"previous"
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldExist
condition|)
block|{
name|assertTrue
argument_list|(
name|previousDir
operator|+
literal|" does not exist"
argument_list|,
name|previousDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|previousDir
operator|+
literal|" does exist"
argument_list|,
name|previousDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runFinalizeCommand (MiniDFSCluster cluster)
specifier|private
name|void
name|runFinalizeCommand
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
comment|/**    * Ensure that an admin cannot finalize an HA upgrade without at least one NN    * being active.    */
annotation|@
name|Test
DECL|method|testCannotFinalizeIfNoActive ()
specifier|public
name|void
name|testCannotFinalizeIfNoActive
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|File
name|sharedDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart NN0 without the -upgrade flag, to make sure that works.
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure we can still do FS ops after upgrading.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Now restart NN1 and make sure that we can do ops against that as well.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Now there's no active NN.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|runFinalizeCommand
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have been able to finalize upgrade with no NN active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot finalize with no NameNode active"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that an HA NN with NFS-based HA can successfully start and    * upgrade.    */
annotation|@
name|Test
DECL|method|testNfsUpgrade ()
specifier|public
name|void
name|testNfsUpgrade
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|File
name|sharedDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart NN0 without the -upgrade flag, to make sure that works.
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure we can still do FS ops after upgrading.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Now restart NN1 and make sure that we can do ops against that as well.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCommittedTxnIdValue (MiniQJMHACluster qjCluster)
specifier|private
name|long
name|getCommittedTxnIdValue
parameter_list|(
name|MiniQJMHACluster
name|qjCluster
parameter_list|)
throws|throws
name|IOException
block|{
name|Journal
name|journal1
init|=
name|qjCluster
operator|.
name|getJournalCluster
argument_list|()
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrCreateJournal
argument_list|(
name|MiniQJMHACluster
operator|.
name|NAMESERVICE
argument_list|)
decl_stmt|;
name|BestEffortLongFile
name|committedTxnId
init|=
operator|(
name|BestEffortLongFile
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|journal1
argument_list|,
literal|"committedTxnId"
argument_list|)
decl_stmt|;
return|return
name|committedTxnId
operator|!=
literal|null
condition|?
name|committedTxnId
operator|.
name|get
argument_list|()
else|:
name|HdfsConstants
operator|.
name|INVALID_TXID
return|;
block|}
comment|/**    * Make sure that an HA NN can successfully upgrade when configured using    * JournalNodes.    */
annotation|@
name|Test
DECL|method|testUpgradeWithJournalNodes ()
specifier|public
name|void
name|testUpgradeWithJournalNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniQJMHACluster
name|qjCluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjCluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|qjCluster
operator|.
name|getDfsCluster
argument_list|()
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the value of the committedTxnId in journal nodes
specifier|final
name|long
name|cidBeforeUpgrade
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cidBeforeUpgrade
operator|<=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart NN0 without the -upgrade flag, to make sure that works.
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure we can still do FS ops after upgrading.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
operator|>
name|cidBeforeUpgrade
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// Now restart NN1 and make sure that we can do ops against that as well.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qjCluster
operator|!=
literal|null
condition|)
block|{
name|qjCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFinalizeWithJournalNodes ()
specifier|public
name|void
name|testFinalizeWithJournalNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniQJMHACluster
name|qjCluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjCluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|qjCluster
operator|.
name|getDfsCluster
argument_list|()
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|cidBeforeUpgrade
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cidBeforeUpgrade
operator|<=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|long
name|cidDuringUpgrade
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cidDuringUpgrade
operator|>
name|cidBeforeUpgrade
argument_list|)
expr_stmt|;
name|runFinalizeCommand
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cidDuringUpgrade
argument_list|,
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
argument_list|)
expr_stmt|;
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qjCluster
operator|!=
literal|null
condition|)
block|{
name|qjCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that even if the NN which initiated the upgrade is in the standby    * state that we're allowed to finalize.    */
annotation|@
name|Test
DECL|method|testFinalizeFromSecondNameNodeWithJournalNodes ()
specifier|public
name|void
name|testFinalizeFromSecondNameNodeWithJournalNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniQJMHACluster
name|qjCluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjCluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|qjCluster
operator|.
name|getDfsCluster
argument_list|()
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Make the second NN (not the one that initiated the upgrade) active when
comment|// the finalize command is run.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|runFinalizeCommand
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qjCluster
operator|!=
literal|null
condition|)
block|{
name|qjCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that an HA NN will start if a previous upgrade was in progress.    */
annotation|@
name|Test
DECL|method|testStartingWithUpgradeInProgressSucceeds ()
specifier|public
name|void
name|testStartingWithUpgradeInProgressSucceeds
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Simulate an upgrade having started.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|URI
name|uri
range|:
name|cluster
operator|.
name|getNameDirs
argument_list|(
name|i
argument_list|)
control|)
block|{
name|File
name|prevTmp
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|uri
argument_list|)
argument_list|,
name|Storage
operator|.
name|STORAGE_TMP_PREVIOUS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating previous tmp dir: "
operator|+
name|prevTmp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevTmp
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test rollback with NFS shared dir.    */
annotation|@
name|Test
DECL|method|testRollbackWithNfs ()
specifier|public
name|void
name|testRollbackWithNfs
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|File
name|sharedDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Now shut down the cluster and do the rollback.
name|Collection
argument_list|<
name|URI
argument_list|>
name|nn1NameDirs
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|nn1NameDirs
argument_list|)
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|doRollback
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// The rollback operation should have rolled back the first NN's local
comment|// dirs, and the shared dir, but not the other NN's dirs. Those have to be
comment|// done by bootstrapping the standby.
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRollbackWithJournalNodes ()
specifier|public
name|void
name|testRollbackWithJournalNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniQJMHACluster
name|qjCluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjCluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|qjCluster
operator|.
name|getDfsCluster
argument_list|()
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|cidBeforeUpgrade
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|cidDuringUpgrade
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cidDuringUpgrade
operator|>
name|cidBeforeUpgrade
argument_list|)
expr_stmt|;
comment|// Now bootstrap the standby with the upgraded info.
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-force"
block|}
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// Shut down the NNs, but deliberately leave the JNs up and running.
name|Collection
argument_list|<
name|URI
argument_list|>
name|nn1NameDirs
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|nn1NameDirs
argument_list|)
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|doRollback
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|long
name|cidAfterRollback
init|=
name|getCommittedTxnIdValue
argument_list|(
name|qjCluster
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cidBeforeUpgrade
operator|<
name|cidAfterRollback
argument_list|)
expr_stmt|;
comment|// make sure the committedTxnId has been reset correctly after rollback
name|assertTrue
argument_list|(
name|cidDuringUpgrade
operator|>
name|cidAfterRollback
argument_list|)
expr_stmt|;
comment|// The rollback operation should have rolled back the first NN's local
comment|// dirs, and the shared dir, but not the other NN's dirs. Those have to be
comment|// done by bootstrapping the standby.
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkJnPreviousDirExistence
argument_list|(
name|qjCluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qjCluster
operator|!=
literal|null
condition|)
block|{
name|qjCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure that starting a second NN with the -upgrade flag fails if the    * other NN has already done that.    */
annotation|@
name|Test
DECL|method|testCannotUpgradeSecondNameNode ()
specifier|public
name|void
name|testCannotUpgradeSecondNameNode
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|File
name|sharedDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No upgrade is in progress at the moment.
name|checkClusterPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertCTimesEqual
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Transition NN0 to active and do some FS ops.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do the upgrade. Shut down NN1 and then restart NN0 with the upgrade
comment|// flag.
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNnPreviousDirExistence
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkPreviousDirExistence
argument_list|(
name|sharedDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// NN0 should come up in the active state when given the -upgrade option,
comment|// so no need to transition it to active.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart NN0 without the -upgrade flag, to make sure that works.
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure we can still do FS ops after upgrading.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that starting the second NN with the -upgrade flag fails.
name|cluster
operator|.
name|getNameNodeInfos
argument_list|()
index|[
literal|1
index|]
operator|.
name|setStartOpt
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have been able to start second NN with -upgrade"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"It looks like the shared log is already being upgraded"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

