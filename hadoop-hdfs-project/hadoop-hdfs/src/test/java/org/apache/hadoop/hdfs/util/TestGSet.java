begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestGSet
specifier|public
class|class
name|TestGSet
block|{
DECL|field|ran
specifier|private
specifier|static
specifier|final
name|Random
name|ran
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|starttime
specifier|private
specifier|static
specifier|final
name|long
name|starttime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
DECL|method|print (Object s)
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|println (Object s)
specifier|private
specifier|static
name|void
name|println
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionCases ()
specifier|public
name|void
name|testExceptionCases
parameter_list|()
block|{
block|{
comment|//test contains
specifier|final
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gset
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|//test contains with a null element
name|gset
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test get
specifier|final
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gset
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|//test get with a null element
name|gset
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test put
specifier|final
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gset
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
try|try
block|{
comment|//test put with a null element
name|gset
operator|.
name|put
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//test putting an element which is not implementing LinkedElement
name|gset
operator|.
name|put
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test iterator
specifier|final
name|IntElement
index|[]
name|data
init|=
operator|new
name|IntElement
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|new
name|IntElement
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|v
init|=
literal|1
init|;
name|v
operator|<
name|data
operator|.
name|length
operator|-
literal|1
condition|;
name|v
operator|++
control|)
block|{
block|{
comment|//test remove while iterating
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|gset
init|=
name|createGSet
argument_list|(
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|IntElement
name|i
range|:
name|gset
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|v
condition|)
block|{
comment|//okay because data[0] is not in gset
name|gset
operator|.
name|remove
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|//exception because data[1] is in gset
for|for
control|(
name|IntElement
name|i
range|:
name|gset
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|v
condition|)
block|{
name|gset
operator|.
name|remove
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test put new element while iterating
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|gset
init|=
name|createGSet
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|IntElement
name|i
range|:
name|gset
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|v
condition|)
block|{
name|gset
operator|.
name|put
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|//test put existing element while iterating
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|gset
init|=
name|createGSet
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|IntElement
name|i
range|:
name|gset
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
operator|==
name|v
condition|)
block|{
name|gset
operator|.
name|put
argument_list|(
name|data
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD: getting "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|createGSet (final IntElement[] data)
specifier|private
specifier|static
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|createGSet
parameter_list|(
specifier|final
name|IntElement
index|[]
name|data
parameter_list|)
block|{
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|gset
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gset
operator|.
name|put
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|gset
return|;
block|}
annotation|@
name|Test
DECL|method|testGSet ()
specifier|public
name|void
name|testGSet
parameter_list|()
block|{
comment|//The parameters are: table length, data size, modulus.
name|check
argument_list|(
operator|new
name|GSetTestCase
argument_list|(
literal|1
argument_list|,
literal|1
operator|<<
literal|4
argument_list|,
literal|65537
argument_list|)
argument_list|)
expr_stmt|;
name|check
argument_list|(
operator|new
name|GSetTestCase
argument_list|(
literal|17
argument_list|,
literal|1
operator|<<
literal|16
argument_list|,
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|check
argument_list|(
operator|new
name|GSetTestCase
argument_list|(
literal|255
argument_list|,
literal|1
operator|<<
literal|10
argument_list|,
literal|65537
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A long test,    * which may take ~5 hours,    * with various data sets and parameters.    * If you are changing the implementation,    * please un-comment the following line in order to run the test.    */
comment|//@Test
DECL|method|runMultipleTestGSet ()
specifier|public
name|void
name|runMultipleTestGSet
parameter_list|()
block|{
for|for
control|(
name|int
name|offset
init|=
operator|-
literal|2
init|;
name|offset
operator|<=
literal|2
condition|;
name|offset
operator|++
control|)
block|{
name|runTestGSet
argument_list|(
literal|1
argument_list|,
name|offset
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|Integer
operator|.
name|SIZE
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|runTestGSet
argument_list|(
operator|(
literal|1
operator|<<
name|i
operator|)
operator|+
literal|1
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTestGSet (final int modulus, final int offset)
specifier|private
specifier|static
name|void
name|runTestGSet
parameter_list|(
specifier|final
name|int
name|modulus
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
name|println
argument_list|(
literal|"\n\nmodulus="
operator|+
name|modulus
operator|+
literal|", offset="
operator|+
name|offset
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|16
condition|;
name|i
operator|+=
literal|4
control|)
block|{
specifier|final
name|int
name|tablelength
init|=
operator|(
literal|1
operator|<<
name|i
operator|)
operator|+
name|offset
decl_stmt|;
specifier|final
name|int
name|upper
init|=
name|i
operator|+
literal|2
decl_stmt|;
specifier|final
name|int
name|steps
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|upper
operator|/
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|upper
condition|;
name|j
operator|+=
name|steps
control|)
block|{
specifier|final
name|int
name|datasize
init|=
literal|1
operator|<<
name|j
decl_stmt|;
name|check
argument_list|(
operator|new
name|GSetTestCase
argument_list|(
name|tablelength
argument_list|,
name|datasize
argument_list|,
name|modulus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|check (final GSetTestCase test)
specifier|private
specifier|static
name|void
name|check
parameter_list|(
specifier|final
name|GSetTestCase
name|test
parameter_list|)
block|{
comment|//check add
name|print
argument_list|(
literal|"  check add .................. "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove and add
name|print
argument_list|(
literal|"  check remove& add ......... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove
name|print
argument_list|(
literal|"  check remove ............... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|gset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove and add again
name|print
argument_list|(
literal|"  check remove& add again ... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|s
init|=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|starttime
operator|)
operator|/
literal|1000L
decl_stmt|;
name|println
argument_list|(
literal|"total time elapsed="
operator|+
name|s
operator|+
literal|"s\n"
argument_list|)
expr_stmt|;
block|}
comment|/** Test cases */
DECL|class|GSetTestCase
specifier|private
specifier|static
class|class
name|GSetTestCase
implements|implements
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
block|{
DECL|field|expected
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|expected
init|=
operator|new
name|GSetByHashMap
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
argument_list|(
literal|1024
argument_list|,
literal|0.75f
argument_list|)
decl_stmt|;
DECL|field|gset
specifier|final
name|GSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
name|gset
decl_stmt|;
DECL|field|data
specifier|final
name|IntData
name|data
decl_stmt|;
DECL|field|info
specifier|final
name|String
name|info
decl_stmt|;
DECL|field|starttime
specifier|final
name|long
name|starttime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|/** Determine the probability in {@link #check()}. */
DECL|field|denominator
specifier|final
name|int
name|denominator
decl_stmt|;
DECL|field|iterate_count
name|int
name|iterate_count
init|=
literal|0
decl_stmt|;
DECL|field|contain_count
name|int
name|contain_count
init|=
literal|0
decl_stmt|;
DECL|method|GSetTestCase (int tablelength, int datasize, int modulus)
name|GSetTestCase
parameter_list|(
name|int
name|tablelength
parameter_list|,
name|int
name|datasize
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|denominator
operator|=
name|Math
operator|.
name|min
argument_list|(
operator|(
name|datasize
operator|>>
literal|7
operator|)
operator|+
literal|1
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
expr_stmt|;
name|info
operator|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": tablelength="
operator|+
name|tablelength
operator|+
literal|", datasize="
operator|+
name|datasize
operator|+
literal|", modulus="
operator|+
name|modulus
operator|+
literal|", denominator="
operator|+
name|denominator
expr_stmt|;
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|IntData
argument_list|(
name|datasize
argument_list|,
name|modulus
argument_list|)
expr_stmt|;
name|gset
operator|=
operator|new
name|LightWeightGSet
argument_list|<
name|IntElement
argument_list|,
name|IntElement
argument_list|>
argument_list|(
name|tablelength
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|containsTest (IntElement key)
specifier|private
name|boolean
name|containsTest
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|boolean
name|e
init|=
name|expected
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e
argument_list|,
name|gset
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|contains (IntElement key)
specifier|public
name|boolean
name|contains
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|boolean
name|e
init|=
name|containsTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|getTest (IntElement key)
specifier|private
name|IntElement
name|getTest
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|expected
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e
operator|.
name|id
argument_list|,
name|gset
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|get (IntElement key)
specifier|public
name|IntElement
name|get
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|getTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|putTest (IntElement element)
specifier|private
name|IntElement
name|putTest
parameter_list|(
name|IntElement
name|element
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|expected
operator|.
name|put
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|gset
operator|.
name|put
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e
operator|.
name|id
argument_list|,
name|gset
operator|.
name|put
argument_list|(
name|element
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|put (IntElement element)
specifier|public
name|IntElement
name|put
parameter_list|(
name|IntElement
name|element
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|putTest
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|removeTest (IntElement key)
specifier|private
name|IntElement
name|removeTest
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|expected
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|gset
operator|.
name|remove
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e
operator|.
name|id
argument_list|,
name|gset
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remove (IntElement key)
specifier|public
name|IntElement
name|remove
parameter_list|(
name|IntElement
name|key
parameter_list|)
block|{
specifier|final
name|IntElement
name|e
init|=
name|removeTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|sizeTest ()
specifier|private
name|int
name|sizeTest
parameter_list|()
block|{
specifier|final
name|int
name|s
init|=
name|expected
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
argument_list|,
name|gset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
specifier|final
name|int
name|s
init|=
name|sizeTest
argument_list|()
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|IntElement
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
comment|//test size
name|sizeTest
argument_list|()
expr_stmt|;
if|if
condition|(
name|ran
operator|.
name|nextInt
argument_list|(
name|denominator
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//test get(..), check content and test iterator
name|iterate_count
operator|++
expr_stmt|;
for|for
control|(
name|IntElement
name|i
range|:
name|gset
control|)
block|{
name|getTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ran
operator|.
name|nextInt
argument_list|(
name|denominator
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//test contains(..)
name|contain_count
operator|++
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|IntElement
name|i
range|:
name|data
operator|.
name|integers
control|)
block|{
name|containsTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|containsTest
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|ran
operator|.
name|nextInt
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|stat ()
name|String
name|stat
parameter_list|()
block|{
specifier|final
name|long
name|t
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|starttime
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|" iterate=%5d, contain=%5d, time elapsed=%5d.%03ds"
argument_list|,
name|iterate_count
argument_list|,
name|contain_count
argument_list|,
name|t
operator|/
literal|1000
argument_list|,
name|t
operator|%
literal|1000
argument_list|)
return|;
block|}
block|}
comment|/** Test data set */
DECL|class|IntData
specifier|private
specifier|static
class|class
name|IntData
block|{
DECL|field|integers
specifier|final
name|IntElement
index|[]
name|integers
decl_stmt|;
DECL|method|IntData (int size, int modulus)
name|IntData
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|integers
operator|=
operator|new
name|IntElement
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|integers
index|[
name|i
index|]
operator|=
operator|new
name|IntElement
argument_list|(
name|i
argument_list|,
name|ran
operator|.
name|nextInt
argument_list|(
name|modulus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get (int i)
name|IntElement
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|integers
index|[
name|i
index|]
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|integers
operator|.
name|length
return|;
block|}
block|}
comment|/** Elements of {@link LightWeightGSet} in this test */
DECL|class|IntElement
specifier|private
specifier|static
class|class
name|IntElement
implements|implements
name|LightWeightGSet
operator|.
name|LinkedElement
implements|,
name|Comparable
argument_list|<
name|IntElement
argument_list|>
block|{
DECL|field|next
specifier|private
name|LightWeightGSet
operator|.
name|LinkedElement
name|next
decl_stmt|;
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|value
specifier|final
name|int
name|value
decl_stmt|;
DECL|method|IntElement (int id, int value)
name|IntElement
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|IntElement
operator|&&
name|value
operator|==
operator|(
operator|(
name|IntElement
operator|)
name|obj
operator|)
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (IntElement that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|IntElement
name|that
parameter_list|)
block|{
return|return
name|value
operator|-
name|that
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
operator|+
literal|"#"
operator|+
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|LightWeightGSet
operator|.
name|LinkedElement
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|setNext (LightWeightGSet.LinkedElement e)
specifier|public
name|void
name|setNext
parameter_list|(
name|LightWeightGSet
operator|.
name|LinkedElement
name|e
parameter_list|)
block|{
name|next
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|/**     * Test for {@link LightWeightGSet#computeCapacity(double, String)}    * with invalid percent less than 0.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testComputeCapacityNegativePercent ()
specifier|public
name|void
name|testComputeCapacityNegativePercent
parameter_list|()
block|{
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
literal|1024
argument_list|,
operator|-
literal|1.0
argument_list|,
literal|"testMap"
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test for {@link LightWeightGSet#computeCapacity(double, String)}    * with invalid percent greater than 100.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testComputeCapacityInvalidPercent ()
specifier|public
name|void
name|testComputeCapacityInvalidPercent
parameter_list|()
block|{
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
literal|1024
argument_list|,
literal|101.0
argument_list|,
literal|"testMap"
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test for {@link LightWeightGSet#computeCapacity(double, String)}    * with invalid negative max memory    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testComputeCapacityInvalidMemory ()
specifier|public
name|void
name|testComputeCapacityInvalidMemory
parameter_list|()
block|{
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
operator|-
literal|1
argument_list|,
literal|50.0
argument_list|,
literal|"testMap"
argument_list|)
expr_stmt|;
block|}
DECL|method|isPowerOfTwo (int num)
specifier|private
specifier|static
name|boolean
name|isPowerOfTwo
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|num
operator|==
literal|0
operator|||
operator|(
name|num
operator|>
literal|0
operator|&&
name|Integer
operator|.
name|bitCount
argument_list|(
name|num
argument_list|)
operator|==
literal|1
operator|)
return|;
block|}
comment|/** Return capacity as percentage of total memory */
DECL|method|getPercent (long total, int capacity)
specifier|private
specifier|static
name|int
name|getPercent
parameter_list|(
name|long
name|total
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
comment|// Reference size in bytes
name|double
name|referenceSize
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"32"
argument_list|)
condition|?
literal|4.0
else|:
literal|8.0
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|capacity
operator|*
name|referenceSize
operator|)
operator|/
name|total
operator|)
operator|*
literal|100.0
argument_list|)
return|;
block|}
comment|/** Return capacity as percentage of total memory */
DECL|method|testCapacity (long maxMemory, double percent)
specifier|private
specifier|static
name|void
name|testCapacity
parameter_list|(
name|long
name|maxMemory
parameter_list|,
name|double
name|percent
parameter_list|)
block|{
name|int
name|capacity
init|=
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
name|maxMemory
argument_list|,
name|percent
argument_list|,
literal|"map"
argument_list|)
decl_stmt|;
name|LightWeightGSet
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating - total memory "
operator|+
name|maxMemory
operator|+
literal|" percent "
operator|+
name|percent
operator|+
literal|" returned capacity "
operator|+
name|capacity
argument_list|)
expr_stmt|;
comment|// Returned capacity is zero or power of two
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isPowerOfTwo
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure the capacity returned is the nearest to the asked perecentage
name|int
name|capacityPercent
init|=
name|getPercent
argument_list|(
name|maxMemory
argument_list|,
name|capacity
argument_list|)
decl_stmt|;
if|if
condition|(
name|capacityPercent
operator|==
name|percent
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|capacityPercent
operator|>
name|percent
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|getPercent
argument_list|(
name|maxMemory
argument_list|,
name|capacity
operator|*
literal|2
argument_list|)
operator|>
name|percent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|getPercent
argument_list|(
name|maxMemory
argument_list|,
name|capacity
operator|/
literal|2
argument_list|)
operator|<
name|percent
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Test for {@link LightWeightGSet#computeCapacity(double, String)}    */
annotation|@
name|Test
DECL|method|testComputeCapacity ()
specifier|public
name|void
name|testComputeCapacity
parameter_list|()
block|{
comment|// Tests for boundary conditions where percent or memory are zero
name|testCapacity
argument_list|(
literal|0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|testCapacity
argument_list|(
literal|100
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|testCapacity
argument_list|(
literal|0
argument_list|,
literal|100.0
argument_list|)
expr_stmt|;
comment|// Compute capacity for some 100 random max memory and percentage
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|long
name|maxMemory
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|double
name|percent
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|testCapacity
argument_list|(
name|maxMemory
argument_list|,
name|percent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

