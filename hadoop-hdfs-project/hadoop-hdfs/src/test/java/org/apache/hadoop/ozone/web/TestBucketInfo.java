begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestBucketInfo
specifier|public
class|class
name|TestBucketInfo
block|{
annotation|@
name|Test
DECL|method|TestBucketInfoJson ()
specifier|public
name|void
name|TestBucketInfoJson
parameter_list|()
throws|throws
name|IOException
block|{
name|BucketInfo
name|bucketInfo
init|=
operator|new
name|BucketInfo
argument_list|(
literal|"volumeName"
argument_list|,
literal|"bucketName"
argument_list|)
decl_stmt|;
name|String
name|bucketInfoString
init|=
name|bucketInfo
operator|.
name|toJsonString
argument_list|()
decl_stmt|;
name|BucketInfo
name|newBucketInfo
init|=
name|BucketInfo
operator|.
name|parse
argument_list|(
name|bucketInfoString
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|bucketInfo
operator|.
name|equals
argument_list|(
name|newBucketInfo
argument_list|)
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|TestBucketInfoDBString ()
specifier|public
name|void
name|TestBucketInfoDBString
parameter_list|()
throws|throws
name|IOException
block|{
name|BucketInfo
name|bucketInfo
init|=
operator|new
name|BucketInfo
argument_list|(
literal|"volumeName"
argument_list|,
literal|"bucketName"
argument_list|)
decl_stmt|;
name|String
name|bucketInfoString
init|=
name|bucketInfo
operator|.
name|toDBString
argument_list|()
decl_stmt|;
name|BucketInfo
name|newBucketInfo
init|=
name|BucketInfo
operator|.
name|parse
argument_list|(
name|bucketInfoString
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|bucketInfo
operator|.
name|equals
argument_list|(
name|newBucketInfo
argument_list|)
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|TestBucketInfoAddAcls ()
specifier|public
name|void
name|TestBucketInfoAddAcls
parameter_list|()
throws|throws
name|IOException
block|{
name|BucketInfo
name|bucketInfo
init|=
operator|new
name|BucketInfo
argument_list|(
literal|"volumeName"
argument_list|,
literal|"bucketName"
argument_list|)
decl_stmt|;
name|String
name|bucketInfoString
init|=
name|bucketInfo
operator|.
name|toDBString
argument_list|()
decl_stmt|;
name|BucketInfo
name|newBucketInfo
init|=
name|BucketInfo
operator|.
name|parse
argument_list|(
name|bucketInfoString
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|bucketInfo
operator|.
name|equals
argument_list|(
name|newBucketInfo
argument_list|)
operator|)
assert|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|aclList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|aclList
operator|.
name|add
argument_list|(
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:r"
argument_list|)
argument_list|)
expr_stmt|;
name|aclList
operator|.
name|add
argument_list|(
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:samwise:rw"
argument_list|)
argument_list|)
expr_stmt|;
name|newBucketInfo
operator|.
name|setAcls
argument_list|(
name|aclList
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|newBucketInfo
operator|.
name|getAcls
argument_list|()
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|newBucketInfo
operator|.
name|getAcls
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|TestBucketInfoVersionAndType ()
specifier|public
name|void
name|TestBucketInfoVersionAndType
parameter_list|()
throws|throws
name|IOException
block|{
name|BucketInfo
name|bucketInfo
init|=
operator|new
name|BucketInfo
argument_list|(
literal|"volumeName"
argument_list|,
literal|"bucketName"
argument_list|)
decl_stmt|;
name|bucketInfo
operator|.
name|setVersioning
argument_list|(
name|OzoneConsts
operator|.
name|Versioning
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|bucketInfo
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|String
name|bucketInfoString
init|=
name|bucketInfo
operator|.
name|toDBString
argument_list|()
decl_stmt|;
name|BucketInfo
name|newBucketInfo
init|=
name|BucketInfo
operator|.
name|parse
argument_list|(
name|bucketInfoString
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|bucketInfo
operator|.
name|equals
argument_list|(
name|newBucketInfo
argument_list|)
operator|)
assert|;
block|}
block|}
end_class

end_unit

