begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|AsyncLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|JID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|FAKE_NSINFO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|writeSegment
import|;
end_import

begin_class
DECL|class|TestQJMWithFaults
specifier|public
class|class
name|TestQJMWithFaults
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQJMWithFaults
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Don't retry connections - it just slows down the tests.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|field|MAX_IPC_NUMBER
specifier|private
specifier|static
name|long
name|MAX_IPC_NUMBER
decl_stmt|;
comment|/**    * Run through the creation of a log without any faults injected,    * and count how many RPCs are made to each node. This sets the    * bounds for the other test cases, so they can exhaustively explore    * the space of potential failures.    */
annotation|@
name|BeforeClass
DECL|method|determineMaxIpcNumber ()
specifier|public
specifier|static
name|void
name|determineMaxIpcNumber
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniJournalCluster
name|cluster
init|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|QuorumJournalManager
name|qjm
init|=
name|createInjectableQJM
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|qjm
operator|.
name|format
argument_list|(
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|doWorkload
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|ipcCounts
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|AsyncLogger
name|l
range|:
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
control|)
block|{
name|InvocationCountingChannel
name|ch
init|=
operator|(
name|InvocationCountingChannel
operator|)
name|l
decl_stmt|;
name|ch
operator|.
name|waitForAllPendingCalls
argument_list|()
expr_stmt|;
name|ipcCounts
operator|.
name|add
argument_list|(
name|ch
operator|.
name|getRpcCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All of the loggers should have sent the same number of RPCs, since there
comment|// were no failures.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ipcCounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MAX_IPC_NUMBER
operator|=
name|ipcCounts
operator|.
name|first
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max IPC count = "
operator|+
name|MAX_IPC_NUMBER
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sets up two of the nodes to each drop a single RPC, at all    * possible combinations of RPCs. This may result in the    * active writer failing to write. After this point, a new writer    * should be able to recover and continue writing without    * data loss.    */
annotation|@
name|Test
DECL|method|testRecoverAfterDoubleFailures ()
specifier|public
name|void
name|testRecoverAfterDoubleFailures
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|failA
init|=
literal|1
init|;
name|failA
operator|<=
name|MAX_IPC_NUMBER
condition|;
name|failA
operator|++
control|)
block|{
for|for
control|(
name|int
name|failB
init|=
literal|1
init|;
name|failB
operator|<=
name|MAX_IPC_NUMBER
condition|;
name|failB
operator|++
control|)
block|{
name|String
name|injectionStr
init|=
literal|"("
operator|+
name|failA
operator|+
literal|", "
operator|+
name|failB
operator|+
literal|")"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n-------------------------------------------\n"
operator|+
literal|"Beginning test, failing at "
operator|+
name|injectionStr
operator|+
literal|"\n"
operator|+
literal|"-------------------------------------------\n\n"
argument_list|)
expr_stmt|;
name|MiniJournalCluster
name|cluster
init|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|QuorumJournalManager
name|qjm
decl_stmt|;
name|qjm
operator|=
name|createInjectableQJM
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|format
argument_list|(
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|loggers
init|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
decl_stmt|;
name|failIpcNumber
argument_list|(
name|loggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|failA
argument_list|)
expr_stmt|;
name|failIpcNumber
argument_list|(
name|loggers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|failB
argument_list|)
expr_stmt|;
name|int
name|lastAckedTxn
init|=
name|doWorkload
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastAckedTxn
operator|<
literal|6
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed after injecting failures at "
operator|+
name|injectionStr
operator|+
literal|". This is expected since we injected a failure in the "
operator|+
literal|"majority."
argument_list|)
expr_stmt|;
block|}
comment|// Now should be able to recover
try|try
block|{
name|qjm
operator|=
name|createInjectableQJM
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
name|lastAckedTxn
operator|+
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: verify log segments
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Test failure! Rethrow with the test setup info so it can be
comment|// easily triaged.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test failed with injection: "
operator|+
name|injectionStr
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Run a simple workload of becoming the active writer and writing    * two log segments: 1-3 and 4-6.    */
DECL|method|doWorkload (MiniJournalCluster cluster, QuorumJournalManager qjm)
specifier|private
specifier|static
name|int
name|doWorkload
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|QuorumJournalManager
name|qjm
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|lastAcked
init|=
literal|0
decl_stmt|;
try|try
block|{
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lastAcked
operator|=
literal|3
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lastAcked
operator|=
literal|6
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to write at txid "
operator|+
name|lastAcked
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
return|return
name|lastAcked
return|;
block|}
comment|/**    * Inject a failure at the given IPC number, such that the JN never    * receives the RPC. The client side sees an IOException. Future    * IPCs after this number will be received as usual.    */
DECL|method|failIpcNumber (AsyncLogger logger, int idx)
specifier|private
name|void
name|failIpcNumber
parameter_list|(
name|AsyncLogger
name|logger
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
operator|(
operator|(
name|InvocationCountingChannel
operator|)
name|logger
operator|)
operator|.
name|failIpcNumber
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
DECL|class|InvocationCountingChannel
specifier|private
specifier|static
class|class
name|InvocationCountingChannel
extends|extends
name|IPCLoggerChannel
block|{
DECL|field|rpcCount
specifier|private
name|int
name|rpcCount
init|=
literal|0
decl_stmt|;
DECL|field|injections
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|injections
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|InvocationCountingChannel (Configuration conf, NamespaceInfo nsInfo, String journalId, InetSocketAddress addr)
specifier|public
name|InvocationCountingChannel
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|journalId
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
DECL|method|getRpcCount ()
name|int
name|getRpcCount
parameter_list|()
block|{
return|return
name|rpcCount
return|;
block|}
DECL|method|failIpcNumber (final int idx)
name|void
name|failIpcNumber
parameter_list|(
specifier|final
name|int
name|idx
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|idx
operator|>
literal|0
argument_list|,
literal|"id must be positive"
argument_list|)
expr_stmt|;
name|inject
argument_list|(
name|idx
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"injected failed IPC at "
operator|+
name|idx
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|inject (int beforeRpcNumber, Callable<Void> injectedCode)
specifier|private
name|void
name|inject
parameter_list|(
name|int
name|beforeRpcNumber
parameter_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
name|injectedCode
parameter_list|)
block|{
name|injections
operator|.
name|put
argument_list|(
name|beforeRpcNumber
argument_list|,
name|injectedCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProxy ()
specifier|protected
name|QJournalProtocol
name|createProxy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|QJournalProtocol
name|realProxy
init|=
name|super
operator|.
name|createProxy
argument_list|()
decl_stmt|;
name|QJournalProtocol
name|mock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|QJournalProtocol
operator|.
name|class
argument_list|,
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|rpcCount
operator|++
expr_stmt|;
name|String
name|callStr
init|=
literal|"["
operator|+
name|addr
operator|+
literal|"] "
operator|+
name|invocation
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
argument_list|)
operator|+
literal|")"
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|inject
init|=
name|injections
operator|.
name|get
argument_list|(
name|rpcCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|inject
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Injecting code before IPC #"
operator|+
name|rpcCount
operator|+
literal|": "
operator|+
name|callStr
argument_list|)
expr_stmt|;
name|inject
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"IPC call #"
operator|+
name|rpcCount
operator|+
literal|": "
operator|+
name|callStr
argument_list|)
expr_stmt|;
block|}
return|return
name|invocation
operator|.
name|getMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|realProxy
argument_list|,
name|invocation
operator|.
name|getArguments
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|mock
return|;
block|}
block|}
DECL|method|createInjectableQJM (MiniJournalCluster cluster)
specifier|private
specifier|static
name|QuorumJournalManager
name|createInjectableQJM
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|AsyncLogger
operator|.
name|Factory
name|spyFactory
init|=
operator|new
name|AsyncLogger
operator|.
name|Factory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncLogger
name|createLogger
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
operator|new
name|InvocationCountingChannel
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|journalId
argument_list|,
name|addr
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|,
name|spyFactory
argument_list|)
return|;
block|}
block|}
end_class

end_unit

