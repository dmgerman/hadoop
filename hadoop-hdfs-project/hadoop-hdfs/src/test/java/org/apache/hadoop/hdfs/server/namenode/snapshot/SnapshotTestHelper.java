begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_comment
comment|/**  * Helper for writing snapshot related tests  */
end_comment

begin_class
DECL|class|SnapshotTestHelper
specifier|public
class|class
name|SnapshotTestHelper
block|{
DECL|method|SnapshotTestHelper ()
specifier|private
name|SnapshotTestHelper
parameter_list|()
block|{
comment|// Cannot be instantinatied
block|}
DECL|method|getSnapshotRoot (Path snapshottedDir, String snapshotName)
specifier|public
specifier|static
name|Path
name|getSnapshotRoot
parameter_list|(
name|Path
name|snapshottedDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|snapshottedDir
argument_list|,
literal|".snapshot/"
operator|+
name|snapshotName
argument_list|)
return|;
block|}
DECL|method|getSnapshotPath (Path snapshottedDir, String snapshotName, String fileLocalName)
specifier|public
specifier|static
name|Path
name|getSnapshotPath
parameter_list|(
name|Path
name|snapshottedDir
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
name|fileLocalName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getSnapshotRoot
argument_list|(
name|snapshottedDir
argument_list|,
name|snapshotName
argument_list|)
argument_list|,
name|fileLocalName
argument_list|)
return|;
block|}
comment|/**    * Create snapshot for a dir using a given snapshot name    *     * @param hdfs DistributedFileSystem instance    * @param snapshottedDir The dir to be snapshotted    * @param snapshotName The name of the snapshot    * @return The path of the snapshot root    */
DECL|method|createSnapshot (DistributedFileSystem hdfs, Path snapshottedDir, String snapshotName)
specifier|public
specifier|static
name|Path
name|createSnapshot
parameter_list|(
name|DistributedFileSystem
name|hdfs
parameter_list|,
name|Path
name|snapshottedDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|hdfs
operator|.
name|exists
argument_list|(
name|snapshottedDir
argument_list|)
assert|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|snapshottedDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|snapshottedDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SnapshotTestHelper
operator|.
name|getSnapshotRoot
argument_list|(
name|snapshottedDir
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
comment|/**    * Check the functionality of a snapshot.    *     * @param hdfs DistributedFileSystem instance    * @param snapshotRoot The root of the snapshot    * @param snapshottedDir The snapshotted directory    */
DECL|method|checkSnapshotCreation (DistributedFileSystem hdfs, Path snapshotRoot, Path snapshottedDir)
specifier|public
specifier|static
name|void
name|checkSnapshotCreation
parameter_list|(
name|DistributedFileSystem
name|hdfs
parameter_list|,
name|Path
name|snapshotRoot
parameter_list|,
name|Path
name|snapshottedDir
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Currently we only check if the snapshot was created successfully
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|snapshotRoot
argument_list|)
argument_list|)
expr_stmt|;
comment|// Compare the snapshot with the current dir
name|FileStatus
index|[]
name|currentFiles
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshottedDir
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapshotFiles
init|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotRoot
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|currentFiles
operator|.
name|length
argument_list|,
name|snapshotFiles
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

