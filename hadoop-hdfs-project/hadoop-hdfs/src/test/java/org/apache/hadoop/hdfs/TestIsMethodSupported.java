begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientDatanodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|InterDatanodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|RefreshAuthorizationPolicyProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshAuthorizationPolicyProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|RefreshCallQueueProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshCallQueueProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|GetUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test cases to verify that client side translators correctly implement the  * isMethodSupported method in ProtocolMetaInterface.  */
end_comment

begin_class
DECL|class|TestIsMethodSupported
specifier|public
class|class
name|TestIsMethodSupported
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|nnAddress
specifier|private
specifier|static
name|InetSocketAddress
name|nnAddress
init|=
literal|null
decl_stmt|;
DECL|field|dnAddress
specifier|private
specifier|static
name|InetSocketAddress
name|dnAddress
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|(
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|nnAddress
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNameNodeAddress
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dnAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNamenodeProtocol ()
specifier|public
name|void
name|testNamenodeProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|NamenodeProtocolTranslatorPB
name|translator
init|=
operator|(
name|NamenodeProtocolTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|boolean
name|exists
init|=
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"rollEditLog"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|exists
operator|=
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"bogusMethod"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatanodeProtocol ()
specifier|public
name|void
name|testDatanodeProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|DatanodeProtocolClientSideTranslatorPB
name|translator
init|=
operator|new
name|DatanodeProtocolClientSideTranslatorPB
argument_list|(
name|nnAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"sendHeartbeat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientDatanodeProtocol ()
specifier|public
name|void
name|testClientDatanodeProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|ClientDatanodeProtocolTranslatorPB
name|translator
init|=
operator|new
name|ClientDatanodeProtocolTranslatorPB
argument_list|(
name|nnAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
comment|//Namenode doesn't implement ClientDatanodeProtocol
name|assertFalse
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"refreshNamenodes"
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
operator|new
name|ClientDatanodeProtocolTranslatorPB
argument_list|(
name|dnAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"refreshNamenodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientNamenodeProtocol ()
specifier|public
name|void
name|testClientNamenodeProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|ClientNamenodeProtocolTranslatorPB
name|translator
init|=
operator|(
name|ClientNamenodeProtocolTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"mkdirs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tesJournalProtocol ()
specifier|public
name|void
name|tesJournalProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|JournalProtocolTranslatorPB
name|translator
init|=
operator|(
name|JournalProtocolTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|JournalProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|//Nameode doesn't implement JournalProtocol
name|assertFalse
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"startLogSegment"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterDatanodeProtocol ()
specifier|public
name|void
name|testInterDatanodeProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|InterDatanodeProtocolTranslatorPB
name|translator
init|=
operator|new
name|InterDatanodeProtocolTranslatorPB
argument_list|(
name|nnAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//Not supported at namenode
name|assertFalse
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"initReplicaRecovery"
argument_list|)
argument_list|)
expr_stmt|;
name|translator
operator|=
operator|new
name|InterDatanodeProtocolTranslatorPB
argument_list|(
name|dnAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"initReplicaRecovery"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetUserMappingsProtocol ()
specifier|public
name|void
name|testGetUserMappingsProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|GetUserMappingsProtocolClientSideTranslatorPB
name|translator
init|=
operator|(
name|GetUserMappingsProtocolClientSideTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|GetUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"getGroupsForUser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshAuthorizationPolicyProtocol ()
specifier|public
name|void
name|testRefreshAuthorizationPolicyProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|RefreshAuthorizationPolicyProtocolClientSideTranslatorPB
name|translator
init|=
operator|(
name|RefreshAuthorizationPolicyProtocolClientSideTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"refreshServiceAcl"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshUserMappingsProtocol ()
specifier|public
name|void
name|testRefreshUserMappingsProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|RefreshUserMappingsProtocolClientSideTranslatorPB
name|translator
init|=
operator|(
name|RefreshUserMappingsProtocolClientSideTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"refreshUserToGroupsMappings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshCallQueueProtocol ()
specifier|public
name|void
name|testRefreshCallQueueProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|RefreshCallQueueProtocolClientSideTranslatorPB
name|translator
init|=
operator|(
name|RefreshCallQueueProtocolClientSideTranslatorPB
operator|)
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddress
argument_list|,
name|RefreshCallQueueProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|isMethodSupported
argument_list|(
literal|"refreshCallQueue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

