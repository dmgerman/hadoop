begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HdfsBlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCacheReplicationManager
specifier|public
class|class
name|TestCacheReplicationManager
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPL_FACTOR
init|=
literal|3
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
comment|// Most Linux installs allow a default of 64KB locked memory
DECL|field|CACHE_CAPACITY
specifier|private
specifier|static
specifier|final
name|long
name|CACHE_CAPACITY
init|=
literal|64
operator|*
literal|1024
operator|/
name|NUM_DATANODES
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|nn
specifier|private
specifier|static
name|NameNode
name|nn
decl_stmt|;
DECL|field|nnRpc
specifier|private
specifier|static
name|NamenodeProtocols
name|nnRpc
decl_stmt|;
DECL|field|cacheReplManager
specifier|private
specifier|static
name|CacheReplicationManager
name|cacheReplManager
decl_stmt|;
DECL|field|helper
specifier|final
specifier|private
specifier|static
name|FileSystemTestHelper
name|helper
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
decl_stmt|;
DECL|field|rootDir
specifier|private
specifier|static
name|Path
name|rootDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|CACHE_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|nnRpc
operator|=
name|nn
operator|.
name|getRpcServer
argument_list|()
expr_stmt|;
name|cacheReplManager
operator|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCacheReplicationManager
argument_list|()
expr_stmt|;
name|rootDir
operator|=
name|helper
operator|.
name|getDefaultWorkingDirectory
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|countNumCachedBlocks ()
specifier|private
name|int
name|countNumCachedBlocks
parameter_list|()
block|{
return|return
name|cacheReplManager
operator|.
name|cachedBlocksMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|waitForExpectedNumCachedBlocks (final int expected)
specifier|private
name|void
name|waitForExpectedNumCachedBlocks
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actual
init|=
name|countNumCachedBlocks
argument_list|()
decl_stmt|;
while|while
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|actual
operator|=
name|countNumCachedBlocks
argument_list|()
expr_stmt|;
block|}
name|waitForExpectedNumCachedReplicas
argument_list|(
name|expected
operator|*
name|REPL_FACTOR
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForExpectedNumCachedReplicas (final int expected)
specifier|private
name|void
name|waitForExpectedNumCachedReplicas
parameter_list|(
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|BlocksMap
name|cachedBlocksMap
init|=
name|cacheReplManager
operator|.
name|cachedBlocksMap
decl_stmt|;
name|int
name|actual
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|expected
operator|!=
name|actual
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|actual
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|BlockInfo
name|b
range|:
name|cachedBlocksMap
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|actual
operator|+=
name|cachedBlocksMap
operator|.
name|numNodes
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCachePaths ()
specifier|public
name|void
name|testCachePaths
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
name|nnRpc
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"friendlyPool"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|int
name|numFiles
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"testCachePaths-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the initial statistics at the namenode
name|int
name|expected
init|=
literal|0
decl_stmt|;
name|waitForExpectedNumCachedBlocks
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// Cache and check each path in sequence
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|PathBasedCacheDirective
name|directive
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDescriptor
name|descriptor
init|=
name|nnRpc
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Descriptor does not match requested path"
argument_list|,
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|descriptor
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Descriptor does not match requested pool"
argument_list|,
name|pool
argument_list|,
name|descriptor
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|+=
name|numBlocksPerFile
expr_stmt|;
name|waitForExpectedNumCachedBlocks
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|HdfsBlockLocation
index|[]
name|locations
init|=
operator|(
name|HdfsBlockLocation
index|[]
operator|)
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|numBlocksPerFile
operator|*
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of locations"
argument_list|,
name|numBlocksPerFile
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|HdfsBlockLocation
name|loc
range|:
name|locations
control|)
block|{
name|assertEquals
argument_list|(
literal|"Block should be present on all datanodes"
argument_list|,
literal|3
argument_list|,
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|cachedLocs
init|=
name|loc
operator|.
name|getLocatedBlock
argument_list|()
operator|.
name|getCachedLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Block should be cached on all datanodes"
argument_list|,
name|loc
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|,
name|cachedLocs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Uncache and check each path in sequence
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|entries
init|=
name|nnRpc
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|PathBasedCacheDescriptor
name|descriptor
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|nnRpc
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|descriptor
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|-=
name|numBlocksPerFile
expr_stmt|;
name|waitForExpectedNumCachedBlocks
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCacheManagerRestart ()
specifier|public
name|void
name|testCacheManagerRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create and validate a pool
specifier|final
name|String
name|pool
init|=
literal|"poolparty"
decl_stmt|;
name|String
name|groupName
init|=
literal|"partygroup"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
literal|747
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolInfo
argument_list|>
name|pit
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|info
init|=
name|pit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|weight
argument_list|,
operator|(
name|int
operator|)
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some cache entries
name|int
name|numEntries
init|=
literal|10
decl_stmt|;
name|String
name|entryPrefix
init|=
literal|"/party-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|dfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|dit
init|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache descriptors found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart namenode
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// Check that state came back up
name|pit
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|pit
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|weight
argument_list|,
operator|(
name|int
operator|)
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|dit
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache descriptors found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

