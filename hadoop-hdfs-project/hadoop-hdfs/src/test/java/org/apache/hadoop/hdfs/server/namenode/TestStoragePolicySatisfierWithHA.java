begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests that StoragePolicySatisfier is able to work with HA enabled.  */
end_comment

begin_class
DECL|class|TestStoragePolicySatisfierWithHA
specifier|public
class|class
name|TestStoragePolicySatisfierWithHA
block|{
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStoragePolicySatisfierWithHA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Configuration
name|config
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|allDiskTypes
specifier|private
name|StorageType
index|[]
index|[]
name|allDiskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
DECL|field|numOfDatanodes
specifier|private
name|int
name|numOfDatanodes
init|=
literal|3
decl_stmt|;
DECL|field|storagesPerDatanode
specifier|private
name|int
name|storagesPerDatanode
init|=
literal|2
decl_stmt|;
DECL|field|capacity
specifier|private
name|long
name|capacity
init|=
literal|2
operator|*
literal|256
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|nnIndex
specifier|private
name|int
name|nnIndex
init|=
literal|0
decl_stmt|;
DECL|method|createCluster ()
specifier|private
name|void
name|createCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|config
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|config
argument_list|,
name|allDiskTypes
argument_list|,
name|numOfDatanodes
argument_list|,
name|storagesPerDatanode
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (final Configuration conf, StorageType[][] storageTypes, int numberOfDatanodes, int storagesPerDn, long nodeCapacity)
specifier|private
name|void
name|startCluster
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypes
parameter_list|,
name|int
name|numberOfDatanodes
parameter_list|,
name|int
name|storagesPerDn
parameter_list|,
name|long
name|nodeCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numberOfDatanodes
index|]
index|[
name|storagesPerDn
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDn
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nodeCapacity
expr_stmt|;
block|}
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numberOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDn
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests to verify that SPS should run/stop automatically when NN state    * changes between Standby and Active.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testWhenNNHAStateChanges ()
specifier|public
name|void
name|testWhenNNHAStateChanges
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|boolean
name|running
decl_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|isStoragePolicySatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Call this function to Standby NN should "
operator|+
literal|"raise an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|IOException
name|cause
init|=
name|e
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cause
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception happened "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|running
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|isStoragePolicySatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"StoragePolicySatisfier should be active "
operator|+
literal|"when NN transits from Standby to Active mode."
argument_list|,
name|running
argument_list|)
expr_stmt|;
comment|// NN transits from Active to Standby
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|isStoragePolicySatisfierRunning
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"NN in Standby again, call this function should "
operator|+
literal|"raise an exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|IOException
name|cause
init|=
name|e
operator|.
name|unwrapRemoteException
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cause
operator|instanceof
name|StandbyException
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception happened "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"It's not allowed to enable or disable"
operator|+
literal|" StoragePolicySatisfier on Standby NameNode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Could not change property "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_ENABLED_KEY
operator|+
literal|" from 'true' to 'false'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Enabling or disabling storage policy satisfier service on "
operator|+
literal|"standby NameNode is not allowed"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that during namenode switch over will add    * DNA_DROP_SPS_WORK_COMMAND to all the datanodes. Later, this will ensure to    * drop all the SPS queues at datanode.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testNamenodeSwitchoverShouldDropSPSWork ()
specifier|public
name|void
name|testNamenodeSwitchoverShouldDropSPSWork
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createCluster
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|listOfDns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|DatanodeDescriptor
name|dnd
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|fsn
argument_list|,
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|listOfDns
operator|.
name|add
argument_list|(
name|dnd
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"**Transition to Active**"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that Standby-to-Active transition should set drop SPS flag to
comment|// true. This will ensure that DNA_DROP_SPS_WORK_COMMAND will be
comment|// propagated to datanode during heartbeat response.
name|int
name|retries
init|=
literal|20
decl_stmt|;
name|boolean
name|dropSPSWork
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DatanodeDescriptor
name|dnd
range|:
name|listOfDns
control|)
block|{
name|dropSPSWork
operator|=
name|dnd
operator|.
name|shouldDropSPSWork
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dropSPSWork
condition|)
block|{
name|retries
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|dropSPSWork
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't drop SPS work"
argument_list|,
name|dropSPSWork
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that SPS work will be dropped once the datanode is marked as    * expired. Internally 'dropSPSWork' flag is set as true while expiration and    * at the time of reconnection, will send DNA_DROP_SPS_WORK_COMMAND to that    * datanode.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testDeadDatanode ()
specifier|public
name|void
name|testDeadDatanode
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|heartbeatExpireInterval
init|=
literal|2
operator|*
literal|2000
decl_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|createCluster
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnd
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|fsn
argument_list|,
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isDead
init|=
literal|false
decl_stmt|;
name|int
name|retries
init|=
literal|20
decl_stmt|;
while|while
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
name|isDead
operator|=
name|dnd
operator|.
name|getLastUpdateMonotonic
argument_list|()
operator|<
operator|(
name|monotonicNow
argument_list|()
operator|-
name|heartbeatExpireInterval
operator|)
expr_stmt|;
if|if
condition|(
name|isDead
condition|)
block|{
break|break;
block|}
name|retries
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Datanode is alive"
argument_list|,
name|isDead
argument_list|)
expr_stmt|;
comment|// Disable datanode heartbeat, so that the datanode will get expired after
comment|// the recheck interval and become dead.
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Verify that datanode expiration will set drop SPS flag to
comment|// true. This will ensure that DNA_DROP_SPS_WORK_COMMAND will be
comment|// propagated to datanode during reconnection.
name|boolean
name|dropSPSWork
init|=
literal|false
decl_stmt|;
name|retries
operator|=
literal|50
expr_stmt|;
while|while
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
name|dropSPSWork
operator|=
name|dnd
operator|.
name|shouldDropSPSWork
argument_list|()
expr_stmt|;
if|if
condition|(
name|dropSPSWork
condition|)
block|{
break|break;
block|}
name|retries
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't drop SPS work"
argument_list|,
name|dropSPSWork
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

