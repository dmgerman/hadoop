begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRatesWithAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_FSLOCK_FAIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_comment
comment|/**  * Tests the FSNamesystemLock, looking at lock compatibilities and  * proper logging of lock hold times.  */
end_comment

begin_class
DECL|class|TestFSNamesystemLock
specifier|public
class|class
name|TestFSNamesystemLock
block|{
annotation|@
name|Test
DECL|method|testFsLockFairness ()
specifier|public
name|void
name|testFsLockFairness
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_FSLOCK_FAIR_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSNamesystemLock
name|fsnLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsnLock
operator|.
name|coarseLock
operator|.
name|isFair
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_FSLOCK_FAIR_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsnLock
operator|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fsnLock
operator|.
name|coarseLock
operator|.
name|isFair
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFSNamesystemLockCompatibility ()
specifier|public
name|void
name|testFSNamesystemLockCompatibility
parameter_list|()
block|{
name|FSNamesystemLock
name|rwLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rwLock
operator|.
name|getReadHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rwLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rwLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rwLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rwLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
argument_list|)
expr_stmt|;
name|rwLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|rwLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rwLock
operator|.
name|getWriteHoldCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFSLockGetWaiterCount ()
specifier|public
name|void
name|testFSLockGetWaiterCount
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|threadCount
init|=
literal|3
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_FSLOCK_FAIR_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|FSNamesystemLock
name|rwLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rwLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|ExecutorService
name|helper
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|threadCount
condition|;
name|x
operator|++
control|)
block|{
name|helper
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|rwLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|(
name|threadCount
operator|==
name|rwLock
operator|.
name|getQueueLength
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected number of blocked thread not found"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test when FSNamesystem write lock is held for a long time,    * logger will report it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|45000
argument_list|)
DECL|method|testFSWriteLockLongHoldingReport ()
specifier|public
name|void
name|testFSWriteLockLongHoldingReport
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|writeLockReportingThreshold
init|=
literal|100L
decl_stmt|;
specifier|final
name|long
name|writeLockSuppressWarningInterval
init|=
literal|10000L
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|writeLockReportingThreshold
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
argument_list|,
name|writeLockSuppressWarningInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|FSNamesystemLock
name|fsnLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockSuppressWarningInterval
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
comment|// Don't report if the write lock is held for a short time
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Report if the write lock is held for a long time
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|+
literal|10
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Track but do not report if the write lock is held (interruptibly) for
comment|// a long time but time since last report does not exceed the suppress
comment|// warning interval
name|fsnLock
operator|.
name|writeLockInterruptibly
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|+
literal|10
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Track but do not report if it's held for a long time when re-entering
comment|// write lock but time since last report does not exceed the suppress
comment|// warning interval
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|writeLockInterruptibly
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|/
literal|2
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Report if it's held for a long time and time since last report exceeds
comment|// the supress warning interval
name|timer
operator|.
name|advance
argument_list|(
name|writeLockSuppressWarningInterval
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|+
literal|100
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Number of suppressed write-lock reports: 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when FSNamesystem read lock is held for a long time,    * logger will report it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|45000
argument_list|)
DECL|method|testFSReadLockLongHoldingReport ()
specifier|public
name|void
name|testFSReadLockLongHoldingReport
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|readLockReportingThreshold
init|=
literal|100L
decl_stmt|;
specifier|final
name|long
name|readLockSuppressWarningInterval
init|=
literal|10000L
decl_stmt|;
specifier|final
name|String
name|readLockLogStmt
init|=
literal|"FSNamesystem read lock held for "
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|readLockReportingThreshold
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
argument_list|,
name|readLockSuppressWarningInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|FSNamesystemLock
name|fsnLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockSuppressWarningInterval
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
comment|// Don't report if the read lock is held for a short time
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|readLockLogStmt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Report the first read lock warning if it is held for a long time
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockReportingThreshold
operator|+
literal|10
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|readLockLogStmt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Track but do not Report if the write lock is held for a long time but
comment|// time since last report does not exceed the suppress warning interval
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockReportingThreshold
operator|+
literal|10
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|readLockLogStmt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Track but do not Report if it's held for a long time when re-entering
comment|// read lock but time since last report does not exceed the suppress
comment|// warning interval
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockReportingThreshold
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockReportingThreshold
operator|/
literal|2
operator|+
literal|1
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|||
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|readLockLogStmt
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|readLockLogStmt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Report if it's held for a long time (and time since last report
comment|// exceeds the suppress warning interval) while another thread also has the
comment|// read lock. Let one thread hold the lock long enough to activate an
comment|// alert, then have another thread grab the read lock to ensure that this
comment|// doesn't reset the timing.
name|timer
operator|.
name|advance
argument_list|(
name|readLockSuppressWarningInterval
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|barrier
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|barrier2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|readLockReportingThreshold
operator|+
literal|1
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Allow for t2 to acquire the read lock
name|barrier2
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait until t2 has the read lock
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Interrupted during testing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait until t1 finishes sleeping
name|fsnLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|barrier2
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Allow for t1 to unlock
name|fsnLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Interrupted during testing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Look for the differentiating class names in the stack trace
name|String
name|stackTracePatternString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"INFO.+%s(.+\n){5}\\Q%%s\\E\\.run"
argument_list|,
name|readLockLogStmt
argument_list|)
decl_stmt|;
name|Pattern
name|t1Pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|stackTracePatternString
argument_list|,
name|t1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t1Pattern
operator|.
name|matcher
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|Pattern
name|t2Pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|stackTracePatternString
argument_list|,
name|t2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|t2Pattern
operator|.
name|matcher
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Number of suppressed read-lock reports: 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDetailedHoldMetrics ()
specifier|public
name|void
name|testDetailedHoldMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|MutableRatesWithAggregation
name|rates
init|=
name|registry
operator|.
name|newRatesWithAggregation
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|FSNamesystemLock
name|fsLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
name|rates
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|fsLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advanceNanos
argument_list|(
literal|1300000
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readUnlock
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advanceNanos
argument_list|(
literal|2400000
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readUnlock
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readUnlock
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|readUnlock
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fsLock
operator|.
name|writeUnlock
argument_list|(
literal|"baz"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|MetricsAsserts
operator|.
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
name|rates
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FSNReadLockFooNanosAvgTime"
argument_list|,
literal|1850000.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FSNReadLockFooNanosNumOps"
argument_list|,
literal|2L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FSNReadLockBarNanosAvgTime"
argument_list|,
literal|2000000.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FSNReadLockBarNanosNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FSNWriteLockBazNanosAvgTime"
argument_list|,
literal|1000000.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FSNWriteLockBazNanosNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// Overall
name|assertGauge
argument_list|(
literal|"FSNReadLockOverallNanosAvgTime"
argument_list|,
literal|1900000.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FSNReadLockOverallNanosNumOps"
argument_list|,
literal|3L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"FSNWriteLockOverallNanosAvgTime"
argument_list|,
literal|1000000.0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"FSNWriteLockOverallNanosNumOps"
argument_list|,
literal|1L
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to suppress FSNameSystem write lock report when it is held for long    * time.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|45000
argument_list|)
DECL|method|testFSWriteLockReportSuppressed ()
specifier|public
name|void
name|testFSWriteLockReportSuppressed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|writeLockReportingThreshold
init|=
literal|1L
decl_stmt|;
specifier|final
name|long
name|writeLockSuppressWarningInterval
init|=
literal|10L
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|writeLockReportingThreshold
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
argument_list|,
name|writeLockSuppressWarningInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
specifier|final
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|FSNamesystemLock
name|fsnLock
init|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockSuppressWarningInterval
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSNamesystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
comment|// Should trigger the write lock report
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|+
literal|100
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"FSNamesystem write lock held for"
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Suppress report if the write lock is held for a long time
name|fsnLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
name|writeLockReportingThreshold
operator|+
literal|100
argument_list|)
expr_stmt|;
name|fsnLock
operator|.
name|writeUnlock
argument_list|(
literal|"testFSWriteLockReportSuppressed"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Number of suppressed write-lock reports:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"FSNamesystem write lock held for"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

