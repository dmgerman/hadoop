begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CombinedHostFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|HostConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|HostsFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
operator|.
name|NoMlockCacheManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|getMemlockLimit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class for testing {@link NameNodeMXBean} implementation  */
end_comment

begin_class
DECL|class|TestNameNodeMXBean
specifier|public
class|class
name|TestNameNodeMXBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNameNodeMXBean
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Used to assert equality between doubles    */
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|0.000001
decl_stmt|;
static|static
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|setCacheManipulator
argument_list|(
operator|new
name|NoMlockCacheManipulator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testNameNodeMXBeanInfo ()
specifier|public
name|void
name|testNameNodeMXBeanInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Long
name|maxLockedMemory
init|=
name|getMemlockLimit
argument_list|(
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getMemlockLimit
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|maxLockedMemory
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Set upgrade domain on the first DN.
name|String
name|upgradeDomain
init|=
literal|"abcd"
decl_stmt|;
name|DatanodeManager
name|dm
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
name|dd
init|=
name|dm
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|dd
operator|.
name|setUpgradeDomain
argument_list|(
name|upgradeDomain
argument_list|)
expr_stmt|;
name|String
name|dnXferAddrWithUpgradeDomainSet
init|=
name|dd
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
comment|// Put the second DN to maintenance state.
name|DatanodeDescriptor
name|maintenanceNode
init|=
name|dm
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|maintenanceNode
operator|.
name|setInMaintenance
argument_list|()
expr_stmt|;
name|String
name|dnXferAddrInMaintenance
init|=
name|maintenanceNode
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
comment|// get attribute "ClusterId"
name|String
name|clusterId
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"ClusterId"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
comment|// get attribute "BlockPoolId"
name|String
name|blockpoolId
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"BlockPoolId"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blockpoolId
argument_list|)
expr_stmt|;
comment|// get attribute "Version"
name|String
name|version
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Version"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getVersion
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|version
operator|.
name|equals
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", r"
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get attribute "Used"
name|Long
name|used
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Used"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getUsed
argument_list|()
argument_list|,
name|used
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute "Total"
name|Long
name|total
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Total"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getTotal
argument_list|()
argument_list|,
name|total
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute "safemode"
name|String
name|safemode
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Safemode"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getSafemode
argument_list|()
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
comment|// get attribute nondfs
name|Long
name|nondfs
init|=
call|(
name|Long
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NonDfsUsedSpace"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNonDfsUsedSpace
argument_list|()
argument_list|,
name|nondfs
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute percentremaining
name|Float
name|percentremaining
init|=
call|(
name|Float
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"PercentRemaining"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getPercentRemaining
argument_list|()
argument_list|,
name|percentremaining
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
comment|// get attribute Totalblocks
name|Long
name|totalblocks
init|=
call|(
name|Long
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"TotalBlocks"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getTotalBlocks
argument_list|()
argument_list|,
name|totalblocks
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute alivenodeinfo
name|String
name|alivenodeinfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"LiveNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|liveNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|alivenodeinfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|liveNodes
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|liveNode
range|:
name|liveNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"nonDfsUsedSpace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"nonDfsUsedSpace"
argument_list|)
operator|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"capacity"
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"numBlocks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"numBlocks"
argument_list|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"lastBlockReport"
argument_list|)
argument_list|)
expr_stmt|;
comment|// a. By default the upgrade domain isn't defined on any DN.
comment|// b. If the upgrade domain is set on a DN, JMX should have the same
comment|// value.
name|String
name|xferAddr
init|=
operator|(
name|String
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"xferaddr"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|xferAddr
operator|.
name|equals
argument_list|(
name|dnXferAddrWithUpgradeDomainSet
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
operator|!
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"upgradeDomain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|get
argument_list|(
literal|"upgradeDomain"
argument_list|)
operator|.
name|equals
argument_list|(
name|upgradeDomain
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// "adminState" is set to maintenance only for the specific dn.
name|boolean
name|inMaintenance
init|=
name|liveNode
operator|.
name|get
argument_list|(
literal|"adminState"
argument_list|)
operator|.
name|equals
argument_list|(
name|DatanodeInfo
operator|.
name|AdminStates
operator|.
name|IN_MAINTENANCE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|xferAddr
operator|.
name|equals
argument_list|(
name|dnXferAddrInMaintenance
argument_list|)
operator|^
name|inMaintenance
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|alivenodeinfo
argument_list|)
expr_stmt|;
comment|// get attributes DeadNodes
name|String
name|deadNodeInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DeadNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDeadNodes
argument_list|()
argument_list|,
name|deadNodeInfo
argument_list|)
expr_stmt|;
comment|// get attribute NodeUsage
name|String
name|nodeUsage
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NodeUsage"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NodeUsage"
argument_list|,
name|fsn
operator|.
name|getNodeUsage
argument_list|()
argument_list|,
name|nodeUsage
argument_list|)
expr_stmt|;
comment|// get attribute NameJournalStatus
name|String
name|nameJournalStatus
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameJournalStatus"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NameJournalStatus"
argument_list|,
name|fsn
operator|.
name|getNameJournalStatus
argument_list|()
argument_list|,
name|nameJournalStatus
argument_list|)
expr_stmt|;
comment|// get attribute JournalTransactionInfo
name|String
name|journalTxnInfo
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"JournalTransactionInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NameTxnIds"
argument_list|,
name|fsn
operator|.
name|getJournalTransactionInfo
argument_list|()
argument_list|,
name|journalTxnInfo
argument_list|)
expr_stmt|;
comment|// get attribute "CompileInfo"
name|String
name|compileInfo
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CompileInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for CompileInfo"
argument_list|,
name|fsn
operator|.
name|getCompileInfo
argument_list|()
argument_list|,
name|compileInfo
argument_list|)
expr_stmt|;
comment|// get attribute CorruptFiles
name|String
name|corruptFiles
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CorruptFiles"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for CorruptFiles"
argument_list|,
name|fsn
operator|.
name|getCorruptFiles
argument_list|()
argument_list|,
name|corruptFiles
argument_list|)
expr_stmt|;
comment|// get attribute NameDirStatuses
name|String
name|nameDirStatuses
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameDirStatuses"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNameDirStatuses
argument_list|()
argument_list|,
name|nameDirStatuses
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|nameDirStatuses
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|nameDirUris
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|nameDirUri
range|:
name|nameDirUris
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking for the presence of "
operator|+
name|nameDir
operator|+
literal|" in active name dirs."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|containsKey
argument_list|(
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// This will cause the first dir to fail.
name|File
name|failedNameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUris
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|FileUtil
operator|.
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|failedNameDir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|nameDirStatuses
operator|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameDirStatuses"
argument_list|)
argument_list|)
expr_stmt|;
name|statusMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|nameDirStatuses
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|nameDirUri
range|:
name|nameDirUris
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
name|String
name|expectedStatus
init|=
name|nameDir
operator|.
name|equals
argument_list|(
name|failedNameDir
argument_list|)
condition|?
literal|"failed"
else|:
literal|"active"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking for the presence of "
operator|+
name|nameDir
operator|+
literal|" in "
operator|+
name|expectedStatus
operator|+
literal|" name dirs."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statusMap
operator|.
name|get
argument_list|(
name|expectedStatus
argument_list|)
operator|.
name|containsKey
argument_list|(
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CacheUsed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxLockedMemory
operator|*
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CacheCapacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"RollingUpgradeInfo should be null when there is no rolling"
operator|+
literal|" upgrade"
argument_list|,
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"RollingUpgradeStatus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|dir
range|:
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
control|)
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|"current"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"755"
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testLastContactTime ()
specifier|public
name|void
name|testLastContactTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|HostsFileWriter
name|hostsFileWriter
init|=
operator|new
name|HostsFileWriter
argument_list|()
decl_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"temp/TestNameNodeMXBean"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumLiveDataNodes
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// get attribute DeadNodes
name|String
name|deadNodeInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DeadNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDeadNodes
argument_list|()
argument_list|,
name|deadNodeInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deadNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|deadNodeInfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deadNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|deadNode
range|:
name|deadNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"lastContact"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"adminState"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"xferaddr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDecommissioningNodes ()
specifier|public
name|void
name|testDecommissioningNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|HostsFileWriter
name|hostsFileWriter
init|=
operator|new
name|HostsFileWriter
argument_list|()
decl_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"temp/TestNameNodeMXBean"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// 1. Verify Live nodes
name|String
name|liveNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"LiveNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|liveNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|liveNodesInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|liveNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNumLiveDataNodes
argument_list|()
argument_list|,
name|liveNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|liveNode
range|:
name|liveNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"lastContact"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"xferaddr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the 1st DataNode to Decommission list
name|hostsFileWriter
operator|.
name|initExcludeHost
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Wait for the DatanodeAdminManager to complete refresh nodes
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|String
name|decomNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DecomNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|decomNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|decomNodesInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|decomNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// 2. Verify Decommission InProgress nodes
name|String
name|decomNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DecomNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|decomNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|decomNodesInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDecomNodes
argument_list|()
argument_list|,
name|decomNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNumDecommissioningDataNodes
argument_list|()
argument_list|,
name|decomNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the DatanodeAdminManager to complete check
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
if|if
condition|(
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// 3. Verify Decommissioned nodes
name|decomNodesInfo
operator|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DecomNodes"
argument_list|)
argument_list|)
expr_stmt|;
name|decomNodes
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|decomNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|decomNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDecomNodes
argument_list|()
argument_list|,
name|decomNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testMaintenanceNodes ()
specifier|public
name|void
name|testMaintenanceNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMaintenanceNodes"
argument_list|)
expr_stmt|;
name|int
name|expirationInMs
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|expirationInMs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY
argument_list|,
name|CombinedHostFileManager
operator|.
name|class
argument_list|,
name|HostConfigManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|HostsFileWriter
name|hostsFileWriter
init|=
operator|new
name|HostsFileWriter
argument_list|()
decl_stmt|;
name|hostsFileWriter
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"temp/TestNameNodeMXBean"
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|initIncludeHosts
argument_list|(
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// 1. Verify nodes for DatanodeReportType.LIVE state
name|String
name|liveNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"LiveNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Live Nodes: "
operator|+
name|liveNodesInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|liveNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|liveNodesInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|liveNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNumLiveDataNodes
argument_list|()
argument_list|,
name|liveNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|liveNode
range|:
name|liveNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"lastContact"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"xferaddr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the 1st DataNode to Maintenance list
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|maintenanceNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|maintenanceNodes
operator|.
name|put
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
operator|+
name|expirationInMs
argument_list|)
expr_stmt|;
name|hostsFileWriter
operator|.
name|initOutOfServiceHosts
argument_list|(
literal|null
argument_list|,
name|maintenanceNodes
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|recheck
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|recheck
condition|)
block|{
comment|// 2. Verify nodes for DatanodeReportType.ENTERING_MAINTENANCE state
name|String
name|enteringMaintenanceNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"EnteringMaintenanceNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enteringMaintenanceNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|enteringMaintenanceNodesInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|enteringMaintenanceNodes
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for a node to Enter Maintenance state!"
argument_list|)
expr_stmt|;
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Nodes entering Maintenance: "
operator|+
name|enteringMaintenanceNodesInfo
argument_list|)
expr_stmt|;
name|recheck
operator|=
literal|false
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getEnteringMaintenanceNodes
argument_list|()
argument_list|,
name|enteringMaintenanceNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNumEnteringMaintenanceDataNodes
argument_list|()
argument_list|,
name|enteringMaintenanceNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait for the DatanodeAdminManager to complete check
comment|// and perform state transition
while|while
condition|(
name|fsn
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// 3. Verify nodes for AdminStates.IN_MAINTENANCE state
name|String
name|enteringMaintenanceNodesInfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"EnteringMaintenanceNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|enteringMaintenanceNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|enteringMaintenanceNodesInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|enteringMaintenanceNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getEnteringMaintenanceNodes
argument_list|()
argument_list|,
name|enteringMaintenanceNodesInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fsn
operator|.
name|getNumInMaintenanceLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fsn
operator|.
name|getNumInMaintenanceDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|hostsFileWriter
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testTopUsers ()
specifier|public
name|void
name|testTopUsers
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|topUsers
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find map key timestamp"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find map key windows"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"windows"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|windows
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected num windows"
argument_list|,
literal|3
argument_list|,
name|windows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|window
range|:
name|windows
control|)
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|ops
init|=
name|window
operator|.
name|get
argument_list|(
literal|"ops"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected num ops"
argument_list|,
literal|4
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|op
range|:
name|ops
control|)
block|{
if|if
condition|(
name|op
operator|.
name|get
argument_list|(
literal|"opType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"datanodeReport"
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|long
name|count
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|op
operator|.
name|get
argument_list|(
literal|"totalCount"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|opType
init|=
name|op
operator|.
name|get
argument_list|(
literal|"opType"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expected
decl_stmt|;
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
name|TopConf
operator|.
name|ALL_CMDS
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|2
operator|*
name|NUM_OPS
operator|+
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
literal|"datanodeReport"
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|NUM_OPS
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected total count"
argument_list|,
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTopUsersDisabled ()
specifier|public
name|void
name|testTopUsersDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Disable nntop
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Did not expect to find TopUserOpCounts bean!"
argument_list|,
name|topUsers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTopUsersNoPeriods ()
specifier|public
name|void
name|testTopUsersNoPeriods
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected TopUserOpCounts bean!"
argument_list|,
name|topUsers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testQueueLength ()
specifier|public
name|void
name|testQueueLength
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFs
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystem"
argument_list|)
decl_stmt|;
name|int
name|queueLength
init|=
operator|(
name|int
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFs
argument_list|,
literal|"LockQueueLength"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueLength
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testNNDirectorySize ()
specifier|public
name|void
name|testNNDirectorySize
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// Have to specify IPC ports so the NNs can talk to each other.
name|int
index|[]
name|ports
init|=
name|ServerSocketUtil
operator|.
name|getPorts
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|MiniDFSNNTopology
name|topology
init|=
operator|new
name|MiniDFSNNTopology
argument_list|()
operator|.
name|addNameservice
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NSConf
argument_list|(
literal|"ns1"
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn1"
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|ports
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn2"
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|ports
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|topology
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
comment|// retry if race on ports given by ServerSocketUtil#getPorts
continue|continue;
block|}
block|}
if|if
condition|(
name|cluster
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"failed to start mini cluster."
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|nn0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
name|nn1
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|checkNNDirSize
argument_list|(
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nn0
operator|.
name|getNameDirSize
argument_list|()
argument_list|)
expr_stmt|;
name|checkNNDirSize
argument_list|(
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nn1
operator|.
name|getNameDirSize
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|//rollEditLog
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkNNDirSize
argument_list|(
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nn0
operator|.
name|getNameDirSize
argument_list|()
argument_list|)
expr_stmt|;
name|checkNNDirSize
argument_list|(
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|1
argument_list|)
argument_list|,
name|nn1
operator|.
name|getNameDirSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test metric after call saveNamespace
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|nn0
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|nn0
operator|.
name|saveNamespace
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkNNDirSize
argument_list|(
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nn0
operator|.
name|getNameDirSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|checkNNDirSize (Collection<URI> nameDirUris, String metric)
specifier|private
name|void
name|checkNNDirSize
parameter_list|(
name|Collection
argument_list|<
name|URI
argument_list|>
name|nameDirUris
parameter_list|,
name|String
name|metric
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nnDirMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|metric
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nameDirUris
operator|.
name|size
argument_list|()
argument_list|,
name|nnDirMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|dirUrl
range|:
name|nameDirUris
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|dirUrl
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nnDirMap
operator|.
name|get
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|sizeOfDirectory
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEnabledEcPoliciesMetric ()
specifier|public
name|void
name|testEnabledEcPoliciesMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|ErasureCodingPolicy
name|defaultPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
name|int
name|dataBlocks
init|=
name|defaultPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|defaultPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|String
name|defaultPolicyName
init|=
name|defaultPolicy
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rs104PolicyName
init|=
literal|"RS-10-4-1024k"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Enabled EC policies metric should return with "
operator|+
literal|"the default EC policy"
argument_list|,
name|defaultPolicyName
argument_list|,
name|getEnabledEcPoliciesMetric
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|rs104PolicyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Enabled EC policies metric should return with "
operator|+
literal|"both enabled policies separated by a comma"
argument_list|,
name|rs104PolicyName
operator|+
literal|", "
operator|+
name|defaultPolicyName
argument_list|,
name|getEnabledEcPoliciesMetric
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|defaultPolicyName
argument_list|)
expr_stmt|;
name|fs
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|rs104PolicyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Enabled EC policies metric should return with "
operator|+
literal|"an empty string if there is no enabled policy"
argument_list|,
literal|""
argument_list|,
name|getEnabledEcPoliciesMetric
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testVerifyMissingBlockGroupsMetrics ()
specifier|public
name|void
name|testVerifyMissingBlockGroupsMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|dataBlocks
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|cellSize
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// create file
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDirPath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDirPath
operator|.
name|toString
argument_list|()
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"corrupted"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cellSize
operator|*
name|dataBlocks
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|lsb
argument_list|,
name|cellSize
argument_list|,
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// make an unrecoverable ec file with corrupted blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parityBlocks
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ipcPort
init|=
name|blks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|corruptReplica
argument_list|(
name|cluster
operator|.
name|getDataNode
argument_list|(
name|ipcPort
argument_list|)
argument_list|,
name|blks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disable the heart beat from DN so that the corrupted block record is
comment|// kept in NameNode
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Read the file to trigger reportBadBlocks
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"missingChunksNum="
operator|+
operator|(
name|parityBlocks
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|replStateMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=ReplicatedBlocksState"
argument_list|)
decl_stmt|;
name|ObjectName
name|ecBlkGrpStateMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=ECBlockGroupsState"
argument_list|)
decl_stmt|;
name|ObjectName
name|namenodeMXBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
comment|// Wait for the metrics to discover the unrecoverable block group
name|long
name|expectedMissingBlockCount
init|=
literal|1L
decl_stmt|;
name|long
name|expectedCorruptBlockCount
init|=
literal|1L
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|Long
name|numMissingBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|namenodeMXBeanName
argument_list|,
literal|"NumberOfMissingBlocks"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numMissingBlocks
operator|==
name|expectedMissingBlockCount
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught unexpected exception."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verification of missing blocks
name|long
name|totalMissingBlocks
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getMissingBlocksCount
argument_list|()
decl_stmt|;
name|Long
name|replicaMissingBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|replStateMBeanName
argument_list|,
literal|"MissingReplicatedBlocks"
argument_list|)
decl_stmt|;
name|Long
name|ecMissingBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|ecBlkGrpStateMBeanName
argument_list|,
literal|"MissingECBlockGroups"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total missing blocks!"
argument_list|,
name|expectedMissingBlockCount
argument_list|,
name|totalMissingBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total missing blocks!"
argument_list|,
name|totalMissingBlocks
argument_list|,
operator|(
name|replicaMissingBlocks
operator|+
name|ecMissingBlocks
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total ec missing blocks!"
argument_list|,
name|expectedMissingBlockCount
argument_list|,
name|ecMissingBlocks
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verification of corrupt blocks
name|long
name|totalCorruptBlocks
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
decl_stmt|;
name|Long
name|replicaCorruptBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|replStateMBeanName
argument_list|,
literal|"CorruptReplicatedBlocks"
argument_list|)
decl_stmt|;
name|Long
name|ecCorruptBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|ecBlkGrpStateMBeanName
argument_list|,
literal|"CorruptECBlockGroups"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total corrupt blocks!"
argument_list|,
name|expectedCorruptBlockCount
argument_list|,
name|totalCorruptBlocks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total corrupt blocks!"
argument_list|,
name|totalCorruptBlocks
argument_list|,
operator|(
name|replicaCorruptBlocks
operator|+
name|ecCorruptBlocks
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total ec corrupt blocks!"
argument_list|,
name|expectedCorruptBlockCount
argument_list|,
name|ecCorruptBlocks
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|corruptFiles
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|namenodeMXBeanName
argument_list|,
literal|"CorruptFiles"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numCorruptFiles
init|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|corruptFiles
argument_list|)
operator|)
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numCorruptFiles
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTotalBlocksMetrics ()
specifier|public
name|void
name|testTotalBlocksMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FSNamesystem
name|namesystem
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
name|dataBlocks
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
name|int
name|parityBlocks
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|dataBlocks
operator|+
name|parityBlocks
decl_stmt|;
name|int
name|cellSize
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|int
name|stripesPerBlock
init|=
literal|2
decl_stmt|;
name|int
name|blockSize
init|=
name|stripesPerBlock
operator|*
name|cellSize
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|totalSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTotalBlocksMetrics
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|,
name|namesystem
operator|.
name|getTotalBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// create small file
name|Path
name|replDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/replicated"
argument_list|)
decl_stmt|;
name|Path
name|replFileSmall
init|=
operator|new
name|Path
argument_list|(
name|replDirPath
argument_list|,
literal|"replfile_small"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|factor
init|=
literal|3
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replFileSmall
argument_list|,
name|blockSize
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|replFileSmall
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|ecDirPath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDirPath
operator|.
name|toString
argument_list|()
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|ecFileSmall
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"ecfile_small"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|smallLength
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
specifier|final
name|byte
index|[]
name|smallBytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|smallLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|ecFileSmall
argument_list|,
name|smallBytes
argument_list|)
expr_stmt|;
name|verifyTotalBlocksMetrics
argument_list|(
literal|1L
argument_list|,
literal|1L
argument_list|,
name|namesystem
operator|.
name|getTotalBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// create learge file
name|Path
name|replFileLarge
init|=
operator|new
name|Path
argument_list|(
name|replDirPath
argument_list|,
literal|"replfile_large"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replFileLarge
argument_list|,
literal|2
operator|*
name|blockSize
argument_list|,
name|factor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|replFileLarge
argument_list|,
name|factor
argument_list|)
expr_stmt|;
name|Path
name|ecFileLarge
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"ecfile_large"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|largeLength
init|=
name|blockSize
operator|*
name|totalSize
operator|+
name|smallLength
decl_stmt|;
specifier|final
name|byte
index|[]
name|largeBytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|largeLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|ecFileLarge
argument_list|,
name|largeBytes
argument_list|)
expr_stmt|;
name|verifyTotalBlocksMetrics
argument_list|(
literal|3L
argument_list|,
literal|3L
argument_list|,
name|namesystem
operator|.
name|getTotalBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete replicated files
name|fs
operator|.
name|delete
argument_list|(
name|replDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTotalBlocksMetrics
argument_list|(
literal|0L
argument_list|,
literal|3L
argument_list|,
name|namesystem
operator|.
name|getTotalBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete ec files
name|fs
operator|.
name|delete
argument_list|(
name|ecDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTotalBlocksMetrics
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|,
name|namesystem
operator|.
name|getTotalBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|namesystem
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|namesystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyTotalBlocksMetrics (long expectedTotalReplicatedBlocks, long expectedTotalECBlockGroups, long actualTotalBlocks)
name|void
name|verifyTotalBlocksMetrics
parameter_list|(
name|long
name|expectedTotalReplicatedBlocks
parameter_list|,
name|long
name|expectedTotalECBlockGroups
parameter_list|,
name|long
name|actualTotalBlocks
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|expectedTotalBlocks
init|=
name|expectedTotalReplicatedBlocks
operator|+
name|expectedTotalECBlockGroups
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total blocks!"
argument_list|,
name|expectedTotalBlocks
argument_list|,
name|actualTotalBlocks
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|replStateMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=ReplicatedBlocksState"
argument_list|)
decl_stmt|;
name|ObjectName
name|ecBlkGrpStateMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=ECBlockGroupsState"
argument_list|)
decl_stmt|;
name|Long
name|totalReplicaBlocks
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|replStateMBeanName
argument_list|,
literal|"TotalReplicatedBlocks"
argument_list|)
decl_stmt|;
name|Long
name|totalECBlockGroups
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|ecBlkGrpStateMBeanName
argument_list|,
literal|"TotalECBlockGroups"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total replicated blocks!"
argument_list|,
name|expectedTotalReplicatedBlocks
argument_list|,
name|totalReplicaBlocks
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total ec block groups!"
argument_list|,
name|expectedTotalECBlockGroups
argument_list|,
name|totalECBlockGroups
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEcClusterSetupVerifyResult
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|getEnabledEcPoliciesMetric ()
specifier|private
name|String
name|getEnabledEcPoliciesMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=ECBlockGroupsState"
argument_list|)
decl_stmt|;
return|return
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"EnabledEcPolicies"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verifyEcClusterSetupVerifyResult (MBeanServer mbs)
specifier|private
name|void
name|verifyEcClusterSetupVerifyResult
parameter_list|(
name|MBeanServer
name|mbs
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|namenodeMXBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|namenodeMXBeanName
argument_list|,
literal|"VerifyECWithTopologyResult"
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resultMap
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|result
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|isSupported
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|resultMap
operator|.
name|get
argument_list|(
literal|"isSupported"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|resultMessage
init|=
name|resultMap
operator|.
name|get
argument_list|(
literal|"resultMessage"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Test cluster does not support all enabled "
operator|+
literal|"erasure coding policies."
argument_list|,
name|isSupported
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultMessage
operator|.
name|contains
argument_list|(
literal|"3 racks are required for "
operator|+
literal|"the erasure coding policies: RS-6-3-1024k. "
operator|+
literal|"The number of racks is only 1."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

