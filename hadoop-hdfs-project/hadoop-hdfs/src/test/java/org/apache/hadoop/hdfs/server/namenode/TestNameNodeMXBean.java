begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
operator|.
name|NoMlockCacheManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|Op
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|TopWindow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Class for testing {@link NameNodeMXBean} implementation  */
end_comment

begin_class
DECL|class|TestNameNodeMXBean
specifier|public
class|class
name|TestNameNodeMXBean
block|{
comment|/**    * Used to assert equality between doubles    */
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|0.000001
decl_stmt|;
static|static
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|setCacheManipulator
argument_list|(
operator|new
name|NoMlockCacheManipulator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testNameNodeMXBeanInfo ()
specifier|public
name|void
name|testNameNodeMXBeanInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getMemlockLimit
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
comment|// get attribute "ClusterId"
name|String
name|clusterId
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"ClusterId"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
comment|// get attribute "BlockPoolId"
name|String
name|blockpoolId
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"BlockPoolId"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blockpoolId
argument_list|)
expr_stmt|;
comment|// get attribute "Version"
name|String
name|version
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Version"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getVersion
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|version
operator|.
name|equals
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", r"
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get attribute "Used"
name|Long
name|used
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Used"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getUsed
argument_list|()
argument_list|,
name|used
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute "Total"
name|Long
name|total
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Total"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getTotal
argument_list|()
argument_list|,
name|total
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute "safemode"
name|String
name|safemode
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"Safemode"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getSafemode
argument_list|()
argument_list|,
name|safemode
argument_list|)
expr_stmt|;
comment|// get attribute nondfs
name|Long
name|nondfs
init|=
call|(
name|Long
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NonDfsUsedSpace"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNonDfsUsedSpace
argument_list|()
argument_list|,
name|nondfs
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute percentremaining
name|Float
name|percentremaining
init|=
call|(
name|Float
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"PercentRemaining"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getPercentRemaining
argument_list|()
argument_list|,
name|percentremaining
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
comment|// get attribute Totalblocks
name|Long
name|totalblocks
init|=
call|(
name|Long
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"TotalBlocks"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getTotalBlocks
argument_list|()
argument_list|,
name|totalblocks
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// get attribute alivenodeinfo
name|String
name|alivenodeinfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"LiveNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|liveNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|alivenodeinfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|liveNodes
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|liveNode
range|:
name|liveNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"nonDfsUsedSpace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"nonDfsUsedSpace"
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"capacity"
argument_list|)
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|liveNode
operator|.
name|containsKey
argument_list|(
literal|"numBlocks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|liveNode
operator|.
name|get
argument_list|(
literal|"numBlocks"
argument_list|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|alivenodeinfo
argument_list|)
expr_stmt|;
comment|// get attribute deadnodeinfo
name|String
name|deadnodeinfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DeadNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDeadNodes
argument_list|()
argument_list|,
name|deadnodeinfo
argument_list|)
expr_stmt|;
comment|// get attribute NodeUsage
name|String
name|nodeUsage
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NodeUsage"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NodeUsage"
argument_list|,
name|fsn
operator|.
name|getNodeUsage
argument_list|()
argument_list|,
name|nodeUsage
argument_list|)
expr_stmt|;
comment|// get attribute NameJournalStatus
name|String
name|nameJournalStatus
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameJournalStatus"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NameJournalStatus"
argument_list|,
name|fsn
operator|.
name|getNameJournalStatus
argument_list|()
argument_list|,
name|nameJournalStatus
argument_list|)
expr_stmt|;
comment|// get attribute JournalTransactionInfo
name|String
name|journalTxnInfo
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"JournalTransactionInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NameTxnIds"
argument_list|,
name|fsn
operator|.
name|getJournalTransactionInfo
argument_list|()
argument_list|,
name|journalTxnInfo
argument_list|)
expr_stmt|;
comment|// get attribute "NNStarted"
name|String
name|nnStarted
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NNStarted"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for NNStarted"
argument_list|,
name|fsn
operator|.
name|getNNStarted
argument_list|()
argument_list|,
name|nnStarted
argument_list|)
expr_stmt|;
comment|// get attribute "CompileInfo"
name|String
name|compileInfo
init|=
operator|(
name|String
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CompileInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for CompileInfo"
argument_list|,
name|fsn
operator|.
name|getCompileInfo
argument_list|()
argument_list|,
name|compileInfo
argument_list|)
expr_stmt|;
comment|// get attribute CorruptFiles
name|String
name|corruptFiles
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CorruptFiles"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad value for CorruptFiles"
argument_list|,
name|fsn
operator|.
name|getCorruptFiles
argument_list|()
argument_list|,
name|corruptFiles
argument_list|)
expr_stmt|;
comment|// get attribute NameDirStatuses
name|String
name|nameDirStatuses
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameDirStatuses"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getNameDirStatuses
argument_list|()
argument_list|,
name|nameDirStatuses
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|nameDirStatuses
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|nameDirUris
init|=
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|nameDirUri
range|:
name|nameDirUris
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking for the presence of "
operator|+
name|nameDir
operator|+
literal|" in active name dirs."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|containsKey
argument_list|(
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// This will cause the first dir to fail.
name|File
name|failedNameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUris
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|FileUtil
operator|.
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|failedNameDir
argument_list|,
literal|"current"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|nameDirStatuses
operator|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"NameDirStatuses"
argument_list|)
argument_list|)
expr_stmt|;
name|statusMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|nameDirStatuses
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|nameDirUri
range|:
name|nameDirUris
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
name|String
name|expectedStatus
init|=
name|nameDir
operator|.
name|equals
argument_list|(
name|failedNameDir
argument_list|)
condition|?
literal|"failed"
else|:
literal|"active"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking for the presence of "
operator|+
name|nameDir
operator|+
literal|" in "
operator|+
name|expectedStatus
operator|+
literal|" name dirs."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statusMap
operator|.
name|get
argument_list|(
name|expectedStatus
argument_list|)
operator|.
name|containsKey
argument_list|(
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"active"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statusMap
operator|.
name|get
argument_list|(
literal|"failed"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CacheUsed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getMemlockLimit
argument_list|()
operator|*
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"CacheCapacity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|dir
range|:
name|cluster
operator|.
name|getNameDirs
argument_list|(
literal|0
argument_list|)
control|)
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|"current"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"755"
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testLastContactTime ()
specifier|public
name|void
name|testLastContactTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|FileSystem
name|localFileSys
init|=
literal|null
decl_stmt|;
name|Path
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
decl_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=NameNodeInfo"
argument_list|)
decl_stmt|;
comment|// Define include file to generate deadNodes metrics
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|localFileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
literal|"build/test/data/temp/TestNameNodeMXBean"
argument_list|)
expr_stmt|;
name|Path
name|includeFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"include"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localFileSys
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|includeHosts
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|includeHosts
operator|.
name|append
argument_list|(
name|dn
operator|.
name|getDisplayName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|localFileSys
argument_list|,
name|includeFile
argument_list|,
name|includeHosts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|includeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumLiveDataNodes
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// get attribute deadnodeinfo
name|String
name|deadnodeinfo
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanName
argument_list|,
literal|"DeadNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fsn
operator|.
name|getDeadNodes
argument_list|()
argument_list|,
name|deadnodeinfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deadNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|deadnodeinfo
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|deadNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|deadNode
range|:
name|deadNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"lastContact"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"decommissioned"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deadNode
operator|.
name|containsKey
argument_list|(
literal|"xferaddr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|(
name|localFileSys
operator|!=
literal|null
operator|)
operator|&&
name|localFileSys
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testTopUsers ()
specifier|public
name|void
name|testTopUsers
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|topUsers
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find map key timestamp"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find map key windows"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"windows"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|windows
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected num windows"
argument_list|,
literal|3
argument_list|,
name|windows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|window
range|:
name|windows
control|)
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|ops
init|=
name|window
operator|.
name|get
argument_list|(
literal|"ops"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected num ops"
argument_list|,
literal|3
argument_list|,
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|op
range|:
name|ops
control|)
block|{
specifier|final
name|long
name|count
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|op
operator|.
name|get
argument_list|(
literal|"totalCount"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|opType
init|=
name|op
operator|.
name|get
argument_list|(
literal|"opType"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expected
decl_stmt|;
if|if
condition|(
name|opType
operator|.
name|equals
argument_list|(
name|TopConf
operator|.
name|ALL_CMDS
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|2
operator|*
name|NUM_OPS
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|NUM_OPS
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected total count"
argument_list|,
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTopUsersDisabled ()
specifier|public
name|void
name|testTopUsersDisabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Disable nntop
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Did not expect to find TopUserOpCounts bean!"
argument_list|,
name|topUsers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTopUsersNoPeriods ()
specifier|public
name|void
name|testTopUsersNoPeriods
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|mxbeanNameFsns
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=NameNode,name=FSNamesystemState"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_OPS
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|topUsers
init|=
call|(
name|String
call|)
argument_list|(
name|mbs
operator|.
name|getAttribute
argument_list|(
name|mxbeanNameFsns
argument_list|,
literal|"TopUserOpCounts"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected TopUserOpCounts bean!"
argument_list|,
name|topUsers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

