begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link OutlierDetector}.  */
end_comment

begin_class
DECL|class|TestSlowNodeDetector
specifier|public
class|class
name|TestSlowNodeDetector
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSlowNodeDetector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set a timeout for every test case.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
DECL|field|LOW_THRESHOLD
specifier|private
specifier|final
specifier|static
name|double
name|LOW_THRESHOLD
init|=
literal|1000
decl_stmt|;
DECL|field|MIN_OUTLIER_DETECTION_PEERS
specifier|private
specifier|final
specifier|static
name|long
name|MIN_OUTLIER_DETECTION_PEERS
init|=
literal|3
decl_stmt|;
comment|// Randomly generated test cases for median and MAD. The first entry
comment|// in each pair is the expected median and the second entry is the
comment|// expected Median Absolute Deviation. The small sets of size 1 and 2
comment|// exist to test the edge cases however in practice the MAD of a very
comment|// small set is not useful.
DECL|field|medianTestMatrix
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|,
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|medianTestMatrix
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|,
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
argument_list|()
comment|// Single element.
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|9.6502431302
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|9.6502431302
argument_list|,
literal|0.0
argument_list|)
argument_list|)
comment|// Two elements.
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|1.72168104625
argument_list|)
operator|.
name|add
argument_list|(
literal|11.7872544459
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|6.75446774606
argument_list|,
literal|7.4616095611
argument_list|)
argument_list|)
comment|// The Remaining lists were randomly generated with sizes 3-10.
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|76.2635686249
argument_list|)
operator|.
name|add
argument_list|(
literal|27.0652018553
argument_list|)
operator|.
name|add
argument_list|(
literal|1.3868476443
argument_list|)
operator|.
name|add
argument_list|(
literal|49.7194624164
argument_list|)
operator|.
name|add
argument_list|(
literal|47.385680883
argument_list|)
operator|.
name|add
argument_list|(
literal|57.8721199173
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|48.5525716497
argument_list|,
literal|22.837202532
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|86.0573389581
argument_list|)
operator|.
name|add
argument_list|(
literal|93.2399572424
argument_list|)
operator|.
name|add
argument_list|(
literal|64.9545429122
argument_list|)
operator|.
name|add
argument_list|(
literal|35.8509730085
argument_list|)
operator|.
name|add
argument_list|(
literal|1.6534313654
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|64.9545429122
argument_list|,
literal|41.9360180373
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|5.00127007366
argument_list|)
operator|.
name|add
argument_list|(
literal|37.9790589127
argument_list|)
operator|.
name|add
argument_list|(
literal|67.5784746266
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|37.9790589127
argument_list|,
literal|43.8841594039
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|1.43442932944
argument_list|)
operator|.
name|add
argument_list|(
literal|70.6769829947
argument_list|)
operator|.
name|add
argument_list|(
literal|37.47579656
argument_list|)
operator|.
name|add
argument_list|(
literal|51.1126141394
argument_list|)
operator|.
name|add
argument_list|(
literal|72.2465914419
argument_list|)
operator|.
name|add
argument_list|(
literal|32.2930549225
argument_list|)
operator|.
name|add
argument_list|(
literal|39.677459781
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|39.677459781
argument_list|,
literal|16.9537852208
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|26.7913745214
argument_list|)
operator|.
name|add
argument_list|(
literal|68.9833706658
argument_list|)
operator|.
name|add
argument_list|(
literal|29.3882180746
argument_list|)
operator|.
name|add
argument_list|(
literal|68.3455244453
argument_list|)
operator|.
name|add
argument_list|(
literal|74.9277265022
argument_list|)
operator|.
name|add
argument_list|(
literal|12.1469972942
argument_list|)
operator|.
name|add
argument_list|(
literal|72.5395402683
argument_list|)
operator|.
name|add
argument_list|(
literal|7.87917492506
argument_list|)
operator|.
name|add
argument_list|(
literal|33.3253447774
argument_list|)
operator|.
name|add
argument_list|(
literal|72.2753759125
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|50.8354346113
argument_list|,
literal|31.9881230079
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|38.6482290705
argument_list|)
operator|.
name|add
argument_list|(
literal|88.0690746319
argument_list|)
operator|.
name|add
argument_list|(
literal|50.6673611649
argument_list|)
operator|.
name|add
argument_list|(
literal|64.5329814115
argument_list|)
operator|.
name|add
argument_list|(
literal|25.2580979294
argument_list|)
operator|.
name|add
argument_list|(
literal|59.6709630711
argument_list|)
operator|.
name|add
argument_list|(
literal|71.5406993741
argument_list|)
operator|.
name|add
argument_list|(
literal|81.3073035091
argument_list|)
operator|.
name|add
argument_list|(
literal|20.5549547284
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|59.6709630711
argument_list|,
literal|31.1683520683
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|87.352734249
argument_list|)
operator|.
name|add
argument_list|(
literal|65.4760359094
argument_list|)
operator|.
name|add
argument_list|(
literal|28.9206803169
argument_list|)
operator|.
name|add
argument_list|(
literal|36.5908574008
argument_list|)
operator|.
name|add
argument_list|(
literal|87.7407653175
argument_list|)
operator|.
name|add
argument_list|(
literal|99.3704511335
argument_list|)
operator|.
name|add
argument_list|(
literal|41.3227434076
argument_list|)
operator|.
name|add
argument_list|(
literal|46.2713494909
argument_list|)
operator|.
name|add
argument_list|(
literal|3.49940920921
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|46.2713494909
argument_list|,
literal|28.4729106898
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Double
argument_list|>
argument_list|()
operator|.
name|add
argument_list|(
literal|95.3251533286
argument_list|)
operator|.
name|add
argument_list|(
literal|27.2777870437
argument_list|)
operator|.
name|add
argument_list|(
literal|43.73477168
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|43.73477168
argument_list|,
literal|24.3991619317
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// A test matrix that maps inputs to the expected output list of
comment|// slow nodes i.e. outliers.
DECL|field|outlierTestMatrix
specifier|private
name|Map
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|outlierTestMatrix
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
comment|// The number of samples is too low and all samples are below
comment|// the low threshold. Nothing should be returned.
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"n1"
argument_list|,
literal|0.0
argument_list|,
literal|"n2"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
comment|// A statistical outlier below the low threshold must not be
comment|// returned.
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"n1"
argument_list|,
literal|1.0
argument_list|,
literal|"n2"
argument_list|,
literal|1.0
argument_list|,
literal|"n3"
argument_list|,
name|LOW_THRESHOLD
operator|-
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
comment|// A statistical outlier above the low threshold must be returned.
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"n1"
argument_list|,
literal|1.0
argument_list|,
literal|"n2"
argument_list|,
literal|1.0
argument_list|,
literal|"n3"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
comment|// A statistical outlier must not be returned if it is within a
comment|// MEDIAN_MULTIPLIER multiple of the median.
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"n1"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|0.1
argument_list|,
literal|"n2"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|0.1
argument_list|,
literal|"n3"
argument_list|,
name|LOW_THRESHOLD
operator|*
name|OutlierDetector
operator|.
name|MEDIAN_MULTIPLIER
operator|-
literal|0.1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
comment|// A statistical outlier must be returned if it is outside a
comment|// MEDIAN_MULTIPLIER multiple of the median.
operator|.
name|put
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"n1"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|0.1
argument_list|,
literal|"n2"
argument_list|,
name|LOW_THRESHOLD
operator|+
literal|0.1
argument_list|,
literal|"n3"
argument_list|,
operator|(
name|LOW_THRESHOLD
operator|+
literal|0.1
operator|)
operator|*
name|OutlierDetector
operator|.
name|MEDIAN_MULTIPLIER
operator|+
literal|0.1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
comment|// Only the statistical outliers n3 and n11 should be returned.
operator|.
name|put
argument_list|(
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"n1"
argument_list|,
literal|1029.4322
argument_list|)
operator|.
name|put
argument_list|(
literal|"n2"
argument_list|,
literal|2647.876
argument_list|)
operator|.
name|put
argument_list|(
literal|"n3"
argument_list|,
literal|9194.312
argument_list|)
operator|.
name|put
argument_list|(
literal|"n4"
argument_list|,
literal|2.2
argument_list|)
operator|.
name|put
argument_list|(
literal|"n5"
argument_list|,
literal|2012.92
argument_list|)
operator|.
name|put
argument_list|(
literal|"n6"
argument_list|,
literal|1843.81
argument_list|)
operator|.
name|put
argument_list|(
literal|"n7"
argument_list|,
literal|1201.43
argument_list|)
operator|.
name|put
argument_list|(
literal|"n8"
argument_list|,
literal|6712.01
argument_list|)
operator|.
name|put
argument_list|(
literal|"n9"
argument_list|,
literal|3278.554
argument_list|)
operator|.
name|put
argument_list|(
literal|"n10"
argument_list|,
literal|2091.765
argument_list|)
operator|.
name|put
argument_list|(
literal|"n11"
argument_list|,
literal|9194.77
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"n3"
argument_list|,
literal|"n11"
argument_list|)
argument_list|)
comment|// The following input set has multiple outliers.
comment|//   - The low outliers (n4, n6) should not be returned.
comment|//   - High outlier n2 is within 3 multiples of the median
comment|//     and so it should not be returned.
comment|//   - Only the high outlier n8 should be returned.
operator|.
name|put
argument_list|(
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
literal|"n1"
argument_list|,
literal|5002.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n2"
argument_list|,
literal|9001.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n3"
argument_list|,
literal|5004.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n4"
argument_list|,
literal|1001.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n5"
argument_list|,
literal|5003.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n6"
argument_list|,
literal|2001.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n7"
argument_list|,
literal|5000.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n8"
argument_list|,
literal|101002.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n9"
argument_list|,
literal|5001.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n10"
argument_list|,
literal|5002.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n11"
argument_list|,
literal|5105.0
argument_list|)
operator|.
name|put
argument_list|(
literal|"n12"
argument_list|,
literal|5006.0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"n8"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|slowNodeDetector
specifier|private
name|OutlierDetector
name|slowNodeDetector
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|slowNodeDetector
operator|=
operator|new
name|OutlierDetector
argument_list|(
name|MIN_OUTLIER_DETECTION_PEERS
argument_list|,
operator|(
name|long
operator|)
name|LOW_THRESHOLD
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|OutlierDetector
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutliersFromTestMatrix ()
specifier|public
name|void
name|testOutliersFromTestMatrix
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|outlierTestMatrix
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying set {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|outliers
init|=
name|slowNodeDetector
operator|.
name|getOutliers
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Running outlier detection on "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" was expected to yield set "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|", but "
operator|+
literal|" we got set "
operator|+
name|outliers
argument_list|,
name|outliers
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unit test for {@link OutlierDetector#computeMedian(List)}.    */
annotation|@
name|Test
DECL|method|testMediansFromTestMatrix ()
specifier|public
name|void
name|testMediansFromTestMatrix
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|,
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|entry
range|:
name|medianTestMatrix
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|inputList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|inputList
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|median
init|=
name|OutlierDetector
operator|.
name|computeMedian
argument_list|(
name|inputList
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|expectedMedian
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLeft
argument_list|()
decl_stmt|;
comment|// Ensure that the median is within 0.001% of expected.
comment|// We need some fudge factor for floating point comparison.
specifier|final
name|Double
name|errorPercent
init|=
name|Math
operator|.
name|abs
argument_list|(
name|median
operator|-
name|expectedMedian
argument_list|)
operator|*
literal|100.0
operator|/
name|expectedMedian
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Set "
operator|+
name|inputList
operator|+
literal|"; Expected median: "
operator|+
name|expectedMedian
operator|+
literal|", got: "
operator|+
name|median
argument_list|,
name|errorPercent
operator|<
literal|0.001
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unit test for {@link OutlierDetector#computeMad(List)}.    */
annotation|@
name|Test
DECL|method|testMadsFromTestMatrix ()
specifier|public
name|void
name|testMadsFromTestMatrix
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|,
name|Pair
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
argument_list|>
name|entry
range|:
name|medianTestMatrix
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|Double
argument_list|>
name|inputList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|inputList
argument_list|)
expr_stmt|;
specifier|final
name|Double
name|mad
init|=
name|OutlierDetector
operator|.
name|computeMad
argument_list|(
name|inputList
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|expectedMad
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRight
argument_list|()
decl_stmt|;
comment|// Ensure that the MAD is within 0.001% of expected.
comment|// We need some fudge factor for floating point comparison.
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|final
name|Double
name|errorPercent
init|=
name|Math
operator|.
name|abs
argument_list|(
name|mad
operator|-
name|expectedMad
argument_list|)
operator|*
literal|100.0
operator|/
name|expectedMad
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Set "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"; Expected M.A.D.: "
operator|+
name|expectedMad
operator|+
literal|", got: "
operator|+
name|mad
argument_list|,
name|errorPercent
operator|<
literal|0.001
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For an input list of size 1, the MAD should be 0.0.
specifier|final
name|Double
name|epsilon
init|=
literal|0.000001
decl_stmt|;
comment|// Allow for some FP math error.
name|assertTrue
argument_list|(
literal|"Set "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"; Expected M.A.D.: "
operator|+
name|expectedMad
operator|+
literal|", got: "
operator|+
name|mad
argument_list|,
name|mad
operator|<
name|epsilon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify that {@link OutlierDetector#computeMedian(List)} throws when    * passed an empty list.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMedianOfEmptyList ()
specifier|public
name|void
name|testMedianOfEmptyList
parameter_list|()
block|{
name|OutlierDetector
operator|.
name|computeMedian
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that {@link OutlierDetector#computeMad(List)} throws when    * passed an empty list.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMadOfEmptyList ()
specifier|public
name|void
name|testMadOfEmptyList
parameter_list|()
block|{
name|OutlierDetector
operator|.
name|computeMedian
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

