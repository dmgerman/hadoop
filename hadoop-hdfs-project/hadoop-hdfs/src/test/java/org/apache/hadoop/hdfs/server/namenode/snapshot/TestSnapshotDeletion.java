begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryWithQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
operator|.
name|DirectoryDiffList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Tests snapshot deletion.  */
end_comment

begin_class
DECL|class|TestSnapshotDeletion
specifier|public
class|class
name|TestSnapshotDeletion
block|{
DECL|field|seed
specifier|protected
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|protected
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|REPLICATION_1
specifier|protected
specifier|static
specifier|final
name|short
name|REPLICATION_1
init|=
literal|2
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|protected
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub
specifier|private
specifier|final
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|subsub
specifier|private
specifier|final
name|Path
name|subsub
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"subsub1"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|protected
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsdir
specifier|protected
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|blockmanager
specifier|protected
name|BlockManager
name|blockmanager
decl_stmt|;
DECL|field|hdfs
specifier|protected
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|blockmanager
operator|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deleting snapshottable directory with snapshots must fail.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteDirectoryWithSnapshot ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for sub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Deleting a snapshottable dir with snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
literal|"The directory "
operator|+
name|sub
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be deleted since "
operator|+
name|sub
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deleting directory with snapshottable descendant with snapshots must fail.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteDirectoryWithSnapshot2 ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|subfile1
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|subfile2
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for subsub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|subsub
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|subsub
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Deleting dir while its descedant subsub1 having snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
name|subsub
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQuotaUsageComputation (final Path dirPath, final long expectedNs, final long expectedDs)
specifier|private
name|void
name|checkQuotaUsageComputation
parameter_list|(
specifier|final
name|Path
name|dirPath
parameter_list|,
specifier|final
name|long
name|expectedNs
parameter_list|,
specifier|final
name|long
name|expectedDs
parameter_list|)
throws|throws
name|IOException
block|{
name|INode
name|node
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|dirPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|isDirectory
argument_list|()
operator|&&
name|node
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|INodeDirectoryWithQuota
name|dirNode
init|=
operator|(
name|INodeDirectoryWithQuota
operator|)
name|node
decl_stmt|;
name|assertEquals
argument_list|(
name|dirNode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedNs
argument_list|,
name|dirNode
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirNode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDs
argument_list|,
name|dirNode
operator|.
name|getDiskspace
argument_list|()
argument_list|)
expr_stmt|;
name|Quota
operator|.
name|Counts
name|counts
init|=
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dirNode
operator|.
name|computeQuotaUsage
argument_list|(
name|counts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirNode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedNs
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirNode
operator|.
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedDs
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting a directory which is a descendant of a snapshottable    * directory. In the test we need to cover the following cases:    *     *<pre>    * 1. Delete current INodeFile/INodeDirectory without taking any snapshot.    * 2. Delete current INodeFile/INodeDirectory while snapshots have been taken     *    on ancestor(s).    * 3. Delete current INodeFileWithSnapshot.    * 4. Delete current INodeDirectoryWithSnapshot.    *</pre>    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteCurrentFileDirectory ()
specifier|public
name|void
name|testDeleteCurrentFileDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a folder which will be deleted before taking snapshots
name|Path
name|deleteDir
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"deleteDir"
argument_list|)
decl_stmt|;
name|Path
name|deleteFile
init|=
operator|new
name|Path
argument_list|(
name|deleteDir
argument_list|,
literal|"deleteFile"
argument_list|)
decl_stmt|;
comment|// create a directory that we will not change during the whole process.
name|Path
name|noChangeDirParent
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"noChangeDirParent"
argument_list|)
decl_stmt|;
name|Path
name|noChangeDir
init|=
operator|new
name|Path
argument_list|(
name|noChangeDirParent
argument_list|,
literal|"noChangeDir"
argument_list|)
decl_stmt|;
comment|// create a file that we will not change in the future
name|Path
name|noChangeFile
init|=
operator|new
name|Path
argument_list|(
name|noChangeDir
argument_list|,
literal|"noChangeFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|deleteFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|noChangeFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// we will change this file's metadata in the future
name|Path
name|metaChangeFile1
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"metaChangeFile1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|metaChangeFile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// another file, created under noChangeDir, whose metadata will be changed
name|Path
name|metaChangeFile2
init|=
operator|new
name|Path
argument_list|(
name|noChangeDir
argument_list|,
literal|"metaChangeFile2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|metaChangeFile2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Case 1: delete deleteDir before taking snapshots
name|hdfs
operator|.
name|delete
argument_list|(
name|deleteDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create snapshot s0
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// after creating snapshot s0, create a directory tempdir under dir and then
comment|// delete dir immediately
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"tempdir"
argument_list|)
decl_stmt|;
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"tempfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|tempFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|INodeFile
name|temp
init|=
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|temp
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check dir's quota usage
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|9L
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// check blocks of tempFile
for|for
control|(
name|BlockInfo
name|b
range|:
name|blocks
control|)
block|{
name|assertNull
argument_list|(
name|blockmanager
operator|.
name|getBlockCollection
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make a change: create a new file under subsub
name|Path
name|newFileAfterS0
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFileAfterS0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// further change: change the replicator factor of metaChangeFile
name|hdfs
operator|.
name|setReplication
argument_list|(
name|metaChangeFile1
argument_list|,
name|REPLICATION_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|metaChangeFile2
argument_list|,
name|REPLICATION_1
argument_list|)
expr_stmt|;
comment|// create snapshot s1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// check dir's quota usage
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|14L
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// get two snapshots for later use
name|Snapshot
name|snapshot0
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getSnapshot
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"s0"
argument_list|)
argument_list|)
decl_stmt|;
name|Snapshot
name|snapshot1
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getSnapshot
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"s1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Case 2 + Case 3: delete noChangeDirParent, noChangeFile, and
comment|// metaChangeFile2. Note that when we directly delete a directory, the
comment|// directory will be converted to an INodeDirectoryWithSnapshot. To make
comment|// sure the deletion goes through an INodeDirectory, we delete the parent
comment|// of noChangeDir
name|hdfs
operator|.
name|delete
argument_list|(
name|noChangeDirParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// while deletion, we add a diff for metaChangeFile2 as its snapshot copy
comment|// for s1, we also add diffs for both sub and noChangeDirParent
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|17L
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// check the snapshot copy of noChangeDir
name|Path
name|snapshotNoChangeDir
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
name|sub
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|noChangeDirParent
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|noChangeDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INodeDirectory
name|snapshotNode
init|=
operator|(
name|INodeDirectory
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|snapshotNoChangeDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// should still be an INodeDirectory
name|assertEquals
argument_list|(
name|INodeDirectory
operator|.
name|class
argument_list|,
name|snapshotNode
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|snapshotNode
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// check 2 children: noChangeFile and metaChangeFile2
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|noChangeFileSCopy
init|=
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|noChangeFile
operator|.
name|getName
argument_list|()
argument_list|,
name|noChangeFileSCopy
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeFile
operator|.
name|class
argument_list|,
name|noChangeFileSCopy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotNoChangeDir
argument_list|,
name|noChangeFileSCopy
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|metaChangeFile2SCopy
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|metaChangeFile2
operator|.
name|getName
argument_list|()
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INodeFileWithSnapshot
operator|.
name|class
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotNoChangeDir
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
comment|// check the replication factor of metaChangeFile2SCopy
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getFileReplication
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getFileReplication
argument_list|(
name|snapshot1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
argument_list|,
name|metaChangeFile2SCopy
operator|.
name|getFileReplication
argument_list|(
name|snapshot0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 4: delete directory sub
comment|// before deleting sub, we first create a new file under sub
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|INodeFile
name|newFileNode
init|=
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|newFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
decl_stmt|;
name|blocks
operator|=
name|newFileNode
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|18L
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|5
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// while deletion, we add diff for subsub and metaChangeFile1, and remove
comment|// newFile
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|19L
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockInfo
name|b
range|:
name|blocks
control|)
block|{
name|assertNull
argument_list|(
name|blockmanager
operator|.
name|getBlockCollection
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the whole subtree of sub is stored correctly in snapshot
name|Path
name|snapshotSub
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
name|sub
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|INodeDirectoryWithSnapshot
name|snapshotNode4Sub
init|=
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|snapshotSub
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INodeDirectoryWithSnapshot
operator|.
name|class
argument_list|,
name|snapshotNode4Sub
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// the snapshot copy of sub has only one child subsub.
comment|// newFile should have been destroyed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshotNode4Sub
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but should have two children, subsub and noChangeDir, when s1 was taken
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snapshotNode4Sub
operator|.
name|getChildrenList
argument_list|(
name|snapshot1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the snapshot copy of subsub, which is contained in the subtree of
comment|// sub's snapshot copy
name|INode
name|snapshotNode4Subsub
init|=
name|snapshotNode4Sub
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INodeDirectoryWithSnapshot
operator|.
name|class
argument_list|,
name|snapshotNode4Subsub
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snapshotNode4Sub
operator|==
name|snapshotNode4Subsub
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the children of subsub
name|INodeDirectory
name|snapshotSubsubDir
init|=
operator|(
name|INodeDirectory
operator|)
name|snapshotNode4Subsub
decl_stmt|;
name|children
operator|=
name|snapshotSubsubDir
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|metaChangeFile1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|newFileAfterS0
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one child before snapshot s0
name|children
operator|=
name|snapshotSubsubDir
operator|.
name|getChildrenList
argument_list|(
name|snapshot0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|child
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|metaChangeFile1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check snapshot copy of metaChangeFile1
name|assertEquals
argument_list|(
name|INodeFileWithSnapshot
operator|.
name|class
argument_list|,
name|child
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|INodeFileWithSnapshot
name|metaChangeFile1SCopy
init|=
operator|(
name|INodeFileWithSnapshot
operator|)
name|child
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|metaChangeFile1SCopy
operator|.
name|getFileReplication
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|metaChangeFile1SCopy
operator|.
name|getFileReplication
argument_list|(
name|snapshot1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
argument_list|,
name|metaChangeFile1SCopy
operator|.
name|getFileReplication
argument_list|(
name|snapshot0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting the earliest (first) snapshot. In this simplest scenario, the     * snapshots are taken on the same directory, and we do not need to combine    * snapshot diffs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteEarliestSnapshot1 ()
specifier|public
name|void
name|testDeleteEarliestSnapshot1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create files under sub
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|String
name|snapshotName
init|=
literal|"s1"
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SnapshotException expected: "
operator|+
name|sub
operator|.
name|toString
argument_list|()
operator|+
literal|" is not snapshottable yet"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// make sub snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SnapshotException expected: snapshot "
operator|+
name|snapshotName
operator|+
literal|" does not exist for "
operator|+
name|sub
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot delete snapshot "
operator|+
name|snapshotName
operator|+
literal|" from path "
operator|+
name|sub
operator|.
name|toString
argument_list|()
operator|+
literal|": the snapshot does not exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// create snapshot s1 for sub
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// check quota usage computation
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|4
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// delete s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|3
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// now we can create a snapshot with the same name
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|4
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// create a new file under sub
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create another snapshot s2
name|String
name|snapshotName2
init|=
literal|"s2"
decl_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName2
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|6
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// Get the filestatus of sub under snapshot s2
name|Path
name|ss
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
name|snapshotName2
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|ss
argument_list|)
decl_stmt|;
comment|// delete s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|5
argument_list|,
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|*
literal|3
argument_list|)
expr_stmt|;
name|FileStatus
name|statusAfterDeletion
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Before deletion: "
operator|+
name|statusBeforeDeletion
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"After deletion: "
operator|+
name|statusAfterDeletion
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting the earliest (first) snapshot. In this more complicated     * scenario, the snapshots are taken across directories.    *<pre>    * The test covers the following scenarios:    * 1. delete the first diff in the diff list of a directory    * 2. delete the first diff in the diff list of a file    *</pre>    * Also, the recursive cleanTree process should cover both INodeFile and     * INodeDirectory.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteEarliestSnapshot2 ()
specifier|public
name|void
name|testDeleteEarliestSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|noChangeDir
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"noChangeDir"
argument_list|)
decl_stmt|;
name|Path
name|noChangeFile
init|=
operator|new
name|Path
argument_list|(
name|noChangeDir
argument_list|,
literal|"noChangeFile"
argument_list|)
decl_stmt|;
name|Path
name|metaChangeFile
init|=
operator|new
name|Path
argument_list|(
name|noChangeDir
argument_list|,
literal|"metaChangeFile"
argument_list|)
decl_stmt|;
name|Path
name|metaChangeDir
init|=
operator|new
name|Path
argument_list|(
name|noChangeDir
argument_list|,
literal|"metaChangeDir"
argument_list|)
decl_stmt|;
name|Path
name|toDeleteFile
init|=
operator|new
name|Path
argument_list|(
name|metaChangeDir
argument_list|,
literal|"toDeleteFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|noChangeFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|metaChangeFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|toDeleteFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|INodeFile
name|toDeleteFileNode
init|=
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|toDeleteFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|toDeleteFileNode
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
comment|// create snapshot s0 on dir
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|8
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// delete /TestSnapshot/sub/noChangeDir/metaChangeDir/toDeleteFile
name|hdfs
operator|.
name|delete
argument_list|(
name|toDeleteFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// the deletion adds diff of toDeleteFile and metaChangeDir
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|10
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// change metadata of /TestSnapshot/sub/noChangeDir/metaChangeDir and
comment|// /TestSnapshot/sub/noChangeDir/metaChangeFile
name|hdfs
operator|.
name|setReplication
argument_list|(
name|metaChangeFile
argument_list|,
name|REPLICATION_1
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|metaChangeDir
argument_list|,
literal|"unknown"
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|11
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// create snapshot s1 on dir
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|12
argument_list|,
literal|3
operator|*
name|BLOCKSIZE
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// delete snapshot s0
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// namespace: remove toDeleteFile and its diff, metaChangeFile's diff,
comment|// metaChangeDir's diff, dir's diff. diskspace: remove toDeleteFile, and
comment|// metaChangeFile's replication factor decreases
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|7
argument_list|,
literal|2
operator|*
name|BLOCKSIZE
operator|*
name|REPLICATION
operator|-
name|BLOCKSIZE
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockInfo
name|b
range|:
name|blocks
control|)
block|{
name|assertNull
argument_list|(
name|blockmanager
operator|.
name|getBlockCollection
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check 1. there is no snapshot s0
specifier|final
name|INodeDirectorySnapshottable
name|dirNode
init|=
operator|(
name|INodeDirectorySnapshottable
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Snapshot
name|snapshot0
init|=
name|dirNode
operator|.
name|getSnapshot
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"s0"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|snapshot0
argument_list|)
expr_stmt|;
name|DirectoryDiffList
name|diffList
init|=
name|dirNode
operator|.
name|getDiffs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|diffList
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|diffList
operator|.
name|getLast
argument_list|()
operator|.
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|diffList
operator|=
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|metaChangeDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|getDiffs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|diffList
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check 2. noChangeDir and noChangeFile are still there
specifier|final
name|INodeDirectory
name|noChangeDirNode
init|=
operator|(
name|INodeDirectory
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|noChangeDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INodeDirectory
operator|.
name|class
argument_list|,
name|noChangeDirNode
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INodeFile
name|noChangeFileNode
init|=
operator|(
name|INodeFile
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|noChangeFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INodeFile
operator|.
name|class
argument_list|,
name|noChangeFileNode
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|noChangeFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
comment|// check 3: current metadata of metaChangeFile and metaChangeDir
name|FileStatus
name|status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|metaChangeDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unknown"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unknown"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|metaChangeFile
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|metaChangeFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
comment|// check 4: no snapshot copy for toDeleteFile
try|try
block|{
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|toDeleteFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist: "
operator|+
name|toDeleteFile
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|toDeleteFileInSnapshot
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s0"
argument_list|,
name|toDeleteFile
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|toDeleteFileInSnapshot
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist: "
operator|+
name|toDeleteFileInSnapshot
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test deleting snapshots in a more complicated scenario: need to combine    * snapshot diffs, but no need to handle diffs distributed in a dir tree    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCombineSnapshotDiff1 ()
specifier|public
name|void
name|testCombineSnapshotDiff1
parameter_list|()
throws|throws
name|Exception
block|{
name|testCombineSnapshotDiffImpl
argument_list|(
name|sub
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting snapshots in more complicated scenarios (snapshot diffs are    * distributed in the directory sub-tree)    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCombineSnapshotDiff2 ()
specifier|public
name|void
name|testCombineSnapshotDiff2
parameter_list|()
throws|throws
name|Exception
block|{
name|testCombineSnapshotDiffImpl
argument_list|(
name|sub
argument_list|,
literal|"subsub1/subsubsub1/"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * When combine two snapshots, make sure files/directories created after the     * prior snapshot get destroyed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCombineSnapshotDiff3 ()
specifier|public
name|void
name|testCombineSnapshotDiff3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create initial dir and subdir
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"subdir1"
argument_list|)
decl_stmt|;
name|Path
name|subDir2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"subdir2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subDir2
argument_list|)
expr_stmt|;
name|Path
name|subsubDir
init|=
operator|new
name|Path
argument_list|(
name|subDir1
argument_list|,
literal|"subsubdir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subsubDir
argument_list|)
expr_stmt|;
comment|// take snapshots on subdir and dir
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// create new dir under initial dir
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|subsubDir
argument_list|,
literal|"newdir"
argument_list|)
decl_stmt|;
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|newDir
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|newFile2
init|=
operator|new
name|Path
argument_list|(
name|subDir2
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFile2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create another snapshot
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|11
argument_list|,
name|BLOCKSIZE
operator|*
literal|2
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// delete subsubdir and subDir2
name|hdfs
operator|.
name|delete
argument_list|(
name|subsubDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|subDir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add diff of s2 to subDir1, subsubDir, and subDir2
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|14
argument_list|,
name|BLOCKSIZE
operator|*
literal|2
operator|*
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// delete snapshot s2
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// delete s2 diff in dir, subDir2, and subsubDir. Delete newFile, newDir,
comment|// and newFile2. Rename s2 diff to s1 for subDir1
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check rename of snapshot diff in subDir1
name|Path
name|subdir1_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|,
name|subDir1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|subdir1_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|,
name|subDir1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|subdir1_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|subdir1_s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test snapshot deletion    * @param snapshotRoot The dir where the snapshots are created    * @param modDirStr The snapshotRoot itself or one of its sub-directory,     *        where the modifications happen. It is represented as a relative     *        path to the snapshotRoot.    */
DECL|method|testCombineSnapshotDiffImpl (Path snapshotRoot, String modDirStr, int dirNodeNum)
specifier|private
name|void
name|testCombineSnapshotDiffImpl
parameter_list|(
name|Path
name|snapshotRoot
parameter_list|,
name|String
name|modDirStr
parameter_list|,
name|int
name|dirNodeNum
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|modDir
init|=
name|modDirStr
operator|.
name|isEmpty
argument_list|()
condition|?
name|snapshotRoot
else|:
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|modDirStr
argument_list|)
decl_stmt|;
specifier|final
name|int
name|delta
init|=
name|modDirStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|Path
name|file10
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file10"
argument_list|)
decl_stmt|;
name|Path
name|file11
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file11"
argument_list|)
decl_stmt|;
name|Path
name|file12
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file12"
argument_list|)
decl_stmt|;
name|Path
name|file13
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file13"
argument_list|)
decl_stmt|;
name|Path
name|file14
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file14"
argument_list|)
decl_stmt|;
name|Path
name|file15
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file15"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file10
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file12
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file13
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create snapshot s1 for snapshotRoot
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|5
argument_list|,
literal|8
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// delete file11
name|hdfs
operator|.
name|delete
argument_list|(
name|file11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|6
operator|+
name|delta
argument_list|,
literal|8
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// modify file12
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file12
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|7
operator|+
name|delta
argument_list|,
literal|9
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// modify file13
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|8
operator|+
name|delta
argument_list|,
literal|10
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create file14
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file14
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|9
operator|+
name|delta
argument_list|,
literal|13
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create file15
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file15
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|10
operator|+
name|delta
argument_list|,
literal|16
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create snapshot s2 for snapshotRoot
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|11
operator|+
name|delta
argument_list|,
literal|16
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create file11 again: (0, d) + (c, 0)
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|12
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// delete file12
name|hdfs
operator|.
name|delete
argument_list|(
name|file12
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|13
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// modify file13
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|14
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// delete file14: (c, 0) + (0, d)
name|hdfs
operator|.
name|delete
argument_list|(
name|file14
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|15
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// modify file15
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file15
argument_list|,
name|REPLICATION_1
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|16
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// create snapshot s3 for snapshotRoot
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|17
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|19
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// modify file10, to check if the posterior diff was set correctly
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file10
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|18
operator|+
name|delta
operator|*
literal|2
argument_list|,
literal|20
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|Path
name|file10_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file10"
argument_list|)
decl_stmt|;
name|Path
name|file11_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file11"
argument_list|)
decl_stmt|;
name|Path
name|file12_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file12"
argument_list|)
decl_stmt|;
name|Path
name|file13_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file13"
argument_list|)
decl_stmt|;
name|Path
name|file14_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|,
name|modDirStr
operator|+
literal|"file14"
argument_list|)
decl_stmt|;
name|Path
name|file15_s2
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|,
name|modDirStr
operator|+
literal|"file15"
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion10
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file10_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion11
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file11_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion12
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file12_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion13
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file13_s1
argument_list|)
decl_stmt|;
name|INodeFile
name|file14Node
init|=
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file14_s2
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
decl_stmt|;
name|BlockInfo
index|[]
name|blocks_14
init|=
name|file14Node
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file15_s2
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
comment|// delete s2, in which process we need to combine the diff in s2 to s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|snapshotRoot
argument_list|,
name|dirNodeNum
operator|+
literal|12
operator|+
name|delta
argument_list|,
literal|14
operator|*
name|BLOCKSIZE
argument_list|)
expr_stmt|;
comment|// check the correctness of s1
name|FileStatus
name|statusAfterDeletion10
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file10_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion11
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file11_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion12
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file12_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion13
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file13_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion10
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion10
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion11
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion11
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion12
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion12
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion13
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion13
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file10_s1
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file11_s1
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file12_s1
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file13_s1
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
comment|// make sure file14 and file15 are not included in s1
name|Path
name|file14_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file14"
argument_list|)
decl_stmt|;
name|Path
name|file15_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file15"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file14_s1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file15_s1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockInfo
name|b
range|:
name|blocks_14
control|)
block|{
name|assertNull
argument_list|(
name|blockmanager
operator|.
name|getBlockCollection
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|INodeFile
name|nodeFile13
init|=
operator|(
name|INodeFile
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|file13
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|nodeFile13
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
name|TestSnapshotBlocksMap
operator|.
name|assertBlockCollection
argument_list|(
name|file13
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|fsdir
argument_list|,
name|blockmanager
argument_list|)
expr_stmt|;
name|INodeFile
name|nodeFile12
init|=
operator|(
name|INodeFile
operator|)
name|fsdir
operator|.
name|getINode
argument_list|(
name|file12_s1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|nodeFile12
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test deleting snapshots with modification on the metadata of directory */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteSnapshotWithDirModification ()
specifier|public
name|void
name|testDeleteSnapshotWithDirModification
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|sub
argument_list|,
literal|"user1"
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
comment|// create snapshot s1 for sub1, and change the metadata of sub1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|3
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|sub
argument_list|,
literal|"user2"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|3
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// create snapshot s2 for sub1, but do not modify sub1 afterwards
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|4
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// create snapshot s3 for sub1, and change the metadata of sub1
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|5
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|sub
argument_list|,
literal|"user3"
argument_list|,
literal|"group3"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|5
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// delete snapshot s3
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|4
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// check sub1's metadata in snapshot s2
name|FileStatus
name|statusOfS2
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
literal|"/s2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user2"
argument_list|,
name|statusOfS2
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group2"
argument_list|,
name|statusOfS2
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete snapshot s2
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|3
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// check sub1's metadata in snapshot s1
name|FileStatus
name|statusOfS1
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
literal|"/s1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user1"
argument_list|,
name|statusOfS1
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group1"
argument_list|,
name|statusOfS1
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * A test covering the case where the snapshot diff to be deleted is renamed     * to its previous snapshot.     */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRenameSnapshotDiff ()
specifier|public
name|void
name|testRenameSnapshotDiff
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setAllowNestedSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|subFile0
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subsubFile0
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subFile0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subsubFile0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|subsub
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
comment|// create snapshot s0 on sub
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|5
argument_list|,
name|BLOCKSIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
comment|// make some changes on both sub and subsub
specifier|final
name|Path
name|subFile1
init|=
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|subsubFile1
init|=
operator|new
name|Path
argument_list|(
name|subsub
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subFile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subsubFile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|8
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
comment|// create snapshot s1 on sub
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|sub
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|9
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
comment|// create snapshot s2 on dir
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|11
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|9
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
comment|// make changes on subsub and subsubFile1
name|hdfs
operator|.
name|setOwner
argument_list|(
name|subsub
argument_list|,
literal|"unknown"
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|subsubFile1
argument_list|,
name|REPLICATION_1
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|13
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|11
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
comment|// make changes on sub
name|hdfs
operator|.
name|delete
argument_list|(
name|subFile1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|16
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|15
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|13
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|Path
name|subsubSnapshotCopy
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|,
name|sub
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|subsub
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|subsubFile1SCopy
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|,
name|sub
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|subsub
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|subsubFile1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|subFile1SCopy
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|,
name|sub
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|subFile1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|subsubStatus
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubSnapshotCopy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"owner"
argument_list|,
name|subsubStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group"
argument_list|,
name|subsubStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|subsubFile1Status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubFile1SCopy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
argument_list|,
name|subsubFile1Status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|subFile1Status
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subFile1SCopy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|subFile1Status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete snapshot s2
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|14
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|dir
argument_list|,
literal|13
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
name|checkQuotaUsageComputation
argument_list|(
name|sub
argument_list|,
literal|12
argument_list|,
name|BLOCKSIZE
operator|*
literal|11
argument_list|)
expr_stmt|;
comment|// no snapshot copy for s2
try|try
block|{
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubSnapshotCopy
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist: "
operator|+
name|subsubSnapshotCopy
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubFile1SCopy
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist: "
operator|+
name|subsubFile1SCopy
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subFile1SCopy
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist: "
operator|+
name|subFile1SCopy
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// the snapshot copy of s2 should now be renamed to s1 under sub
name|subsubSnapshotCopy
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
literal|"s1"
argument_list|,
name|subsub
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|subsubFile1SCopy
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
literal|"s1"
argument_list|,
name|subsub
operator|.
name|getName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|subsubFile1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|subFile1SCopy
operator|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub
argument_list|,
literal|"s1"
argument_list|,
name|subFile1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|subsubStatus
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubSnapshotCopy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"owner"
argument_list|,
name|subsubStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group"
argument_list|,
name|subsubStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|subsubFile1Status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subsubFile1SCopy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
argument_list|,
name|subsubFile1Status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// also subFile1's snapshot copy should have been moved to diff of s1 as
comment|// combination
name|subFile1Status
operator|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|subFile1SCopy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION_1
argument_list|,
name|subFile1Status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

