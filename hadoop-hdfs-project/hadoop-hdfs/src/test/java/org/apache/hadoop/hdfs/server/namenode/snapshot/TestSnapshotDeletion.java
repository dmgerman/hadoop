begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Tests snapshot deletion.  */
end_comment

begin_class
DECL|class|TestSnapshotDeletion
specifier|public
class|class
name|TestSnapshotDeletion
block|{
DECL|field|seed
specifier|protected
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|protected
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|protected
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|SNAPSHOTNUMBER
specifier|public
specifier|static
specifier|final
name|int
name|SNAPSHOTNUMBER
init|=
literal|10
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|subsub1
specifier|private
specifier|final
name|Path
name|subsub1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"subsub1"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
specifier|protected
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
specifier|protected
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deleting snapshottable directory with snapshots must fail.    */
annotation|@
name|Test
DECL|method|testDeleteDirectoryWithSnapshot ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for sub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Deleting a snapshottable dir with snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
literal|"The direcotry "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be deleted since "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deleting directory with snapshottable descendant with snapshots must fail.    */
annotation|@
name|Test
DECL|method|testDeleteDirectoryWithSnapshot2 ()
specifier|public
name|void
name|testDeleteDirectoryWithSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|Path
name|subfile1
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|subfile2
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|subfile2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Allow snapshot for subsub1, and create snapshot for it
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|subsub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|subsub1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// Deleting dir while its descedant subsub1 having snapshots should fail
name|exception
operator|.
name|expect
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|error
init|=
literal|"The direcotry "
operator|+
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be deleted since "
operator|+
name|subsub1
operator|.
name|toString
argument_list|()
operator|+
literal|" is snapshottable and already has snapshots"
decl_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting the oldest (first) snapshot. We do not need to combine    * snapshot diffs in this simplest scenario.    */
annotation|@
name|Test
DECL|method|testDeleteOldestSnapshot ()
specifier|public
name|void
name|testDeleteOldestSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create files under sub1
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file0
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|String
name|snapshotName
init|=
literal|"s1"
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SnapshotException expected: "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|" is not snapshottable yet"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|sub1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// make sub1 snapshottable
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SnapshotException expected: snapshot "
operator|+
name|snapshotName
operator|+
literal|" does not exist for "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot delete snapshot "
operator|+
name|snapshotName
operator|+
literal|" from path "
operator|+
name|sub1
operator|.
name|toString
argument_list|()
operator|+
literal|": the snapshot does not exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// create snapshot s1 for sub1
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// delete s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// now we can create a snapshot with the same name
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|// create a new file under sub1
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|newFile
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create another snapshot s2
name|String
name|snapshotName2
init|=
literal|"s2"
decl_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName2
argument_list|)
expr_stmt|;
comment|// Get the filestatus of sub1 under snapshot s2
name|Path
name|ss
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|sub1
argument_list|,
name|snapshotName2
argument_list|,
literal|"newFile"
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|ss
argument_list|)
decl_stmt|;
comment|// delete s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|sub1
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|FileStatus
name|statusAfterDeletion
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting snapshots in a more complicated scenario: need to combine    * snapshot diffs, but no need to handle diffs distributed in a dir tree    */
annotation|@
name|Test
DECL|method|testDeleteSnapshot1 ()
specifier|public
name|void
name|testDeleteSnapshot1
parameter_list|()
throws|throws
name|Exception
block|{
name|testDeleteSnapshot
argument_list|(
name|sub1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting snapshots in more complicated scenarios (snapshot diffs are    * distributed in the directory sub-tree)    */
annotation|@
name|Test
DECL|method|testDeleteSnapshot2 ()
specifier|public
name|void
name|testDeleteSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
name|testDeleteSnapshot
argument_list|(
name|sub1
argument_list|,
literal|"subsub1/subsubsub1/"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test snapshot deletion    * @param snapshotRoot The dir where the snapshots are created    * @param modDirStr The snapshotRoot itself or one of its sub-directory,     *        where the modifications happen. It is represented as a relative     *        path to the snapshotRoot.    */
DECL|method|testDeleteSnapshot (Path snapshotRoot, String modDirStr)
specifier|private
name|void
name|testDeleteSnapshot
parameter_list|(
name|Path
name|snapshotRoot
parameter_list|,
name|String
name|modDirStr
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|modDir
init|=
name|modDirStr
operator|.
name|isEmpty
argument_list|()
condition|?
name|snapshotRoot
else|:
operator|new
name|Path
argument_list|(
name|snapshotRoot
argument_list|,
name|modDirStr
argument_list|)
decl_stmt|;
name|Path
name|file10
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file10"
argument_list|)
decl_stmt|;
name|Path
name|file11
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file11"
argument_list|)
decl_stmt|;
name|Path
name|file12
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file12"
argument_list|)
decl_stmt|;
name|Path
name|file13
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file13"
argument_list|)
decl_stmt|;
name|Path
name|file14
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file14"
argument_list|)
decl_stmt|;
name|Path
name|file15
init|=
operator|new
name|Path
argument_list|(
name|modDir
argument_list|,
literal|"file15"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file10
argument_list|,
name|BLOCKSIZE
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file12
argument_list|,
name|BLOCKSIZE
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file13
argument_list|,
name|BLOCKSIZE
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create snapshot s1 for snapshotRoot
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|snapshotRoot
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// delete file11
name|hdfs
operator|.
name|delete
argument_list|(
name|file11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file12
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file12
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// modify file13
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// create file14
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file14
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create file15
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file15
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// create snapshot s2 for snapshotRoot
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// create file11 again: (0, d) + (c, 0)
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// delete file12: (c, d) + (0, d)
name|hdfs
operator|.
name|delete
argument_list|(
name|file12
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file13: (c, d) + (c, d)
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete file14: (c, 0) + (0, d)
name|hdfs
operator|.
name|delete
argument_list|(
name|file14
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file15: (c, 0) + (c, d)
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file15
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// create snapshot s3 for snapshotRoot
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// modify file10, to check if the posterior diff was set correctly
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file10
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file10_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file10"
argument_list|)
decl_stmt|;
name|Path
name|file11_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file11"
argument_list|)
decl_stmt|;
name|Path
name|file12_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file12"
argument_list|)
decl_stmt|;
name|Path
name|file13_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file13"
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion10
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file10_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion11
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file11_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion12
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file12_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusBeforeDeletion13
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file13_s1
argument_list|)
decl_stmt|;
comment|// delete s2, in which process we need to combine the diff in s2 to s1
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// check the correctness of s1
name|FileStatus
name|statusAfterDeletion10
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file10_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion11
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file11_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion12
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file12_s1
argument_list|)
decl_stmt|;
name|FileStatus
name|statusAfterDeletion13
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file13_s1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion10
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion10
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion11
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion11
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion12
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion12
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusBeforeDeletion13
operator|.
name|toString
argument_list|()
argument_list|,
name|statusAfterDeletion13
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure file14 and file15 are not included in s1
name|Path
name|file14_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file14"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file14_s1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file15_s1
init|=
name|SnapshotTestHelper
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
literal|"s1"
argument_list|,
name|modDirStr
operator|+
literal|"file15"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hdfs
operator|.
name|exists
argument_list|(
name|file15_s1
argument_list|)
argument_list|)
expr_stmt|;
comment|// call INodeFileWithLink#getBlockReplication, check the correctness of the
comment|// circular list after snapshot deletion
name|INodeFile
name|nodeFile13
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|file13
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|file13
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|blockReplicationFile13
init|=
name|nodeFile13
operator|.
name|getBlockReplication
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|,
name|blockReplicationFile13
argument_list|)
expr_stmt|;
name|INodeFile
name|nodeFile12
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|file12_s1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|file12_s1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|blockReplicationFile12
init|=
name|nodeFile12
operator|.
name|getBlockReplication
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|,
name|blockReplicationFile12
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

