begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SYNCONCLOSE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MIN_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * This class tests various cases during file creation.  */
end_comment

begin_class
DECL|class|TestFileCreation
specifier|public
class|class
name|TestFileCreation
block|{
DECL|field|DIR
specifier|static
specifier|final
name|String
name|DIR
init|=
literal|"/"
operator|+
name|TestFileCreation
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|LeaseManager
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|FSNamesystem
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|DFSClient
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
block|}
DECL|field|RPC_DETAILED_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|RPC_DETAILED_METRICS
init|=
literal|"RpcDetailedActivityForPort"
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|8192
decl_stmt|;
DECL|field|numBlocks
specifier|static
specifier|final
name|int
name|numBlocks
init|=
literal|2
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
name|numBlocks
operator|*
name|blockSize
operator|+
literal|1
decl_stmt|;
DECL|field|simulatedStorage
name|boolean
name|simulatedStorage
init|=
literal|false
decl_stmt|;
DECL|field|NON_CANONICAL_PATHS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NON_CANONICAL_PATHS
init|=
operator|new
name|String
index|[]
block|{
literal|"//foo"
block|,
literal|"///foo2"
block|,
literal|"//dir//file"
block|,
literal|"////test2/file"
block|,
literal|"/dir/./file2"
block|,
literal|"/dir/../file3"
block|}
decl_stmt|;
comment|// creates a file but does not close it
DECL|method|createFile (FileSystem fileSys, Path name, int repl)
specifier|public
specifier|static
name|FSDataOutputStream
name|createFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"createFile: Created "
operator|+
name|name
operator|+
literal|" with "
operator|+
name|repl
operator|+
literal|" replica."
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
return|return
name|stm
return|;
block|}
DECL|method|create (DistributedFileSystem dfs, Path name, int repl)
specifier|public
specifier|static
name|HdfsDataOutputStream
name|create
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|HdfsDataOutputStream
operator|)
name|createFile
argument_list|(
name|dfs
argument_list|,
name|name
argument_list|,
name|repl
argument_list|)
return|;
block|}
comment|//
comment|// writes to file but does not close it
comment|//
DECL|method|writeFile (FSDataOutputStream stm)
specifier|static
name|void
name|writeFile
parameter_list|(
name|FSDataOutputStream
name|stm
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFile
argument_list|(
name|stm
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// writes specified bytes to file.
comment|//
DECL|method|writeFile (FSDataOutputStream stm, int size)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|FSDataOutputStream
name|stm
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that server default values can be retrieved on the client side    */
annotation|@
name|Test
DECL|method|testServerDefaults ()
specifier|public
name|void
name|testServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|DFS_REPLICATION_DEFAULT
operator|+
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|FsServerDefaults
name|serverDefaults
init|=
name|fs
operator|.
name|getServerDefaults
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|,
name|serverDefaults
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|,
name|serverDefaults
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|,
name|serverDefaults
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_REPLICATION_DEFAULT
operator|+
literal|1
argument_list|,
name|serverDefaults
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|,
name|serverDefaults
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|serverDefaults
operator|.
name|getDefaultStoragePolicyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileCreation ()
specifier|public
name|void
name|testFileCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|checkFileCreation
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Same test but the client should use DN hostnames */
annotation|@
name|Test
DECL|method|testFileCreationUsingHostname ()
specifier|public
name|void
name|testFileCreationUsingHostname
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
argument_list|)
expr_stmt|;
name|checkFileCreation
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Same test but the client should bind to a local interface */
annotation|@
name|Test
DECL|method|testFileCreationSetLocalInterface ()
specifier|public
name|void
name|testFileCreationSetLocalInterface
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The mini cluster listens on the loopback so we can use it here
name|checkFileCreation
argument_list|(
literal|"lo"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|checkFileCreation
argument_list|(
literal|"bogus-interface"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Able to specify a bogus interface"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No such interface bogus-interface"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test if file creation and disk space consumption works right    * @param netIf the local interface, if any, clients should use to access DNs    * @param useDnHostname whether the client should contact DNs by hostname    */
DECL|method|checkFileCreation (String netIf, boolean useDnHostname)
specifier|public
name|void
name|checkFileCreation
parameter_list|(
name|String
name|netIf
parameter_list|,
name|boolean
name|useDnHostname
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|netIf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_LOCAL_INTERFACES
argument_list|,
name|netIf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME
argument_list|,
name|useDnHostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDnHostname
condition|)
block|{
comment|// Since the mini cluster only listens on the loopback we have to
comment|// ensure the hostname used to access DNs maps to the loopback. We
comment|// do this by telling the DN to advertise localhost as its hostname
comment|// instead of the default hostname.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HOST_NAME_KEY
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|checkDataNodeHostConfig
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|//
comment|// check that / exists
comment|//
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path : \""
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"/ should be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// Create a directory inside /, then try to overwrite it
comment|//
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/test_dir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"createFile: Creating "
operator|+
name|dir1
operator|.
name|getName
argument_list|()
operator|+
literal|" for overwrite of existing directory."
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create path, overwrite=true
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not prevent directory from being overwritten."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|//
comment|// create a new file in home directory. Do not close it.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"filestatus.dat"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|file1
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|file1
operator|.
name|getParent
argument_list|()
argument_list|,
literal|100L
argument_list|,
name|blockSize
operator|*
literal|5
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// verify that file exists in FS namespace
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" should be a file"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path : \""
operator|+
name|file1
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|// write to file
name|writeFile
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that file size has changed to the full size
name|long
name|len
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" should be of size "
operator|+
name|fileSize
operator|+
literal|" but found to be of size "
operator|+
name|len
argument_list|,
name|len
operator|==
name|fileSize
argument_list|)
expr_stmt|;
comment|// verify the disk space the file occupied
name|long
name|diskSpace
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|file1
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|file1
operator|+
literal|" should take "
operator|+
name|fileSize
operator|+
literal|" bytes disk space "
operator|+
literal|"but found to take "
operator|+
name|diskSpace
operator|+
literal|" bytes"
argument_list|,
name|fileSize
argument_list|,
name|diskSpace
argument_list|)
expr_stmt|;
comment|// Check storage usage
comment|// can't check capacities for real storage since the OS file system may be changing under us.
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataset
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|dataset
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimulatedFSDataset
operator|.
name|DEFAULT_CAPACITY
operator|-
name|fileSize
argument_list|,
name|dataset
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test deleteOnExit    */
annotation|@
name|Test
DECL|method|testDeleteOnExit ()
specifier|public
name|void
name|testDeleteOnExit
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Creates files in HDFS and local file system.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"filestatus.dat"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"filestatus2.dat"
argument_list|)
decl_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"filestatus3.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm1
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm2
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm3
init|=
name|createFile
argument_list|(
name|localfs
argument_list|,
name|file3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DeleteOnExit: Created files."
argument_list|)
expr_stmt|;
comment|// write to files and close. Purposely, do not close file2.
name|writeFile
argument_list|(
name|stm1
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|stm3
argument_list|)
expr_stmt|;
name|stm1
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm2
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm3
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set delete on exit flag on files.
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|localfs
operator|.
name|deleteOnExit
argument_list|(
name|file3
argument_list|)
expr_stmt|;
comment|// close the file system. This should make the above files
comment|// disappear.
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|localfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|localfs
operator|=
literal|null
expr_stmt|;
comment|// reopen file system and verify that file does not exist.
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|localfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" still exists inspite of deletOnExit set."
argument_list|,
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file2
operator|+
literal|" still exists inspite of deletOnExit set."
argument_list|,
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file3
operator|+
literal|" still exists inspite of deletOnExit set."
argument_list|,
operator|!
name|localfs
operator|.
name|exists
argument_list|(
name|file3
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DeleteOnExit successful."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|localfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that a file which is open for write is overwritten by another    * client. Regression test for HDFS-3755.    */
annotation|@
name|Test
DECL|method|testOverwriteOpenForWrite ()
specifier|public
name|void
name|testOverwriteOpenForWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|otherUgi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"testuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|otherUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|metricsName
init|=
name|RPC_DETAILED_METRICS
operator|+
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm1
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|stm1
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"CreateNumOps"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|metricsName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file again without overwrite
try|try
block|{
name|fs2
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|abce
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Failed to CREATE_FILE"
argument_list|,
name|abce
argument_list|)
expr_stmt|;
block|}
name|assertCounter
argument_list|(
literal|"AlreadyBeingCreatedExceptionNumOps"
argument_list|,
literal|1L
argument_list|,
name|getMetrics
argument_list|(
name|metricsName
argument_list|)
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm2
init|=
name|fs2
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|stm2
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|stm2
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|stm1
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have exception closing stm1 since it was deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"File does not exist"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that file data does not become corrupted even in the face of errors.    */
annotation|@
name|Test
DECL|method|testFileCreationError1 ()
specifier|public
name|void
name|testFileCreationError1
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create a new file.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// verify that file exists in FS namespace
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" should be a file"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path : \""
operator|+
name|file1
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|// kill the datanode
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
comment|// wait for the datanode to be declared dead
while|while
condition|(
literal|true
condition|)
block|{
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|HdfsConstants
operator|.
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError1: waiting for datanode "
operator|+
literal|" to die."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
comment|// write 1 byte to file.
comment|// This should fail because all datanodes are dead.
name|byte
index|[]
name|buffer
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Encountered expected exception"
argument_list|)
expr_stmt|;
block|}
comment|// verify that no blocks are associated with this file
comment|// bad block allocations were cleaned up earlier.
name|LocatedBlocks
name|locations
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"locations = "
operator|+
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error blocks were not cleaned up"
argument_list|,
name|locations
operator|.
name|locatedBlockCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that the filesystem removes the last block from a file if its    * lease expires.    */
annotation|@
name|Test
DECL|method|testFileCreationError2 ()
specifier|public
name|void
name|testFileCreationError2
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|leasePeriod
init|=
literal|1000
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2 start"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|dfs
decl_stmt|;
comment|// create a new file.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus.dat"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2: "
operator|+
literal|"Created file filestatus.dat with one replicas."
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locations
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2: "
operator|+
literal|"The file has "
operator|+
name|locations
operator|.
name|locatedBlockCount
argument_list|()
operator|+
literal|" blocks."
argument_list|)
expr_stmt|;
comment|// add one block to the file
name|LocatedBlock
name|location
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|addBlock
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
name|client
operator|.
name|clientName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2: "
operator|+
literal|"Added block "
operator|+
name|location
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|locations
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|locations
operator|.
name|locatedBlockCount
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2: "
operator|+
literal|"The file now has "
operator|+
name|count
operator|+
literal|" blocks."
argument_list|)
expr_stmt|;
comment|// set the soft and hard limit to be 1 second so that the
comment|// namenode triggers lease recovery
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|leasePeriod
argument_list|,
name|leasePeriod
argument_list|)
expr_stmt|;
comment|// wait for the lease to expire
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
name|leasePeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
comment|// verify that the last block was synchronized.
name|locations
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2: "
operator|+
literal|"locations = "
operator|+
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError2 successful"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** test addBlock(..) when replication<min and excludeNodes==null. */
annotation|@
name|Test
DECL|method|testFileCreationError3 ()
specifier|public
name|void
name|testFileCreationError3
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError3 start"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|dfs
decl_stmt|;
comment|// create a new file.
specifier|final
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/foo.txt"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|addBlock
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|client
operator|.
name|clientName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD!"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationError3 successful"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that file leases are persisted across namenode restarts.    */
annotation|@
name|Test
DECL|method|testFileCreationNamenodeRestart ()
specifier|public
name|void
name|testFileCreationNamenodeRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_IDLE_TIME
init|=
literal|2000
decl_stmt|;
comment|// 2s
name|conf
operator|.
name|setInt
argument_list|(
literal|"ipc.client.connection.maxidletime"
argument_list|,
name|MAX_IDLE_TIME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
specifier|final
name|int
name|nnport
init|=
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
comment|// create a new file.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus.dat"
argument_list|)
decl_stmt|;
name|HdfsDataOutputStream
name|stm
init|=
name|create
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Created file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file1
operator|+
literal|" should be replicated to 1 datanode."
argument_list|,
literal|1
argument_list|,
name|stm
operator|.
name|getCurrentBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// write two full blocks.
name|writeFile
argument_list|(
name|stm
argument_list|,
name|numBlocks
operator|*
name|blockSize
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|file1
operator|+
literal|" should still be replicated to 1 datanode."
argument_list|,
literal|1
argument_list|,
name|stm
operator|.
name|getCurrentBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename file wile keeping it open.
name|Path
name|fileRenamed
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatusRenamed.dat"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|fileRenamed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Renamed file "
operator|+
name|file1
operator|+
literal|" to "
operator|+
name|fileRenamed
argument_list|)
expr_stmt|;
name|file1
operator|=
name|fileRenamed
expr_stmt|;
comment|// create another new file.
comment|//
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"/filestatus2.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm2
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Created file "
operator|+
name|file2
argument_list|)
expr_stmt|;
comment|// create yet another new file with full path name.
comment|// rename it while open
comment|//
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
literal|"/user/home/fullpath.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm3
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Created file "
operator|+
name|file3
argument_list|)
expr_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
literal|"/user/home/fullpath4.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm4
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Created file "
operator|+
name|file4
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bin"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/home"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bin"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file3new
init|=
operator|new
name|Path
argument_list|(
literal|"/bin/home/fullpath.dat"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Renamed file "
operator|+
name|file3
operator|+
literal|" to "
operator|+
name|file3new
argument_list|)
expr_stmt|;
name|Path
name|file4new
init|=
operator|new
name|Path
argument_list|(
literal|"/bin/home/fullpath4.dat"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFileCreationNamenodeRestart: "
operator|+
literal|"Renamed file "
operator|+
name|file4
operator|+
literal|" to "
operator|+
name|file4new
argument_list|)
expr_stmt|;
comment|// restart cluster with the same namenode port as before.
comment|// This ensures that leases are persisted in fsimage.
name|cluster
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|MAX_IDLE_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|nnport
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// restart cluster yet again. This triggers the code to read in
comment|// persistent leases from fsimage.
name|cluster
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|nnport
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// instruct the dfsclient to use a new filename when it requests
comment|// new blocks for files that were renamed.
name|DFSOutputStream
name|dfstream
init|=
call|(
name|DFSOutputStream
call|)
argument_list|(
name|stm
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|DFSOutputStream
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|dfstream
argument_list|,
name|file1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dfstream
operator|=
call|(
name|DFSOutputStream
call|)
argument_list|(
name|stm3
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|dfstream
argument_list|,
name|file3new
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dfstream
operator|=
call|(
name|DFSOutputStream
call|)
argument_list|(
name|stm4
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|dfstream
argument_list|,
name|file4new
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// write 1 byte to file.  This should succeed because the
comment|// namenode should have persisted leases.
name|byte
index|[]
name|buffer
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm2
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm2
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm3
operator|.
name|close
argument_list|()
expr_stmt|;
name|stm4
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that new block is associated with this file
name|DFSClient
name|client
init|=
name|fs
operator|.
name|dfs
decl_stmt|;
name|LocatedBlocks
name|locations
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"locations = "
operator|+
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error blocks were not cleaned up for file "
operator|+
name|file1
argument_list|,
name|locations
operator|.
name|locatedBlockCount
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// verify filestatus2.dat
name|locations
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file2
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"locations = "
operator|+
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error blocks were not cleaned up for file "
operator|+
name|file2
argument_list|,
name|locations
operator|.
name|locatedBlockCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that all open files are closed when client dies abnormally.    */
annotation|@
name|Test
DECL|method|testDFSClientDeath ()
specifier|public
name|void
name|testDFSClientDeath
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing adbornal client death."
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|DFSClient
name|dfsclient
init|=
name|dfs
operator|.
name|dfs
decl_stmt|;
try|try
block|{
comment|// create a new file in home directory. Do not close it.
comment|//
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/clienttest.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file clienttest.dat"
argument_list|)
expr_stmt|;
comment|// write to file
name|writeFile
argument_list|(
name|stm
argument_list|)
expr_stmt|;
comment|// close the dfsclient before closing the output stream.
comment|// This should close all existing file.
name|dfsclient
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// reopen file system and verify that file exists.
name|assertTrue
argument_list|(
name|file1
operator|+
literal|" does not exist."
argument_list|,
name|AppendTestUtil
operator|.
name|createHdfsWithDifferentUsername
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test file creation using createNonRecursive().    */
annotation|@
name|Test
DECL|method|testFileCreationNonRecursive ()
specifier|public
name|void
name|testFileCreationNonRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|testFileCreationNonRecursive
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Worker method for testing non-recursive. Extracted to allow other
comment|// FileSystem implementations to re-use the tests
DECL|method|testFileCreationNonRecursive (FileSystem fs)
specifier|public
specifier|static
name|void
name|testFileCreationNonRecursive
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|"-testFileCreationNonRecursive"
argument_list|)
decl_stmt|;
name|IOException
name|expectedException
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|nonExistDir
init|=
literal|"/non-exist-"
operator|+
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|nonExistDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
decl_stmt|;
comment|// Create a new file in root dir, should succeed
name|assertNull
argument_list|(
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|1
argument_list|,
name|createFlag
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file when parent dir exists as file, should fail
name|expectedException
operator|=
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"Create"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|createFlag
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Create a file when parent directory exists as a file"
operator|+
literal|" should throw ParentNotDirectoryException "
argument_list|,
name|expectedException
operator|!=
literal|null
operator|&&
name|expectedException
operator|instanceof
name|ParentNotDirectoryException
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create a file in a non-exist directory, should fail
specifier|final
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|nonExistDir
operator|+
literal|"/testCreateNonRecursive"
argument_list|)
decl_stmt|;
name|expectedException
operator|=
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
name|path2
argument_list|,
literal|1
argument_list|,
name|createFlag
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Create a file in a non-exist dir using"
operator|+
literal|" createNonRecursive() should throw FileNotFoundException "
argument_list|,
name|expectedException
operator|!=
literal|null
operator|&&
name|expectedException
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|overwriteFlag
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
comment|// Overwrite a file in root dir, should succeed
name|assertNull
argument_list|(
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|1
argument_list|,
name|overwriteFlag
argument_list|)
argument_list|)
expr_stmt|;
comment|// Overwrite a file when parent dir exists as file, should fail
name|expectedException
operator|=
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"Overwrite"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|overwriteFlag
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Overwrite a file when parent directory exists as a file"
operator|+
literal|" should throw ParentNotDirectoryException "
argument_list|,
name|expectedException
operator|!=
literal|null
operator|&&
name|expectedException
operator|instanceof
name|ParentNotDirectoryException
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Overwrite a file in a non-exist directory, should fail
specifier|final
name|Path
name|path3
init|=
operator|new
name|Path
argument_list|(
name|nonExistDir
operator|+
literal|"/testOverwriteNonRecursive"
argument_list|)
decl_stmt|;
name|expectedException
operator|=
name|createNonRecursive
argument_list|(
name|fs
argument_list|,
name|path3
argument_list|,
literal|1
argument_list|,
name|overwriteFlag
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Overwrite a file in a non-exist dir using"
operator|+
literal|" createNonRecursive() should throw FileNotFoundException "
argument_list|,
name|expectedException
operator|!=
literal|null
operator|&&
name|expectedException
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
comment|// Attempts to create and close a file using FileSystem.createNonRecursive(),
comment|// catching and returning an exception if one occurs or null
comment|// if the operation is successful.
DECL|method|createNonRecursive (FileSystem fs, Path name, int repl, EnumSet<CreateFlag> flag)
specifier|static
name|IOException
name|createNonRecursive
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"createNonRecursive: Attempting to create "
operator|+
name|name
operator|+
literal|" with "
operator|+
name|repl
operator|+
literal|" replica."
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|createNonRecursive
argument_list|(
name|name
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|flag
argument_list|,
name|bufferSize
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Test that file data becomes available before file is closed.   */
annotation|@
name|Test
DECL|method|testFileCreationSimulated ()
specifier|public
name|void
name|testFileCreationSimulated
parameter_list|()
throws|throws
name|IOException
block|{
name|simulatedStorage
operator|=
literal|true
expr_stmt|;
name|testFileCreation
argument_list|()
expr_stmt|;
name|simulatedStorage
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Test creating two files at the same time.     */
annotation|@
name|Test
DECL|method|testConcurrentFileCreation ()
specifier|public
name|void
name|testConcurrentFileCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
index|[]
name|p
init|=
block|{
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
block|}
decl_stmt|;
comment|//write 2 files at the same time
name|FSDataOutputStream
index|[]
name|out
init|=
block|{
name|fs
operator|.
name|create
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
block|,
name|fs
operator|.
name|create
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
literal|0
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
literal|1
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
index|[
literal|1
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//verify
name|FSDataInputStream
index|[]
name|in
init|=
block|{
name|fs
operator|.
name|open
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
block|,
name|fs
operator|.
name|open
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
index|[
literal|0
index|]
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
index|[
literal|1
index|]
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test creating a file whose data gets sync when closed    */
annotation|@
name|Test
DECL|method|testFileCreationSyncOnClose ()
specifier|public
name|void
name|testFileCreationSyncOnClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_DATANODE_SYNCONCLOSE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
index|[]
name|p
init|=
block|{
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
block|}
decl_stmt|;
comment|//write 2 files at the same time
name|FSDataOutputStream
index|[]
name|out
init|=
block|{
name|fs
operator|.
name|create
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
block|,
name|fs
operator|.
name|create
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
literal|0
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
index|[
literal|1
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
literal|1
index|]
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|out
index|[
literal|1
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//verify
name|FSDataInputStream
index|[]
name|in
init|=
block|{
name|fs
operator|.
name|open
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
block|,
name|fs
operator|.
name|open
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
index|[
literal|0
index|]
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
index|[
literal|1
index|]
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a file, write something, hflush but not close.    * Then change lease period and wait for lease recovery.    * Finally, read the block directly from each Datanode and verify the content.    */
annotation|@
name|Test
DECL|method|testLeaseExpireHardLimit ()
specifier|public
name|void
name|testLeaseExpireHardLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLeaseExpireHardLimit start"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|leasePeriod
init|=
literal|1000
decl_stmt|;
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create a new file.
specifier|final
name|String
name|f
init|=
name|DIR
operator|+
literal|"foo"
decl_stmt|;
specifier|final
name|Path
name|fpath
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|HdfsDataOutputStream
name|out
init|=
name|create
argument_list|(
name|dfs
argument_list|,
name|fpath
argument_list|,
name|DATANODE_NUM
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"something"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|int
name|actualRepl
init|=
name|out
operator|.
name|getCurrentBlockReplication
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|+
literal|" should be replicated to "
operator|+
name|DATANODE_NUM
operator|+
literal|" datanodes."
argument_list|,
name|actualRepl
operator|==
name|DATANODE_NUM
argument_list|)
expr_stmt|;
comment|// set the soft and hard limit to be 1 second so that the
comment|// namenode triggers lease recovery
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|leasePeriod
argument_list|,
name|leasePeriod
argument_list|)
expr_stmt|;
comment|// wait for the lease to expire
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
name|leasePeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|LocatedBlocks
name|locations
init|=
name|dfs
operator|.
name|dfs
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|f
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|locatedblock
init|=
name|locations
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|successcount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeinfo
range|:
name|locatedblock
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|DataNode
name|datanode
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|datanodeinfo
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|blk
init|=
name|locatedblock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|datanode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getBlockInputStream
argument_list|(
name|blk
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"something"
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|successcount
operator|++
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"successcount="
operator|+
name|successcount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|successcount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLeaseExpireHardLimit successful"
argument_list|)
expr_stmt|;
block|}
comment|// test closing file system before all file handles are closed.
annotation|@
name|Test
DECL|method|testFsClose ()
specifier|public
name|void
name|testFsClose
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test file system close start"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create a new file.
specifier|final
name|String
name|f
init|=
name|DIR
operator|+
literal|"foofs"
decl_stmt|;
specifier|final
name|Path
name|fpath
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|TestFileCreation
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|fpath
argument_list|,
name|DATANODE_NUM
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"something"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// close file system without closing file
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFsClose successful"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test closing file after cluster is shutdown
annotation|@
name|Test
DECL|method|testFsCloseAfterClusterShutdown ()
specifier|public
name|void
name|testFsCloseAfterClusterShutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test testFsCloseAfterClusterShutdown start"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|DATANODE_NUM
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_REPLICATION_MIN_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"ipc.client.ping"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// hdfs timeout is default 60 seconds
name|conf
operator|.
name|setInt
argument_list|(
literal|"ipc.ping.interval"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// hdfs timeout is now 10 second
comment|// create cluster
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|DATANODE_NUM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// create a new file.
specifier|final
name|String
name|f
init|=
name|DIR
operator|+
literal|"testFsCloseAfterClusterShutdown"
decl_stmt|;
specifier|final
name|Path
name|fpath
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|TestFileCreation
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|fpath
argument_list|,
name|DATANODE_NUM
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"something_test"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// ensure that block is allocated
comment|// shutdown last datanode in pipeline.
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// close file. Since we have set the minReplcatio to 3 but have killed one
comment|// of the three datanodes, the close call will loop until the hdfsTimeout is
comment|// encountered.
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFsCloseAfterClusterShutdown: Error here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|hasException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to close file after cluster shutdown"
argument_list|,
name|hasException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFsCloseAfterClusterShutdown successful"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Regression test for HDFS-3626. Creates a file using a non-canonical path    * (i.e. with extra slashes between components) and makes sure that the NN    * can properly restart.    *     * This test RPCs directly to the NN, to ensure that even an old client    * which passes an invalid path won't cause corrupt edits.    */
annotation|@
name|Test
DECL|method|testCreateNonCanonicalPathAndRestartRpc ()
specifier|public
name|void
name|testCreateNonCanonicalPathAndRestartRpc
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTest
argument_list|(
name|CreationMethod
operator|.
name|DIRECT_NN_RPC
argument_list|)
expr_stmt|;
block|}
comment|/**    * Another regression test for HDFS-3626. This one creates files using    * a Path instantiated from a string object.    */
annotation|@
name|Test
DECL|method|testCreateNonCanonicalPathAndRestartFromString ()
specifier|public
name|void
name|testCreateNonCanonicalPathAndRestartFromString
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTest
argument_list|(
name|CreationMethod
operator|.
name|PATH_FROM_STRING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Another regression test for HDFS-3626. This one creates files using    * a Path instantiated from a URI object.    */
annotation|@
name|Test
DECL|method|testCreateNonCanonicalPathAndRestartFromUri ()
specifier|public
name|void
name|testCreateNonCanonicalPathAndRestartFromUri
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTest
argument_list|(
name|CreationMethod
operator|.
name|PATH_FROM_URI
argument_list|)
expr_stmt|;
block|}
DECL|enum|CreationMethod
specifier|private
enum|enum
name|CreationMethod
block|{
DECL|enumConstant|DIRECT_NN_RPC
name|DIRECT_NN_RPC
block|,
DECL|enumConstant|PATH_FROM_URI
name|PATH_FROM_URI
block|,
DECL|enumConstant|PATH_FROM_STRING
name|PATH_FROM_STRING
block|}
empty_stmt|;
DECL|method|doCreateTest (CreationMethod method)
specifier|private
name|void
name|doCreateTest
parameter_list|(
name|CreationMethod
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|nnrpc
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pathStr
range|:
name|NON_CANONICAL_PATHS
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|pathStr
operator|+
literal|" by "
operator|+
name|method
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|DIRECT_NN_RPC
case|:
try|try
block|{
name|nnrpc
operator|.
name|create
argument_list|(
name|pathStr
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|,
literal|"client"
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception when creating '"
operator|+
name|pathStr
operator|+
literal|"'"
operator|+
literal|" by "
operator|+
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|ipe
parameter_list|)
block|{
comment|// When we create by direct NN RPC, the NN just rejects the
comment|// non-canonical paths, rather than trying to normalize them.
comment|// So, we expect all of them to fail.
block|}
break|break;
case|case
name|PATH_FROM_URI
case|:
case|case
name|PATH_FROM_STRING
case|:
comment|// Unlike the above direct-to-NN case, we expect these to succeed,
comment|// since the Path constructor should normalize the path.
name|Path
name|p
decl_stmt|;
if|if
condition|(
name|method
operator|==
name|CreationMethod
operator|.
name|PATH_FROM_URI
condition|)
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|+
name|pathStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|+
name|pathStr
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test complete(..) - verifies that the fileId in the request    * matches that of the Inode.    * This test checks that FileNotFoundException exception is thrown in case    * the fileId does not match.    */
annotation|@
name|Test
DECL|method|testFileIdMismatch ()
specifier|public
name|void
name|testFileIdMismatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|dfs
decl_stmt|;
specifier|final
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/testFileIdMismatch.txt"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dfs
argument_list|,
name|f
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|long
name|someOtherFileId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|complete
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|client
operator|.
name|clientName
argument_list|,
literal|null
argument_list|,
name|someOtherFileId
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|FileSystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught Expected FileNotFoundException: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * 1. Check the blocks of old file are cleaned after creating with overwrite    * 2. Restart NN, check the file    * 3. Save new checkpoint and restart NN, check the file    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileCreationWithOverwrite ()
specifier|public
name|void
name|testFileCreationWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|file
init|=
literal|"/foo/dir/file"
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Case 1: Create file with overwrite, check the blocks of old file
comment|// are cleaned after creating with overwrite
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|nn
argument_list|)
decl_stmt|;
name|BlockManager
name|bm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|oldData
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|oldData
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LocatedBlocks
name|oldBlocks
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|nn
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|assertBlocks
argument_list|(
name|bm
argument_list|,
name|oldBlocks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newData
init|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|newData
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dfs
operator|.
name|deleteOnExit
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|newBlocks
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|nn
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|assertBlocks
argument_list|(
name|bm
argument_list|,
name|newBlocks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBlocks
argument_list|(
name|bm
argument_list|,
name|oldBlocks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|newData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Case 2: Restart NN, check the file
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|in
operator|=
name|dfs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|newData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Case 3: Save new checkpoint and restart NN, check the file
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
name|in
operator|=
name|dfs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|newData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertBlocks (BlockManager bm, LocatedBlocks lbs, boolean exist)
specifier|private
name|void
name|assertBlocks
parameter_list|(
name|BlockManager
name|bm
parameter_list|,
name|LocatedBlocks
name|lbs
parameter_list|,
name|boolean
name|exist
parameter_list|)
block|{
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
if|if
condition|(
name|exist
condition|)
block|{
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readAll (FSDataInputStream in)
specifier|private
name|byte
index|[]
name|readAll
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

