begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ClusterConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
operator|.
name|ConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|GreedyPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|MoveStep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|NodePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|NO_PLAN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|PLAN_DONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestDiskBalancerWithMockMover
specifier|public
class|class
name|TestDiskBalancerWithMockMover
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDiskBalancerWithMockMover
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|sourceName
name|String
name|sourceName
decl_stmt|;
DECL|field|destName
name|String
name|destName
decl_stmt|;
DECL|field|sourceUUID
name|String
name|sourceUUID
decl_stmt|;
DECL|field|destUUID
name|String
name|destUUID
decl_stmt|;
DECL|field|nodeID
name|String
name|nodeID
decl_stmt|;
DECL|field|dataNode
name|DataNode
name|dataNode
decl_stmt|;
comment|/**    * Checks that we return the right error if diskbalancer is not enabled.    */
annotation|@
name|Test
DECL|method|testDiskBalancerDisabled ()
specifier|public
name|void
name|testDiskBalancerDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|restartDataNode
argument_list|()
expr_stmt|;
name|TestMover
name|blockMover
init|=
operator|new
name|TestMover
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
operator|new
name|DiskBalancerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setMover
argument_list|(
name|blockMover
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|DISK_BALANCER_NOT_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|queryWorkStatus
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks that Enable flag works correctly.    *    * @throws DiskBalancerException    */
annotation|@
name|Test
DECL|method|testDiskBalancerEnabled ()
specifier|public
name|void
name|testDiskBalancerEnabled
parameter_list|()
throws|throws
name|DiskBalancerException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestMover
name|blockMover
init|=
operator|new
name|TestMover
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
operator|new
name|DiskBalancerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setMover
argument_list|(
name|blockMover
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiskBalancerWorkStatus
name|status
init|=
name|balancer
operator|.
name|queryWorkStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NO_PLAN
argument_list|,
name|status
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSubmitPlan (NodePlan plan, DiskBalancer balancer, int version)
specifier|private
name|void
name|executeSubmitPlan
parameter_list|(
name|NodePlan
name|plan
parameter_list|,
name|DiskBalancer
name|balancer
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|sha512Hex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|submitPlan
argument_list|(
name|planID
argument_list|,
name|version
argument_list|,
name|planJson
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSubmitPlan (NodePlan plan, DiskBalancer balancer)
specifier|private
name|void
name|executeSubmitPlan
parameter_list|(
name|NodePlan
name|plan
parameter_list|,
name|DiskBalancer
name|balancer
parameter_list|)
throws|throws
name|IOException
block|{
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a second submit plan fails.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testResubmitDiskBalancerPlan ()
specifier|public
name|void
name|testResubmitDiskBalancerPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
comment|// ask block mover to get stuck in copy block
name|mockMoverHelper
operator|.
name|getBlockMover
argument_list|()
operator|.
name|setSleep
argument_list|()
expr_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|PLAN_ALREADY_IN_PROGRESS
argument_list|)
argument_list|)
expr_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
comment|// Not needed but this is the cleanup step.
name|mockMoverHelper
operator|.
name|getBlockMover
argument_list|()
operator|.
name|clearSleep
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitDiskBalancerPlan ()
specifier|public
name|void
name|testSubmitDiskBalancerPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|balancer
operator|.
name|queryWorkStatus
argument_list|()
operator|.
name|getResult
argument_list|()
operator|!=
name|PLAN_DONE
operator|)
operator|&&
operator|(
name|counter
operator|<
literal|3
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
comment|// Asserts that submit plan caused an execution in the background.
name|assertTrue
argument_list|(
name|mockMoverHelper
operator|.
name|getBlockMover
argument_list|()
operator|.
name|getRunCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitWithOlderPlan ()
specifier|public
name|void
name|testSubmitWithOlderPlan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|MILLISECOND_IN_AN_HOUR
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60L
decl_stmt|;
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
name|plan
operator|.
name|setTimeStamp
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|-
operator|(
literal|32
operator|*
name|MILLISECOND_IN_AN_HOUR
operator|)
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|OLD_PLAN_SUBMITTED
argument_list|)
argument_list|)
expr_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitWithOldInvalidVersion ()
specifier|public
name|void
name|testSubmitWithOldInvalidVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|INVALID_PLAN_VERSION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Plan version is invalid -- there is no version 0.
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitWithNullPlan ()
specifier|public
name|void
name|testSubmitWithNullPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|sha512Hex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|INVALID_PLAN
argument_list|)
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|submitPlan
argument_list|(
name|planID
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitWithInvalidHash ()
specifier|public
name|void
name|testSubmitWithInvalidHash
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|sha512Hex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
name|char
name|repChar
init|=
name|planID
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|repChar
operator|++
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|INVALID_PLAN_HASH
argument_list|)
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|submitPlan
argument_list|(
name|planID
operator|.
name|replace
argument_list|(
name|planID
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|repChar
argument_list|)
argument_list|,
literal|1
argument_list|,
name|planJson
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Cancel Plan.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCancelDiskBalancerPlan ()
specifier|public
name|void
name|testCancelDiskBalancerPlan
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMoverHelper
name|mockMoverHelper
init|=
operator|new
name|MockMoverHelper
argument_list|()
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
name|mockMoverHelper
operator|.
name|getPlan
argument_list|()
decl_stmt|;
name|DiskBalancer
name|balancer
init|=
name|mockMoverHelper
operator|.
name|getBalancer
argument_list|()
decl_stmt|;
comment|// ask block mover to delay execution
name|mockMoverHelper
operator|.
name|getBlockMover
argument_list|()
operator|.
name|setSleep
argument_list|()
expr_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
name|String
name|planJson
init|=
name|plan
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|String
name|planID
init|=
name|DigestUtils
operator|.
name|sha512Hex
argument_list|(
name|planJson
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|cancelPlan
argument_list|(
name|planID
argument_list|)
expr_stmt|;
name|DiskBalancerWorkStatus
name|status
init|=
name|balancer
operator|.
name|queryWorkStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|PLAN_CANCELLED
argument_list|,
name|status
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|executeSubmitPlan
argument_list|(
name|plan
argument_list|,
name|balancer
argument_list|)
expr_stmt|;
comment|// Send a Wrong cancellation request.
name|char
name|first
init|=
name|planID
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|first
operator|++
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|DiskBalancerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
operator|new
name|DiskBalancerResultVerifier
argument_list|(
name|DiskBalancerException
operator|.
name|Result
operator|.
name|NO_SUCH_PLAN
argument_list|)
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|cancelPlan
argument_list|(
name|planID
operator|.
name|replace
argument_list|(
name|planID
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|first
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now cancel the real one
name|balancer
operator|.
name|cancelPlan
argument_list|(
name|planID
argument_list|)
expr_stmt|;
name|mockMoverHelper
operator|.
name|getBlockMover
argument_list|()
operator|.
name|clearSleep
argument_list|()
expr_stmt|;
comment|// unblock mover.
name|status
operator|=
name|balancer
operator|.
name|queryWorkStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|DiskBalancerWorkStatus
operator|.
name|Result
operator|.
name|PLAN_CANCELLED
argument_list|,
name|status
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_STORAGES_PER_DN
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|NUM_STORAGES_PER_DN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dataNode
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|references
init|=
name|dataNode
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
decl_stmt|;
name|nodeID
operator|=
name|dataNode
operator|.
name|getDatanodeUuid
argument_list|()
expr_stmt|;
name|sourceName
operator|=
name|references
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBasePath
argument_list|()
expr_stmt|;
name|destName
operator|=
name|references
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBasePath
argument_list|()
expr_stmt|;
name|sourceUUID
operator|=
name|references
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageID
argument_list|()
expr_stmt|;
name|destUUID
operator|=
name|references
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStorageID
argument_list|()
expr_stmt|;
name|references
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|restartDataNode ()
specifier|private
name|void
name|restartDataNode
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Allows us to control mover class for test purposes.    */
DECL|class|TestMover
specifier|public
specifier|static
class|class
name|TestMover
implements|implements
name|DiskBalancer
operator|.
name|BlockMover
block|{
DECL|field|shouldRun
specifier|private
name|AtomicBoolean
name|shouldRun
decl_stmt|;
DECL|field|dataset
specifier|private
name|FsDatasetSpi
name|dataset
decl_stmt|;
DECL|field|runCount
specifier|private
name|Integer
name|runCount
decl_stmt|;
DECL|field|sleepInCopyBlocks
specifier|private
specifier|volatile
name|boolean
name|sleepInCopyBlocks
decl_stmt|;
DECL|field|delay
specifier|private
name|long
name|delay
decl_stmt|;
DECL|method|TestMover (FsDatasetSpi dataset)
specifier|public
name|TestMover
parameter_list|(
name|FsDatasetSpi
name|dataset
parameter_list|)
block|{
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|this
operator|.
name|shouldRun
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|runCount
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|setSleep ()
specifier|public
name|void
name|setSleep
parameter_list|()
block|{
name|sleepInCopyBlocks
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|clearSleep ()
specifier|public
name|void
name|clearSleep
parameter_list|()
block|{
name|sleepInCopyBlocks
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|setDelay (long milliseconds)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|milliseconds
expr_stmt|;
block|}
comment|/**      * Copies blocks from a set of volumes.      *      * @param pair - Source and Destination Volumes.      * @param item - Number of bytes to move from volumes.      */
annotation|@
name|Override
DECL|method|copyBlocks (DiskBalancer.VolumePair pair, DiskBalancerWorkItem item)
specifier|public
name|void
name|copyBlocks
parameter_list|(
name|DiskBalancer
operator|.
name|VolumePair
name|pair
parameter_list|,
name|DiskBalancerWorkItem
name|item
parameter_list|)
block|{
try|try
block|{
comment|// get stuck if we are asked to sleep.
while|while
condition|(
name|sleepInCopyBlocks
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|runCount
init|)
block|{
if|if
condition|(
name|shouldRun
argument_list|()
condition|)
block|{
name|runCount
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// A failure here can be safely ignored with no impact for tests.
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets copyblocks into runnable state.      */
annotation|@
name|Override
DECL|method|setRunnable ()
specifier|public
name|void
name|setRunnable
parameter_list|()
block|{
name|this
operator|.
name|shouldRun
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Signals copy block to exit.      */
annotation|@
name|Override
DECL|method|setExitFlag ()
specifier|public
name|void
name|setExitFlag
parameter_list|()
block|{
name|this
operator|.
name|shouldRun
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the shouldRun boolean flag.      */
DECL|method|shouldRun ()
specifier|public
name|boolean
name|shouldRun
parameter_list|()
block|{
return|return
name|this
operator|.
name|shouldRun
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDataset ()
specifier|public
name|FsDatasetSpi
name|getDataset
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataset
return|;
block|}
DECL|method|getRunCount ()
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
synchronized|synchronized
init|(
name|runCount
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Run count : "
operator|+
name|runCount
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|runCount
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|MockMoverHelper
specifier|private
class|class
name|MockMoverHelper
block|{
DECL|field|balancer
specifier|private
name|DiskBalancer
name|balancer
decl_stmt|;
DECL|field|plan
specifier|private
name|NodePlan
name|plan
decl_stmt|;
DECL|field|blockMover
specifier|private
name|TestMover
name|blockMover
decl_stmt|;
DECL|method|getBalancer ()
specifier|public
name|DiskBalancer
name|getBalancer
parameter_list|()
block|{
return|return
name|balancer
return|;
block|}
DECL|method|getPlan ()
specifier|public
name|NodePlan
name|getPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
DECL|method|getBlockMover ()
specifier|public
name|TestMover
name|getBlockMover
parameter_list|()
block|{
return|return
name|blockMover
return|;
block|}
DECL|method|invoke ()
specifier|public
name|MockMoverHelper
name|invoke
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DISK_BALANCER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|restartDataNode
argument_list|()
expr_stmt|;
name|blockMover
operator|=
operator|new
name|TestMover
argument_list|(
name|dataNode
operator|.
name|getFSDataset
argument_list|()
argument_list|)
expr_stmt|;
name|blockMover
operator|.
name|setRunnable
argument_list|()
expr_stmt|;
name|balancer
operator|=
operator|new
name|DiskBalancerBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setMover
argument_list|(
name|blockMover
argument_list|)
operator|.
name|setNodeID
argument_list|(
name|nodeID
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DiskBalancerCluster
name|diskBalancerCluster
init|=
operator|new
name|DiskBalancerClusterBuilder
argument_list|()
operator|.
name|setClusterSource
argument_list|(
literal|"/diskBalancer/data-cluster-3node-3disk.json"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|plan
operator|=
operator|new
name|PlanBuilder
argument_list|(
name|diskBalancerCluster
argument_list|,
name|nodeID
argument_list|)
operator|.
name|setPathMap
argument_list|(
name|sourceName
argument_list|,
name|destName
argument_list|)
operator|.
name|setUUIDMap
argument_list|(
name|sourceUUID
argument_list|,
name|destUUID
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|DiskBalancerBuilder
specifier|private
class|class
name|DiskBalancerBuilder
block|{
DECL|field|blockMover
specifier|private
name|TestMover
name|blockMover
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nodeID
specifier|private
name|String
name|nodeID
decl_stmt|;
DECL|method|DiskBalancerBuilder (Configuration conf)
specifier|public
name|DiskBalancerBuilder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|setNodeID (String nodeID)
specifier|public
name|DiskBalancerBuilder
name|setNodeID
parameter_list|(
name|String
name|nodeID
parameter_list|)
block|{
name|this
operator|.
name|nodeID
operator|=
name|nodeID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|DiskBalancerBuilder
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMover (TestMover mover)
specifier|public
name|DiskBalancerBuilder
name|setMover
parameter_list|(
name|TestMover
name|mover
parameter_list|)
block|{
name|this
operator|.
name|blockMover
operator|=
name|mover
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRunnable ()
specifier|public
name|DiskBalancerBuilder
name|setRunnable
parameter_list|()
block|{
name|blockMover
operator|.
name|setRunnable
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|DiskBalancer
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockMover
argument_list|)
expr_stmt|;
return|return
operator|new
name|DiskBalancer
argument_list|(
name|nodeID
argument_list|,
name|conf
argument_list|,
name|blockMover
argument_list|)
return|;
block|}
block|}
DECL|class|DiskBalancerClusterBuilder
specifier|private
class|class
name|DiskBalancerClusterBuilder
block|{
DECL|field|jsonFilePath
specifier|private
name|String
name|jsonFilePath
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|DiskBalancerClusterBuilder
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setClusterSource (String jsonFilePath)
specifier|public
name|DiskBalancerClusterBuilder
name|setClusterSource
parameter_list|(
name|String
name|jsonFilePath
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|jsonFilePath
operator|=
name|jsonFilePath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|DiskBalancerCluster
name|build
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerCluster
name|diskBalancerCluster
decl_stmt|;
name|URI
name|clusterJson
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|jsonFilePath
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|ClusterConnector
name|jsonConnector
init|=
name|ConnectorFactory
operator|.
name|getCluster
argument_list|(
name|clusterJson
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|diskBalancerCluster
operator|=
operator|new
name|DiskBalancerCluster
argument_list|(
name|jsonConnector
argument_list|)
expr_stmt|;
name|diskBalancerCluster
operator|.
name|readClusterInfo
argument_list|()
expr_stmt|;
name|diskBalancerCluster
operator|.
name|setNodesToProcess
argument_list|(
name|diskBalancerCluster
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|diskBalancerCluster
return|;
block|}
block|}
DECL|class|PlanBuilder
specifier|private
class|class
name|PlanBuilder
block|{
DECL|field|sourcePath
specifier|private
name|String
name|sourcePath
decl_stmt|;
DECL|field|destPath
specifier|private
name|String
name|destPath
decl_stmt|;
DECL|field|sourceUUID
specifier|private
name|String
name|sourceUUID
decl_stmt|;
DECL|field|destUUID
specifier|private
name|String
name|destUUID
decl_stmt|;
DECL|field|balancerCluster
specifier|private
name|DiskBalancerCluster
name|balancerCluster
decl_stmt|;
DECL|field|nodeID
specifier|private
name|String
name|nodeID
decl_stmt|;
DECL|method|PlanBuilder (DiskBalancerCluster balancerCluster, String nodeID)
specifier|public
name|PlanBuilder
parameter_list|(
name|DiskBalancerCluster
name|balancerCluster
parameter_list|,
name|String
name|nodeID
parameter_list|)
block|{
name|this
operator|.
name|balancerCluster
operator|=
name|balancerCluster
expr_stmt|;
name|this
operator|.
name|nodeID
operator|=
name|nodeID
expr_stmt|;
block|}
DECL|method|setPathMap (String sourcePath, String destPath)
specifier|public
name|PlanBuilder
name|setPathMap
parameter_list|(
name|String
name|sourcePath
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
name|this
operator|.
name|destPath
operator|=
name|destPath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setUUIDMap (String sourceUUID, String destUUID)
specifier|public
name|PlanBuilder
name|setUUIDMap
parameter_list|(
name|String
name|sourceUUID
parameter_list|,
name|String
name|destUUID
parameter_list|)
block|{
name|this
operator|.
name|sourceUUID
operator|=
name|sourceUUID
expr_stmt|;
name|this
operator|.
name|destUUID
operator|=
name|destUUID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|NodePlan
name|build
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dnIndex
init|=
literal|0
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|balancerCluster
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nodeID
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|DiskBalancerDataNode
name|node
init|=
name|balancerCluster
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dnIndex
argument_list|)
decl_stmt|;
name|node
operator|.
name|setDataNodeUUID
argument_list|(
name|nodeID
argument_list|)
expr_stmt|;
name|GreedyPlanner
name|planner
init|=
operator|new
name|GreedyPlanner
argument_list|(
literal|10.0f
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|planner
operator|.
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
literal|"DISK"
argument_list|)
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|setVolumeNames
argument_list|(
name|plan
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
DECL|method|setVolumeNames (NodePlan plan)
specifier|private
name|void
name|setVolumeNames
parameter_list|(
name|NodePlan
name|plan
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Step
argument_list|>
name|iter
init|=
name|plan
operator|.
name|getVolumeSetPlans
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MoveStep
name|nextStep
init|=
operator|(
name|MoveStep
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|nextStep
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|setPath
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|nextStep
operator|.
name|getSourceVolume
argument_list|()
operator|.
name|setUuid
argument_list|(
name|sourceUUID
argument_list|)
expr_stmt|;
name|nextStep
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|setPath
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|nextStep
operator|.
name|getDestinationVolume
argument_list|()
operator|.
name|setUuid
argument_list|(
name|destUUID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

