begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CorruptReplicasMap
operator|.
name|Reason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This test makes sure that   *   CorruptReplicasMap::numBlocksWithCorruptReplicas and  *   CorruptReplicasMap::getCorruptReplicaBlockIds  *   return the correct values  */
end_comment

begin_class
DECL|class|TestCorruptReplicaInfo
specifier|public
class|class
name|TestCorruptReplicaInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCorruptReplicaInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|replicaMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockInfo
argument_list|>
name|replicaMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|stripedBlocksMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockInfo
argument_list|>
name|stripedBlocksMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Allow easy block creation by block id. Return existing
comment|// replica block if one with same block id already exists.
DECL|method|getReplica (Long blockId)
specifier|private
name|BlockInfo
name|getReplica
parameter_list|(
name|Long
name|blockId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|replicaMap
operator|.
name|containsKey
argument_list|(
name|blockId
argument_list|)
condition|)
block|{
name|short
name|replFactor
init|=
literal|3
decl_stmt|;
name|replicaMap
operator|.
name|put
argument_list|(
name|blockId
argument_list|,
operator|new
name|BlockInfoContiguous
argument_list|(
operator|new
name|Block
argument_list|(
name|blockId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|replFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|replicaMap
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
return|;
block|}
DECL|method|getReplica (int blkId)
specifier|private
name|BlockInfo
name|getReplica
parameter_list|(
name|int
name|blkId
parameter_list|)
block|{
return|return
name|getReplica
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|blkId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getStripedBlock (int blkId)
specifier|private
name|BlockInfo
name|getStripedBlock
parameter_list|(
name|int
name|blkId
parameter_list|)
block|{
name|Long
name|stripedBlockId
init|=
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|+
name|blkId
decl_stmt|;
name|assertTrue
argument_list|(
name|BlockIdManager
operator|.
name|isStripedBlockID
argument_list|(
name|stripedBlockId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stripedBlocksMap
operator|.
name|containsKey
argument_list|(
name|stripedBlockId
argument_list|)
condition|)
block|{
name|stripedBlocksMap
operator|.
name|put
argument_list|(
name|stripedBlockId
argument_list|,
operator|new
name|BlockInfoStriped
argument_list|(
operator|new
name|Block
argument_list|(
name|stripedBlockId
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|)
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stripedBlocksMap
operator|.
name|get
argument_list|(
name|stripedBlockId
argument_list|)
return|;
block|}
DECL|method|verifyCorruptBlocksCount (CorruptReplicasMap corruptReplicasMap, long expectedReplicaCount, long expectedStripedBlockCount)
specifier|private
name|void
name|verifyCorruptBlocksCount
parameter_list|(
name|CorruptReplicasMap
name|corruptReplicasMap
parameter_list|,
name|long
name|expectedReplicaCount
parameter_list|,
name|long
name|expectedStripedBlockCount
parameter_list|)
block|{
name|long
name|totalExpectedCorruptBlocks
init|=
name|expectedReplicaCount
operator|+
name|expectedStripedBlockCount
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected total corrupt blocks count!"
argument_list|,
name|totalExpectedCorruptBlocks
argument_list|,
name|corruptReplicasMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected replica blocks count!"
argument_list|,
name|expectedReplicaCount
argument_list|,
name|corruptReplicasMap
operator|.
name|getCorruptBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected striped blocks count!"
argument_list|,
name|expectedStripedBlockCount
argument_list|,
name|corruptReplicasMap
operator|.
name|getCorruptECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCorruptReplicaInfo ()
specifier|public
name|void
name|testCorruptReplicaInfo
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CorruptReplicasMap
name|crm
init|=
operator|new
name|CorruptReplicasMap
argument_list|()
decl_stmt|;
name|BlockIdManager
name|bim
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BlockIdManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|bim
operator|.
name|isLegacyBlock
argument_list|(
name|any
argument_list|(
name|Block
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bim
operator|.
name|isStripedBlock
argument_list|(
name|any
argument_list|(
name|Block
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|bim
operator|.
name|isLegacyBlock
argument_list|(
operator|new
name|Block
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure initial values are returned correctly
name|assertEquals
argument_list|(
literal|"Total number of corrupt blocks must initially be 0!"
argument_list|,
literal|0
argument_list|,
name|crm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of corrupt replicas must initially be 0!"
argument_list|,
literal|0
argument_list|,
name|crm
operator|.
name|getCorruptBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of corrupt striped block groups must initially be 0!"
argument_list|,
literal|0
argument_list|,
name|crm
operator|.
name|getCorruptECBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Param n cannot be less than 0"
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Param n cannot be greater than 100"
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|,
literal|101
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|long
index|[]
name|l
init|=
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"n = 0 must return non-null"
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"n = 0 must return an empty list"
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Create a list of block ids. A list is used to allow easy
comment|// validation of the output of getCorruptReplicaBlockIds.
specifier|final
name|int
name|blockCount
init|=
literal|140
decl_stmt|;
name|long
index|[]
name|replicaIds
init|=
operator|new
name|long
index|[
name|blockCount
index|]
decl_stmt|;
name|long
index|[]
name|stripedIds
init|=
operator|new
name|long
index|[
name|blockCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCount
condition|;
name|i
operator|++
control|)
block|{
name|replicaIds
index|[
name|i
index|]
operator|=
name|getReplica
argument_list|(
name|i
argument_list|)
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
name|stripedIds
index|[
name|i
index|]
operator|=
name|getStripedBlock
argument_list|(
name|i
argument_list|)
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
block|}
name|DatanodeDescriptor
name|dn1
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeDescriptor
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
name|dn2
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeDescriptor
argument_list|()
decl_stmt|;
comment|// Add to corrupt blocks map.
comment|// Replicas
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getReplica
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getReplica
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getReplica
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn2
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Striped blocks
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getStripedBlock
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getStripedBlock
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getStripedBlock
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dn2
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Remove from corrupt blocks map.
comment|// Replicas
name|crm
operator|.
name|removeFromCorruptReplicasMap
argument_list|(
name|getReplica
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|crm
operator|.
name|removeFromCorruptReplicasMap
argument_list|(
name|getReplica
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Striped blocks
name|crm
operator|.
name|removeFromCorruptReplicasMap
argument_list|(
name|getStripedBlock
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|crm
operator|.
name|removeFromCorruptReplicasMap
argument_list|(
name|getStripedBlock
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCorruptBlocksCount
argument_list|(
name|crm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|blockId
init|=
literal|0
init|;
name|blockId
operator|<
name|blockCount
condition|;
name|blockId
operator|++
control|)
block|{
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getReplica
argument_list|(
name|blockId
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
name|addToCorruptReplicasMap
argument_list|(
name|crm
argument_list|,
name|getStripedBlock
argument_list|(
name|blockId
argument_list|)
argument_list|,
name|dn1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of corrupt blocks not returning correctly"
argument_list|,
literal|2
operator|*
name|blockCount
argument_list|,
name|crm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First five corrupt replica blocks ids are not right!"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|replicaIds
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First five corrupt striped blocks ids are not right!"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stripedIds
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|STRIPED
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10 replica blocks after 7 not returned correctly!"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|replicaIds
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|,
literal|10
argument_list|,
literal|7L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10 striped blocks after 7 not returned correctly!"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stripedIds
argument_list|,
literal|7
argument_list|,
literal|17
argument_list|)
argument_list|,
name|crm
operator|.
name|getCorruptBlockIdsForTesting
argument_list|(
name|bim
argument_list|,
name|BlockType
operator|.
name|STRIPED
argument_list|,
literal|10
argument_list|,
name|getStripedBlock
argument_list|(
literal|7
argument_list|)
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addToCorruptReplicasMap (CorruptReplicasMap crm, BlockInfo blk, DatanodeDescriptor dn)
specifier|private
specifier|static
name|void
name|addToCorruptReplicasMap
parameter_list|(
name|CorruptReplicasMap
name|crm
parameter_list|,
name|BlockInfo
name|blk
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|crm
operator|.
name|addToCorruptReplicasMap
argument_list|(
name|blk
argument_list|,
name|dn
argument_list|,
literal|"TEST"
argument_list|,
name|Reason
operator|.
name|NONE
argument_list|,
name|blk
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

