begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * This class tests the building blocks that are needed to  * support HDFS appends.  */
end_comment

begin_class
DECL|class|TestFileAppend2
specifier|public
class|class
name|TestFileAppend2
extends|extends
name|TestCase
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|numBlocks
specifier|static
specifier|final
name|int
name|numBlocks
init|=
literal|5
decl_stmt|;
DECL|field|simulatedStorage
name|boolean
name|simulatedStorage
init|=
literal|false
decl_stmt|;
DECL|field|fileContents
specifier|private
name|byte
index|[]
name|fileContents
init|=
literal|null
decl_stmt|;
DECL|field|numDatanodes
name|int
name|numDatanodes
init|=
literal|6
decl_stmt|;
DECL|field|numberOfFiles
name|int
name|numberOfFiles
init|=
literal|50
decl_stmt|;
DECL|field|numThreads
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
DECL|field|numAppendsPerThread
name|int
name|numAppendsPerThread
init|=
literal|20
decl_stmt|;
comment|/***   int numberOfFiles = 1;   int numThreads = 1;   int numAppendsPerThread = 2000; ****/
DECL|field|workload
name|Workload
index|[]
name|workload
init|=
literal|null
decl_stmt|;
DECL|field|testFiles
specifier|final
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|testFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|globalStatus
specifier|volatile
specifier|static
name|boolean
name|globalStatus
init|=
literal|true
decl_stmt|;
comment|/**    * Creates one file, writes a few bytes to it and then closed it.    * Reopens the same file for appending, write all blocks and then close.    * Verify that all data exists in file.    * @throws IOException an exception might be thrown    */
DECL|method|testSimpleAppend ()
specifier|public
name|void
name|testSimpleAppend
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|simulatedStorage
condition|)
block|{
name|SimulatedFSDataset
operator|.
name|setFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HANDLER_COUNT_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileContents
operator|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
block|{
comment|// test appending to a file.
comment|// create a new file.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/simpleAppend.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file simpleAppend.dat"
argument_list|)
expr_stmt|;
comment|// write to file
name|int
name|mid
init|=
literal|186
decl_stmt|;
comment|// io.bytes.per.checksum bytes
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing "
operator|+
name|mid
operator|+
literal|" bytes to file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote and Closed first part of file."
argument_list|)
expr_stmt|;
comment|// write to file
name|int
name|mid2
init|=
literal|607
decl_stmt|;
comment|// io.bytes.per.checksum bytes
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing "
operator|+
name|mid
operator|+
literal|" bytes to file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|stm
operator|=
name|fs
operator|.
name|append
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|mid
argument_list|,
name|mid2
operator|-
name|mid
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote and Closed second part of file."
argument_list|)
expr_stmt|;
comment|// write the remainder of the file
name|stm
operator|=
name|fs
operator|.
name|append
argument_list|(
name|file1
argument_list|)
expr_stmt|;
comment|// ensure getPos is set to reflect existing size of the file
name|assertTrue
argument_list|(
name|stm
operator|.
name|getPos
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing "
operator|+
operator|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|mid2
operator|)
operator|+
literal|" bytes to file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|mid2
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|mid2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Written second part of file"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote and Closed second part of file."
argument_list|)
expr_stmt|;
comment|// verify that entire file is good
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|,
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|,
name|fileContents
argument_list|,
literal|"Read 2"
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test appending to an non-existing file.
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/non-existing.dat"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to have FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Good: got "
operator|+
name|fnfe
argument_list|)
expr_stmt|;
name|fnfe
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// test append permission.
comment|//set root to all writable
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// login as a different user
specifier|final
name|UserGroupInformation
name|superuser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|username
init|=
literal|"testappenduser"
decl_stmt|;
name|String
name|group
init|=
literal|"testappendgroup"
decl_stmt|;
name|assertFalse
argument_list|(
name|superuser
operator|.
name|getShortUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|superuser
operator|.
name|getGroupNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|appenduser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|username
argument_list|,
operator|new
name|String
index|[]
block|{
name|group
block|}
argument_list|)
decl_stmt|;
name|fs
operator|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|appenduser
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// create a file
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo.dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|10
operator|+
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// change dir and foo to minimal permissions.
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0100
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|foo
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0200
argument_list|)
argument_list|)
expr_stmt|;
comment|// try append, should success
name|out
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|10
operator|+
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// change dir and foo to all but no write on foo.
name|fs
operator|.
name|setPermission
argument_list|(
name|foo
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0577
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
comment|// try append, should fail
name|out
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to have AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Good: got "
operator|+
name|ace
argument_list|)
expr_stmt|;
name|ace
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Exception :"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Throwable :"
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Throwable : "
operator|+
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// an object that does a bunch of appends to files
comment|//
DECL|class|Workload
class|class
name|Workload
extends|extends
name|Thread
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|method|Workload (MiniDFSCluster cluster, int threadIndex)
name|Workload
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|threadIndex
parameter_list|)
block|{
name|id
operator|=
name|threadIndex
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
comment|// create a bunch of files. Write to them and then verify.
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Workload "
operator|+
name|id
operator|+
literal|" starting... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAppendsPerThread
condition|;
name|i
operator|++
control|)
block|{
comment|// pick a file at random and remove it from pool
name|Path
name|testfile
decl_stmt|;
synchronized|synchronized
init|(
name|testFiles
init|)
block|{
if|if
condition|(
name|testFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed write to almost all files."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|index
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|testFiles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|testfile
operator|=
name|testFiles
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|long
name|len
init|=
literal|0
decl_stmt|;
name|int
name|sizeToAppend
init|=
literal|0
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// add a random number of bytes to file
name|len
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testfile
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
comment|// if file is already full, then pick another file
if|if
condition|(
name|len
operator|>=
name|AppendTestUtil
operator|.
name|FILE_SIZE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File "
operator|+
name|testfile
operator|+
literal|" is full."
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// do small size appends so that we can trigger multiple
comment|// appends to the same file.
comment|//
name|int
name|left
init|=
call|(
name|int
call|)
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
operator|-
name|len
argument_list|)
operator|/
literal|3
decl_stmt|;
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
block|{
name|left
operator|=
literal|1
expr_stmt|;
block|}
name|sizeToAppend
operator|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Workload thread "
operator|+
name|id
operator|+
literal|" appending "
operator|+
name|sizeToAppend
operator|+
literal|" bytes "
operator|+
literal|" to file "
operator|+
name|testfile
operator|+
literal|" of size "
operator|+
name|len
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|append
argument_list|(
name|testfile
argument_list|)
decl_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|fileContents
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|,
name|sizeToAppend
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// wait for the file size to be reflected in the namenode metadata
while|while
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testfile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|!=
operator|(
name|len
operator|+
name|sizeToAppend
operator|)
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Workload thread "
operator|+
name|id
operator|+
literal|" file "
operator|+
name|testfile
operator|+
literal|" size "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testfile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|" expected size "
operator|+
operator|(
name|len
operator|+
name|sizeToAppend
operator|)
operator|+
literal|" waiting for namenode metadata update."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
empty_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|testfile
operator|+
literal|" size is "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testfile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|" but expected "
operator|+
operator|(
name|len
operator|+
name|sizeToAppend
operator|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testfile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
operator|(
name|len
operator|+
name|sizeToAppend
operator|)
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|fs
argument_list|,
name|testfile
argument_list|,
call|(
name|int
call|)
argument_list|(
name|len
operator|+
name|sizeToAppend
argument_list|)
argument_list|,
name|fileContents
argument_list|,
literal|"Read 2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|globalStatus
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|toString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Workload exception "
operator|+
name|id
operator|+
literal|" testfile "
operator|+
name|testfile
operator|+
literal|" "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Workload exception "
operator|+
name|id
operator|+
literal|" testfile "
operator|+
name|testfile
operator|+
literal|" expected size "
operator|+
operator|(
name|len
operator|+
name|sizeToAppend
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Add testfile back to the pool of files.
synchronized|synchronized
init|(
name|testFiles
init|)
block|{
name|testFiles
operator|.
name|add
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Test that appends to files at random offsets.    * @throws IOException an exception might be thrown    */
DECL|method|testComplexAppend ()
specifier|public
name|void
name|testComplexAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContents
operator|=
name|AppendTestUtil
operator|.
name|initBuffer
argument_list|(
name|AppendTestUtil
operator|.
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HANDLER_COUNT_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SUPPORT_APPEND_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a bunch of test files with random replication factors.
comment|// Insert them into a linked list.
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfFiles
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|replication
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|numDatanodes
operator|-
literal|2
argument_list|)
operator|+
literal|1
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|i
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|AppendTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile
argument_list|,
name|replication
argument_list|)
decl_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|testFiles
operator|.
name|add
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
block|}
comment|// Create threads and make them run workload concurrently.
name|workload
operator|=
operator|new
name|Workload
index|[
name|numThreads
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|workload
index|[
name|i
index|]
operator|=
operator|new
name|Workload
argument_list|(
name|cluster
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|workload
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all transactions to get over
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for thread "
operator|+
name|i
operator|+
literal|" to complete..."
argument_list|)
expr_stmt|;
name|workload
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for thread "
operator|+
name|i
operator|+
literal|" complete."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|i
operator|--
expr_stmt|;
comment|// retry
block|}
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// If any of the worker thread failed in their job, indicate that
comment|// this test failed.
comment|//
name|assertTrue
argument_list|(
literal|"testComplexAppend Worker encountered exceptions."
argument_list|,
name|globalStatus
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

