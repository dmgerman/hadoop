begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|NAME_NODE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_comment
comment|/**  * This test ensures the appropriate response (successful or failure) from   * a Datanode when the system is started with differing version combinations.   */
end_comment

begin_class
DECL|class|TestDFSStartupVersions
specifier|public
class|class
name|TestDFSStartupVersions
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestDFSStartupVersions"
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
comment|/**    * Writes an INFO log message containing the parameters.    */
DECL|method|log (String label, NodeType nodeType, Integer testCase, StorageData sd)
name|void
name|log
parameter_list|(
name|String
name|label
parameter_list|,
name|NodeType
name|nodeType
parameter_list|,
name|Integer
name|testCase
parameter_list|,
name|StorageData
name|sd
parameter_list|)
block|{
name|String
name|testCaseLine
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|testCase
operator|!=
literal|null
condition|)
block|{
name|testCaseLine
operator|=
literal|" testCase="
operator|+
name|testCase
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"============================================================"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***TEST*** "
operator|+
name|label
operator|+
literal|":"
operator|+
name|testCaseLine
operator|+
literal|" nodeType="
operator|+
name|nodeType
operator|+
literal|" layoutVersion="
operator|+
name|sd
operator|.
name|storageInfo
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|" namespaceID="
operator|+
name|sd
operator|.
name|storageInfo
operator|.
name|getNamespaceID
argument_list|()
operator|+
literal|" fsscTime="
operator|+
name|sd
operator|.
name|storageInfo
operator|.
name|getCTime
argument_list|()
operator|+
literal|" clusterID="
operator|+
name|sd
operator|.
name|storageInfo
operator|.
name|getClusterID
argument_list|()
operator|+
literal|" BlockPoolID="
operator|+
name|sd
operator|.
name|blockPoolId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Class used for initializing version information for tests    */
DECL|class|StorageData
specifier|private
specifier|static
class|class
name|StorageData
block|{
DECL|field|storageInfo
specifier|private
specifier|final
name|StorageInfo
name|storageInfo
decl_stmt|;
DECL|field|blockPoolId
specifier|private
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|method|StorageData (int layoutVersion, int namespaceId, String clusterId, long cTime, String bpid)
name|StorageData
parameter_list|(
name|int
name|layoutVersion
parameter_list|,
name|int
name|namespaceId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|long
name|cTime
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
name|storageInfo
operator|=
operator|new
name|StorageInfo
argument_list|(
name|layoutVersion
argument_list|,
name|namespaceId
argument_list|,
name|clusterId
argument_list|,
name|cTime
argument_list|)
expr_stmt|;
name|blockPoolId
operator|=
name|bpid
expr_stmt|;
block|}
block|}
comment|/**    * Initialize the versions array.  This array stores all combinations     * of cross product:    *  {oldLayoutVersion,currentLayoutVersion,futureLayoutVersion} X    *    {currentNamespaceId,incorrectNamespaceId} X    *      {pastFsscTime,currentFsscTime,futureFsscTime}    */
DECL|method|initializeVersions ()
specifier|private
name|StorageData
index|[]
name|initializeVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|layoutVersionOld
init|=
name|Storage
operator|.
name|LAST_UPGRADABLE_LAYOUT_VERSION
decl_stmt|;
name|int
name|layoutVersionCur
init|=
name|UpgradeUtilities
operator|.
name|getCurrentLayoutVersion
argument_list|()
decl_stmt|;
name|int
name|layoutVersionNew
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|namespaceIdCur
init|=
name|UpgradeUtilities
operator|.
name|getCurrentNamespaceID
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|namespaceIdOld
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|fsscTimeOld
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|fsscTimeCur
init|=
name|UpgradeUtilities
operator|.
name|getCurrentFsscTime
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|long
name|fsscTimeNew
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|String
name|clusterID
init|=
literal|"testClusterID"
decl_stmt|;
name|String
name|invalidClusterID
init|=
literal|"testClusterID"
decl_stmt|;
name|String
name|bpid
init|=
name|UpgradeUtilities
operator|.
name|getCurrentBlockPoolID
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|invalidBpid
init|=
literal|"invalidBpid"
decl_stmt|;
return|return
operator|new
name|StorageData
index|[]
block|{
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 0
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 1
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 2
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 3
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 4
operator|new
name|StorageData
argument_list|(
name|layoutVersionOld
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 5
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 6
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 7
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 8
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 9
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 10
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 11
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 12
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 13
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 14
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeOld
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 15
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 16
operator|new
name|StorageData
argument_list|(
name|layoutVersionNew
argument_list|,
name|namespaceIdOld
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeNew
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 17
comment|// Test with invalid clusterId
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdCur
argument_list|,
name|invalidClusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|bpid
argument_list|)
block|,
comment|// 18
comment|// Test with invalid block pool Id
operator|new
name|StorageData
argument_list|(
name|layoutVersionCur
argument_list|,
name|namespaceIdCur
argument_list|,
name|clusterID
argument_list|,
name|fsscTimeCur
argument_list|,
name|invalidBpid
argument_list|)
comment|// 19
block|}
return|;
block|}
comment|/**    * Determines if the given Namenode version and Datanode version    * are compatible with each other. Compatibility in this case mean    * that the Namenode and Datanode will successfully start up and    * will work together. The rules for compatibility,    * taken from the DFS Upgrade Design, are as follows:    *<pre>    *<ol>    *<li>Check 0: Datanode namespaceID != Namenode namespaceID the startup fails    *</li>    *<li>Check 1: Datanode clusterID != Namenode clusterID the startup fails    *</li>    *<li>Check 2: Datanode blockPoolID != Namenode blockPoolID the startup fails    *</li>    *<li>Check 3: The data-node does regular startup (no matter which options     *    it is started with) if    *       softwareLV == storedLV AND     *       DataNode.FSSCTime == NameNode.FSSCTime    *</li>    *<li>Check 4: The data-node performs an upgrade if it is started without any     *    options and    *       |softwareLV|> |storedLV| OR     *       (softwareLV == storedLV AND    *        DataNode.FSSCTime< NameNode.FSSCTime)    *</li>    *<li>NOT TESTED: The data-node rolls back if it is started with    *    the -rollback option and    *       |softwareLV|>= |previous.storedLV| AND     *       DataNode.previous.FSSCTime<= NameNode.FSSCTime    *</li>    *<li>Check 5: In all other cases the startup fails.</li>    *</ol>    *</pre>    */
DECL|method|isVersionCompatible (StorageData namenodeSd, StorageData datanodeSd)
name|boolean
name|isVersionCompatible
parameter_list|(
name|StorageData
name|namenodeSd
parameter_list|,
name|StorageData
name|datanodeSd
parameter_list|)
block|{
specifier|final
name|StorageInfo
name|namenodeVer
init|=
name|namenodeSd
operator|.
name|storageInfo
decl_stmt|;
specifier|final
name|StorageInfo
name|datanodeVer
init|=
name|datanodeSd
operator|.
name|storageInfo
decl_stmt|;
comment|// check #0
if|if
condition|(
name|namenodeVer
operator|.
name|getNamespaceID
argument_list|()
operator|!=
name|datanodeVer
operator|.
name|getNamespaceID
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"namespaceIDs are not equal: isVersionCompatible=false"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check #1
if|if
condition|(
operator|!
name|namenodeVer
operator|.
name|getClusterID
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeVer
operator|.
name|getClusterID
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"clusterIDs are not equal: isVersionCompatible=false"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check #2
if|if
condition|(
operator|!
name|namenodeSd
operator|.
name|blockPoolId
operator|.
name|equals
argument_list|(
name|datanodeSd
operator|.
name|blockPoolId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"blockPoolIDs are not equal: isVersionCompatible=false"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check #3
name|int
name|softwareLV
init|=
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
decl_stmt|;
comment|// will also be Namenode's LV
name|int
name|storedLV
init|=
name|datanodeVer
operator|.
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|softwareLV
operator|==
name|storedLV
operator|&&
name|datanodeVer
operator|.
name|getCTime
argument_list|()
operator|==
name|namenodeVer
operator|.
name|getCTime
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"layoutVersions and cTimes are equal: isVersionCompatible=true"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// check #4
name|long
name|absSoftwareLV
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|long
operator|)
name|softwareLV
argument_list|)
decl_stmt|;
name|long
name|absStoredLV
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|long
operator|)
name|storedLV
argument_list|)
decl_stmt|;
if|if
condition|(
name|absSoftwareLV
operator|>
name|absStoredLV
operator|||
operator|(
name|softwareLV
operator|==
name|storedLV
operator|&&
name|datanodeVer
operator|.
name|getCTime
argument_list|()
operator|<
name|namenodeVer
operator|.
name|getCTime
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"softwareLayoutVersion is newer OR namenode cTime is newer: isVersionCompatible=true"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// check #5
name|LOG
operator|.
name|info
argument_list|(
literal|"default case: isVersionCompatible=false"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * This test ensures the appropriate response (successful or failure) from     * a Datanode when the system is started with differing version combinations.     *<pre>    * For each 3-tuple in the cross product    *   ({oldLayoutVersion,currentLayoutVersion,futureLayoutVersion},    *    {currentNamespaceId,incorrectNamespaceId},    *    {pastFsscTime,currentFsscTime,futureFsscTime})    *      1. Startup Namenode with version file containing     *         (currentLayoutVersion,currentNamespaceId,currentFsscTime)    *      2. Attempt to startup Datanode with version file containing     *         this iterations version 3-tuple    *</pre>    */
DECL|method|testVersions ()
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|UpgradeUtilities
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|UpgradeUtilities
operator|.
name|initializeStorageStateConf
argument_list|(
literal|1
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|StorageData
index|[]
name|versions
init|=
name|initializeVersions
argument_list|()
decl_stmt|;
name|UpgradeUtilities
operator|.
name|createNameNodeStorageDirs
argument_list|(
name|conf
operator|.
name|getStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|StorageData
name|nameNodeVersion
init|=
operator|new
name|StorageData
argument_list|(
name|UpgradeUtilities
operator|.
name|getCurrentLayoutVersion
argument_list|()
argument_list|,
name|UpgradeUtilities
operator|.
name|getCurrentNamespaceID
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|getCurrentClusterID
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|getCurrentFsscTime
argument_list|(
name|cluster
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|getCurrentBlockPoolID
argument_list|(
name|cluster
argument_list|)
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"NameNode version info"
argument_list|,
name|NAME_NODE
argument_list|,
literal|null
argument_list|,
name|nameNodeVersion
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|UpgradeUtilities
operator|.
name|getCurrentBlockPoolID
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|versions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
index|[]
name|storage
init|=
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|conf
operator|.
name|getStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"DataNode version info"
argument_list|,
name|DATA_NODE
argument_list|,
name|i
argument_list|,
name|versions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|UpgradeUtilities
operator|.
name|createDataNodeVersionFile
argument_list|(
name|storage
argument_list|,
name|versions
index|[
name|i
index|]
operator|.
name|storageInfo
argument_list|,
name|bpid
argument_list|,
name|versions
index|[
name|i
index|]
operator|.
name|blockPoolId
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// Ignore.  The asserts below will check for problems.
comment|// ignore.printStackTrace();
block|}
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isVersionCompatible
argument_list|(
name|nameNodeVersion
argument_list|,
name|versions
index|[
name|i
index|]
argument_list|)
argument_list|,
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down MiniDFSCluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestDFSStartupVersions
argument_list|()
operator|.
name|testVersions
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

