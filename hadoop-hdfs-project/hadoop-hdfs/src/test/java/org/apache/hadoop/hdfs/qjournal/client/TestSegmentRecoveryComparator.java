begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|SegmentStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|SegmentRecoveryComparator
operator|.
name|INSTANCE
import|;
end_import

begin_class
DECL|class|TestSegmentRecoveryComparator
specifier|public
class|class
name|TestSegmentRecoveryComparator
block|{
DECL|method|makeEntry ( PrepareRecoveryResponseProto proto)
specifier|private
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|makeEntry
parameter_list|(
name|PrepareRecoveryResponseProto
name|proto
parameter_list|)
block|{
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|AsyncLogger
operator|.
name|class
argument_list|)
argument_list|,
name|proto
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testComparisons ()
specifier|public
name|void
name|testComparisons
parameter_list|()
block|{
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|INPROGRESS_1_3
init|=
name|makeEntry
argument_list|(
name|PrepareRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSegmentState
argument_list|(
name|SegmentStateProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
literal|1L
argument_list|)
operator|.
name|setEndTxId
argument_list|(
literal|3L
argument_list|)
operator|.
name|setMd5Sum
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|setLastWriterEpoch
argument_list|(
literal|0L
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|INPROGRESS_1_4
init|=
name|makeEntry
argument_list|(
name|PrepareRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSegmentState
argument_list|(
name|SegmentStateProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
literal|1L
argument_list|)
operator|.
name|setEndTxId
argument_list|(
literal|4L
argument_list|)
operator|.
name|setMd5Sum
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|setLastWriterEpoch
argument_list|(
literal|0L
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|INPROGRESS_1_4_ACCEPTED
init|=
name|makeEntry
argument_list|(
name|PrepareRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSegmentState
argument_list|(
name|SegmentStateProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
literal|1L
argument_list|)
operator|.
name|setEndTxId
argument_list|(
literal|4L
argument_list|)
operator|.
name|setMd5Sum
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|setLastWriterEpoch
argument_list|(
literal|0L
argument_list|)
operator|.
name|setAcceptedInEpoch
argument_list|(
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|FINALIZED_1_3
init|=
name|makeEntry
argument_list|(
name|PrepareRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSegmentState
argument_list|(
name|SegmentStateProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
literal|1L
argument_list|)
operator|.
name|setEndTxId
argument_list|(
literal|3L
argument_list|)
operator|.
name|setMd5Sum
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|setLastWriterEpoch
argument_list|(
literal|0L
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// Should compare equal to itself
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|INPROGRESS_1_3
argument_list|,
name|INPROGRESS_1_3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Longer log wins.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|INPROGRESS_1_3
argument_list|,
name|INPROGRESS_1_4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|INPROGRESS_1_4
argument_list|,
name|INPROGRESS_1_3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finalized log wins even over a longer in-progress
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|INPROGRESS_1_4
argument_list|,
name|FINALIZED_1_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|FINALIZED_1_3
argument_list|,
name|INPROGRESS_1_4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finalized log wins even if the in-progress one has an accepted
comment|// recovery proposal.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|INPROGRESS_1_4_ACCEPTED
argument_list|,
name|FINALIZED_1_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|INSTANCE
operator|.
name|compare
argument_list|(
name|FINALIZED_1_3
argument_list|,
name|INPROGRESS_1_4_ACCEPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

