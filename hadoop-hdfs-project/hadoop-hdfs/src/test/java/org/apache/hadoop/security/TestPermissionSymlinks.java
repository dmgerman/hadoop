begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPermissionSymlinks
specifier|public
class|class
name|TestPermissionSymlinks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestPermissionSymlinks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Non-super user to run commands with
DECL|field|user
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"myuser"
argument_list|)
decl_stmt|;
DECL|field|linkParent
specifier|private
specifier|static
specifier|final
name|Path
name|linkParent
init|=
operator|new
name|Path
argument_list|(
literal|"/symtest1"
argument_list|)
decl_stmt|;
DECL|field|targetParent
specifier|private
specifier|static
specifier|final
name|Path
name|targetParent
init|=
operator|new
name|Path
argument_list|(
literal|"/symtest2"
argument_list|)
decl_stmt|;
DECL|field|link
specifier|private
specifier|static
specifier|final
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|linkParent
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
DECL|field|target
specifier|private
specifier|static
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetParent
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|wrapper
specifier|private
specifier|static
name|FileSystemTestWrapper
name|wrapper
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClassSetUp ()
specifier|public
specifier|static
name|void
name|beforeClassSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|wrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClassTearDown ()
specifier|public
specifier|static
name|void
name|afterClassTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create initial test files
name|fs
operator|.
name|mkdirs
argument_list|(
name|linkParent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetParent
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0xBEEFl
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Wipe out everything
name|fs
operator|.
name|delete
argument_list|(
name|linkParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|targetParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|linkParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doDeleteLinkParentNotWritable
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|linkParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|targetParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doDeleteTargetParentAndTargetNotWritable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclDelete ()
specifier|public
name|void
name|testAclDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|linkParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doDeleteLinkParentNotWritable
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|linkParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|targetParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doDeleteTargetParentAndTargetNotWritable
argument_list|()
expr_stmt|;
block|}
DECL|method|doDeleteLinkParentNotWritable ()
specifier|private
name|void
name|doDeleteLinkParentNotWritable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try to delete where the symlink's parent dir is not writable
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myfc
operator|.
name|delete
argument_list|(
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Deleted symlink without write permissions on parent!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDeleteTargetParentAndTargetNotWritable ()
specifier|private
name|void
name|doDeleteTargetParentAndTargetNotWritable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try a delete where the symlink parent dir is writable,
comment|// but the target's parent and target are not
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myfc
operator|.
name|delete
argument_list|(
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure only the link was deleted
name|assertTrue
argument_list|(
literal|"Target should not have been deleted!"
argument_list|,
name|wrapper
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Link should have been deleted!"
argument_list|,
name|wrapper
operator|.
name|exists
argument_list|(
name|link
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReadWhenTargetNotReadable ()
specifier|public
name|void
name|testReadWhenTargetNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0000
argument_list|)
argument_list|)
expr_stmt|;
name|doReadTargetNotReadable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclReadTargetNotReadable ()
specifier|public
name|void
name|testAclReadTargetNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doReadTargetNotReadable
argument_list|()
expr_stmt|;
block|}
DECL|method|doReadTargetNotReadable ()
specifier|private
name|void
name|doReadTargetNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myfc
operator|.
name|open
argument_list|(
name|link
argument_list|)
operator|.
name|read
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read link target even though target does not have"
operator|+
literal|" read permissions!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testFileStatus ()
specifier|public
name|void
name|testFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0000
argument_list|)
argument_list|)
expr_stmt|;
name|doGetFileLinkStatusTargetNotReadable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclGetFileLinkStatusTargetNotReadable ()
specifier|public
name|void
name|testAclGetFileLinkStatusTargetNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doGetFileLinkStatusTargetNotReadable
argument_list|()
expr_stmt|;
block|}
DECL|method|doGetFileLinkStatusTargetNotReadable ()
specifier|private
name|void
name|doGetFileLinkStatusTargetNotReadable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try to getFileLinkStatus the link when the target is not readable
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|myfc
operator|.
name|getFileLinkStatus
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected link's FileStatus path to match link!"
argument_list|,
name|link
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|linkTarget
init|=
name|myfc
operator|.
name|getLinkTarget
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected link's target to match target!"
argument_list|,
name|target
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRenameLinkTargetNotWritableFC ()
specifier|public
name|void
name|testRenameLinkTargetNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|targetParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameLinkTargetNotWritableFC
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclRenameTargetNotWritableFC ()
specifier|public
name|void
name|testAclRenameTargetNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|targetParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameLinkTargetNotWritableFC
argument_list|()
expr_stmt|;
block|}
DECL|method|doRenameLinkTargetNotWritableFC ()
specifier|private
name|void
name|doRenameLinkTargetNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Rename the link when the target and parent are not writable
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First FileContext
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newlink
init|=
operator|new
name|Path
argument_list|(
name|linkParent
argument_list|,
literal|"newlink"
argument_list|)
decl_stmt|;
name|myfc
operator|.
name|rename
argument_list|(
name|link
argument_list|,
name|newlink
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Path
name|linkTarget
init|=
name|myfc
operator|.
name|getLinkTarget
argument_list|(
name|newlink
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected link's target to match target!"
argument_list|,
name|target
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected target to exist"
argument_list|,
name|wrapper
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRenameSrcNotWritableFC ()
specifier|public
name|void
name|testRenameSrcNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|linkParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameSrcNotWritableFC
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclRenameSrcNotWritableFC ()
specifier|public
name|void
name|testAclRenameSrcNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|linkParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameSrcNotWritableFC
argument_list|()
expr_stmt|;
block|}
DECL|method|doRenameSrcNotWritableFC ()
specifier|private
name|void
name|doRenameSrcNotWritableFC
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Rename the link when the target and parent are not writable
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
name|myfc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newlink
init|=
operator|new
name|Path
argument_list|(
name|targetParent
argument_list|,
literal|"newlink"
argument_list|)
decl_stmt|;
name|myfc
operator|.
name|rename
argument_list|(
name|link
argument_list|,
name|newlink
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renamed link even though link's parent is not writable!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Need separate FileSystem tests since the server-side impl is different
comment|// See {@link ClientProtocol#rename} and {@link ClientProtocol#rename2}.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRenameLinkTargetNotWritableFS ()
specifier|public
name|void
name|testRenameLinkTargetNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|targetParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameLinkTargetNotWritableFS
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclRenameTargetNotWritableFS ()
specifier|public
name|void
name|testAclRenameTargetNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|targetParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameLinkTargetNotWritableFS
argument_list|()
expr_stmt|;
block|}
DECL|method|doRenameLinkTargetNotWritableFS ()
specifier|private
name|void
name|doRenameLinkTargetNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Rename the link when the target and parent are not writable
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First FileContext
name|FileSystem
name|myfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newlink
init|=
operator|new
name|Path
argument_list|(
name|linkParent
argument_list|,
literal|"newlink"
argument_list|)
decl_stmt|;
name|myfs
operator|.
name|rename
argument_list|(
name|link
argument_list|,
name|newlink
argument_list|)
expr_stmt|;
name|Path
name|linkTarget
init|=
name|myfs
operator|.
name|getLinkTarget
argument_list|(
name|newlink
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected link's target to match target!"
argument_list|,
name|target
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected target to exist"
argument_list|,
name|wrapper
operator|.
name|exists
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRenameSrcNotWritableFS ()
specifier|public
name|void
name|testRenameSrcNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|linkParent
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0555
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameSrcNotWritableFS
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclRenameSrcNotWritableFS ()
specifier|public
name|void
name|testAclRenameSrcNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setAcl
argument_list|(
name|linkParent
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doRenameSrcNotWritableFS
argument_list|()
expr_stmt|;
block|}
DECL|method|doRenameSrcNotWritableFS ()
specifier|private
name|void
name|doRenameSrcNotWritableFS
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Rename the link when the target and parent are not writable
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|myfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|newlink
init|=
operator|new
name|Path
argument_list|(
name|targetParent
argument_list|,
literal|"newlink"
argument_list|)
decl_stmt|;
name|myfs
operator|.
name|rename
argument_list|(
name|link
argument_list|,
name|newlink
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renamed link even though link's parent is not writable!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Permission denied"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAccess ()
specifier|public
name|void
name|testAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|target
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0002
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setAcl
argument_list|(
name|target
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|NONE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|user
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|WRITE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileContext
name|myfc
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileContext
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Path to targetChild via symlink
name|myfc
operator|.
name|access
argument_list|(
name|link
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
try|try
block|{
name|myfc
operator|.
name|access
argument_list|(
name|link
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Path
name|badPath
init|=
operator|new
name|Path
argument_list|(
name|link
argument_list|,
literal|"bad"
argument_list|)
decl_stmt|;
try|try
block|{
name|myfc
operator|.
name|access
argument_list|(
name|badPath
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The access call should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
comment|// expected
name|String
name|message
init|=
name|ace
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
literal|"is not a directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|contains
argument_list|(
name|badPath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

