begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockRecoveryCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeIDProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeStorageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExtendedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlockKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlockWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlocksWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|CheckpointSignatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|ExportedBlockKeysProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamespaceInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RecoveringBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RemoteEditLogManifestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RemoteEditLogProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|BlockWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|TokenProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests for {@link PBHelper}  */
end_comment

begin_class
DECL|class|TestPBHelper
specifier|public
class|class
name|TestPBHelper
block|{
comment|/**    * Used for asserting equality on doubles.    */
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|0.000001
decl_stmt|;
annotation|@
name|Test
DECL|method|testConvertNamenodeRole ()
specifier|public
name|void
name|testConvertNamenodeRole
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|BACKUP
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|BACKUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|NAMENODE
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|BACKUP
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|BACKUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|NAMENODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getStorageInfo (NodeType type)
specifier|private
specifier|static
name|StorageInfo
name|getStorageInfo
parameter_list|(
name|NodeType
name|type
parameter_list|)
block|{
return|return
operator|new
name|StorageInfo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"cid"
argument_list|,
literal|3
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testConvertStoragInfo ()
specifier|public
name|void
name|testConvertStoragInfo
parameter_list|()
block|{
name|StorageInfo
name|info
init|=
name|getStorageInfo
argument_list|(
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
decl_stmt|;
name|StorageInfoProto
name|infoProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|StorageInfo
name|info2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|infoProto
argument_list|,
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info2
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|,
name|info2
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info2
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|info2
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertNamenodeRegistration ()
specifier|public
name|void
name|testConvertNamenodeRegistration
parameter_list|()
block|{
name|StorageInfo
name|info
init|=
name|getStorageInfo
argument_list|(
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
decl_stmt|;
name|NamenodeRegistration
name|reg
init|=
operator|new
name|NamenodeRegistration
argument_list|(
literal|"address:999"
argument_list|,
literal|"http:1000"
argument_list|,
name|info
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
decl_stmt|;
name|NamenodeRegistrationProto
name|regProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|NamenodeRegistration
name|reg2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|regProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|,
name|reg2
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getCTime
argument_list|()
argument_list|,
name|reg2
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|reg2
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|reg2
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getRegistrationID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|,
name|reg2
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getVersion
argument_list|()
argument_list|,
name|reg2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertDatanodeID ()
specifier|public
name|void
name|testConvertDatanodeID
parameter_list|()
block|{
name|DatanodeID
name|dn
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeID
argument_list|()
decl_stmt|;
name|DatanodeIDProto
name|dnProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|DatanodeID
name|dn2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|dnProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|dn
argument_list|,
name|dn2
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (DatanodeID dn, DatanodeID dn2)
name|void
name|compare
parameter_list|(
name|DatanodeID
name|dn
parameter_list|,
name|DatanodeID
name|dn2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|dn
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dn2
operator|.
name|getIpAddr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dn2
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dn2
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|dn2
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|dn2
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|,
name|dn2
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (DatanodeStorage dns1, DatanodeStorage dns2)
name|void
name|compare
parameter_list|(
name|DatanodeStorage
name|dns1
parameter_list|,
name|DatanodeStorage
name|dns2
parameter_list|)
block|{
name|assertThat
argument_list|(
name|dns2
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|is
argument_list|(
name|dns1
operator|.
name|getStorageID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dns2
operator|.
name|getState
argument_list|()
argument_list|,
name|is
argument_list|(
name|dns1
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dns2
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|is
argument_list|(
name|dns1
operator|.
name|getStorageType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlock ()
specifier|public
name|void
name|testConvertBlock
parameter_list|()
block|{
name|Block
name|b
init|=
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|BlockProto
name|bProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|Block
name|b2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|bProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockWithLocations (int bid)
specifier|private
specifier|static
name|BlockWithLocations
name|getBlockWithLocations
parameter_list|(
name|int
name|bid
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|datanodeUuids
init|=
block|{
literal|"dn1"
block|,
literal|"dn2"
block|,
literal|"dn3"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|storageIDs
init|=
block|{
literal|"s1"
block|,
literal|"s2"
block|,
literal|"s3"
block|}
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|storageTypes
init|=
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
decl_stmt|;
return|return
operator|new
name|BlockWithLocations
argument_list|(
operator|new
name|Block
argument_list|(
name|bid
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|datanodeUuids
argument_list|,
name|storageIDs
argument_list|,
name|storageTypes
argument_list|)
return|;
block|}
DECL|method|compare (BlockWithLocations locs1, BlockWithLocations locs2)
specifier|private
name|void
name|compare
parameter_list|(
name|BlockWithLocations
name|locs1
parameter_list|,
name|BlockWithLocations
name|locs2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|locs1
operator|.
name|getBlock
argument_list|()
argument_list|,
name|locs2
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|locs1
operator|.
name|getStorageIDs
argument_list|()
argument_list|,
name|locs2
operator|.
name|getStorageIDs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlockWithLocations ()
specifier|public
name|void
name|testConvertBlockWithLocations
parameter_list|()
block|{
name|BlockWithLocations
name|locs
init|=
name|getBlockWithLocations
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BlockWithLocationsProto
name|locsProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|locs
argument_list|)
decl_stmt|;
name|BlockWithLocations
name|locs2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|locsProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|locs
argument_list|,
name|locs2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlocksWithLocations ()
specifier|public
name|void
name|testConvertBlocksWithLocations
parameter_list|()
block|{
name|BlockWithLocations
index|[]
name|list
init|=
operator|new
name|BlockWithLocations
index|[]
block|{
name|getBlockWithLocations
argument_list|(
literal|1
argument_list|)
block|,
name|getBlockWithLocations
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
name|BlocksWithLocations
name|locs
init|=
operator|new
name|BlocksWithLocations
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|BlocksWithLocationsProto
name|locsProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|locs
argument_list|)
decl_stmt|;
name|BlocksWithLocations
name|locs2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|locsProto
argument_list|)
decl_stmt|;
name|BlockWithLocations
index|[]
name|blocks
init|=
name|locs
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|BlockWithLocations
index|[]
name|blocks2
init|=
name|locs2
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|blocks
operator|.
name|length
argument_list|,
name|blocks2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|blocks2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBlockKey (int keyId)
specifier|private
specifier|static
name|BlockKey
name|getBlockKey
parameter_list|(
name|int
name|keyId
parameter_list|)
block|{
return|return
operator|new
name|BlockKey
argument_list|(
name|keyId
argument_list|,
literal|10
argument_list|,
literal|"encodedKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compare (BlockKey k1, BlockKey k2)
specifier|private
name|void
name|compare
parameter_list|(
name|BlockKey
name|k1
parameter_list|,
name|BlockKey
name|k2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|k1
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|k2
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|k1
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|k2
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getEncodedKey
argument_list|()
argument_list|,
name|k2
operator|.
name|getEncodedKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlockKey ()
specifier|public
name|void
name|testConvertBlockKey
parameter_list|()
block|{
name|BlockKey
name|key
init|=
name|getBlockKey
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BlockKeyProto
name|keyProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|BlockKey
name|key1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|keyProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|key
argument_list|,
name|key1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertExportedBlockKeys ()
specifier|public
name|void
name|testConvertExportedBlockKeys
parameter_list|()
block|{
name|BlockKey
index|[]
name|keys
init|=
operator|new
name|BlockKey
index|[]
block|{
name|getBlockKey
argument_list|(
literal|2
argument_list|)
block|,
name|getBlockKey
argument_list|(
literal|3
argument_list|)
block|}
decl_stmt|;
name|ExportedBlockKeys
name|expKeys
init|=
operator|new
name|ExportedBlockKeys
argument_list|(
literal|true
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
name|getBlockKey
argument_list|(
literal|1
argument_list|)
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|ExportedBlockKeysProto
name|expKeysProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|expKeys
argument_list|)
decl_stmt|;
name|ExportedBlockKeys
name|expKeys1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|expKeysProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|expKeys
argument_list|,
name|expKeys1
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (ExportedBlockKeys expKeys, ExportedBlockKeys expKeys1)
name|void
name|compare
parameter_list|(
name|ExportedBlockKeys
name|expKeys
parameter_list|,
name|ExportedBlockKeys
name|expKeys1
parameter_list|)
block|{
name|BlockKey
index|[]
name|allKeys
init|=
name|expKeys
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
name|BlockKey
index|[]
name|allKeys1
init|=
name|expKeys1
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|allKeys
operator|.
name|length
argument_list|,
name|allKeys1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|allKeys
index|[
name|i
index|]
argument_list|,
name|allKeys1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|compare
argument_list|(
name|expKeys
operator|.
name|getCurrentKey
argument_list|()
argument_list|,
name|expKeys1
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expKeys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|,
name|expKeys1
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expKeys
operator|.
name|getTokenLifetime
argument_list|()
argument_list|,
name|expKeys1
operator|.
name|getTokenLifetime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertCheckpointSignature ()
specifier|public
name|void
name|testConvertCheckpointSignature
parameter_list|()
block|{
name|CheckpointSignature
name|s
init|=
operator|new
name|CheckpointSignature
argument_list|(
name|getStorageInfo
argument_list|(
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
argument_list|,
literal|"bpid"
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|CheckpointSignatureProto
name|sProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|CheckpointSignature
name|s1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|sProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getBlockpoolID
argument_list|()
argument_list|,
name|s1
operator|.
name|getBlockpoolID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|s1
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getCTime
argument_list|()
argument_list|,
name|s1
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|,
name|s1
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|s1
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|,
name|s1
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|s1
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (RemoteEditLog l1, RemoteEditLog l2)
specifier|private
specifier|static
name|void
name|compare
parameter_list|(
name|RemoteEditLog
name|l1
parameter_list|,
name|RemoteEditLog
name|l2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|l1
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|l2
operator|.
name|getEndTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|l2
operator|.
name|getStartTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertRemoteEditLog ()
specifier|public
name|void
name|testConvertRemoteEditLog
parameter_list|()
block|{
name|RemoteEditLog
name|l
init|=
operator|new
name|RemoteEditLog
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|RemoteEditLogProto
name|lProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|RemoteEditLog
name|l1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|lProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|l
argument_list|,
name|l1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertRemoteEditLogManifest ()
specifier|public
name|void
name|testConvertRemoteEditLogManifest
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteEditLog
argument_list|>
argument_list|()
decl_stmt|;
name|logs
operator|.
name|add
argument_list|(
operator|new
name|RemoteEditLog
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logs
operator|.
name|add
argument_list|(
operator|new
name|RemoteEditLog
argument_list|(
literal|11
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteEditLogManifest
name|m
init|=
operator|new
name|RemoteEditLogManifest
argument_list|(
name|logs
argument_list|)
decl_stmt|;
name|RemoteEditLogManifestProto
name|mProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|RemoteEditLogManifest
name|m1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|mProto
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs1
init|=
name|m1
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|logs
operator|.
name|size
argument_list|()
argument_list|,
name|logs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|logs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|logs1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getExtendedBlock ()
specifier|public
name|ExtendedBlock
name|getExtendedBlock
parameter_list|()
block|{
return|return
name|getExtendedBlock
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|getExtendedBlock (long blkid)
specifier|public
name|ExtendedBlock
name|getExtendedBlock
parameter_list|(
name|long
name|blkid
parameter_list|)
block|{
return|return
operator|new
name|ExtendedBlock
argument_list|(
literal|"bpid"
argument_list|,
name|blkid
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|)
return|;
block|}
DECL|method|compare (DatanodeInfo dn1, DatanodeInfo dn2)
specifier|private
name|void
name|compare
parameter_list|(
name|DatanodeInfo
name|dn1
parameter_list|,
name|DatanodeInfo
name|dn2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getAdminState
argument_list|()
argument_list|,
name|dn2
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|,
name|dn2
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getBlockPoolUsedPercent
argument_list|()
argument_list|,
name|dn2
operator|.
name|getBlockPoolUsedPercent
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|dn2
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getDatanodeReport
argument_list|()
argument_list|,
name|dn2
operator|.
name|getDatanodeReport
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getDfsUsed
argument_list|()
argument_list|,
name|dn1
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getDfsUsedPercent
argument_list|()
argument_list|,
name|dn1
operator|.
name|getDfsUsedPercent
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getIpAddr
argument_list|()
argument_list|,
name|dn2
operator|.
name|getIpAddr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dn2
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|dn2
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getIpcPort
argument_list|()
argument_list|,
name|dn2
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getLastUpdate
argument_list|()
argument_list|,
name|dn2
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getLevel
argument_list|()
argument_list|,
name|dn2
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dn1
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|dn2
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertExtendedBlock ()
specifier|public
name|void
name|testConvertExtendedBlock
parameter_list|()
block|{
name|ExtendedBlock
name|b
init|=
name|getExtendedBlock
argument_list|()
decl_stmt|;
name|ExtendedBlockProto
name|bProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|b1
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|bProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|b
operator|.
name|setBlockId
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bProto
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b1
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|bProto
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|b1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertRecoveringBlock ()
specifier|public
name|void
name|testConvertRecoveringBlock
parameter_list|()
block|{
name|DatanodeInfo
name|di1
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|di2
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnInfo
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
name|di1
block|,
name|di2
block|}
decl_stmt|;
name|RecoveringBlock
name|b
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|getExtendedBlock
argument_list|()
argument_list|,
name|dnInfo
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RecoveringBlockProto
name|bProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|RecoveringBlock
name|b1
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|bProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|,
name|b1
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|dnInfo1
init|=
name|b1
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dnInfo
operator|.
name|length
argument_list|,
name|dnInfo1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnInfo
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|dnInfo
index|[
literal|0
index|]
argument_list|,
name|dnInfo1
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertBlockRecoveryCommand ()
specifier|public
name|void
name|testConvertBlockRecoveryCommand
parameter_list|()
block|{
name|DatanodeInfo
name|di1
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|di2
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnInfo
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
name|di1
block|,
name|di2
block|}
decl_stmt|;
name|List
argument_list|<
name|RecoveringBlock
argument_list|>
name|blks
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|RecoveringBlock
argument_list|(
name|getExtendedBlock
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dnInfo
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|RecoveringBlock
argument_list|(
name|getExtendedBlock
argument_list|(
literal|2
argument_list|)
argument_list|,
name|dnInfo
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|BlockRecoveryCommand
name|cmd
init|=
operator|new
name|BlockRecoveryCommand
argument_list|(
name|blks
argument_list|)
decl_stmt|;
name|BlockRecoveryCommandProto
name|proto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proto
operator|.
name|getBlocks
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getB
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|proto
operator|.
name|getBlocks
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getB
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|BlockRecoveryCommand
name|cmd2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecoveringBlock
argument_list|>
name|cmd2Blks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cmd2
operator|.
name|getRecoveringBlocks
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|cmd2Blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|cmd2Blks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|blks
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|cmd2Blks
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cmd
operator|.
name|toString
argument_list|()
argument_list|,
name|cmd2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertText ()
specifier|public
name|void
name|testConvertText
parameter_list|()
block|{
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
literal|"abc"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|t
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Text
name|t1
init|=
operator|new
name|Text
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|t1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlockToken ()
specifier|public
name|void
name|testConvertBlockToken
parameter_list|()
block|{
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
decl_stmt|;
name|TokenProto
name|tokenProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|tokenProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|token
argument_list|,
name|token2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertNamespaceInfo ()
specifier|public
name|void
name|testConvertNamespaceInfo
parameter_list|()
block|{
name|NamespaceInfo
name|info
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|37
argument_list|,
literal|"clusterID"
argument_list|,
literal|"bpID"
argument_list|,
literal|2300
argument_list|)
decl_stmt|;
name|NamespaceInfoProto
name|proto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|NamespaceInfo
name|info2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|info
argument_list|,
name|info2
argument_list|)
expr_stmt|;
comment|//Compare the StorageInfo
name|assertEquals
argument_list|(
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
name|info2
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getBuildVersion
argument_list|()
argument_list|,
name|info2
operator|.
name|getBuildVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (StorageInfo expected, StorageInfo actual)
specifier|private
name|void
name|compare
parameter_list|(
name|StorageInfo
name|expected
parameter_list|,
name|StorageInfo
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|clusterID
argument_list|,
name|actual
operator|.
name|clusterID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|namespaceID
argument_list|,
name|actual
operator|.
name|namespaceID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|cTime
argument_list|,
name|actual
operator|.
name|cTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|layoutVersion
argument_list|,
name|actual
operator|.
name|layoutVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (Token<BlockTokenIdentifier> expected, Token<BlockTokenIdentifier> actual)
specifier|private
name|void
name|compare
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|expected
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|actual
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|getPassword
argument_list|()
argument_list|,
name|actual
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getKind
argument_list|()
argument_list|,
name|actual
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getService
argument_list|()
argument_list|,
name|actual
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (LocatedBlock expected, LocatedBlock actual)
specifier|private
name|void
name|compare
parameter_list|(
name|LocatedBlock
name|expected
parameter_list|,
name|LocatedBlock
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlock
argument_list|()
argument_list|,
name|actual
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|expected
operator|.
name|getBlockToken
argument_list|()
argument_list|,
name|actual
operator|.
name|getBlockToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|actual
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isCorrupt
argument_list|()
argument_list|,
name|actual
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|ei
init|=
name|expected
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|ai
init|=
name|actual
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ei
operator|.
name|length
argument_list|,
name|ai
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ei
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|ei
index|[
name|i
index|]
argument_list|,
name|ai
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createLocatedBlock ()
specifier|private
name|LocatedBlock
name|createLocatedBlock
parameter_list|()
block|{
name|DatanodeInfo
index|[]
name|dnInfos
init|=
block|{
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h1"
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
block|,
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h2"
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
block|,
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h3"
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
block|,
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h4"
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
block|,     }
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
block|{
literal|"s1"
block|,
literal|"s2"
block|,
literal|"s3"
block|,
literal|"s4"
block|}
decl_stmt|;
name|StorageType
index|[]
name|media
init|=
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|}
decl_stmt|;
name|LocatedBlock
name|lb
init|=
operator|new
name|LocatedBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"bp12"
argument_list|,
literal|12345
argument_list|,
literal|10
argument_list|,
literal|53
argument_list|)
argument_list|,
name|dnInfos
argument_list|,
name|storageIDs
argument_list|,
name|media
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{}
argument_list|)
decl_stmt|;
name|lb
operator|.
name|setBlockToken
argument_list|(
operator|new
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
DECL|method|createLocatedBlockNoStorageMedia ()
specifier|private
name|LocatedBlock
name|createLocatedBlockNoStorageMedia
parameter_list|()
block|{
name|DatanodeInfo
index|[]
name|dnInfos
init|=
block|{
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h1"
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
argument_list|)
block|,
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h2"
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
block|,
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"h3"
argument_list|,
name|AdminStates
operator|.
name|NORMAL
argument_list|)
block|}
decl_stmt|;
name|LocatedBlock
name|lb
init|=
operator|new
name|LocatedBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
literal|"bp12"
argument_list|,
literal|12345
argument_list|,
literal|10
argument_list|,
literal|53
argument_list|)
argument_list|,
name|dnInfos
argument_list|)
decl_stmt|;
name|lb
operator|.
name|setBlockToken
argument_list|(
operator|new
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|(
literal|"identifier"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kind"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lb
operator|.
name|setStartOffset
argument_list|(
literal|5
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
annotation|@
name|Test
DECL|method|testConvertLocatedBlock ()
specifier|public
name|void
name|testConvertLocatedBlock
parameter_list|()
block|{
name|LocatedBlock
name|lb
init|=
name|createLocatedBlock
argument_list|()
decl_stmt|;
name|LocatedBlockProto
name|lbProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|lb
argument_list|)
decl_stmt|;
name|LocatedBlock
name|lb2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|lbProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|lb
argument_list|,
name|lb2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertLocatedBlockNoStorageMedia ()
specifier|public
name|void
name|testConvertLocatedBlockNoStorageMedia
parameter_list|()
block|{
name|LocatedBlock
name|lb
init|=
name|createLocatedBlockNoStorageMedia
argument_list|()
decl_stmt|;
name|LocatedBlockProto
name|lbProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|lb
argument_list|)
decl_stmt|;
name|LocatedBlock
name|lb2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|lbProto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|lb
argument_list|,
name|lb2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertLocatedBlockList ()
specifier|public
name|void
name|testConvertLocatedBlockList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
name|lbl
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|lbl
operator|.
name|add
argument_list|(
name|createLocatedBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|lbpl
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlock2
argument_list|(
name|lbl
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbl2
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlock
argument_list|(
name|lbpl
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lbl
operator|.
name|size
argument_list|()
argument_list|,
name|lbl2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|lbl
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|lbl2
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertLocatedBlockArray ()
specifier|public
name|void
name|testConvertLocatedBlockArray
parameter_list|()
block|{
name|LocatedBlock
index|[]
name|lbl
init|=
operator|new
name|LocatedBlock
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|lbl
index|[
name|i
index|]
operator|=
name|createLocatedBlock
argument_list|()
expr_stmt|;
block|}
name|LocatedBlockProto
index|[]
name|lbpl
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlock
argument_list|(
name|lbl
argument_list|)
decl_stmt|;
name|LocatedBlock
index|[]
name|lbl2
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlock
argument_list|(
name|lbpl
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lbl
operator|.
name|length
argument_list|,
name|lbl2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|compare
argument_list|(
name|lbl
index|[
name|i
index|]
argument_list|,
name|lbl2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConvertDatanodeRegistration ()
specifier|public
name|void
name|testConvertDatanodeRegistration
parameter_list|()
block|{
name|DatanodeID
name|dnId
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeID
argument_list|()
decl_stmt|;
name|BlockKey
index|[]
name|keys
init|=
operator|new
name|BlockKey
index|[]
block|{
name|getBlockKey
argument_list|(
literal|2
argument_list|)
block|,
name|getBlockKey
argument_list|(
literal|3
argument_list|)
block|}
decl_stmt|;
name|ExportedBlockKeys
name|expKeys
init|=
operator|new
name|ExportedBlockKeys
argument_list|(
literal|true
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
name|getBlockKey
argument_list|(
literal|1
argument_list|)
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|reg
init|=
operator|new
name|DatanodeRegistration
argument_list|(
name|dnId
argument_list|,
operator|new
name|StorageInfo
argument_list|(
name|NodeType
operator|.
name|DATA_NODE
argument_list|)
argument_list|,
name|expKeys
argument_list|,
literal|"3.0.0"
argument_list|)
decl_stmt|;
name|DatanodeRegistrationProto
name|proto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|reg2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|reg
operator|.
name|getStorageInfo
argument_list|()
argument_list|,
name|reg2
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|reg
operator|.
name|getExportedKeys
argument_list|()
argument_list|,
name|reg2
operator|.
name|getExportedKeys
argument_list|()
argument_list|)
expr_stmt|;
name|compare
argument_list|(
name|reg
argument_list|,
name|reg2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|,
name|reg2
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestConvertDatanodeStorage ()
specifier|public
name|void
name|TestConvertDatanodeStorage
parameter_list|()
block|{
name|DatanodeStorage
name|dns1
init|=
operator|new
name|DatanodeStorage
argument_list|(
literal|"id1"
argument_list|,
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|DatanodeStorageProto
name|proto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|dns1
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|dns2
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|compare
argument_list|(
name|dns1
argument_list|,
name|dns2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertBlockCommand ()
specifier|public
name|void
name|testConvertBlockCommand
parameter_list|()
block|{
name|Block
index|[]
name|blocks
init|=
operator|new
name|Block
index|[]
block|{
operator|new
name|Block
argument_list|(
literal|21
argument_list|)
block|,
operator|new
name|Block
argument_list|(
literal|22
argument_list|)
block|}
decl_stmt|;
name|DatanodeInfo
index|[]
index|[]
name|dnInfos
init|=
operator|new
name|DatanodeInfo
index|[]
index|[]
block|{
operator|new
name|DatanodeInfo
index|[
literal|1
index|]
block|,
operator|new
name|DatanodeInfo
index|[
literal|2
index|]
block|}
decl_stmt|;
name|dnInfos
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
expr_stmt|;
name|dnInfos
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
expr_stmt|;
name|dnInfos
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
expr_stmt|;
name|String
index|[]
index|[]
name|storageIDs
init|=
block|{
block|{
literal|"s00"
block|}
block|,
block|{
literal|"s10"
block|,
literal|"s11"
block|}
block|}
decl_stmt|;
name|StorageType
index|[]
index|[]
name|storageTypes
init|=
block|{
block|{
name|StorageType
operator|.
name|DEFAULT
block|}
block|,
block|{
name|StorageType
operator|.
name|DEFAULT
block|,
name|StorageType
operator|.
name|DEFAULT
block|}
block|}
decl_stmt|;
name|BlockCommand
name|bc
init|=
operator|new
name|BlockCommand
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
argument_list|,
literal|"bp1"
argument_list|,
name|blocks
argument_list|,
name|dnInfos
argument_list|,
name|storageTypes
argument_list|,
name|storageIDs
argument_list|)
decl_stmt|;
name|BlockCommandProto
name|bcProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|bc
argument_list|)
decl_stmt|;
name|BlockCommand
name|bc2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|bcProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bc
operator|.
name|getAction
argument_list|()
argument_list|,
name|bc2
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bc
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
argument_list|,
name|bc2
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Block
index|[]
name|blocks2
init|=
name|bc2
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|blocks2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DatanodeInfo
index|[]
index|[]
name|dnInfos2
init|=
name|bc2
operator|.
name|getTargets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dnInfos
operator|.
name|length
argument_list|,
name|dnInfos2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeInfo
index|[]
name|d1
init|=
name|dnInfos
index|[
name|i
index|]
decl_stmt|;
name|DatanodeInfo
index|[]
name|d2
init|=
name|dnInfos2
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|d1
operator|.
name|length
argument_list|,
name|d2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|d1
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|compare
argument_list|(
name|d1
index|[
name|j
index|]
argument_list|,
name|d2
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testChecksumTypeProto ()
specifier|public
name|void
name|testChecksumTypeProto
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|NULL
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_NULL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_CRC32
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_CRC32C
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_NULL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|)
argument_list|,
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_CRC32
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|)
argument_list|,
name|HdfsProtos
operator|.
name|ChecksumTypeProto
operator|.
name|CHECKSUM_CRC32C
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclEntryProto ()
specifier|public
name|void
name|testAclEntryProto
parameter_list|()
block|{
comment|// All fields populated.
name|AclEntry
name|e1
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// No name.
name|AclEntry
name|e2
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// No permission, which will default to the 0'th enum element.
name|AclEntry
name|e3
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
index|[]
name|expected
init|=
operator|new
name|AclEntry
index|[]
block|{
name|e1
block|,
name|e2
block|,
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|e3
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|e3
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|e3
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|NONE
argument_list|)
operator|.
name|build
argument_list|()
block|}
decl_stmt|;
name|AclEntry
index|[]
name|actual
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PBHelperClient
operator|.
name|convertAclEntry
argument_list|(
name|PBHelperClient
operator|.
name|convertAclEntryProto
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|AclEntry
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclStatusProto ()
specifier|public
name|void
name|testAclStatusProto
parameter_list|()
block|{
name|AclEntry
name|e
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclStatus
name|s
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
operator|.
name|owner
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|group
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|addEntry
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

