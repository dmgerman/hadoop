begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link PBHelper}  */
end_comment

begin_class
DECL|class|TestPBHelper
specifier|public
class|class
name|TestPBHelper
block|{
annotation|@
name|Test
DECL|method|testConvertNamenodeRole ()
specifier|public
name|void
name|testConvertNamenodeRole
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|BACKUP
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|BACKUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRoleProto
operator|.
name|NAMENODE
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|BACKUP
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|BACKUP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|CHECKPOINT
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|NamenodeRoleProto
operator|.
name|NAMENODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertStoragInfo ()
specifier|public
name|void
name|testConvertStoragInfo
parameter_list|()
block|{
name|StorageInfo
name|info
init|=
operator|new
name|StorageInfo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"cid"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|StorageInfoProto
name|infoProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|StorageInfo
name|info2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|infoProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info2
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|,
name|info2
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info2
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|info2
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertNamenodeRegistration ()
specifier|public
name|void
name|testConvertNamenodeRegistration
parameter_list|()
block|{
name|StorageInfo
name|info
init|=
operator|new
name|StorageInfo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"cid"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|NamenodeRegistration
name|reg
init|=
operator|new
name|NamenodeRegistration
argument_list|(
literal|"address:999"
argument_list|,
literal|"http:1000"
argument_list|,
name|info
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
decl_stmt|;
name|NamenodeRegistrationProto
name|regProto
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|reg
argument_list|)
decl_stmt|;
name|NamenodeRegistration
name|reg2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|regProto
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|,
name|reg2
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getCTime
argument_list|()
argument_list|,
name|reg2
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|reg2
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|reg2
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getRegistrationID
argument_list|()
argument_list|,
name|reg2
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|,
name|reg2
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reg
operator|.
name|getVersion
argument_list|()
argument_list|,
name|reg2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

