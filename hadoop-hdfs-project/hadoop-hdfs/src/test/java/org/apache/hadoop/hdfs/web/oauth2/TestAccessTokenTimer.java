begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.oauth2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|oauth2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestAccessTokenTimer
specifier|public
class|class
name|TestAccessTokenTimer
block|{
annotation|@
name|Test
DECL|method|expireConversionWorks ()
specifier|public
name|void
name|expireConversionWorks
parameter_list|()
block|{
name|Timer
name|mockTimer
init|=
name|mock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTimer
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5l
argument_list|)
expr_stmt|;
name|AccessTokenTimer
name|timer
init|=
operator|new
name|AccessTokenTimer
argument_list|(
name|mockTimer
argument_list|)
decl_stmt|;
name|timer
operator|.
name|setExpiresIn
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3005
argument_list|,
name|timer
operator|.
name|getNextRefreshMSSinceEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timer
operator|.
name|shouldRefresh
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldRefreshIsCorrect ()
specifier|public
name|void
name|shouldRefreshIsCorrect
parameter_list|()
block|{
name|Timer
name|mockTimer
init|=
name|mock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockTimer
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|500l
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1000000l
operator|+
literal|500l
argument_list|)
expr_stmt|;
name|AccessTokenTimer
name|timer
init|=
operator|new
name|AccessTokenTimer
argument_list|(
name|mockTimer
argument_list|)
decl_stmt|;
name|timer
operator|.
name|setExpiresInMSSinceEpoch
argument_list|(
literal|"1000000"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|timer
operator|.
name|shouldRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timer
operator|.
name|shouldRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTimer
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

