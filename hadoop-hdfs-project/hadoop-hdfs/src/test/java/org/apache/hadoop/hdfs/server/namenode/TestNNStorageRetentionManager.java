begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getFinalizedEditsFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getImageFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|getInProgressEditsFileName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageStorageInspector
operator|.
name|FSImageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorageRetentionManager
operator|.
name|StoragePurger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestNNStorageRetentionManager
specifier|public
class|class
name|TestNNStorageRetentionManager
block|{
DECL|field|conf
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/**    * For the purpose of this test, purge as many edits as we can     * with no extra "safety cushion"    */
annotation|@
name|Before
DECL|method|setNoExtraEditRetention ()
specifier|public
name|void
name|setNoExtraEditRetention
parameter_list|()
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NUM_EXTRA_EDITS_RETAINED_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the "easy case" where we have more images in the    * directory than we need to keep. Should purge the    * old ones.    */
annotation|@
name|Test
DECL|method|testPurgeEasyCase ()
specifier|public
name|void
name|testPurgeEasyCase
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|401
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test that other files don't get purged
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/VERSION"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same as above, but across multiple directories    */
annotation|@
name|Test
DECL|method|testPurgeMultipleDirs ()
specifier|public
name|void
name|testPurgeMultipleDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo2"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo2/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|401
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that if we have fewer fsimages than the configured    * retention, we don't purge any of them    */
annotation|@
name|Test
DECL|method|testPurgeLessThanRetention ()
specifier|public
name|void
name|testPurgeLessThanRetention
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|401
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for edge case with no logs present at all.    */
annotation|@
name|Test
DECL|method|testNoLogs ()
specifier|public
name|void
name|testNoLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for edge case with no logs or images present at all.    */
annotation|@
name|Test
DECL|method|testEmptyDir ()
specifier|public
name|void
name|testEmptyDir
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that old in-progress logs are properly purged    */
annotation|@
name|Test
DECL|method|testOldInProgress ()
specifier|public
name|void
name|testOldInProgress
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE_AND_EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo1/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|101
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeparateEditDirs ()
specifier|public
name|void
name|testSeparateEditDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo2"
argument_list|,
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|401
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetainExtraLogs ()
specifier|public
name|void
name|testRetainExtraLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NUM_EXTRA_EDITS_RETAINED_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|TestCaseDescription
name|tc
init|=
operator|new
name|TestCaseDescription
argument_list|()
decl_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo1"
argument_list|,
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addRoot
argument_list|(
literal|"/foo2"
argument_list|,
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addImage
argument_list|(
literal|"/foo1/current/"
operator|+
name|getImageFileName
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Since we need 50 extra edits, *do* retain the 201-300 segment
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|201
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getFinalizedEditsFileName
argument_list|(
literal|301
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tc
operator|.
name|addLog
argument_list|(
literal|"/foo2/current/"
operator|+
name|getInProgressEditsFileName
argument_list|(
literal|401
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runTest
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest (TestCaseDescription tc)
specifier|private
name|void
name|runTest
parameter_list|(
name|TestCaseDescription
name|tc
parameter_list|)
throws|throws
name|IOException
block|{
name|StoragePurger
name|mockPurger
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NNStorageRetentionManager
operator|.
name|StoragePurger
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|FSImageFile
argument_list|>
name|imagesPurgedCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|FSImageFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|EditLogFile
argument_list|>
name|logsPurgedCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|EditLogFile
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Ask the manager to purge files we don't need any more
operator|new
name|NNStorageRetentionManager
argument_list|(
name|conf
argument_list|,
name|tc
operator|.
name|mockStorage
argument_list|()
argument_list|,
name|tc
operator|.
name|mockEditLog
argument_list|(
name|mockPurger
argument_list|)
argument_list|,
name|mockPurger
argument_list|)
operator|.
name|purgeOldStorage
argument_list|()
expr_stmt|;
comment|// Verify that it asked the purger to remove the correct files
name|Mockito
operator|.
name|verify
argument_list|(
name|mockPurger
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|purgeImage
argument_list|(
name|imagesPurgedCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockPurger
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|purgeLog
argument_list|(
name|logsPurgedCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check images
name|Set
argument_list|<
name|String
argument_list|>
name|purgedPaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FSImageFile
name|purged
range|:
name|imagesPurgedCaptor
operator|.
name|getAllValues
argument_list|()
control|)
block|{
name|purgedPaths
operator|.
name|add
argument_list|(
name|purged
operator|.
name|getFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|tc
operator|.
name|expectedPurgedImages
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|purgedPaths
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check images
name|purgedPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|EditLogFile
name|purged
range|:
name|logsPurgedCaptor
operator|.
name|getAllValues
argument_list|()
control|)
block|{
name|purgedPaths
operator|.
name|add
argument_list|(
name|purged
operator|.
name|getFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|tc
operator|.
name|expectedPurgedLogs
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|purgedPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCaseDescription
specifier|private
specifier|static
class|class
name|TestCaseDescription
block|{
DECL|field|dirRoots
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FakeRoot
argument_list|>
name|dirRoots
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|expectedPurgedLogs
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPurgedLogs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|expectedPurgedImages
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPurgedImages
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|class|FakeRoot
specifier|private
specifier|static
class|class
name|FakeRoot
block|{
DECL|field|type
name|NameNodeDirType
name|type
decl_stmt|;
DECL|field|files
name|List
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
DECL|method|FakeRoot (NameNodeDirType type)
name|FakeRoot
parameter_list|(
name|NameNodeDirType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|files
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|mockStorageDir ()
name|StorageDirectory
name|mockStorageDir
parameter_list|()
block|{
return|return
name|FSImageTestUtil
operator|.
name|mockStorageDirectory
argument_list|(
name|type
argument_list|,
literal|false
argument_list|,
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|addRoot (String root, NameNodeDirType dir)
name|void
name|addRoot
parameter_list|(
name|String
name|root
parameter_list|,
name|NameNodeDirType
name|dir
parameter_list|)
block|{
name|dirRoots
operator|.
name|put
argument_list|(
name|root
argument_list|,
operator|new
name|FakeRoot
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addFile (String path)
specifier|private
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FakeRoot
argument_list|>
name|entry
range|:
name|dirRoots
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|files
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addLog (String path, boolean expectPurge)
name|void
name|addLog
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|expectPurge
parameter_list|)
block|{
name|addFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectPurge
condition|)
block|{
name|expectedPurgedLogs
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addImage (String path, boolean expectPurge)
name|void
name|addImage
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|expectPurge
parameter_list|)
block|{
name|addFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectPurge
condition|)
block|{
name|expectedPurgedImages
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mockStorage ()
name|NNStorage
name|mockStorage
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StorageDirectory
argument_list|>
name|sds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FakeRoot
name|root
range|:
name|dirRoots
operator|.
name|values
argument_list|()
control|)
block|{
name|sds
operator|.
name|add
argument_list|(
name|root
operator|.
name|mockStorageDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mockStorageForDirs
argument_list|(
name|sds
operator|.
name|toArray
argument_list|(
operator|new
name|StorageDirectory
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|mockEditLog (StoragePurger purger)
specifier|public
name|FSEditLog
name|mockEditLog
parameter_list|(
name|StoragePurger
name|purger
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|JournalManager
argument_list|>
name|jms
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FakeRoot
name|root
range|:
name|dirRoots
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|type
operator|.
name|isOfType
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
condition|)
continue|continue;
comment|// passing null NNStorage for unit test because it does not use it
name|FileJournalManager
name|fjm
init|=
operator|new
name|FileJournalManager
argument_list|(
name|root
operator|.
name|mockStorageDir
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fjm
operator|.
name|purger
operator|=
name|purger
expr_stmt|;
name|jms
operator|.
name|add
argument_list|(
name|fjm
argument_list|)
expr_stmt|;
block|}
name|FSEditLog
name|mockLog
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSEditLog
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
assert|assert
name|args
operator|.
name|length
operator|==
literal|1
assert|;
name|long
name|txId
init|=
operator|(
name|Long
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|JournalManager
name|jm
range|:
name|jms
control|)
block|{
name|jm
operator|.
name|purgeLogsOlderThan
argument_list|(
name|txId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockLog
argument_list|)
operator|.
name|purgeLogsOlderThan
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mockLog
return|;
block|}
block|}
DECL|method|mockStorageForDirs (final StorageDirectory ... mockDirs)
specifier|private
specifier|static
name|NNStorage
name|mockStorageForDirs
parameter_list|(
specifier|final
name|StorageDirectory
modifier|...
name|mockDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|NNStorage
name|mockStorage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NNStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|FSImageStorageInspector
name|inspector
init|=
operator|(
name|FSImageStorageInspector
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|StorageDirectory
name|sd
range|:
name|mockDirs
control|)
block|{
name|inspector
operator|.
name|inspectDirectory
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockStorage
argument_list|)
operator|.
name|inspectStorageDirs
argument_list|(
name|Mockito
operator|.
expr|<
name|FSImageStorageInspector
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mockStorage
return|;
block|}
block|}
end_class

end_unit

