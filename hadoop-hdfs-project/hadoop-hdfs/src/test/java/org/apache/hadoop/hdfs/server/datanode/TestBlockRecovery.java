begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowDiskReports
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MIN_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyListOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RecoveryInProgressException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockRecoveryWorker
operator|.
name|BlockRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|ReplicaOutputStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|SleepAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * This tests if sync all replicas in block recovery works correctly.  */
end_comment

begin_class
DECL|class|TestBlockRecovery
specifier|public
class|class
name|TestBlockRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
literal|"data"
decl_stmt|;
DECL|field|dn
specifier|private
name|DataNode
name|dn
decl_stmt|;
DECL|field|spyDN
specifier|private
name|DataNode
name|spyDN
decl_stmt|;
DECL|field|recoveryWorker
specifier|private
name|BlockRecoveryWorker
name|recoveryWorker
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|tearDownDone
specifier|private
name|boolean
name|tearDownDone
decl_stmt|;
DECL|field|RECOVERY_ID
specifier|private
specifier|final
specifier|static
name|long
name|RECOVERY_ID
init|=
literal|3000L
decl_stmt|;
DECL|field|CLUSTER_ID
specifier|private
specifier|final
specifier|static
name|String
name|CLUSTER_ID
init|=
literal|"testClusterID"
decl_stmt|;
DECL|field|POOL_ID
specifier|private
specifier|final
specifier|static
name|String
name|POOL_ID
init|=
literal|"BP-TEST"
decl_stmt|;
DECL|field|NN_ADDR
specifier|private
specifier|final
specifier|static
name|InetSocketAddress
name|NN_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|5020
argument_list|)
decl_stmt|;
DECL|field|BLOCK_ID
specifier|private
specifier|final
specifier|static
name|long
name|BLOCK_ID
init|=
literal|1000L
decl_stmt|;
DECL|field|GEN_STAMP
specifier|private
specifier|final
specifier|static
name|long
name|GEN_STAMP
init|=
literal|2000L
decl_stmt|;
DECL|field|BLOCK_LEN
specifier|private
specifier|final
specifier|static
name|long
name|BLOCK_LEN
init|=
literal|3000L
decl_stmt|;
DECL|field|REPLICA_LEN1
specifier|private
specifier|final
specifier|static
name|long
name|REPLICA_LEN1
init|=
literal|6000L
decl_stmt|;
DECL|field|REPLICA_LEN2
specifier|private
specifier|final
specifier|static
name|long
name|REPLICA_LEN2
init|=
literal|5000L
decl_stmt|;
DECL|field|block
specifier|private
specifier|final
specifier|static
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|POOL_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|BLOCK_LEN
argument_list|,
name|GEN_STAMP
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|currentTestName
specifier|public
name|TestName
name|currentTestName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
specifier|final
name|int
name|bytesPerChecksum
init|=
literal|512
decl_stmt|;
DECL|field|blockLengthsSuite
specifier|private
specifier|final
name|int
index|[]
index|[]
index|[]
name|blockLengthsSuite
init|=
block|{
block|{
block|{
literal|11
operator|*
name|cellSize
block|,
literal|10
operator|*
name|cellSize
block|,
literal|9
operator|*
name|cellSize
block|,
literal|8
operator|*
name|cellSize
block|,
literal|7
operator|*
name|cellSize
block|,
literal|6
operator|*
name|cellSize
block|,
literal|5
operator|*
name|cellSize
block|,
literal|4
operator|*
name|cellSize
block|,
literal|3
operator|*
name|cellSize
block|}
block|,
block|{
literal|36
operator|*
name|cellSize
block|}
block|}
block|,
block|{
block|{
literal|3
operator|*
name|cellSize
block|,
literal|4
operator|*
name|cellSize
block|,
literal|5
operator|*
name|cellSize
block|,
literal|6
operator|*
name|cellSize
block|,
literal|7
operator|*
name|cellSize
block|,
literal|8
operator|*
name|cellSize
block|,
literal|9
operator|*
name|cellSize
block|,
literal|10
operator|*
name|cellSize
block|,
literal|11
operator|*
name|cellSize
block|}
block|,
block|{
literal|36
operator|*
name|cellSize
block|}
block|}
block|,
block|{
block|{
literal|11
operator|*
name|cellSize
block|,
literal|7
operator|*
name|cellSize
block|,
literal|6
operator|*
name|cellSize
block|,
literal|5
operator|*
name|cellSize
block|,
literal|4
operator|*
name|cellSize
block|,
literal|2
operator|*
name|cellSize
block|,
literal|9
operator|*
name|cellSize
block|,
literal|10
operator|*
name|cellSize
block|,
literal|11
operator|*
name|cellSize
block|}
block|,
block|{
literal|36
operator|*
name|cellSize
block|}
block|}
block|,
block|{
block|{
literal|8
operator|*
name|cellSize
operator|+
name|bytesPerChecksum
block|,
literal|7
operator|*
name|cellSize
operator|+
name|bytesPerChecksum
operator|*
literal|2
block|,
literal|6
operator|*
name|cellSize
operator|+
name|bytesPerChecksum
operator|*
literal|2
block|,
literal|5
operator|*
name|cellSize
operator|-
name|bytesPerChecksum
operator|*
literal|3
block|,
literal|4
operator|*
name|cellSize
operator|-
name|bytesPerChecksum
operator|*
literal|4
block|,
literal|3
operator|*
name|cellSize
operator|-
name|bytesPerChecksum
operator|*
literal|4
block|,
literal|9
operator|*
name|cellSize
block|,
literal|10
operator|*
name|cellSize
block|,
literal|11
operator|*
name|cellSize
block|}
block|,
block|{
literal|36
operator|*
name|cellSize
block|}
block|}
block|, }
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|long
DECL|field|TEST_STOP_WORKER_XCEIVER_STOP_TIMEOUT_MILLIS
name|TEST_STOP_WORKER_XCEIVER_STOP_TIMEOUT_MILLIS
init|=
literal|1000000000L
decl_stmt|;
comment|/**    * Starts an instance of DataNode    * @throws IOException    */
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|tearDownDone
operator|=
literal|false
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTestName
operator|.
name|getMethodName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DoesNotHoldLock"
argument_list|)
condition|)
block|{
comment|// This test requires a very long value for the xceiver stop timeout.
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY
argument_list|,
name|TEST_STOP_WORKER_XCEIVER_STOP_TIMEOUT_MILLIS
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
operator|+
name|NN_ADDR
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|NN_ADDR
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageLocation
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|DATA_DIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|dataDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeProtocolClientSideTranslatorPB
name|namenode
init|=
name|mock
argument_list|(
name|DatanodeProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|DatanodeRegistration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DatanodeRegistration
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|(
name|DatanodeRegistration
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|namenode
argument_list|)
operator|.
name|registerDatanode
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|versionRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
name|CLUSTER_ID
argument_list|,
name|POOL_ID
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|sendHeartbeat
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|StorageReport
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|VolumeFailureSummary
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|SlowPeerReports
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|SlowDiskReports
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HeartbeatResponse
argument_list|(
operator|new
name|DatanodeCommand
index|[
literal|0
index|]
argument_list|,
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
operator||
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|=
operator|new
name|DataNode
argument_list|(
name|conf
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|DatanodeProtocolClientSideTranslatorPB
name|connectToNN
parameter_list|(
name|InetSocketAddress
name|nnAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NN_ADDR
argument_list|,
name|nnAddr
argument_list|)
expr_stmt|;
return|return
name|namenode
return|;
block|}
block|}
expr_stmt|;
comment|// Trigger a heartbeat so that it acknowledges the NN as active.
name|dn
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|triggerHeartbeatForTests
argument_list|()
expr_stmt|;
name|waitForActiveNN
argument_list|()
expr_stmt|;
name|spyDN
operator|=
name|spy
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|recoveryWorker
operator|=
operator|new
name|BlockRecoveryWorker
argument_list|(
name|spyDN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for active NN up to 15 seconds.    */
DECL|method|waitForActiveNN ()
specifier|private
name|void
name|waitForActiveNN
parameter_list|()
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|dn
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActiveNN
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// Here its not failing, will again do the assertions for activeNN after
comment|// this waiting period and fails there if BPOS has not acknowledged
comment|// any NN as active.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get active NN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"InterruptedException while waiting to see active NN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Failed to get ActiveNN"
argument_list|,
name|dn
operator|.
name|getAllBpOs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActiveNN
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans the resources and closes the instance of datanode    * @throws IOException if an error occurred    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tearDownDone
operator|&&
name|dn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot close: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|DATA_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cannot delete data-node dirs"
argument_list|,
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tearDownDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Sync two replicas */
DECL|method|testSyncReplicas (ReplicaRecoveryInfo replica1, ReplicaRecoveryInfo replica2, InterDatanodeProtocol dn1, InterDatanodeProtocol dn2, long expectLen)
specifier|private
name|void
name|testSyncReplicas
parameter_list|(
name|ReplicaRecoveryInfo
name|replica1
parameter_list|,
name|ReplicaRecoveryInfo
name|replica2
parameter_list|,
name|InterDatanodeProtocol
name|dn1
parameter_list|,
name|InterDatanodeProtocol
name|dn2
parameter_list|,
name|long
name|expectLen
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
block|,
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
name|locs
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
name|syncList
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BlockRecord
name|record1
init|=
operator|new
name|BlockRecord
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeInfo
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"bogus"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|dn1
argument_list|,
name|replica1
argument_list|)
decl_stmt|;
name|BlockRecord
name|record2
init|=
operator|new
name|BlockRecord
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeInfo
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"bogus"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|dn2
argument_list|,
name|replica2
argument_list|)
decl_stmt|;
name|syncList
operator|.
name|add
argument_list|(
name|record1
argument_list|)
expr_stmt|;
name|syncList
operator|.
name|add
argument_list|(
name|record2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dn1
operator|.
name|updateReplicaUnderRecovery
argument_list|(
operator|(
name|ExtendedBlock
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"storage1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dn2
operator|.
name|updateReplicaUnderRecovery
argument_list|(
operator|(
name|ExtendedBlock
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"storage2"
argument_list|)
expr_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|RecoveryTaskContiguous
operator|.
name|syncBlock
argument_list|(
name|syncList
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.8.    * Two replicas are in Finalized state    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFinalizedReplicas ()
specifier|public
name|void
name|testFinalizedReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// two finalized replicas have different length
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
try|try
block|{
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Two finalized replicas should not have different lengthes!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Inconsistent size of finalized replicas. "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecovery_02.9.    * One replica is Finalized and another is RBW.     * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFinalizedRbwReplicas ()
specifier|public
name|void
name|testFinalizedRbwReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rbw and finalized replicas have the same length
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// rbw replica has a different length from the finalized one
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
expr_stmt|;
name|dn1
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|dn2
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.10.    * One replica is Finalized and another is RWR.     * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFinalizedRwrReplicas ()
specifier|public
name|void
name|testFinalizedRwrReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rbw and finalized replicas have the same length
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// rbw replica has a different length from the finalized one
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
expr_stmt|;
name|dn1
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|dn2
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.11.    * Two replicas are RBW.    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRBWReplicas ()
specifier|public
name|void
name|testRBWReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|REPLICA_LEN1
argument_list|,
name|REPLICA_LEN2
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.12.    * One replica is RBW and another is RWR.     * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRBW_RWRReplicas ()
specifier|public
name|void
name|testRBW_RWRReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.13.     * Two replicas are RWR.    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRWRReplicas ()
specifier|public
name|void
name|testRWRReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|REPLICA_LEN1
argument_list|,
name|REPLICA_LEN2
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
block|}
DECL|method|initRecoveringBlocks ()
specifier|private
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|initRecoveringBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|mockOtherDN
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
block|,
name|mockOtherDN
block|}
decl_stmt|;
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
name|locs
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|rBlock
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
comment|/**    * BlockRecoveryFI_05. One DN throws RecoveryInProgressException.    *    * @throws IOException    *           in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRecoveryInProgressException ()
specifier|public
name|void
name|testRecoveryInProgressException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doThrow
argument_list|(
operator|new
name|RecoveryInProgressException
argument_list|(
literal|"Replica recovery is in progress"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveringBlock
name|rBlock
range|:
name|initRecoveringBlocks
argument_list|()
control|)
block|{
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|spyTask
init|=
name|spy
argument_list|(
name|RecoveryTaskContiguous
argument_list|)
decl_stmt|;
name|spyTask
operator|.
name|recover
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|spyTask
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|syncBlock
argument_list|(
name|anyListOf
argument_list|(
name|BlockRecord
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecoveryFI_06. all datanodes throws an exception.    *    * @throws IOException    *           in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testErrorReplicas ()
specifier|public
name|void
name|testErrorReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveringBlock
name|rBlock
range|:
name|initRecoveringBlocks
argument_list|()
control|)
block|{
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|spyTask
init|=
name|spy
argument_list|(
name|RecoveryTaskContiguous
argument_list|)
decl_stmt|;
try|try
block|{
name|spyTask
operator|.
name|recover
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"All datanodes failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|spyTask
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|syncBlock
argument_list|(
name|anyListOf
argument_list|(
name|BlockRecord
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecoveryFI_07. max replica length from all DNs is zero.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testZeroLenReplicas ()
specifier|public
name|void
name|testZeroLenReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doReturn
argument_list|(
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveringBlock
name|rBlock
range|:
name|initRecoveringBlocks
argument_list|()
control|)
block|{
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|spyTask
init|=
name|spy
argument_list|(
name|RecoveryTaskContiguous
argument_list|)
decl_stmt|;
name|spyTask
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
name|DatanodeProtocol
name|dnP
init|=
name|recoveryWorker
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|dnP
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|DatanodeID
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|initBlockRecords (DataNode spyDN)
specifier|private
name|List
argument_list|<
name|BlockRecord
argument_list|>
name|initBlockRecords
parameter_list|(
name|DataNode
name|spyDN
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BlockRecord
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BlockRecord
name|blockRecord
init|=
operator|new
name|BlockRecord
argument_list|(
operator|new
name|DatanodeID
argument_list|(
name|dnR
argument_list|)
argument_list|,
name|spyDN
argument_list|,
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|blockRecord
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|field|rBlock
specifier|private
specifier|final
specifier|static
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
comment|/**    * BlockRecoveryFI_09. some/all DNs failed to update replicas.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFailedReplicaUpdate ()
specifier|public
name|void
name|testFailedReplicaUpdate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|RecoveryTaskContiguous
operator|.
name|syncBlock
argument_list|(
name|initBlockRecords
argument_list|(
name|spyDN
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecoveryFI_10. DN has no ReplicaUnderRecovery.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNoReplicaUnderRecovery ()
specifier|public
name|void
name|testNoReplicaUnderRecovery
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dn
operator|.
name|data
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|block
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
try|try
block|{
name|RecoveryTaskContiguous
operator|.
name|syncBlock
argument_list|(
name|initBlockRecords
argument_list|(
name|dn
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
name|DatanodeProtocol
name|namenode
init|=
name|recoveryWorker
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|namenode
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|(
name|DatanodeID
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecoveryFI_11. a replica's recovery id does not match new GS.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNotMatchedReplicaID ()
specifier|public
name|void
name|testNotMatchedReplicaID
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaInPipeline
name|replicaInfo
init|=
name|dn
operator|.
name|data
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|block
argument_list|,
literal|false
argument_list|)
operator|.
name|getReplica
argument_list|()
decl_stmt|;
name|ReplicaOutputStreams
name|streams
init|=
literal|null
decl_stmt|;
try|try
block|{
name|streams
operator|=
name|replicaInfo
operator|.
name|createStreams
argument_list|(
literal|true
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|getChecksumOut
argument_list|()
operator|.
name|write
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|dn
operator|.
name|data
operator|.
name|initReplicaRecovery
argument_list|(
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
name|RECOVERY_ID
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
try|try
block|{
name|RecoveryTaskContiguous
operator|.
name|syncBlock
argument_list|(
name|initBlockRecords
argument_list|(
name|dn
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
name|DatanodeProtocol
name|namenode
init|=
name|recoveryWorker
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|namenode
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|(
name|DatanodeID
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|streams
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify the race between finalizeBlock and Lease recovery    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRaceBetweenReplicaRecoveryAndFinalizeBlock ()
specifier|public
name|void
name|testRaceBetweenReplicaRecoveryAndFinalizeBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
comment|// Stop the Mocked DN started in startup()
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|block
init|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|recoveryInitResult
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Thread
name|recoveryThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|DatanodeInfo
index|[]
name|locations
init|=
name|block
operator|.
name|getLocations
argument_list|()
decl_stmt|;
specifier|final
name|RecoveringBlock
name|recoveringBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|locations
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataNode
operator|.
name|data
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|initReplicaRecovery
argument_list|(
name|recoveringBlock
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|recoveryInitResult
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|recoveryThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Writing should fail"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"are bad. Aborting..."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|recoveryThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Recovery should be initiated successfully"
argument_list|,
name|recoveryInitResult
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|block
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|cluster
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * DNs report RUR instead of RBW, RWR or FINALIZED. Primary DN expected to    * throw an exception.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRURReplicas ()
specifier|public
name|void
name|testRURReplicas
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doReturn
argument_list|(
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|ReplicaState
operator|.
name|RUR
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|RecoveringBlock
name|rBlock
range|:
name|initRecoveringBlocks
argument_list|()
control|)
block|{
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|RecoveryTaskContiguous
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskContiguous
argument_list|(
name|rBlock
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskContiguous
name|spyTask
init|=
name|spy
argument_list|(
name|RecoveryTaskContiguous
argument_list|)
decl_stmt|;
name|spyTask
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expect IOException to be thrown here
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong exception was thrown: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Found 1 replica(s) for block "
operator|+
name|block
operator|+
literal|" but none is in RWR or better state"
argument_list|)
argument_list|)
expr_stmt|;
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSafeLength ()
specifier|public
name|void
name|testSafeLength
parameter_list|()
throws|throws
name|Exception
block|{
comment|// hard coded policy to work with hard coded test suite
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
name|RecoveringStripedBlock
name|rBlockStriped
init|=
operator|new
name|RecoveringStripedBlock
argument_list|(
name|rBlock
argument_list|,
operator|new
name|byte
index|[
literal|9
index|]
argument_list|,
name|ecPolicy
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
name|recoveryWorker
init|=
operator|new
name|BlockRecoveryWorker
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|BlockRecoveryWorker
operator|.
name|RecoveryTaskStriped
name|recoveryTask
init|=
name|recoveryWorker
operator|.
expr|new
name|RecoveryTaskStriped
argument_list|(
name|rBlockStriped
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockLengthsSuite
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|blockLengths
init|=
name|blockLengthsSuite
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|safeLength
init|=
name|blockLengthsSuite
index|[
name|i
index|]
index|[
literal|1
index|]
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockRecord
argument_list|>
name|syncList
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|blockLengths
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|ReplicaRecoveryInfo
name|rInfo
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|id
argument_list|,
name|blockLengths
index|[
name|id
index|]
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|syncList
operator|.
name|put
argument_list|(
operator|(
name|long
operator|)
name|id
argument_list|,
operator|new
name|BlockRecord
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|rInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"BLOCK_LENGTHS_SUITE["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|safeLength
argument_list|,
name|recoveryTask
operator|.
name|getSafeLength
argument_list|(
name|syncList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestStopWorkerSemaphore
specifier|private
specifier|static
class|class
name|TestStopWorkerSemaphore
block|{
DECL|field|sem
specifier|final
name|Semaphore
name|sem
decl_stmt|;
DECL|field|gotInterruption
specifier|final
name|AtomicBoolean
name|gotInterruption
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|TestStopWorkerSemaphore ()
name|TestStopWorkerSemaphore
parameter_list|()
block|{
name|this
operator|.
name|sem
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempt to acquire a sempahore within a given timeout.      *      * This is useful for unit tests where we need to ignore InterruptedException      * when attempting to take a semaphore, but still want to honor the overall      * test timeout.      *      * @param timeoutMs   The timeout in miliseconds.      */
DECL|method|uninterruptiblyAcquire (long timeoutMs)
specifier|private
name|void
name|uninterruptiblyAcquire
parameter_list|(
name|long
name|timeoutMs
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTimeMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|remTime
init|=
name|startTimeMs
operator|+
name|timeoutMs
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|remTime
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to acquire the semaphore within "
operator|+
name|timeoutMs
operator|+
literal|" milliseconds."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|sem
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
name|remTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|gotInterruption
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|interface|TestStopWorkerRunnable
specifier|private
interface|interface
name|TestStopWorkerRunnable
block|{
comment|/**      * Return the name of the operation that this runnable performs.      */
DECL|method|opName ()
name|String
name|opName
parameter_list|()
function_decl|;
comment|/**      * Perform the operation.      */
DECL|method|run (RecoveringBlock recoveringBlock)
name|void
name|run
parameter_list|(
name|RecoveringBlock
name|recoveringBlock
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testInitReplicaRecoveryDoesNotHoldLock ()
specifier|public
name|void
name|testInitReplicaRecoveryDoesNotHoldLock
parameter_list|()
throws|throws
name|Exception
block|{
name|testStopWorker
argument_list|(
operator|new
name|TestStopWorkerRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|opName
parameter_list|()
block|{
return|return
literal|"initReplicaRecovery"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|RecoveringBlock
name|recoveringBlock
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|spyDN
operator|.
name|initReplicaRecovery
argument_list|(
name|recoveringBlock
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"meta does not exist"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testRecoverAppendDoesNotHoldLock ()
specifier|public
name|void
name|testRecoverAppendDoesNotHoldLock
parameter_list|()
throws|throws
name|Exception
block|{
name|testStopWorker
argument_list|(
operator|new
name|TestStopWorkerRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|opName
parameter_list|()
block|{
return|return
literal|"recoverAppend"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|RecoveringBlock
name|recoveringBlock
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ExtendedBlock
name|extBlock
init|=
name|recoveringBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|spyDN
operator|.
name|getFSDataset
argument_list|()
operator|.
name|recoverAppend
argument_list|(
name|extBlock
argument_list|,
name|extBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|extBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Corrupted replica ReplicaBeingWritten"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testRecoverCloseDoesNotHoldLock ()
specifier|public
name|void
name|testRecoverCloseDoesNotHoldLock
parameter_list|()
throws|throws
name|Exception
block|{
name|testStopWorker
argument_list|(
operator|new
name|TestStopWorkerRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|opName
parameter_list|()
block|{
return|return
literal|"recoverClose"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|RecoveringBlock
name|recoveringBlock
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ExtendedBlock
name|extBlock
init|=
name|recoveringBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|spyDN
operator|.
name|getFSDataset
argument_list|()
operator|.
name|recoverClose
argument_list|(
name|extBlock
argument_list|,
name|extBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|extBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Corrupted replica ReplicaBeingWritten"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that an FsDatasetImpl operation does not hold the lock for an    * unreasonable amount of time if a writer is taking a long time to stop.    */
DECL|method|testStopWorker (final TestStopWorkerRunnable tswr)
specifier|private
name|void
name|testStopWorker
parameter_list|(
specifier|final
name|TestStopWorkerRunnable
name|tswr
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|currentTestName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We need a long value for the data xceiver stop timeout.
comment|// Otherwise the timeout will trigger, and we will not have tested that
comment|// thread join was done locklessly.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_STOP_WORKER_XCEIVER_STOP_TIMEOUT_MILLIS
argument_list|,
name|dn
operator|.
name|getDnConf
argument_list|()
operator|.
name|getXceiverStopTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestStopWorkerSemaphore
name|progressParent
init|=
operator|new
name|TestStopWorkerSemaphore
argument_list|()
decl_stmt|;
specifier|final
name|TestStopWorkerSemaphore
name|terminateSlowWriter
init|=
operator|new
name|TestStopWorkerSemaphore
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<
name|String
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|recoveringBlocks
init|=
name|initRecoveringBlocks
argument_list|()
decl_stmt|;
specifier|final
name|RecoveringBlock
name|recoveringBlock
init|=
name|Iterators
operator|.
name|get
argument_list|(
name|recoveringBlocks
operator|.
name|iterator
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|block
init|=
name|recoveringBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|Thread
name|slowWriterThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Register this thread as the writer for the recoveringBlock.
name|LOG
operator|.
name|debug
argument_list|(
literal|"slowWriter creating rbw"
argument_list|)
expr_stmt|;
name|ReplicaHandler
name|replicaHandler
init|=
name|spyDN
operator|.
name|data
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
literal|null
argument_list|,
name|block
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|replicaHandler
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"slowWriter created rbw"
argument_list|)
expr_stmt|;
comment|// Tell the parent thread to start progressing.
name|progressParent
operator|.
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
name|terminateSlowWriter
operator|.
name|uninterruptiblyAcquire
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"slowWriter exiting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"slowWriter got exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|failure
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
literal|"slowWriter got exception "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Start the slow worker thread and wait for it to take ownership of the
comment|// ReplicaInPipeline
name|slowWriterThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|progressParent
operator|.
name|uninterruptiblyAcquire
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
comment|// Start a worker thread which will attempt to stop the writer.
name|Thread
name|stopWriterThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initiating "
operator|+
name|tswr
operator|.
name|opName
argument_list|()
argument_list|)
expr_stmt|;
name|tswr
operator|.
name|run
argument_list|(
name|recoveringBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"finished "
operator|+
name|tswr
operator|.
name|opName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"stopWriterThread got unexpected exception for "
operator|+
name|tswr
operator|.
name|opName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|failure
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
literal|"stopWriterThread got unexpected "
operator|+
literal|"exception for "
operator|+
name|tswr
operator|.
name|opName
argument_list|()
operator|+
literal|": "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|stopWriterThread
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|terminateSlowWriter
operator|.
name|gotInterruption
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Wait until stopWriterThread attempts to stop our slow writer by sending
comment|// it an InterruptedException.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// We know that stopWriterThread is in the process of joining our slow
comment|// writer.  It must not hold the lock during this operation.
comment|// In order to test that it does not, we attempt to do an operation that
comment|// requires the lock-- getReplicaString.
name|spyDN
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getReplicaString
argument_list|(
name|recoveringBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|recoveringBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Tell the slow writer to exit, and then wait for all threads to join.
name|terminateSlowWriter
operator|.
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
name|slowWriterThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|stopWriterThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Check that our worker threads exited cleanly.  This is not checked by the
comment|// unit test framework, so we have to do it manually here.
name|String
name|failureReason
init|=
name|failure
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|failureReason
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Thread failure: "
operator|+
name|failureReason
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for block recovery taking longer than the heartbeat interval.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000L
argument_list|)
DECL|method|testRecoverySlowerThanHeartbeat ()
specifier|public
name|void
name|testRecoverySlowerThanHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
comment|// Stop the Mocked DN started in startup()
name|SleepAnswer
name|delayer
init|=
operator|new
name|SleepAnswer
argument_list|(
literal|3000
argument_list|,
literal|6000
argument_list|)
decl_stmt|;
name|testRecoveryWithDatanodeDelayed
argument_list|(
name|delayer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for block recovery timeout. All recovery attempts will be delayed    * and the first attempt will be lost to trigger recovery timeout and retry.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000L
argument_list|)
DECL|method|testRecoveryTimeout ()
specifier|public
name|void
name|testRecoveryTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
comment|// Stop the Mocked DN started in startup()
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// Make sure first commitBlockSynchronization call from the DN gets lost
comment|// for the recovery timeout to expire and new recovery attempt
comment|// to be started.
name|SleepAnswer
name|delayer
init|=
operator|new
name|SleepAnswer
argument_list|(
literal|3000
argument_list|)
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|callRealMethod
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|3000
argument_list|)
operator|+
literal|6000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|callRealMethod
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
name|callRealMethod
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|interrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|testRecoveryWithDatanodeDelayed
argument_list|(
name|delayer
argument_list|)
expr_stmt|;
block|}
DECL|method|testRecoveryWithDatanodeDelayed ( GenericTestUtils.SleepAnswer recoveryDelayer)
specifier|private
name|void
name|testRecoveryWithDatanodeDelayed
parameter_list|(
name|GenericTestUtils
operator|.
name|SleepAnswer
name|recoveryDelayer
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|configuration
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|setBlockRecoveryTimeout
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file and never close the output stream to trigger recovery
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testSlowRecovery"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
literal|0
argument_list|,
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|datanode
range|:
name|dataNodes
control|)
block|{
name|DatanodeProtocolClientSideTranslatorPB
name|nnSpy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|datanode
argument_list|,
name|nn
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|recoveryDelayer
argument_list|)
operator|.
name|when
argument_list|(
name|nnSpy
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeID
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure hard lease expires to trigger replica recovery
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
literal|100L
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
comment|// Wait for recovery to succeed
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|ns
operator|.
name|getCompleteBlocksTotal
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
literal|300
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that block will be recovered even if there are less than the    * specified minReplication datanodes involved in its recovery.    *    * Check that, after recovering, the block will be successfully replicated.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000L
argument_list|)
DECL|method|testRecoveryWillIgnoreMinReplication ()
specifier|public
name|void
name|testRecoveryWillIgnoreMinReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
comment|// Stop the Mocked DN started in startup()
specifier|final
name|int
name|blockSize
init|=
literal|4096
decl_stmt|;
specifier|final
name|int
name|numReplicas
init|=
literal|3
decl_stmt|;
specifier|final
name|String
name|filename
init|=
literal|"/testIgnoreMinReplication"
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_REPLICATION_MIN_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|configuration
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
comment|// Create a file and never close the output stream to trigger recovery
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
operator|(
name|short
operator|)
name|numReplicas
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
literal|0
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|DFSClient
name|dfsClient
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|LocatedBlock
name|blk
init|=
name|dfsClient
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|blockSize
argument_list|)
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
comment|// Kill 2 out of 3 datanodes so that only 1 alive, thus< minReplication
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|dataNodes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|blk
operator|.
name|getLocations
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dataNodes
operator|.
name|size
argument_list|()
argument_list|,
name|numReplicas
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dataNode
range|:
name|dataNodes
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numReplicas
operator|-
literal|1
argument_list|)
control|)
block|{
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|dataNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|fsn
operator|.
name|getNumDeadDataNodes
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|300
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
comment|// Make sure hard lease expires to trigger replica recovery
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
literal|100L
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
comment|// Wait for recovery to succeed
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|dfs
operator|.
name|isFileClosed
argument_list|(
name|filePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|300
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
comment|// Wait for the block to be replicated
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|cluster
argument_list|,
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|)
argument_list|,
literal|1
argument_list|,
name|numReplicas
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

