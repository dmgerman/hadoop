begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyListOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RecoveryInProgressException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|BlockRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|ReplicaOutputStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * This tests if sync all replicas in block recovery works correctly  */
end_comment

begin_class
DECL|class|TestBlockRecovery
specifier|public
class|class
name|TestBlockRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
literal|"data"
decl_stmt|;
DECL|field|dn
specifier|private
name|DataNode
name|dn
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|RECOVERY_ID
specifier|private
specifier|final
specifier|static
name|long
name|RECOVERY_ID
init|=
literal|3000L
decl_stmt|;
DECL|field|CLUSTER_ID
specifier|private
specifier|final
specifier|static
name|String
name|CLUSTER_ID
init|=
literal|"testClusterID"
decl_stmt|;
DECL|field|POOL_ID
specifier|private
specifier|final
specifier|static
name|String
name|POOL_ID
init|=
literal|"BP-TEST"
decl_stmt|;
DECL|field|NN_ADDR
specifier|private
specifier|final
specifier|static
name|InetSocketAddress
name|NN_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|5020
argument_list|)
decl_stmt|;
DECL|field|BLOCK_ID
specifier|private
specifier|final
specifier|static
name|long
name|BLOCK_ID
init|=
literal|1000L
decl_stmt|;
DECL|field|GEN_STAMP
specifier|private
specifier|final
specifier|static
name|long
name|GEN_STAMP
init|=
literal|2000L
decl_stmt|;
DECL|field|BLOCK_LEN
specifier|private
specifier|final
specifier|static
name|long
name|BLOCK_LEN
init|=
literal|3000L
decl_stmt|;
DECL|field|REPLICA_LEN1
specifier|private
specifier|final
specifier|static
name|long
name|REPLICA_LEN1
init|=
literal|6000L
decl_stmt|;
DECL|field|REPLICA_LEN2
specifier|private
specifier|final
specifier|static
name|long
name|REPLICA_LEN2
init|=
literal|5000L
decl_stmt|;
DECL|field|block
specifier|private
specifier|final
specifier|static
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|POOL_ID
argument_list|,
name|BLOCK_ID
argument_list|,
name|BLOCK_LEN
argument_list|,
name|GEN_STAMP
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts an instance of DataNode    * @throws IOException    */
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
operator|+
name|NN_ADDR
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|NN_ADDR
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|DATA_DIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|dataDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeProtocolClientSideTranslatorPB
name|namenode
init|=
name|mock
argument_list|(
name|DatanodeProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|DatanodeRegistration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DatanodeRegistration
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|(
name|DatanodeRegistration
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|namenode
argument_list|)
operator|.
name|registerDatanode
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|versionRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
name|CLUSTER_ID
argument_list|,
name|POOL_ID
argument_list|,
literal|1L
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|namenode
operator|.
name|sendHeartbeat
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|StorageReport
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HeartbeatResponse
argument_list|(
operator|new
name|DatanodeCommand
index|[
literal|0
index|]
argument_list|,
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|State
operator|.
name|ACTIVE
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dn
operator|=
operator|new
name|DataNode
argument_list|(
name|conf
argument_list|,
name|dirs
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
name|DatanodeProtocolClientSideTranslatorPB
name|connectToNN
parameter_list|(
name|InetSocketAddress
name|nnAddr
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NN_ADDR
argument_list|,
name|nnAddr
argument_list|)
expr_stmt|;
return|return
name|namenode
return|;
block|}
block|}
expr_stmt|;
comment|// Trigger a heartbeat so that it acknowledges the NN as active.
name|dn
operator|.
name|getAllBpOs
argument_list|()
index|[
literal|0
index|]
operator|.
name|triggerHeartbeatForTests
argument_list|()
expr_stmt|;
block|}
comment|/**    * Cleans the resources and closes the instance of datanode    * @throws IOException if an error occurred    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dn
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot close: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|DATA_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cannot delete data-node dirs"
argument_list|,
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Sync two replicas */
DECL|method|testSyncReplicas (ReplicaRecoveryInfo replica1, ReplicaRecoveryInfo replica2, InterDatanodeProtocol dn1, InterDatanodeProtocol dn2, long expectLen)
specifier|private
name|void
name|testSyncReplicas
parameter_list|(
name|ReplicaRecoveryInfo
name|replica1
parameter_list|,
name|ReplicaRecoveryInfo
name|replica2
parameter_list|,
name|InterDatanodeProtocol
name|dn1
parameter_list|,
name|InterDatanodeProtocol
name|dn2
parameter_list|,
name|long
name|expectLen
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
block|,
name|mock
argument_list|(
name|DatanodeInfo
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
name|locs
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
name|syncList
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BlockRecord
name|record1
init|=
operator|new
name|BlockRecord
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeInfo
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"bogus"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|dn1
argument_list|,
name|replica1
argument_list|)
decl_stmt|;
name|BlockRecord
name|record2
init|=
operator|new
name|BlockRecord
argument_list|(
name|DFSTestUtil
operator|.
name|getDatanodeInfo
argument_list|(
literal|"1.2.3.4"
argument_list|,
literal|"bogus"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|dn2
argument_list|,
name|replica2
argument_list|)
decl_stmt|;
name|syncList
operator|.
name|add
argument_list|(
name|record1
argument_list|)
expr_stmt|;
name|syncList
operator|.
name|add
argument_list|(
name|record2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dn1
operator|.
name|updateReplicaUnderRecovery
argument_list|(
operator|(
name|ExtendedBlock
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"storage1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dn2
operator|.
name|updateReplicaUnderRecovery
argument_list|(
operator|(
name|ExtendedBlock
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"storage2"
argument_list|)
expr_stmt|;
name|dn
operator|.
name|syncBlock
argument_list|(
name|rBlock
argument_list|,
name|syncList
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.8.    * Two replicas are in Finalized state    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testFinalizedReplicas ()
specifier|public
name|void
name|testFinalizedReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// two finalized replicas have different length
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
try|try
block|{
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Two finalized replicas should not have different lengthes!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Inconsistent size of finalized replicas. "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecovery_02.9.    * One replica is Finalized and another is RBW.     * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testFinalizedRbwReplicas ()
specifier|public
name|void
name|testFinalizedRbwReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rbw and finalized replicas have the same length
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// rbw replica has a different length from the finalized one
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
expr_stmt|;
name|dn1
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|dn2
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.10.    * One replica is Finalized and another is RWR.     * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testFinalizedRwrReplicas ()
specifier|public
name|void
name|testFinalizedRwrReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rbw and finalized replicas have the same length
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
comment|// rbw replica has a different length from the finalized one
name|replica1
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|replica2
operator|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
expr_stmt|;
name|dn1
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|dn2
operator|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.11.    * Two replicas are RBW.    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testRBWReplicas ()
specifier|public
name|void
name|testRBWReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|REPLICA_LEN1
argument_list|,
name|REPLICA_LEN2
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.12.    * One replica is RBW and another is RWR.     * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testRBW_RWRReplicas ()
specifier|public
name|void
name|testRBW_RWRReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|REPLICA_LEN1
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecovery_02.13.     * Two replicas are RWR.    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testRWRReplicas ()
specifier|public
name|void
name|testRWRReplicas
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaRecoveryInfo
name|replica1
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN1
argument_list|,
name|GEN_STAMP
operator|-
literal|1
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|replica2
init|=
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|BLOCK_ID
argument_list|,
name|REPLICA_LEN2
argument_list|,
name|GEN_STAMP
operator|-
literal|2
argument_list|,
name|ReplicaState
operator|.
name|RWR
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn1
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterDatanodeProtocol
name|dn2
init|=
name|mock
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|REPLICA_LEN1
argument_list|,
name|REPLICA_LEN2
argument_list|)
decl_stmt|;
name|testSyncReplicas
argument_list|(
name|replica1
argument_list|,
name|replica2
argument_list|,
name|dn1
argument_list|,
name|dn2
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn1
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dn2
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|minLen
argument_list|)
expr_stmt|;
block|}
DECL|method|initRecoveringBlocks ()
specifier|private
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|initRecoveringBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|mockOtherDN
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeInfo
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
operator|new
name|DatanodeInfo
index|[]
block|{
operator|new
name|DatanodeInfo
argument_list|(
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|)
block|,
name|mockOtherDN
block|}
decl_stmt|;
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
name|locs
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|rBlock
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
comment|/**    * BlockRecoveryFI_05. One DN throws RecoveryInProgressException.    *    * @throws IOException    *           in case of an error    */
annotation|@
name|Test
DECL|method|testRecoveryInProgressException ()
specifier|public
name|void
name|testRecoveryInProgressException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|spyDN
init|=
name|spy
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RecoveryInProgressException
argument_list|(
literal|"Replica recovery is in progress"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Daemon
name|d
init|=
name|spyDN
operator|.
name|recoverBlocks
argument_list|(
name|initRecoveringBlocks
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|spyDN
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|syncBlock
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|BlockRecord
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecoveryFI_06. all datanodes throws an exception.    *    * @throws IOException    *           in case of an error    */
annotation|@
name|Test
DECL|method|testErrorReplicas ()
specifier|public
name|void
name|testErrorReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|spyDN
init|=
name|spy
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Daemon
name|d
init|=
name|spyDN
operator|.
name|recoverBlocks
argument_list|(
name|initRecoveringBlocks
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|spyDN
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|syncBlock
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyListOf
argument_list|(
name|BlockRecord
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecoveryFI_07. max replica length from all DNs is zero.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testZeroLenReplicas ()
specifier|public
name|void
name|testZeroLenReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|spyDN
init|=
name|spy
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|initReplicaRecovery
argument_list|(
name|any
argument_list|(
name|RecoveringBlock
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Daemon
name|d
init|=
name|spyDN
operator|.
name|recoverBlocks
argument_list|(
name|initRecoveringBlocks
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|join
argument_list|()
expr_stmt|;
name|DatanodeProtocol
name|dnP
init|=
name|dn
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|dnP
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|DatanodeID
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|initBlockRecords (DataNode spyDN)
specifier|private
name|List
argument_list|<
name|BlockRecord
argument_list|>
name|initBlockRecords
parameter_list|(
name|DataNode
name|spyDN
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BlockRecord
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockRecord
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BlockRecord
name|blockRecord
init|=
operator|new
name|BlockRecord
argument_list|(
operator|new
name|DatanodeID
argument_list|(
name|dnR
argument_list|)
argument_list|,
name|spyDN
argument_list|,
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|blockRecord
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|field|rBlock
specifier|private
specifier|final
specifier|static
name|RecoveringBlock
name|rBlock
init|=
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
name|RECOVERY_ID
argument_list|)
decl_stmt|;
comment|/**    * BlockRecoveryFI_09. some/all DNs failed to update replicas.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testFailedReplicaUpdate ()
specifier|public
name|void
name|testFailedReplicaUpdate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|spyDN
init|=
name|spy
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|spyDN
argument_list|)
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|block
argument_list|,
name|RECOVERY_ID
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|spyDN
operator|.
name|syncBlock
argument_list|(
name|rBlock
argument_list|,
name|initBlockRecords
argument_list|(
name|spyDN
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * BlockRecoveryFI_10. DN has no ReplicaUnderRecovery.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testNoReplicaUnderRecovery ()
specifier|public
name|void
name|testNoReplicaUnderRecovery
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dn
operator|.
name|data
operator|.
name|createRbw
argument_list|(
name|block
argument_list|)
expr_stmt|;
try|try
block|{
name|dn
operator|.
name|syncBlock
argument_list|(
name|rBlock
argument_list|,
name|initBlockRecords
argument_list|(
name|dn
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
name|DatanodeProtocol
name|namenode
init|=
name|dn
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|namenode
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|(
name|DatanodeID
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * BlockRecoveryFI_11. a replica's recovery id does not match new GS.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|testNotMatchedReplicaID ()
specifier|public
name|void
name|testNotMatchedReplicaID
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running "
operator|+
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicaInPipelineInterface
name|replicaInfo
init|=
name|dn
operator|.
name|data
operator|.
name|createRbw
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|ReplicaOutputStreams
name|streams
init|=
literal|null
decl_stmt|;
try|try
block|{
name|streams
operator|=
name|replicaInfo
operator|.
name|createStreams
argument_list|(
literal|true
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|getChecksumOut
argument_list|()
operator|.
name|write
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|dn
operator|.
name|data
operator|.
name|initReplicaRecovery
argument_list|(
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
name|RECOVERY_ID
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|dn
operator|.
name|syncBlock
argument_list|(
name|rBlock
argument_list|,
name|initBlockRecords
argument_list|(
name|dn
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sync should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot recover "
argument_list|)
expr_stmt|;
block|}
name|DatanodeProtocol
name|namenode
init|=
name|dn
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|POOL_ID
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|namenode
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|commitBlockSynchronization
argument_list|(
name|any
argument_list|(
name|ExtendedBlock
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|(
name|DatanodeID
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|streams
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

