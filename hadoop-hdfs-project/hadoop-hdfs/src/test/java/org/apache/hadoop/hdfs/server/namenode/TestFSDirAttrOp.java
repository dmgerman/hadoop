begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test {@link FSDirAttrOp}.  */
end_comment

begin_class
DECL|class|TestFSDirAttrOp
specifier|public
class|class
name|TestFSDirAttrOp
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFSDirAttrOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|unprotectedSetTimes (long atime, long atime0, long precision, long mtime, boolean force)
specifier|private
name|boolean
name|unprotectedSetTimes
parameter_list|(
name|long
name|atime
parameter_list|,
name|long
name|atime0
parameter_list|,
name|long
name|precision
parameter_list|,
name|long
name|mtime
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|FSNamesystem
name|fsn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|SnapshotManager
name|ssMgr
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSDirectory
name|fsd
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FSDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
name|INodesInPath
name|iip
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|INodesInPath
operator|.
name|class
argument_list|)
decl_stmt|;
name|INode
name|inode
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|INode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsn
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsn
operator|.
name|getSnapshotManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ssMgr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ssMgr
operator|.
name|getSkipCaptureAccessTimeOnlyChange
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsd
operator|.
name|getAccessTimePrecision
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fsd
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|inode
operator|.
name|getAccessTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|atime0
argument_list|)
expr_stmt|;
return|return
name|FSDirAttrOp
operator|.
name|unprotectedSetTimes
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|force
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testUnprotectedSetTimes ()
specifier|public
name|void
name|testUnprotectedSetTimes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// atime< access time + precision
name|assertFalse
argument_list|(
literal|"SetTimes should not update access time "
operator|+
literal|"because it's within the last precision interval"
argument_list|,
name|unprotectedSetTimes
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// atime = access time + precision
name|assertFalse
argument_list|(
literal|"SetTimes should not update access time "
operator|+
literal|"because it's within the last precision interval"
argument_list|,
name|unprotectedSetTimes
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// atime> access time + precision
name|assertTrue
argument_list|(
literal|"SetTimes should update access time"
argument_list|,
name|unprotectedSetTimes
argument_list|(
literal|1011
argument_list|,
literal|10
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// atime< access time + precision, but force is set
name|assertTrue
argument_list|(
literal|"SetTimes should update access time"
argument_list|,
name|unprotectedSetTimes
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// atime< access time + precision, but mtime is set
name|assertTrue
argument_list|(
literal|"SetTimes should update access time"
argument_list|,
name|unprotectedSetTimes
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

