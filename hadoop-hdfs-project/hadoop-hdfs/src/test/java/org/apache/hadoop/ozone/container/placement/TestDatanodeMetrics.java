begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
operator|.
name|SCMNodeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests that test Metrics that support placement.  */
end_comment

begin_class
DECL|class|TestDatanodeMetrics
specifier|public
class|class
name|TestDatanodeMetrics
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSCMNodeMetric ()
specifier|public
name|void
name|testSCMNodeMetric
parameter_list|()
block|{
name|SCMNodeStat
name|stat
init|=
operator|new
name|SCMNodeStat
argument_list|(
literal|100L
argument_list|,
literal|10L
argument_list|,
literal|90L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|90L
argument_list|)
expr_stmt|;
name|SCMNodeMetric
name|metric
init|=
operator|new
name|SCMNodeMetric
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|SCMNodeStat
name|newStat
init|=
operator|new
name|SCMNodeStat
argument_list|(
literal|100L
argument_list|,
literal|10L
argument_list|,
literal|90L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|stat
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|90L
argument_list|)
expr_stmt|;
name|SCMNodeMetric
name|newMetric
init|=
operator|new
name|SCMNodeMetric
argument_list|(
name|newStat
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isEqual
argument_list|(
name|newMetric
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newMetric
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newMetric
operator|.
name|isGreater
argument_list|(
name|metric
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SCMNodeMetric
name|zeroMetric
init|=
operator|new
name|SCMNodeMetric
argument_list|(
operator|new
name|SCMNodeStat
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert we can handle zero capacity.
name|assertTrue
argument_list|(
name|metric
operator|.
name|isGreater
argument_list|(
name|zeroMetric
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

