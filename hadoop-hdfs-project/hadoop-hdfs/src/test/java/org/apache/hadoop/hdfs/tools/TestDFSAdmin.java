begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|text
operator|.
name|TextStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|TestRefreshUserMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|DefaultImpersonationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * set/clrSpaceQuote are tested in {@link org.apache.hadoop.hdfs.TestQuota}.  */
end_comment

begin_class
DECL|class|TestDFSAdmin
specifier|public
class|class
name|TestDFSAdmin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDFSAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|admin
specifier|private
name|DFSAdmin
name|admin
decl_stmt|;
DECL|field|datanode
specifier|private
name|DataNode
name|datanode
decl_stmt|;
DECL|field|namenode
specifier|private
name|NameNode
name|namenode
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|field|tempResource
specifier|private
name|String
name|tempResource
init|=
literal|null
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|2
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|redirectStream ()
specifier|private
name|void
name|redirectStream
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|resetStream ()
specifier|private
name|void
name|resetStream
parameter_list|()
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|resetStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|tempResource
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|tempResource
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|tempResource
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|restartCluster ()
specifier|private
name|void
name|restartCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|datanode
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|namenode
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
block|}
DECL|method|getReconfigurableProperties (String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|getReconfigurableProperties
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|reconfigurationOutErrFormatter
argument_list|(
literal|"getReconfigurableProperties"
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconfigurationStatus (String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|getReconfigurationStatus
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|reconfigurationOutErrFormatter
argument_list|(
literal|"getReconfigurationStatus"
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|reconfigurationOutErrFormatter (String methodName, String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|reconfigurationOutErrFormatter
parameter_list|(
name|String
name|methodName
parameter_list|,
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bufOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|outStream
init|=
operator|new
name|PrintStream
argument_list|(
name|bufOut
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bufErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|errStream
init|=
operator|new
name|PrintStream
argument_list|(
name|bufErr
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"getReconfigurableProperties"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|getReconfigurableProperties
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"getReconfigurationStatus"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|getReconfigurationStatus
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"startReconfiguration"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|startReconfiguration
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
name|scanIntoList
argument_list|(
name|bufOut
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|scanIntoList
argument_list|(
name|bufErr
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|scanIntoList ( final ByteArrayOutputStream baos, final List<String> list)
specifier|private
specifier|static
name|void
name|scanIntoList
parameter_list|(
specifier|final
name|ByteArrayOutputStream
name|baos
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|nextLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetDatanodeInfo ()
specifier|public
name|void
name|testGetDatanodeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|addr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|dn
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getDatanodeInfo"
block|,
name|addr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|/* collect outputs */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
comment|/* verify results */
name|assertEquals
argument_list|(
literal|"One line per DataNode like: Uptime: XXX, Software version: x.y.z,"
operator|+
literal|" Config version: core-x.y.z,hdfs-x"
argument_list|,
literal|1
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Uptime:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Software version"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Config version"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTriggerBlockReport ()
specifier|public
name|void
name|testTriggerBlockReport
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dnAddr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|dn
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nnAddr
init|=
name|nn
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-triggerBlockReport"
block|,
name|dnAddr
block|,
literal|"-incremental"
block|,
literal|"-namenode"
block|,
name|nnAddr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Triggering an incremental block report on "
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|" to namenode "
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetVolumeReport ()
specifier|public
name|void
name|testGetVolumeReport
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|addr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|dn
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getVolumeReport"
block|,
name|addr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|/* collect outputs */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Active Volumes : 2"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that if datanode is not reachable, some DFSAdmin commands will fail    * elegantly with non-zero ret error code along with exception error message.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDFSAdminUnreachableDatanode ()
specifier|public
name|void
name|testDFSAdminUnreachableDatanode
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|command
range|:
operator|new
name|String
index|[]
block|{
literal|"-getDatanodeInfo"
block|,
literal|"-evictWriters"
block|,
literal|"-getBalancerBandwidth"
block|}
control|)
block|{
comment|// Connecting to Xfer port instead of IPC port will get
comment|// Datanode unreachable. java.io.EOFException
specifier|final
name|String
name|dnDataAddr
init|=
name|datanode
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|datanode
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
name|command
block|,
name|dnDataAddr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected "
operator|+
name|command
operator|+
literal|" stdout: "
operator|+
name|out
argument_list|,
name|outs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected "
operator|+
name|command
operator|+
literal|" stderr: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDataNodeGetReconfigurableProperties ()
specifier|public
name|void
name|testDataNodeGetReconfigurableProperties
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|port
init|=
name|datanode
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|address
init|=
literal|"localhost:"
operator|+
name|port
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getReconfigurableProperties
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test reconfiguration and check the status outputs.    * @param expectedSuccuss set true if the reconfiguration task should success.    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
DECL|method|testDataNodeGetReconfigurationStatus (boolean expectedSuccuss)
specifier|private
name|void
name|testDataNodeGetReconfigurationStatus
parameter_list|(
name|boolean
name|expectedSuccuss
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ReconfigurationUtil
name|ru
init|=
name|mock
argument_list|(
name|ReconfigurationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
name|datanode
operator|.
name|setReconfigurationUtil
argument_list|(
name|ru
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getDataDirectory
argument_list|()
argument_list|,
literal|"data_new"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|newDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Inject failure.
name|newDir
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDir
operator|.
name|toString
argument_list|()
argument_list|,
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
literal|"randomKey"
argument_list|,
literal|"new123"
argument_list|,
literal|"old456"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ru
operator|.
name|parseChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|datanode
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|address
init|=
literal|"localhost:"
operator|+
name|port
decl_stmt|;
name|assertThat
argument_list|(
name|admin
operator|.
name|startReconfiguration
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|awaitReconfigurationFinished
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|DataNode
operator|.
name|getStorageLocations
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|locations
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|File
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
name|is
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the directory is appropriately formatted.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newDir
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"SUCCESS: Changed property "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"FAILED: Change property "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|dnDir0
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|dnDir1
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"From:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|dnDir0
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|dnDir1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|anyOf
argument_list|(
name|containsString
argument_list|(
name|dnDir0
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|dnDir1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"To"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"data_new"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDataNodeGetReconfigurationStatus ()
specifier|public
name|void
name|testDataNodeGetReconfigurationStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|testDataNodeGetReconfigurationStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|testDataNodeGetReconfigurationStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNameNodeGetReconfigurableProperties ()
specifier|public
name|void
name|testNameNodeGetReconfigurableProperties
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|address
init|=
name|namenode
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getReconfigurableProperties
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errs
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitReconfigurationFinished (final String nodeType, final String address, final List<String> outs, final List<String> errs)
name|void
name|awaitReconfigurationFinished
parameter_list|(
specifier|final
name|String
name|nodeType
parameter_list|,
specifier|final
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|outs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|errs
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|getReconfigurationStatus
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"call getReconfigurationStatus on %s[%s] failed."
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|outs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"finished"
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|100
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testPrintTopology ()
specifier|public
name|void
name|testPrintTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
comment|/* init conf */
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDn
init|=
literal|4
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d2/r1"
block|,
literal|"/d2/r2"
block|}
decl_stmt|;
comment|/* init cluster using topology */
try|try
init|(
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDn
argument_list|,
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-printTopology"
block|}
argument_list|)
decl_stmt|;
comment|/* collect outputs */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
comment|/* verify results */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be three lines per Datanode: the 1st line is"
operator|+
literal|" rack info, 2nd node info, 3rd empty line. The total"
operator|+
literal|" should be as a result of 3 * numDn."
argument_list|,
literal|12
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d1/r1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d1/r2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d2/r1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d2/r2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNameNodeGetReconfigurationStatus ()
specifier|public
name|void
name|testNameNodeGetReconfigurationStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ReconfigurationUtil
name|ru
init|=
name|mock
argument_list|(
name|ReconfigurationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|setReconfigurationUtil
argument_list|(
name|ru
argument_list|)
expr_stmt|;
specifier|final
name|String
name|address
init|=
name|namenode
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|,
name|namenode
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
literal|"randomKey"
argument_list|,
literal|"new123"
argument_list|,
literal|"old456"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ru
operator|.
name|parseChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|admin
operator|.
name|startReconfiguration
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|awaitReconfigurationFinished
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
comment|// verify change
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
operator|+
literal|" has wrong value"
argument_list|,
literal|6
argument_list|,
name|namenode
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
operator|+
literal|" has wrong value"
argument_list|,
literal|6
argument_list|,
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|1
decl_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"SUCCESS: Changed property "
operator|+
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"From:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"To:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|scanIntoString (final ByteArrayOutputStream baos)
specifier|private
specifier|static
name|String
name|scanIntoString
parameter_list|(
specifier|final
name|ByteArrayOutputStream
name|baos
parameter_list|)
block|{
specifier|final
name|TextStringBuilder
name|sb
init|=
operator|new
name|TextStringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|sb
operator|.
name|appendln
argument_list|(
name|scanner
operator|.
name|nextLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// get block details and check if the block is corrupt
DECL|method|waitForCorruptBlock (MiniDFSCluster miniCluster, DFSClient client, Path file)
specifier|private
name|void
name|waitForCorruptBlock
parameter_list|(
name|MiniDFSCluster
name|miniCluster
parameter_list|,
name|DFSClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|LocatedBlocks
name|blocks
init|=
literal|null
decl_stmt|;
try|try
block|{
name|miniCluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|blocks
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|blocks
operator|!=
literal|null
operator|&&
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCorrupt
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testReportCommand ()
specifier|public
name|void
name|testReportCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|redirectStream
argument_list|()
expr_stmt|;
comment|// init conf
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
decl_stmt|;
name|dfsConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|dfsConf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDn
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDn
argument_list|,
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
specifier|final
name|DFSClient
name|client
init|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
comment|// Verify report command for all counts to be zero
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-report"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodesAndCorruptBlocks
argument_list|(
name|numDn
argument_list|,
name|numDn
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|client
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
literal|512L
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"/corrupted"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|replFactor
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|replFactor
argument_list|)
expr_stmt|;
specifier|final
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected block type: "
operator|+
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|LocatedBlock
argument_list|)
expr_stmt|;
name|LocatedBlock
name|locatedBlock
init|=
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|locatedDataNode
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replica block located on: "
operator|+
name|locatedDataNode
argument_list|)
expr_stmt|;
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"ec"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
operator|.
name|toString
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"ec-file"
argument_list|)
decl_stmt|;
name|int
name|stripesPerBlock
init|=
literal|2
decl_stmt|;
name|int
name|cellSize
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|int
name|blockSize
init|=
name|stripesPerBlock
operator|*
name|cellSize
decl_stmt|;
name|int
name|blockGroupSize
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|*
name|blockSize
decl_stmt|;
name|int
name|totalBlockGroups
init|=
literal|1
decl_stmt|;
name|DFSTestUtil
operator|.
name|createStripedFile
argument_list|(
name|miniCluster
argument_list|,
name|ecFile
argument_list|,
name|ecDir
argument_list|,
name|totalBlockGroups
argument_list|,
name|stripesPerBlock
argument_list|,
literal|false
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
comment|// Verify report command for all counts to be zero
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-report"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodesAndCorruptBlocks
argument_list|(
name|numDn
argument_list|,
name|numDn
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|client
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Choose a DataNode to shutdown
specifier|final
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DataNode
name|dataNodeToShutdown
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|datanodes
control|)
block|{
if|if
condition|(
operator|!
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|locatedDataNode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|dataNodeToShutdown
operator|=
name|dn
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Unable to choose a DataNode to shutdown!"
argument_list|,
name|dataNodeToShutdown
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Shut down the DataNode not hosting the replicated block
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down: "
operator|+
name|dataNodeToShutdown
argument_list|)
expr_stmt|;
name|dataNodeToShutdown
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|miniCluster
operator|.
name|setDataNodeDead
argument_list|(
name|dataNodeToShutdown
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify report command to show dead DataNode
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-report"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodesAndCorruptBlocks
argument_list|(
name|numDn
argument_list|,
name|numDn
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|client
argument_list|,
literal|0L
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Corrupt the replicated block
specifier|final
name|int
name|blockFilesCorrupted
init|=
name|miniCluster
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Fail to corrupt all replicas for block "
operator|+
name|block
argument_list|,
name|replFactor
argument_list|,
name|blockFilesCorrupted
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|IOUtils
operator|.
name|NullOutputStream
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to read the file with corrupted blocks."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ignored
parameter_list|)
block|{
comment|// expected exception reading corrupt blocks
block|}
comment|// Increase replication factor, this should invoke transfer request.
comment|// Receiving datanode fails on checksum and reports it to namenode
name|fs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
call|(
name|short
call|)
argument_list|(
name|replFactor
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// get block details and check if the block is corrupt
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCorruptBlock
argument_list|(
name|miniCluster
argument_list|,
name|client
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// verify report command for corrupt replicated block
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-report"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodesAndCorruptBlocks
argument_list|(
name|numDn
argument_list|,
name|numDn
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|client
argument_list|,
literal|0L
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|lbs
operator|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected block type: "
operator|+
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|LocatedStripedBlock
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|bg
init|=
call|(
name|LocatedStripedBlock
call|)
argument_list|(
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|miniCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|BlockManager
name|bm
init|=
name|miniCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|bm
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|bg
operator|.
name|getBlock
argument_list|()
argument_list|,
name|bg
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"STORAGE_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|bm
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|miniCluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|waitForCorruptBlock
argument_list|(
name|miniCluster
argument_list|,
name|client
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// verify report command for corrupt replicated block
comment|// and EC block group
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-report"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodesAndCorruptBlocks
argument_list|(
name|numDn
argument_list|,
name|numDn
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|client
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000L
argument_list|)
DECL|method|testListOpenFiles ()
specifier|public
name|void
name|testListOpenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dfsConf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|dfsConf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dfsConf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|numClosedFiles
init|=
literal|25
decl_stmt|;
specifier|final
name|int
name|numOpenFiles
init|=
literal|15
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
literal|512L
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/files/"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Path
argument_list|>
name|closedFileSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClosedFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"closed-file-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|replFactor
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|closedFileSet
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|openFilesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOpenFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parentDir
argument_list|,
literal|"open-file-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|replFactor
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|openFilesMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOpenFilesListing
argument_list|(
name|closedFileSet
argument_list|,
name|openFilesMap
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|numOpenFiles
condition|;
name|count
operator|++
control|)
block|{
name|closedFileSet
operator|.
name|addAll
argument_list|(
name|DFSTestUtil
operator|.
name|closeOpenFiles
argument_list|(
name|openFilesMap
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOpenFilesListing
argument_list|(
name|closedFileSet
argument_list|,
name|openFilesMap
argument_list|)
expr_stmt|;
block|}
comment|// test -listOpenFiles command with option<path>
name|openFilesMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Path
name|file
decl_stmt|;
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|openFiles1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|openFiles2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOpenFiles
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|file
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/files/a"
argument_list|)
argument_list|,
literal|"open-file-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/files/b"
argument_list|)
argument_list|,
literal|"open-file-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|fileLength
argument_list|,
name|replFactor
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|append
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|openFiles1
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|openFiles2
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
name|openFilesMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
name|resetStream
argument_list|()
expr_stmt|;
comment|// list all open files
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOpenFilesListing
argument_list|(
literal|null
argument_list|,
name|openFilesMap
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
comment|// list open files under directory path /tmp/files/a
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|,
literal|"-path"
block|,
literal|"/tmp/files/a"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOpenFilesListing
argument_list|(
literal|null
argument_list|,
name|openFiles1
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
comment|// list open files without input path
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|,
literal|"-path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the error
name|String
name|outStr
init|=
name|scanIntoString
argument_list|(
name|err
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outStr
operator|.
name|contains
argument_list|(
literal|"listOpenFiles: option"
operator|+
literal|" -path requires 1 argument"
argument_list|)
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
comment|// list open files with empty path
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|,
literal|"-path"
block|,
literal|""
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// all the open files will be listed
name|verifyOpenFilesListing
argument_list|(
literal|null
argument_list|,
name|openFilesMap
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
comment|// list invalid path file
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-listOpenFiles"
block|,
literal|"-path"
block|,
literal|"/invalid_path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|openFilePath
range|:
name|openFilesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|outStr
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|openFilePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DFSTestUtil
operator|.
name|closeOpenFiles
argument_list|(
name|openFilesMap
argument_list|,
name|openFilesMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyOpenFilesListing (HashSet<Path> closedFileSet, HashMap<Path, FSDataOutputStream> openFilesMap)
specifier|private
name|void
name|verifyOpenFilesListing
parameter_list|(
name|HashSet
argument_list|<
name|Path
argument_list|>
name|closedFileSet
parameter_list|,
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FSDataOutputStream
argument_list|>
name|openFilesMap
parameter_list|)
block|{
specifier|final
name|String
name|outStr
init|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfsadmin -listOpenFiles output: \n"
operator|+
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|closedFileSet
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|closedFilePath
range|:
name|closedFileSet
control|)
block|{
name|assertThat
argument_list|(
name|outStr
argument_list|,
name|not
argument_list|(
name|containsString
argument_list|(
name|closedFilePath
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Path
name|openFilePath
range|:
name|openFilesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|outStr
argument_list|,
name|is
argument_list|(
name|containsString
argument_list|(
name|openFilePath
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyNodesAndCorruptBlocks ( final int numDn, final int numLiveDn, final int numCorruptBlocks, final int numCorruptECBlockGroups, final DFSClient client, final Long highestPriorityLowRedundancyReplicatedBlocks, final Long highestPriorityLowRedundancyECBlocks)
specifier|private
name|void
name|verifyNodesAndCorruptBlocks
parameter_list|(
specifier|final
name|int
name|numDn
parameter_list|,
specifier|final
name|int
name|numLiveDn
parameter_list|,
specifier|final
name|int
name|numCorruptBlocks
parameter_list|,
specifier|final
name|int
name|numCorruptECBlockGroups
parameter_list|,
specifier|final
name|DFSClient
name|client
parameter_list|,
specifier|final
name|Long
name|highestPriorityLowRedundancyReplicatedBlocks
parameter_list|,
specifier|final
name|Long
name|highestPriorityLowRedundancyECBlocks
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* init vars */
specifier|final
name|String
name|outStr
init|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedLiveNodesStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Live datanodes (%d)"
argument_list|,
name|numLiveDn
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedCorruptedBlocksStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Blocks with corrupt replicas: %d"
argument_list|,
name|numCorruptBlocks
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedCorruptedECBlockGroupsStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Block groups with corrupt internal blocks: %d"
argument_list|,
name|numCorruptECBlockGroups
argument_list|)
decl_stmt|;
specifier|final
name|String
name|highestPriorityLowRedundancyReplicatedBlocksStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"\tLow redundancy blocks with highest priority "
operator|+
literal|"to recover: %d"
argument_list|,
name|highestPriorityLowRedundancyReplicatedBlocks
argument_list|)
decl_stmt|;
specifier|final
name|String
name|highestPriorityLowRedundancyECBlocksStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"\tLow redundancy blocks with highest priority "
operator|+
literal|"to recover: %d"
argument_list|,
name|highestPriorityLowRedundancyReplicatedBlocks
argument_list|)
decl_stmt|;
comment|// verify nodes and corrupt blocks
name|assertThat
argument_list|(
name|outStr
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
name|expectedLiveNodesStr
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|expectedCorruptedBlocksStr
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|expectedCorruptedECBlockGroupsStr
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|highestPriorityLowRedundancyReplicatedBlocksStr
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|highestPriorityLowRedundancyECBlocksStr
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDn
argument_list|,
name|client
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numLiveDn
argument_list|,
name|client
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDn
operator|-
name|numLiveDn
argument_list|,
name|client
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|DEAD
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numCorruptBlocks
operator|+
name|numCorruptECBlockGroups
argument_list|,
name|client
operator|.
name|getCorruptBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numCorruptBlocks
argument_list|,
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getReplicatedBlockStats
argument_list|()
operator|.
name|getCorruptBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|highestPriorityLowRedundancyReplicatedBlocks
argument_list|,
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getReplicatedBlockStats
argument_list|()
operator|.
name|getHighestPriorityLowRedundancyBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numCorruptECBlockGroups
argument_list|,
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getECBlockGroupStats
argument_list|()
operator|.
name|getCorruptBlockGroups
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|highestPriorityLowRedundancyECBlocks
argument_list|,
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getECBlockGroupStats
argument_list|()
operator|.
name|getHighestPriorityLowRedundancyBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetBalancerBandwidth ()
specifier|public
name|void
name|testSetBalancerBandwidth
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|outStr
decl_stmt|;
comment|// Test basic case: 10000
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"10000"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not set bandwidth!"
argument_list|,
name|outStr
operator|.
name|contains
argument_list|(
literal|"Balancer "
operator|+
literal|"bandwidth is set to 10000"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test parsing with units
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"10m"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not set bandwidth!"
argument_list|,
name|outStr
operator|.
name|contains
argument_list|(
literal|"Balancer "
operator|+
literal|"bandwidth is set to 10485760"
argument_list|)
argument_list|)
expr_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"10k"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|outStr
operator|=
name|scanIntoString
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not set bandwidth!"
argument_list|,
name|outStr
operator|.
name|contains
argument_list|(
literal|"Balancer "
operator|+
literal|"bandwidth is set to 10240"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test negative numbers
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"-10000"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setBalancerBandwidth"
block|,
literal|"-10m"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000L
argument_list|)
DECL|method|testCheckNumOfBlocksInReportCommand ()
specifier|public
name|void
name|testCheckNumOfBlocksInReportCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp.txt"
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|dn
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|length
argument_list|,
name|NUM_DATANODES
argument_list|)
expr_stmt|;
comment|// Block count should be 0, as no files are created
name|int
name|actualBlockCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|d
range|:
name|dn
control|)
block|{
name|actualBlockCount
operator|+=
name|d
operator|.
name|getNumBlocks
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actualBlockCount
argument_list|)
expr_stmt|;
comment|// Create a file with 2 blocks
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|expectedBlockCount
init|=
literal|2
decl_stmt|;
comment|// Wait for One Heartbeat
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|dn
operator|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|dn
operator|.
name|length
argument_list|,
name|NUM_DATANODES
argument_list|)
expr_stmt|;
comment|// Block count should be 2, as file is created with block count 2
name|actualBlockCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|d
range|:
name|dn
control|)
block|{
name|actualBlockCount
operator|+=
name|d
operator|.
name|getNumBlocks
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|actualBlockCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshProxyUser ()
specifier|public
name|void
name|testRefreshProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testdir1"
argument_list|)
decl_stmt|;
name|Path
name|subDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testdir1/subdir1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|loginUserUgi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|String
name|proxyUser
init|=
literal|"fakeuser"
decl_stmt|;
name|String
name|realUser
init|=
name|loginUserUgi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|proxyUser
argument_list|,
name|loginUserUgi
argument_list|,
name|loginUserUgi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a directory as login user and re-assign it to proxy user
name|loginUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|setOwner
argument_list|(
name|dirPath
argument_list|,
name|proxyUser
argument_list|,
name|proxyUgi
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// try creating subdirectory inside the directory as proxy user,
comment|// This should fail because of the current user hasn't still been proxied
try|try
block|{
name|proxyUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|subDirPath
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|AccessControlException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"User: "
operator|+
name|realUser
operator|+
literal|" is not allowed to impersonate "
operator|+
name|proxyUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// refresh will look at configuration on the server side
comment|// add additional resource with the new value
comment|// so the server side will pick it up
name|String
name|userKeyGroups
init|=
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|realUser
argument_list|)
decl_stmt|;
name|String
name|userKeyHosts
init|=
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|realUser
argument_list|)
decl_stmt|;
name|String
name|rsrc
init|=
literal|"testGroupMappingRefresh_rsrc.xml"
decl_stmt|;
name|tempResource
operator|=
name|TestRefreshUserMappings
operator|.
name|addNewConfigResource
argument_list|(
name|rsrc
argument_list|,
name|userKeyGroups
argument_list|,
literal|"*"
argument_list|,
name|userKeyHosts
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
decl_stmt|;
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// After proxying the fakeuser, the mkdir should work
name|proxyUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

