begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * set/clrSpaceQuote are tested in {@link org.apache.hadoop.hdfs.TestQuota}.  */
end_comment

begin_class
DECL|class|TestDFSAdmin
specifier|public
class|class
name|TestDFSAdmin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|admin
specifier|private
name|DFSAdmin
name|admin
decl_stmt|;
DECL|field|datanode
specifier|private
name|DataNode
name|datanode
decl_stmt|;
DECL|field|namenode
specifier|private
name|NameNode
name|namenode
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|DFSAdmin
argument_list|()
expr_stmt|;
block|}
DECL|method|redirectStream ()
specifier|private
name|void
name|redirectStream
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|resetStream ()
specifier|private
name|void
name|resetStream
parameter_list|()
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|resetStream
argument_list|()
expr_stmt|;
block|}
DECL|method|restartCluster ()
specifier|private
name|void
name|restartCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|datanode
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|namenode
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
expr_stmt|;
block|}
DECL|method|getReconfigurableProperties (String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|getReconfigurableProperties
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|reconfigurationOutErrFormatter
argument_list|(
literal|"getReconfigurableProperties"
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|getReconfigurationStatus (String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|getReconfigurationStatus
parameter_list|(
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|reconfigurationOutErrFormatter
argument_list|(
literal|"getReconfigurationStatus"
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|reconfigurationOutErrFormatter (String methodName, String nodeType, String address, final List<String> outs, final List<String> errs)
specifier|private
name|void
name|reconfigurationOutErrFormatter
parameter_list|(
name|String
name|methodName
parameter_list|,
name|String
name|nodeType
parameter_list|,
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bufOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|outStream
init|=
operator|new
name|PrintStream
argument_list|(
name|bufOut
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bufErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|errStream
init|=
operator|new
name|PrintStream
argument_list|(
name|bufErr
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"getReconfigurableProperties"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|getReconfigurableProperties
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"getReconfigurationStatus"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|getReconfigurationStatus
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"startReconfiguration"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|startReconfiguration
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
block|}
name|scanIntoList
argument_list|(
name|bufOut
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|scanIntoList
argument_list|(
name|bufErr
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|scanIntoList ( final ByteArrayOutputStream baos, final List<String> list)
specifier|private
specifier|static
name|void
name|scanIntoList
parameter_list|(
specifier|final
name|ByteArrayOutputStream
name|baos
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|nextLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetDatanodeInfo ()
specifier|public
name|void
name|testGetDatanodeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|addr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%d"
argument_list|,
name|dn
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getDatanodeInfo"
block|,
name|addr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|/* collect outputs */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
comment|/* verify results */
name|assertEquals
argument_list|(
literal|"One line per DataNode like: Uptime: XXX, Software version: x.y.z,"
operator|+
literal|" Config version: core-x.y.z,hdfs-x"
argument_list|,
literal|1
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Uptime:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Software version"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"Config version"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that if datanode is not reachable, some DFSAdmin commands will fail    * elegantly with non-zero ret error code along with exception error message.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDFSAdminUnreachableDatanode ()
specifier|public
name|void
name|testDFSAdminUnreachableDatanode
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|command
range|:
operator|new
name|String
index|[]
block|{
literal|"-getDatanodeInfo"
block|,
literal|"-evictWriters"
block|,
literal|"-getBalancerBandwidth"
block|}
control|)
block|{
comment|// Connecting to Xfer port instead of IPC port will get
comment|// Datanode unreachable. java.io.EOFException
specifier|final
name|String
name|dnDataAddr
init|=
name|datanode
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|datanode
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
name|command
block|,
name|dnDataAddr
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected "
operator|+
name|command
operator|+
literal|" stdout: "
operator|+
name|out
argument_list|,
name|outs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected "
operator|+
name|command
operator|+
literal|" stderr: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDataNodeGetReconfigurableProperties ()
specifier|public
name|void
name|testDataNodeGetReconfigurableProperties
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|port
init|=
name|datanode
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|address
init|=
literal|"localhost:"
operator|+
name|port
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getReconfigurableProperties
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test reconfiguration and check the status outputs.    * @param expectedSuccuss set true if the reconfiguration task should success.    * @throws IOException    * @throws InterruptedException    * @throws TimeoutException    */
DECL|method|testDataNodeGetReconfigurationStatus (boolean expectedSuccuss)
specifier|private
name|void
name|testDataNodeGetReconfigurationStatus
parameter_list|(
name|boolean
name|expectedSuccuss
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ReconfigurationUtil
name|ru
init|=
name|mock
argument_list|(
name|ReconfigurationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
name|datanode
operator|.
name|setReconfigurationUtil
argument_list|(
name|ru
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getDataDirectory
argument_list|()
argument_list|,
literal|"data_new"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|newDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Inject failure.
name|newDir
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|newDir
operator|.
name|toString
argument_list|()
argument_list|,
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
literal|"randomKey"
argument_list|,
literal|"new123"
argument_list|,
literal|"old456"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ru
operator|.
name|parseChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|datanode
operator|.
name|getIpcPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|address
init|=
literal|"localhost:"
operator|+
name|port
decl_stmt|;
name|assertThat
argument_list|(
name|admin
operator|.
name|startReconfiguration
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|awaitReconfigurationFinished
argument_list|(
literal|"datanode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|locations
init|=
name|DataNode
operator|.
name|getStorageLocations
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|locations
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|,
name|is
argument_list|(
name|newDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the directory is appropriately formatted.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|newDir
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|locations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|expectedSuccuss
condition|)
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"SUCCESS: Changed property "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"FAILED: Change property "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"From:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"data1"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"data2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|anyOf
argument_list|(
name|containsString
argument_list|(
literal|"data1"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"data2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"To"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"data_new"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDataNodeGetReconfigurationStatus ()
specifier|public
name|void
name|testDataNodeGetReconfigurationStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|testDataNodeGetReconfigurationStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|restartCluster
argument_list|()
expr_stmt|;
name|testDataNodeGetReconfigurationStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNameNodeGetReconfigurableProperties ()
specifier|public
name|void
name|testNameNodeGetReconfigurableProperties
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|address
init|=
name|namenode
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getReconfigurableProperties
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|outs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errs
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|awaitReconfigurationFinished (final String nodeType, final String address, final List<String> outs, final List<String> errs)
name|void
name|awaitReconfigurationFinished
parameter_list|(
specifier|final
name|String
name|nodeType
parameter_list|,
specifier|final
name|String
name|address
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|outs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|errs
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|getReconfigurationStatus
argument_list|(
name|nodeType
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"call getReconfigurationStatus on %s[%s] failed."
argument_list|,
name|nodeType
argument_list|,
name|address
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|outs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"finished"
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|100
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testPrintTopology ()
specifier|public
name|void
name|testPrintTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|redirectStream
argument_list|()
expr_stmt|;
comment|/* init conf */
specifier|final
name|Configuration
name|dfsConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|dfsConf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDn
init|=
literal|4
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d2/r1"
block|,
literal|"/d2/r2"
block|}
decl_stmt|;
comment|/* init cluster using topology */
try|try
init|(
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dfsConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDn
argument_list|,
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|dfsConf
argument_list|)
decl_stmt|;
name|resetStream
argument_list|()
expr_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dfsAdmin
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-printTopology"
block|}
argument_list|)
decl_stmt|;
comment|/* collect outputs */
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|scanIntoList
argument_list|(
name|out
argument_list|,
name|outs
argument_list|)
expr_stmt|;
comment|/* verify results */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be three lines per Datanode: the 1st line is"
operator|+
literal|" rack info, 2nd node info, 3rd empty line. The total"
operator|+
literal|" should be as a result of 3 * numDn."
argument_list|,
literal|12
argument_list|,
name|outs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d1/r1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d1/r2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d2/r1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Rack:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"/d2/r2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNameNodeGetReconfigurationStatus ()
specifier|public
name|void
name|testNameNodeGetReconfigurationStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ReconfigurationUtil
name|ru
init|=
name|mock
argument_list|(
name|ReconfigurationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|setReconfigurationUtil
argument_list|(
name|ru
argument_list|)
expr_stmt|;
specifier|final
name|String
name|address
init|=
name|namenode
operator|.
name|getHostAndPort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|,
name|namenode
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|(
literal|"randomKey"
argument_list|,
literal|"new123"
argument_list|,
literal|"old456"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ru
operator|.
name|parseChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|admin
operator|.
name|startReconfiguration
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|outs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|awaitReconfigurationFinished
argument_list|(
literal|"namenode"
argument_list|,
name|address
argument_list|,
name|outs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
comment|// verify change
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
operator|+
literal|" has wrong value"
argument_list|,
literal|6
argument_list|,
name|namenode
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
operator|+
literal|" has wrong value"
argument_list|,
literal|6
argument_list|,
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|1
decl_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"SUCCESS: Changed property "
operator|+
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"From:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outs
operator|.
name|get
argument_list|(
name|offset
operator|+
literal|2
argument_list|)
argument_list|,
name|is
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"To:"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

