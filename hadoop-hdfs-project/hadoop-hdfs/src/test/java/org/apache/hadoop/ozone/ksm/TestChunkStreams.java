begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|ChunkGroupInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|ChunkGroupOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * This class tests ChunkGroupInputStream and ChunkGroupOutStream.  */
end_comment

begin_class
DECL|class|TestChunkStreams
specifier|public
class|class
name|TestChunkStreams
block|{
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * This test uses ByteArrayOutputStream as the underlying stream to test    * the correctness of ChunkGroupOutputStream.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWriteGroupOutputStream ()
specifier|public
name|void
name|testWriteGroupOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|new
name|ChunkGroupOutputStream
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|OutputStream
argument_list|>
name|outputStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 5 byte streams, each 100 bytes. write 500 bytes means writing to each
comment|// of them with 100 bytes.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|outputStreams
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|groupOutputStream
operator|.
name|addStream
argument_list|(
name|out
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupOutputStream
operator|.
name|getByteOffset
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|groupOutputStream
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|groupOutputStream
operator|.
name|getByteOffset
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|res
init|=
literal|""
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OutputStream
name|stream
range|:
name|outputStreams
control|)
block|{
name|String
name|subString
init|=
name|stream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|res
operator|+=
name|subString
expr_stmt|;
name|assertEquals
argument_list|(
name|dataString
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
literal|100
argument_list|)
argument_list|,
name|subString
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|100
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dataString
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorWriteGroupOutputStream ()
specifier|public
name|void
name|testErrorWriteGroupOutputStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|new
name|ChunkGroupOutputStream
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|OutputStream
argument_list|>
name|outputStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 5 byte streams, each 100 bytes. write 500 bytes means writing to each
comment|// of them with 100 bytes. all 5 streams makes up a ChunkGroupOutputStream
comment|// with a total of 500 bytes in size
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|outputStreams
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|groupOutputStream
operator|.
name|addStream
argument_list|(
name|out
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupOutputStream
operator|.
name|getByteOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// first writes of 100 bytes should succeed
name|groupOutputStream
operator|.
name|write
argument_list|(
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|groupOutputStream
operator|.
name|getByteOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// second writes of 500 bytes should fail, as there should be only 400
comment|// bytes space left
comment|// TODO : if we decide to take the 400 bytes instead in the future,
comment|// other add more informative error code rather than exception, need to
comment|// change this part.
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Can not write 500 bytes with only 400 byte space"
argument_list|)
expr_stmt|;
name|groupOutputStream
operator|.
name|write
argument_list|(
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|500
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|groupOutputStream
operator|.
name|getByteOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadGroupInputStream ()
specifier|public
name|void
name|testReadGroupInputStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ChunkGroupInputStream
name|groupInputStream
init|=
operator|new
name|ChunkGroupInputStream
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|InputStream
argument_list|>
name|inputStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|dataString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|inputStreams
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|100
expr_stmt|;
name|groupInputStream
operator|.
name|addStream
argument_list|(
name|in
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|resBuf
init|=
operator|new
name|byte
index|[
literal|500
index|]
decl_stmt|;
name|int
name|len
init|=
name|groupInputStream
operator|.
name|read
argument_list|(
name|resBuf
argument_list|,
literal|0
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataString
argument_list|,
operator|new
name|String
argument_list|(
name|resBuf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorReadGroupInputStream ()
specifier|public
name|void
name|testErrorReadGroupInputStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ChunkGroupInputStream
name|groupInputStream
init|=
operator|new
name|ChunkGroupInputStream
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|InputStream
argument_list|>
name|inputStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|dataString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|inputStreams
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|100
expr_stmt|;
name|groupInputStream
operator|.
name|addStream
argument_list|(
name|in
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|resBuf
init|=
operator|new
name|byte
index|[
literal|600
index|]
decl_stmt|;
comment|// read 300 bytes first
name|int
name|len
init|=
name|groupInputStream
operator|.
name|read
argument_list|(
name|resBuf
argument_list|,
literal|0
argument_list|,
literal|340
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|groupInputStream
operator|.
name|getCurrentStreamIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|groupInputStream
operator|.
name|getRemainingOfIndex
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|340
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|340
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|resBuf
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|340
argument_list|)
argument_list|)
expr_stmt|;
comment|// read following 300 bytes, but only 200 left
name|len
operator|=
name|groupInputStream
operator|.
name|read
argument_list|(
name|resBuf
argument_list|,
literal|340
argument_list|,
literal|260
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|groupInputStream
operator|.
name|getCurrentStreamIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupInputStream
operator|.
name|getRemainingOfIndex
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|160
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataString
argument_list|,
operator|new
name|String
argument_list|(
name|resBuf
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
comment|// further read should get EOF
name|len
operator|=
name|groupInputStream
operator|.
name|read
argument_list|(
name|resBuf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reached EOF, further read should get -1
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

