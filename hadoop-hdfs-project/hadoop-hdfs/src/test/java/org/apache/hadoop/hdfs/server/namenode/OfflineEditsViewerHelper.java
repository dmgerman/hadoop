begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClientAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * OfflineEditsViewerHelper is a helper class for TestOfflineEditsViewer,  * it performs NN operations that generate all op codes  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OfflineEditsViewerHelper
specifier|public
class|class
name|OfflineEditsViewerHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OfflineEditsViewerHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|blockSize
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|config
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/**    * Generates edits with all op codes and returns the edits filename    *    * @param dfsDir DFS directory (where to setup MiniDFS cluster)    * @param editsFilename where to copy the edits    */
DECL|method|generateEdits ()
specifier|public
name|String
name|generateEdits
parameter_list|()
throws|throws
name|IOException
block|{
name|CheckpointSignature
name|signature
init|=
name|runOperations
argument_list|()
decl_stmt|;
return|return
name|getEditsFilename
argument_list|(
name|signature
argument_list|)
return|;
block|}
comment|/**    * Get edits filename    *    * @return edits file name for cluster    */
DECL|method|getEditsFilename (CheckpointSignature sig)
specifier|private
name|String
name|getEditsFilename
parameter_list|(
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImage
name|image
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
comment|// it was set up to only have ONE StorageDirectory
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|image
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|ret
init|=
name|NNStorage
operator|.
name|getFinalizedEditsFile
argument_list|(
name|sd
argument_list|,
literal|1
argument_list|,
name|sig
operator|.
name|curSegmentTxId
operator|-
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|ret
operator|.
name|exists
argument_list|()
operator|:
literal|"expected "
operator|+
name|ret
operator|+
literal|" exists"
assert|;
return|return
name|ret
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
comment|/**    * Sets up a MiniDFSCluster, configures it to create one edits file,    * starts DelegationTokenSecretManager (to get security op codes)    *    * @param dfsDir DFS directory (where to setup MiniDFS cluster)    */
DECL|method|startCluster (String dfsDir)
specifier|public
name|void
name|startCluster
parameter_list|(
name|String
name|dfsDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// same as manageDfsDirs but only one edits file instead of two
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|Util
operator|.
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|dfsDir
argument_list|,
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
argument_list|,
name|Util
operator|.
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|dfsDir
argument_list|,
literal|"namesecondary1"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// blocksize for concat (file size must be multiple of blocksize)
name|config
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// for security to work (fake JobTracker user)
name|config
operator|.
name|set
argument_list|(
literal|"hadoop.security.auth_to_local"
argument_list|,
literal|"RULE:[2:$1@$0](JobTracker@.*FOO.COM)s/@.*//"
operator|+
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|config
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown the cluster    */
DECL|method|shutdownCluster ()
specifier|public
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Run file operations to create edits for all op codes    * to be tested.    *    * the following op codes are deprecated and therefore not tested:    *    * OP_DATANODE_ADD    ( 5)    * OP_DATANODE_REMOVE ( 6)    * OP_SET_NS_QUOTA    (11)    * OP_CLEAR_NS_QUOTA  (12)    */
DECL|method|runOperations ()
specifier|private
name|CheckpointSignature
name|runOperations
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating edits by performing fs operations"
argument_list|)
expr_stmt|;
comment|// no check, if it's not it throws an exception which is what we want
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
comment|// OP_ADD 0, OP_SET_GENSTAMP 10
name|Path
name|pathFileCreate
init|=
operator|new
name|Path
argument_list|(
literal|"/file_create"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s
init|=
name|dfs
operator|.
name|create
argument_list|(
name|pathFileCreate
argument_list|)
decl_stmt|;
comment|// OP_CLOSE 9
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OP_RENAME_OLD 1
name|Path
name|pathFileMoved
init|=
operator|new
name|Path
argument_list|(
literal|"/file_moved"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|pathFileCreate
argument_list|,
name|pathFileMoved
argument_list|)
expr_stmt|;
comment|// OP_DELETE 2
name|dfs
operator|.
name|delete
argument_list|(
name|pathFileMoved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// OP_MKDIR 3
name|Path
name|pathDirectoryMkdir
init|=
operator|new
name|Path
argument_list|(
literal|"/directory_mkdir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|pathDirectoryMkdir
argument_list|)
expr_stmt|;
comment|// OP_SET_REPLICATION 4
name|s
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|pathFileCreate
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setReplication
argument_list|(
name|pathFileCreate
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// OP_SET_PERMISSIONS 7
name|Short
name|permission
init|=
literal|0777
decl_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
name|pathFileCreate
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
comment|// OP_SET_OWNER 8
name|dfs
operator|.
name|setOwner
argument_list|(
name|pathFileCreate
argument_list|,
operator|new
name|String
argument_list|(
literal|"newOwner"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// OP_CLOSE 9 see above
comment|// OP_SET_GENSTAMP 10 see above
comment|// OP_SET_NS_QUOTA 11 obsolete
comment|// OP_CLEAR_NS_QUOTA 12 obsolete
comment|// OP_TIMES 13
name|long
name|mtime
init|=
literal|1285195527000L
decl_stmt|;
comment|// Wed, 22 Sep 2010 22:45:27 GMT
name|long
name|atime
init|=
name|mtime
decl_stmt|;
name|dfs
operator|.
name|setTimes
argument_list|(
name|pathFileCreate
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
comment|// OP_SET_QUOTA 14
name|dfs
operator|.
name|setQuota
argument_list|(
name|pathDirectoryMkdir
argument_list|,
literal|1000L
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
comment|// OP_RENAME 15
name|fc
operator|.
name|rename
argument_list|(
name|pathFileCreate
argument_list|,
name|pathFileMoved
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// OP_CONCAT_DELETE 16
name|Path
name|pathConcatTarget
init|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_target"
argument_list|)
decl_stmt|;
name|Path
index|[]
name|pathConcatFiles
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|pathConcatFiles
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_0"
argument_list|)
expr_stmt|;
name|pathConcatFiles
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/file_concat_1"
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|blockSize
operator|*
literal|3
decl_stmt|;
comment|// multiple of blocksize for concat
name|short
name|replication
init|=
literal|1
decl_stmt|;
name|long
name|seed
init|=
literal|1
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|pathConcatTarget
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|pathConcatFiles
index|[
literal|0
index|]
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|pathConcatFiles
index|[
literal|1
index|]
argument_list|,
name|length
argument_list|,
name|replication
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|concat
argument_list|(
name|pathConcatTarget
argument_list|,
name|pathConcatFiles
argument_list|)
expr_stmt|;
comment|// OP_SYMLINK 17
name|Path
name|pathSymlink
init|=
operator|new
name|Path
argument_list|(
literal|"/file_symlink"
argument_list|)
decl_stmt|;
name|fc
operator|.
name|createSymlink
argument_list|(
name|pathConcatTarget
argument_list|,
name|pathSymlink
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// OP_GET_DELEGATION_TOKEN 18
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"JobTracker"
argument_list|)
decl_stmt|;
comment|// OP_RENEW_DELEGATION_TOKEN 19
comment|// OP_CANCEL_DELEGATION_TOKEN 20
comment|// see TestDelegationToken.java
comment|// fake the user to renew token for
name|UserGroupInformation
name|longUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"JobTracker/foo.com@FOO.COM"
argument_list|)
decl_stmt|;
try|try
block|{
name|longUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|token
operator|.
name|renew
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancel
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"renewDelegationToken threw InterruptedException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// OP_UPDATE_MASTER_KEY 21
comment|//   done by getDelegationTokenSecretManager().startThreads();
comment|// sync to disk, otherwise we parse partial edits
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
comment|// OP_REASSIGN_LEASE 22
name|String
name|filePath
init|=
literal|"/hard-lease-recovery-test"
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"foo-bar-baz"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|DFSClientAdapter
operator|.
name|stopLeaseRenewer
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|leaseRecoveryPath
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
name|leaseRecoveryPath
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|leaseRecoveryPath
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Set the hard lease timeout to 1 second.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
literal|60
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for lease recovery to complete
name|LocatedBlocks
name|locatedBlocks
decl_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Innocuous exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|locatedBlocks
operator|=
name|DFSClientAdapter
operator|.
name|callGetBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
argument_list|,
name|filePath
argument_list|,
literal|0L
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|locatedBlocks
operator|.
name|isUnderConstruction
argument_list|()
condition|)
do|;
comment|// Force a roll so we get an OP_END_LOG_SEGMENT txn
return|return
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|rollEditLog
argument_list|()
return|;
block|}
block|}
end_class

end_unit

