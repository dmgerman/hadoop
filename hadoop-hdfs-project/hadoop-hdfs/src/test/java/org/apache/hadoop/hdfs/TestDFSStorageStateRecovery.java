begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|NAME_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** * This test ensures the appropriate response (successful or failure) from * the system when the system is started under various storage state and * version conditions. */
end_comment

begin_class
DECL|class|TestDFSStorageStateRecovery
specifier|public
class|class
name|TestDFSStorageStateRecovery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestDFSStorageStateRecovery"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|testCounter
specifier|private
name|int
name|testCounter
init|=
literal|0
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
comment|// Constants for indexes into test case table below.
DECL|field|CURRENT_EXISTS
specifier|private
specifier|static
specifier|final
name|int
name|CURRENT_EXISTS
init|=
literal|0
decl_stmt|;
DECL|field|PREVIOUS_EXISTS
specifier|private
specifier|static
specifier|final
name|int
name|PREVIOUS_EXISTS
init|=
literal|1
decl_stmt|;
DECL|field|PREVIOUS_TMP_EXISTS
specifier|private
specifier|static
specifier|final
name|int
name|PREVIOUS_TMP_EXISTS
init|=
literal|2
decl_stmt|;
DECL|field|REMOVED_TMP_EXISTS
specifier|private
specifier|static
specifier|final
name|int
name|REMOVED_TMP_EXISTS
init|=
literal|3
decl_stmt|;
DECL|field|SHOULD_RECOVER
specifier|private
specifier|static
specifier|final
name|int
name|SHOULD_RECOVER
init|=
literal|4
decl_stmt|;
DECL|field|CURRENT_SHOULD_EXIST_AFTER_RECOVER
specifier|private
specifier|static
specifier|final
name|int
name|CURRENT_SHOULD_EXIST_AFTER_RECOVER
init|=
literal|5
decl_stmt|;
DECL|field|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
specifier|private
specifier|static
specifier|final
name|int
name|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
init|=
literal|6
decl_stmt|;
comment|/**    * The test case table.  Each row represents a test case.  This table is    * taken from the table in Apendix A of the HDFS Upgrade Test Plan    * (TestPlan-HdfsUpgrade.html) attached to    * http://issues.apache.org/jira/browse/HADOOP-702    *     * It has been slightly modified since previouscheckpoint.tmp no longer    * exists.    *     * The column meanings are:    *  0) current directory exists    *  1) previous directory exists    *  2) previous.tmp directory exists    *  3) removed.tmp directory exists    *  4) node should recover and startup    *  5) current directory should exist after recovery but before startup    *  6) previous directory should exist after recovery but before startup    */
DECL|field|testCases
specifier|static
specifier|final
name|boolean
index|[]
index|[]
name|testCases
init|=
operator|new
name|boolean
index|[]
index|[]
block|{
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
comment|// 1
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,
comment|// 2
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,
comment|// 3
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 4
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 4
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 4
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 4
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 5
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 6
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
comment|// 7
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
comment|// 8
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 9
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 10
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 10
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 10
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 10
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
comment|// 11
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,
comment|// 12
comment|// name-node specific cases
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
comment|// 13
block|}
decl_stmt|;
DECL|field|NUM_NN_TEST_CASES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NN_TEST_CASES
init|=
name|testCases
operator|.
name|length
decl_stmt|;
DECL|field|NUM_DN_TEST_CASES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DN_TEST_CASES
init|=
literal|18
decl_stmt|;
comment|/**    * Writes an INFO log message containing the parameters. Only    * the first 4 elements of the state array are included in the message.    */
DECL|method|log (String label, int numDirs, int testCaseNum, boolean[] state)
name|void
name|log
parameter_list|(
name|String
name|label
parameter_list|,
name|int
name|numDirs
parameter_list|,
name|int
name|testCaseNum
parameter_list|,
name|boolean
index|[]
name|state
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"============================================================"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***TEST "
operator|+
operator|(
name|testCounter
operator|++
operator|)
operator|+
literal|"*** "
operator|+
name|label
operator|+
literal|":"
operator|+
literal|" numDirs="
operator|+
name|numDirs
operator|+
literal|" testCase="
operator|+
name|testCaseNum
operator|+
literal|" current="
operator|+
name|state
index|[
name|CURRENT_EXISTS
index|]
operator|+
literal|" previous="
operator|+
name|state
index|[
name|PREVIOUS_EXISTS
index|]
operator|+
literal|" previous.tmp="
operator|+
name|state
index|[
name|PREVIOUS_TMP_EXISTS
index|]
operator|+
literal|" removed.tmp="
operator|+
name|state
index|[
name|REMOVED_TMP_EXISTS
index|]
operator|+
literal|" should recover="
operator|+
name|state
index|[
name|SHOULD_RECOVER
index|]
operator|+
literal|" current exists after="
operator|+
name|state
index|[
name|CURRENT_SHOULD_EXIST_AFTER_RECOVER
index|]
operator|+
literal|" previous exists after="
operator|+
name|state
index|[
name|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up the storage directories for namenode as defined by    * {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY}. For each element     * in {@link DFSConfigKeys#DFS_NAMENODE_NAME_DIR_KEY}, the subdirectories     * represented by the first four elements of the<code>state</code> array    * will be created and populated.    *     * See {@link UpgradeUtilities#createNameNodeStorageDirs()}    *     * @param state    *   a row from the testCases table which indicates which directories    *   to setup for the node    * @return file paths representing namenode storage directories    */
DECL|method|createNameNodeStorageState (boolean[] state)
name|String
index|[]
name|createNameNodeStorageState
parameter_list|(
name|boolean
index|[]
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
decl_stmt|;
name|UpgradeUtilities
operator|.
name|createEmptyDirs
argument_list|(
name|baseDirs
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|CURRENT_EXISTS
index|]
condition|)
comment|// current
name|UpgradeUtilities
operator|.
name|createNameNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_EXISTS
index|]
condition|)
comment|// previous
name|UpgradeUtilities
operator|.
name|createNameNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_TMP_EXISTS
index|]
condition|)
comment|// previous.tmp
name|UpgradeUtilities
operator|.
name|createNameNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous.tmp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
comment|// removed.tmp
name|UpgradeUtilities
operator|.
name|createNameNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"removed.tmp"
argument_list|)
expr_stmt|;
return|return
name|baseDirs
return|;
block|}
comment|/**    * Sets up the storage directories for a datanode under    * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}. For each element in     * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}, the subdirectories     * represented by the first four elements of the<code>state</code> array     * will be created and populated.     * See {@link UpgradeUtilities#createDataNodeStorageDirs()}    *     * @param state    *   a row from the testCases table which indicates which directories    *   to setup for the node    * @return file paths representing datanode storage directories    */
DECL|method|createDataNodeStorageState (boolean[] state)
name|String
index|[]
name|createDataNodeStorageState
parameter_list|(
name|boolean
index|[]
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|UpgradeUtilities
operator|.
name|createEmptyDirs
argument_list|(
name|baseDirs
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|CURRENT_EXISTS
index|]
condition|)
comment|// current
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_EXISTS
index|]
condition|)
comment|// previous
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_TMP_EXISTS
index|]
condition|)
comment|// previous.tmp
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous.tmp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
comment|// removed.tmp
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"removed.tmp"
argument_list|)
expr_stmt|;
return|return
name|baseDirs
return|;
block|}
comment|/**    * Sets up the storage directories for a block pool under    * {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}. For each element     * in {@link DFSConfigKeys#DFS_DATANODE_DATA_DIR_KEY}, the subdirectories     * represented by the first four elements of the<code>state</code> array     * will be created and populated.     * See {@link UpgradeUtilities#createBlockPoolStorageDirs()}    *     * @param bpid block pool Id    * @param state    *   a row from the testCases table which indicates which directories    *   to setup for the node    * @return file paths representing block pool storage directories    */
DECL|method|createBlockPoolStorageState (String bpid, boolean[] state)
name|String
index|[]
name|createBlockPoolStorageState
parameter_list|(
name|String
name|bpid
parameter_list|,
name|boolean
index|[]
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|)
decl_stmt|;
name|UpgradeUtilities
operator|.
name|createEmptyDirs
argument_list|(
name|baseDirs
argument_list|)
expr_stmt|;
name|UpgradeUtilities
operator|.
name|createDataNodeStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
comment|// After copying the storage directories from master datanode, empty
comment|// the block pool storage directories
name|String
index|[]
name|bpDirs
init|=
name|UpgradeUtilities
operator|.
name|createEmptyBPDirs
argument_list|(
name|baseDirs
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
index|[
name|CURRENT_EXISTS
index|]
condition|)
comment|// current
name|UpgradeUtilities
operator|.
name|createBlockPoolStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"current"
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_EXISTS
index|]
condition|)
comment|// previous
name|UpgradeUtilities
operator|.
name|createBlockPoolStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous"
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|PREVIOUS_TMP_EXISTS
index|]
condition|)
comment|// previous.tmp
name|UpgradeUtilities
operator|.
name|createBlockPoolStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"previous.tmp"
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
comment|// removed.tmp
name|UpgradeUtilities
operator|.
name|createBlockPoolStorageDirs
argument_list|(
name|baseDirs
argument_list|,
literal|"removed.tmp"
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
return|return
name|bpDirs
return|;
block|}
comment|/**    * For NameNode, verify that the current and/or previous exist as indicated by     * the method parameters.  If previous exists, verify that    * it hasn't been modified by comparing the checksum of all it's    * containing files with their original checksum.  It is assumed that    * the server has recovered.    */
DECL|method|checkResultNameNode (String[] baseDirs, boolean currentShouldExist, boolean previousShouldExist)
name|void
name|checkResultNameNode
parameter_list|(
name|String
index|[]
name|baseDirs
parameter_list|,
name|boolean
name|currentShouldExist
parameter_list|,
name|boolean
name|previousShouldExist
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"current"
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"current/VERSION"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FSImageTestUtil
operator|.
name|findNewestImageFile
argument_list|(
name|baseDirs
index|[
name|i
index|]
operator|+
literal|"/current"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"current/seen_txid"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|previousShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"previous"
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpgradeUtilities
operator|.
name|checksumContents
argument_list|(
name|NAME_NODE
argument_list|,
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"previous"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|checksumMasterNameNodeContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * For datanode, verify that the current and/or previous exist as indicated by     * the method parameters.  If previous exists, verify that    * it hasn't been modified by comparing the checksum of all it's    * containing files with their original checksum.  It is assumed that    * the server has recovered.    */
DECL|method|checkResultDataNode (String[] baseDirs, boolean currentShouldExist, boolean previousShouldExist)
name|void
name|checkResultDataNode
parameter_list|(
name|String
index|[]
name|baseDirs
parameter_list|,
name|boolean
name|currentShouldExist
parameter_list|,
name|boolean
name|previousShouldExist
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|UpgradeUtilities
operator|.
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"current"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|checksumMasterDataNodeContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|previousShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"previous"
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpgradeUtilities
operator|.
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
literal|"previous"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|checksumMasterDataNodeContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * For block pool, verify that the current and/or previous exist as indicated    * by the method parameters.  If previous exists, verify that    * it hasn't been modified by comparing the checksum of all it's    * containing files with their original checksum.  It is assumed that    * the server has recovered.    * @param baseDirs directories pointing to block pool storage    * @param bpid block pool Id    * @param currentShouldExist current directory exists under storage    * @param currentShouldExist previous directory exists under storage    */
DECL|method|checkResultBlockPool (String[] baseDirs, boolean currentShouldExist, boolean previousShouldExist)
name|void
name|checkResultBlockPool
parameter_list|(
name|String
index|[]
name|baseDirs
parameter_list|,
name|boolean
name|currentShouldExist
parameter_list|,
name|boolean
name|previousShouldExist
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|bpCurDir
init|=
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpgradeUtilities
operator|.
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|bpCurDir
argument_list|,
literal|false
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|checksumMasterBlockPoolContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|previousShouldExist
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|baseDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|bpPrevDir
init|=
operator|new
name|File
argument_list|(
name|baseDirs
index|[
name|i
index|]
argument_list|,
name|Storage
operator|.
name|STORAGE_DIR_PREVIOUS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bpPrevDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpgradeUtilities
operator|.
name|checksumContents
argument_list|(
name|DATA_NODE
argument_list|,
name|bpPrevDir
argument_list|,
literal|false
argument_list|)
argument_list|,
name|UpgradeUtilities
operator|.
name|checksumMasterBlockPoolContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createCluster (Configuration c)
specifier|private
name|MiniDFSCluster
name|createCluster
parameter_list|(
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|c
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|REGULAR
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * This test iterates over the testCases table and attempts    * to startup the NameNode normally.    */
annotation|@
name|Test
DECL|method|testNNStorageStates ()
specifier|public
name|void
name|testNNStorageStates
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
decl_stmt|;
for|for
control|(
name|int
name|numDirs
init|=
literal|1
init|;
name|numDirs
operator|<=
literal|2
condition|;
name|numDirs
operator|++
control|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|=
name|UpgradeUtilities
operator|.
name|initializeStorageStateConf
argument_list|(
name|numDirs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NN_TEST_CASES
condition|;
name|i
operator|++
control|)
block|{
name|boolean
index|[]
name|testCase
init|=
name|testCases
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|shouldRecover
init|=
name|testCase
index|[
name|SHOULD_RECOVER
index|]
decl_stmt|;
name|boolean
name|curAfterRecover
init|=
name|testCase
index|[
name|CURRENT_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|boolean
name|prevAfterRecover
init|=
name|testCase
index|[
name|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|log
argument_list|(
literal|"NAME_NODE recovery"
argument_list|,
name|numDirs
argument_list|,
name|i
argument_list|,
name|testCase
argument_list|)
expr_stmt|;
name|baseDirs
operator|=
name|createNameNodeStorageState
argument_list|(
name|testCase
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldRecover
condition|)
block|{
name|cluster
operator|=
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkResultNameNode
argument_list|(
name|baseDirs
argument_list|,
name|curAfterRecover
argument_list|,
name|prevAfterRecover
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|cluster
operator|=
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"NameNode should have failed to start"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|// the exception is expected
comment|// check that the message says "not formatted"
comment|// when storage directory is empty (case #5)
if|if
condition|(
operator|!
name|testCases
index|[
name|i
index|]
index|[
name|CURRENT_EXISTS
index|]
operator|&&
operator|!
name|testCases
index|[
name|i
index|]
index|[
name|PREVIOUS_TMP_EXISTS
index|]
operator|&&
operator|!
name|testCases
index|[
name|i
index|]
index|[
name|PREVIOUS_EXISTS
index|]
operator|&&
operator|!
name|testCases
index|[
name|i
index|]
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"NameNode is not formatted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// end testCases loop
block|}
comment|// end numDirs loop
block|}
comment|/**    * This test iterates over the testCases table for Datanode storage and    * attempts to startup the DataNode normally.    */
annotation|@
name|Test
DECL|method|testDNStorageStates ()
specifier|public
name|void
name|testDNStorageStates
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
decl_stmt|;
comment|// First setup the datanode storage directory
for|for
control|(
name|int
name|numDirs
init|=
literal|1
init|;
name|numDirs
operator|<=
literal|2
condition|;
name|numDirs
operator|++
control|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|=
name|UpgradeUtilities
operator|.
name|initializeStorageStateConf
argument_list|(
name|numDirs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DN_TEST_CASES
condition|;
name|i
operator|++
control|)
block|{
name|boolean
index|[]
name|testCase
init|=
name|testCases
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|shouldRecover
init|=
name|testCase
index|[
name|SHOULD_RECOVER
index|]
decl_stmt|;
name|boolean
name|curAfterRecover
init|=
name|testCase
index|[
name|CURRENT_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|boolean
name|prevAfterRecover
init|=
name|testCase
index|[
name|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|log
argument_list|(
literal|"DATA_NODE recovery"
argument_list|,
name|numDirs
argument_list|,
name|i
argument_list|,
name|testCase
argument_list|)
expr_stmt|;
name|createNameNodeStorageState
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|baseDirs
operator|=
name|createDataNodeStorageState
argument_list|(
name|testCase
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testCase
index|[
name|CURRENT_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|PREVIOUS_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|PREVIOUS_TMP_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
block|{
comment|// DataNode will create and format current if no directories exist
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldRecover
condition|)
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkResultDataNode
argument_list|(
name|baseDirs
argument_list|,
name|curAfterRecover
argument_list|,
name|prevAfterRecover
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDatanodeUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// end testCases loop
block|}
comment|// end numDirs loop
block|}
comment|/**    * This test iterates over the testCases table for block pool storage and    * attempts to startup the DataNode normally.    */
annotation|@
name|Test
DECL|method|testBlockPoolStorageStates ()
specifier|public
name|void
name|testBlockPoolStorageStates
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|baseDirs
decl_stmt|;
comment|// First setup the datanode storage directory
name|String
name|bpid
init|=
name|UpgradeUtilities
operator|.
name|getCurrentBlockPoolID
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|numDirs
init|=
literal|1
init|;
name|numDirs
operator|<=
literal|2
condition|;
name|numDirs
operator|++
control|)
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.datanode.scan.period.hours"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|=
name|UpgradeUtilities
operator|.
name|initializeStorageStateConf
argument_list|(
name|numDirs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DN_TEST_CASES
condition|;
name|i
operator|++
control|)
block|{
name|boolean
index|[]
name|testCase
init|=
name|testCases
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|shouldRecover
init|=
name|testCase
index|[
name|SHOULD_RECOVER
index|]
decl_stmt|;
name|boolean
name|curAfterRecover
init|=
name|testCase
index|[
name|CURRENT_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|boolean
name|prevAfterRecover
init|=
name|testCase
index|[
name|PREVIOUS_SHOULD_EXIST_AFTER_RECOVER
index|]
decl_stmt|;
name|log
argument_list|(
literal|"BLOCK_POOL recovery"
argument_list|,
name|numDirs
argument_list|,
name|i
argument_list|,
name|testCase
argument_list|)
expr_stmt|;
name|createNameNodeStorageState
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|baseDirs
operator|=
name|createBlockPoolStorageState
argument_list|(
name|bpid
argument_list|,
name|testCase
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testCase
index|[
name|CURRENT_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|PREVIOUS_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|PREVIOUS_TMP_EXISTS
index|]
operator|&&
operator|!
name|testCase
index|[
name|REMOVED_TMP_EXISTS
index|]
condition|)
block|{
comment|// DataNode will create and format current if no directories exist
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldRecover
condition|)
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkResultBlockPool
argument_list|(
name|baseDirs
argument_list|,
name|curAfterRecover
argument_list|,
name|prevAfterRecover
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isBPServiceAlive
argument_list|(
name|bpid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// end testCases loop
block|}
comment|// end numDirs loop
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up the directory structures."
argument_list|)
expr_stmt|;
name|UpgradeUtilities
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down MiniDFSCluster"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

