begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_POLICY_CELL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_POLICY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_POLICY_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_SCHEMA_CODEC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
operator|.
name|ERASURE_CODING_SECTION_SCHEMA_OPTION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
DECL|class|TestOfflineImageViewer
specifier|public
class|class
name|TestOfflineImageViewer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OfflineImageViewerPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_DIRS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DIRS
init|=
literal|3
decl_stmt|;
DECL|field|FILES_PER_DIR
specifier|private
specifier|static
specifier|final
name|int
name|FILES_PER_DIR
init|=
literal|4
decl_stmt|;
DECL|field|TEST_RENEWER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RENEWER
init|=
literal|"JobTracker"
decl_stmt|;
DECL|field|originalFsimage
specifier|private
specifier|static
name|File
name|originalFsimage
init|=
literal|null
decl_stmt|;
DECL|field|filesECCount
specifier|private
specifier|static
name|int
name|filesECCount
init|=
literal|0
decl_stmt|;
DECL|field|addedErasureCodingPolicyName
specifier|private
specifier|static
name|String
name|addedErasureCodingPolicyName
init|=
literal|null
decl_stmt|;
comment|// namespace as written to dfs, to be compared with viewer's output
DECL|field|writtenFiles
specifier|final
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|writtenFiles
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|dirCount
specifier|static
name|int
name|dirCount
init|=
literal|0
decl_stmt|;
DECL|field|tempDir
specifier|private
specifier|static
name|File
name|tempDir
decl_stmt|;
comment|// Create a populated namespace for later testing. Save its contents to a
comment|// data structure and store its fsimage location.
comment|// We only want to generate the fsimage file once and use it for
comment|// multiple tests.
annotation|@
name|BeforeClass
DECL|method|createOriginalFSImage ()
specifier|public
specifier|static
name|void
name|createOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|File
index|[]
name|nnDirs
init|=
name|MiniDFSCluster
operator|.
name|getNameNodeDirectory
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|nnDirs
index|[
literal|0
index|]
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
literal|"RULE:[2:$1@$0](JobTracker@.*FOO.COM)s/@.*//"
operator|+
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|hdfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|,
literal|"k2"
argument_list|,
literal|"v2"
argument_list|)
decl_stmt|;
name|ECSchema
name|schema
init|=
operator|new
name|ECSchema
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_CODEC_NAME
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|ErasureCodingPolicy
name|policy
init|=
operator|new
name|ErasureCodingPolicy
argument_list|(
name|schema
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
name|hdfs
operator|.
name|addErasureCodingPolicies
argument_list|(
operator|new
name|ErasureCodingPolicy
index|[]
block|{
name|policy
block|}
argument_list|)
decl_stmt|;
name|addedErasureCodingPolicyName
operator|=
name|responses
index|[
literal|0
index|]
operator|.
name|getPolicy
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|addedErasureCodingPolicyName
argument_list|)
expr_stmt|;
comment|// Create a reasonable namespace
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DIRS
condition|;
name|i
operator|++
operator|,
name|dirCount
operator|++
control|)
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|FILES_PER_DIR
condition|;
name|j
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|j
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create an empty directory
name|Path
name|emptydir
init|=
operator|new
name|Path
argument_list|(
literal|"/emptydir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|emptydir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|emptydir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|emptydir
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create directories whose name should be escaped in XML
name|Path
name|invalidXMLDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirContainingInvalidXMLChar\u0000here"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|invalidXMLDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|Path
name|entityRefXMLDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirContainingEntityRef&here"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|entityRefXMLDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|entityRefXMLDir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|entityRefXMLDir
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create directories with new line characters
name|Path
name|newLFDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirContainingNewLineChar"
operator|+
name|StringUtils
operator|.
name|LF
operator|+
literal|"here"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|newLFDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
literal|"\"/dirContainingNewLineChar%x0Ahere\""
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|newLFDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|newCRLFDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirContainingNewLineChar"
operator|+
name|PBImageDelimitedTextWriter
operator|.
name|CRLF
operator|+
literal|"here"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|newCRLFDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
literal|"\"/dirContainingNewLineChar%x0D%x0Ahere\""
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|newCRLFDir
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create a directory with sticky bits
name|Path
name|stickyBitDir
init|=
operator|new
name|Path
argument_list|(
literal|"/stickyBit"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|stickyBitDir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|stickyBitDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|stickyBitDir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|stickyBitDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get delegation tokens so we log the delegation token op
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|delegationTokens
init|=
name|hdfs
operator|.
name|addDelegationTokens
argument_list|(
name|TEST_RENEWER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
range|:
name|delegationTokens
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"got token "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Create INodeReference
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/src"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create snapshot and snapshotDiff.
specifier|final
name|Path
name|orig
init|=
operator|new
name|Path
argument_list|(
literal|"/src/orig"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|orig
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/src/file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|src
argument_list|,
literal|"snapshot"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
literal|"/dst"
argument_list|)
decl_stmt|;
comment|// Rename a directory in the snapshot directory to add snapshotCopy
comment|// field to the dirDiff entry.
name|hdfs
operator|.
name|rename
argument_list|(
name|orig
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// Truncate a file in the snapshot directory to add snapshotCopy and
comment|// blocks fields to the fileDiff entry.
name|hdfs
operator|.
name|truncate
argument_list|(
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|file1
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set XAttrs so the fsimage contains XAttr ops
specifier|final
name|Path
name|xattr
init|=
operator|new
name|Path
argument_list|(
literal|"/xattr"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
argument_list|)
expr_stmt|;
comment|// OIV should be able to handle empty value XAttrs
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// OIV should be able to handle XAttr values that can't be expressed
comment|// as UTF8
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a4"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|0x3d
block|,
literal|0x28
block|}
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|xattr
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|xattr
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set ACLs
name|hdfs
operator|.
name|setAcl
argument_list|(
name|xattr
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|EXECUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create an Erasure Coded dir
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|hdfs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
operator|.
name|toString
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|ecDir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|ecDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create an empty Erasure Coded file
name|Path
name|emptyECFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"EmptyECFile.txt"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|emptyECFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|emptyECFile
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|emptyECFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filesECCount
operator|++
expr_stmt|;
comment|// Create a small Erasure Coded file
name|Path
name|smallECFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"SmallECFile.txt"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|smallECFile
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|10
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|smallECFile
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|smallECFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filesECCount
operator|++
expr_stmt|;
comment|// Write results to the fsimage file
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Determine location of fsimage file
name|originalFsimage
operator|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalFsimage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"original FS image file is "
operator|+
name|originalFsimage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|deleteOriginalFSImage ()
specifier|public
specifier|static
name|void
name|deleteOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalFsimage
operator|!=
literal|null
operator|&&
name|originalFsimage
operator|.
name|exists
argument_list|()
condition|)
block|{
name|originalFsimage
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Convenience method to generate a file status from file system for
comment|// later comparison
DECL|method|pathToFileEntry (FileSystem hdfs, String file)
specifier|private
specifier|static
name|FileStatus
name|pathToFileEntry
parameter_list|(
name|FileSystem
name|hdfs
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testTruncatedFSImage ()
specifier|public
name|void
name|testTruncatedFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|truncatedFile
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"truncatedFsImage"
argument_list|)
decl_stmt|;
name|PrintStream
name|output
init|=
operator|new
name|PrintStream
argument_list|(
name|NullOutputStream
operator|.
name|NULL_OUTPUT_STREAM
argument_list|)
decl_stmt|;
name|copyPartOfFile
argument_list|(
name|originalFsimage
argument_list|,
name|truncatedFile
argument_list|)
expr_stmt|;
operator|new
name|FileDistributionCalculator
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|output
argument_list|)
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|truncatedFile
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyPartOfFile (File src, File dest)
specifier|private
name|void
name|copyPartOfFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|MAX_BYTES
init|=
literal|700
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|in
operator|.
name|getChannel
argument_list|()
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|MAX_BYTES
argument_list|,
name|out
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileDistributionCalculator ()
specifier|public
name|void
name|testFileDistributionCalculator
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
operator|new
name|FileDistributionCalculator
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|o
argument_list|)
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|outputString
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"totalFiles = (\\d+)\n"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|p
operator|.
name|matcher
argument_list|(
name|outputString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|int
name|totalFiles
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_DIRS
operator|*
name|FILES_PER_DIR
operator|+
name|filesECCount
operator|+
literal|1
argument_list|,
name|totalFiles
argument_list|)
expr_stmt|;
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"totalDirectories = (\\d+)\n"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|outputString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|int
name|totalDirs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// totalDirs includes root directory
name|assertEquals
argument_list|(
name|dirCount
operator|+
literal|1
argument_list|,
name|totalDirs
argument_list|)
expr_stmt|;
name|FileStatus
name|maxFile
init|=
name|Collections
operator|.
name|max
argument_list|(
name|writtenFiles
operator|.
name|values
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|first
parameter_list|,
name|FileStatus
name|second
parameter_list|)
block|{
return|return
name|first
operator|.
name|getLen
argument_list|()
operator|<
name|second
operator|.
name|getLen
argument_list|()
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|first
operator|.
name|getLen
argument_list|()
operator|==
name|second
operator|.
name|getLen
argument_list|()
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"maxFileSize = (\\d+)\n"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|output
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxFile
operator|.
name|getLen
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileDistributionCalculatorWithOptions ()
specifier|public
name|void
name|testFileDistributionCalculatorWithOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
comment|/**    *  SAX handler to verify EC Files and their policies.    */
DECL|class|ECXMLHandler
class|class
name|ECXMLHandler
extends|extends
name|DefaultHandler
block|{
DECL|field|isInode
specifier|private
name|boolean
name|isInode
init|=
literal|false
decl_stmt|;
DECL|field|isAttrRepl
specifier|private
name|boolean
name|isAttrRepl
init|=
literal|false
decl_stmt|;
DECL|field|isAttrName
specifier|private
name|boolean
name|isAttrName
init|=
literal|false
decl_stmt|;
DECL|field|isXAttrs
specifier|private
name|boolean
name|isXAttrs
init|=
literal|false
decl_stmt|;
DECL|field|isAttrECPolicy
specifier|private
name|boolean
name|isAttrECPolicy
init|=
literal|false
decl_stmt|;
DECL|field|isAttrBlockType
specifier|private
name|boolean
name|isAttrBlockType
init|=
literal|false
decl_stmt|;
DECL|field|currentInodeName
specifier|private
name|String
name|currentInodeName
decl_stmt|;
DECL|field|currentECPolicy
specifier|private
name|String
name|currentECPolicy
decl_stmt|;
DECL|field|currentBlockType
specifier|private
name|String
name|currentBlockType
decl_stmt|;
DECL|field|currentRepl
specifier|private
name|String
name|currentRepl
decl_stmt|;
annotation|@
name|Override
DECL|method|startElement (String uri, String localName, String qName, Attributes attributes)
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_INODE
argument_list|)
condition|)
block|{
name|isInode
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInode
operator|&&
operator|!
name|isXAttrs
operator|&&
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|SECTION_NAME
argument_list|)
condition|)
block|{
name|isAttrName
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInode
operator|&&
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|SECTION_REPLICATION
argument_list|)
condition|)
block|{
name|isAttrRepl
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInode
operator|&&
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_EC_POLICY_ID
argument_list|)
condition|)
block|{
name|isAttrECPolicy
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInode
operator|&&
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_BLOCK_TYPE
argument_list|)
condition|)
block|{
name|isAttrBlockType
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isInode
operator|&&
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_XATTRS
argument_list|)
condition|)
block|{
name|isXAttrs
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|endElement (String uri, String localName, String qName)
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
if|if
condition|(
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_INODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentInodeName
operator|!=
literal|null
operator|&&
name|currentInodeName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|currentBlockType
operator|!=
literal|null
operator|&&
name|currentBlockType
operator|.
name|equalsIgnoreCase
argument_list|(
name|BlockType
operator|.
name|STRIPED
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"INode '"
operator|+
name|currentInodeName
operator|+
literal|"' has unexpected EC Policy!"
argument_list|,
name|Byte
operator|.
name|parseByte
argument_list|(
name|currentECPolicy
argument_list|)
argument_list|,
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"INode '"
operator|+
name|currentInodeName
operator|+
literal|"' has unexpected replication!"
argument_list|,
name|currentRepl
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|INodeFile
operator|.
name|DEFAULT_REPL_FOR_STRIPED_BLOCKS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|isInode
operator|=
literal|false
expr_stmt|;
name|currentInodeName
operator|=
literal|""
expr_stmt|;
name|currentECPolicy
operator|=
literal|""
expr_stmt|;
name|currentRepl
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qName
operator|.
name|equalsIgnoreCase
argument_list|(
name|PBImageXmlWriter
operator|.
name|INODE_SECTION_XATTRS
argument_list|)
condition|)
block|{
name|isXAttrs
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|characters (char[] ch, int start, int length)
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|String
name|value
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAttrName
condition|)
block|{
name|currentInodeName
operator|=
name|value
expr_stmt|;
name|isAttrName
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAttrRepl
condition|)
block|{
name|currentRepl
operator|=
name|value
expr_stmt|;
name|isAttrRepl
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAttrECPolicy
condition|)
block|{
name|currentECPolicy
operator|=
name|value
expr_stmt|;
name|isAttrECPolicy
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAttrBlockType
condition|)
block|{
name|currentBlockType
operator|=
name|value
expr_stmt|;
name|isAttrBlockType
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPBImageXmlWriter ()
specifier|public
name|void
name|testPBImageXmlWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|PBImageXmlWriter
name|v
init|=
operator|new
name|PBImageXmlWriter
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|SAXParserFactory
name|spf
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SAXParser
name|parser
init|=
name|spf
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xml
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ECXMLHandler
name|ecxmlHandler
init|=
operator|new
name|ECXMLHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
name|ecxmlHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebImageViewer ()
specifier|public
name|void
name|testWebImageViewer
parameter_list|()
throws|throws
name|Exception
block|{
name|WebImageViewer
name|viewer
init|=
operator|new
name|WebImageViewer
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|viewer
operator|.
name|initServer
argument_list|(
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|viewer
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// create a WebHdfsFileSystem instance
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"webhdfs://localhost:"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// verify the number of directories
name|FileStatus
index|[]
name|statuses
init|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dirCount
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify the number of files in the directory
name|statuses
operator|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILES_PER_DIR
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// compare a file
name|FileStatus
name|status
init|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0/file0"
argument_list|)
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|FileStatus
name|expected
init|=
name|writtenFiles
operator|.
name|get
argument_list|(
literal|"/dir0/file0"
argument_list|)
decl_stmt|;
name|compareFile
argument_list|(
name|expected
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to an empty directory
name|statuses
operator|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/emptydir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to a invalid path
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/invalid/?op=LISTSTATUS"
argument_list|)
decl_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to a invalid prefix
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// Verify the Erasure Coded empty file status
name|Path
name|emptyECFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/ec/EmptyECFile.txt"
argument_list|)
decl_stmt|;
name|FileStatus
name|actualEmptyECFileStatus
init|=
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|emptyECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|expectedEmptyECFileStatus
init|=
name|writtenFiles
operator|.
name|get
argument_list|(
name|emptyECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|emptyECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|compareFile
argument_list|(
name|expectedEmptyECFileStatus
argument_list|,
name|actualEmptyECFileStatus
argument_list|)
expr_stmt|;
comment|// Verify the Erasure Coded small file status
name|Path
name|smallECFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/ec/SmallECFile.txt"
argument_list|)
decl_stmt|;
name|FileStatus
name|actualSmallECFileStatus
init|=
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|smallECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|expectedSmallECFileStatus
init|=
name|writtenFiles
operator|.
name|get
argument_list|(
name|smallECFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|compareFile
argument_list|(
name|expectedSmallECFileStatus
argument_list|,
name|actualSmallECFileStatus
argument_list|)
expr_stmt|;
comment|// GETFILESTATUS operation
name|status
operator|=
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0/file0"
argument_list|)
argument_list|)
expr_stmt|;
name|compareFile
argument_list|(
name|expected
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// GETFILESTATUS operation to a invalid path
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/invalid/?op=GETFILESTATUS"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// invalid operation
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/?op=INVALID"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// invalid method
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/?op=LISTSTATUS"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_METHOD
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown the viewer
name|viewer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWebImageViewerSecureMode ()
specifier|public
name|void
name|testWebImageViewerSecureMode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
try|try
init|(
name|WebImageViewer
name|viewer
init|=
operator|new
name|WebImageViewer
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|RuntimeException
name|ex
init|=
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"WebImageViewer does not support secure mode."
argument_list|,
parameter_list|()
lambda|->
name|viewer
operator|.
name|start
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPBDelimitedWriter ()
specifier|public
name|void
name|testPBDelimitedWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testPBDelimitedWriter
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// Test in memory db.
name|testPBDelimitedWriter
argument_list|(
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
operator|+
literal|"/delimited.db"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidProcessorOption ()
specifier|public
name|void
name|testInvalidProcessorOption
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"invalid"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exit code returned for invalid processor option is incorrect"
argument_list|,
name|status
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOfflineImageViewerHelpMessage ()
specifier|public
name|void
name|testOfflineImageViewerHelpMessage
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exit code returned for help option is incorrect"
argument_list|,
name|status
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Invalid Command error displayed when help option is passed."
argument_list|,
name|bytes
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error parsing command-line options"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|,
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exit code returned for help with other option is incorrect"
argument_list|,
name|status
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPBDelimitedWriter (String db)
specifier|private
name|void
name|testPBDelimitedWriter
parameter_list|(
name|String
name|db
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|DELIMITER
init|=
literal|"\t"
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
init|)
block|{
name|PBImageDelimitedTextWriter
name|v
init|=
operator|new
name|PBImageDelimitedTextWriter
argument_list|(
name|o
argument_list|,
name|DELIMITER
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|output
operator|.
name|toByteArray
argument_list|()
argument_list|)
init|;
name|BufferedReader
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
name|boolean
name|header
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|header
condition|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|header
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// writtenFiles does not contain root directory and "invalid XML char" dir.
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|fileNames
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|filename
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
literal|"/dirContainingInvalidXMLChar"
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|writtenFiles
operator|.
name|keySet
argument_list|()
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
block|}
DECL|method|compareFile (FileStatus expected, FileStatus status)
specifier|private
specifier|static
name|void
name|compareFile
parameter_list|(
name|FileStatus
name|expected
parameter_list|,
name|FileStatus
name|status
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroup
argument_list|()
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLen
argument_list|()
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOwner
argument_list|()
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPermission
argument_list|()
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplication
argument_list|()
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHttpResponseCode (int expectedCode, URL url)
specifier|private
name|void
name|verifyHttpResponseCode
parameter_list|(
name|int
name|expectedCode
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCode
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the ReverseXML processor.    *    * 1. Translate fsimage -> reverseImage.xml    * 2. Translate reverseImage.xml -> reverseImage    * 3. Translate reverseImage -> reverse2Image.xml    * 4. Verify that reverseImage.xml and reverse2Image.xml match    *    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testReverseXmlRoundTrip ()
specifier|public
name|void
name|testReverseXmlRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|OfflineImageReconstructor
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|File
name|reverseImageXml
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"reverseImage.xml"
argument_list|)
decl_stmt|;
name|File
name|reverseImage
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"reverseImage"
argument_list|)
decl_stmt|;
name|File
name|reverseImage2Xml
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"reverseImage2.xml"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating reverseImage.xml="
operator|+
name|reverseImageXml
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|", reverseImage="
operator|+
name|reverseImage
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|", reverseImage2Xml="
operator|+
name|reverseImage2Xml
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|,
literal|"XML"
operator|,
literal|"-i"
operator|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
operator|,
literal|"-o"
operator|,
name|reverseImageXml
operator|.
name|getAbsolutePath
argument_list|()
block|}
block|)
function|!= 0
block|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"oiv returned failure creating first XML file."
argument_list|)
throw|;
block|}
end_class

begin_if
if|if
condition|(
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|,
literal|"ReverseXML"
operator|,
literal|"-i"
operator|,
name|reverseImageXml
operator|.
name|getAbsolutePath
argument_list|()
operator|,
literal|"-o"
operator|,
name|reverseImage
operator|.
name|getAbsolutePath
argument_list|()
block|}
end_if

begin_expr_stmt
unit|)
operator|!=
literal|0
end_expr_stmt

begin_block
unit|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"oiv returned failure recreating fsimage file."
argument_list|)
throw|;
block|}
end_block

begin_if
if|if
condition|(
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|,
literal|"XML"
operator|,
literal|"-i"
operator|,
name|reverseImage
operator|.
name|getAbsolutePath
argument_list|()
operator|,
literal|"-o"
operator|,
name|reverseImage2Xml
operator|.
name|getAbsolutePath
argument_list|()
block|}
end_if

begin_expr_stmt
unit|)
operator|!=
literal|0
end_expr_stmt

begin_block
unit|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"oiv returned failure creating second "
operator|+
literal|"XML file."
argument_list|)
throw|;
block|}
end_block

begin_comment
comment|// The XML file we wrote based on the re-created fsimage should be the
end_comment

begin_comment
comment|// same as the one we dumped from the original fsimage.
end_comment

begin_expr_stmt
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|GenericTestUtils
operator|.
name|getFilesDiff
argument_list|(
name|reverseImageXml
argument_list|,
name|reverseImage2Xml
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**    * Tests that the ReverseXML processor doesn't accept XML files with the wrong    * layoutVersion.    */
end_comment

begin_function
unit|@
name|Test
DECL|method|testReverseXmlWrongLayoutVersion ()
specifier|public
name|void
name|testReverseXmlWrongLayoutVersion
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|imageWrongVersion
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"imageWrongVersion.xml"
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|imageWrongVersion
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<fsimage>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<version>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<layoutVersion>%d</layoutVersion>"
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<onDiskVersion>1</onDiskVersion>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<oivRevision>"
operator|+
literal|"545bbef596c06af1c3c8dca1ce29096a64608478</oivRevision>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</version>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</fsimage>"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|OfflineImageReconstructor
operator|.
name|run
argument_list|(
name|imageWrongVersion
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|imageWrongVersion
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".out"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected OfflineImageReconstructor to fail with "
operator|+
literal|"version mismatch."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Layout version mismatch."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testFileDistributionCalculatorForException ()
specifier|public
name|void
name|testFileDistributionCalculatorForException
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|fsimageFile
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|files
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// Create a initial fsimage file
try|try
init|(
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create a reasonable namespace
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create files with byte size that can't be divided by step size,
comment|// the byte size for here are 3, 9, 15, 21.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILES_PER_DIR
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file
argument_list|,
literal|6
operator|*
name|i
operator|+
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Write results to the fsimage file
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
comment|// Determine location of fsimage file
name|fsimageFile
operator|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsimageFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
block|}
comment|// Run the test with params -maxSize 23 and -step 4, it will not throw
comment|// ArrayIndexOutOfBoundsException with index 6 when deals with
comment|// 21 byte size file.
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|fsimageFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"23"
block|,
literal|"-step"
block|,
literal|"4"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testOfflineImageViewerMaxSizeAndStepOptions ()
specifier|public
name|void
name|testOfflineImageViewerMaxSizeAndStepOptions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Add the -h option to make the test only for option parsing,
comment|// and don't need to do the following operations.
name|OfflineImageViewer
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
literal|"-"
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|,
literal|"-h"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bytes
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error parsing command-line options: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testOfflineImageViewerWithFormatOption ()
specifier|public
name|void
name|testOfflineImageViewerWithFormatOption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|,
literal|"-format"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bytes
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"(0 B, 8 B]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getXmlString (Element element, String name)
specifier|private
specifier|static
name|String
name|getXmlString
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeList
name|id
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Element
name|line
init|=
operator|(
name|Element
operator|)
name|id
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|Node
name|first
init|=
name|line
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
comment|// handle empty<key></key>
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|val
init|=
name|first
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|val
return|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testOfflineImageViewerForECPolicies ()
specifier|public
name|void
name|testOfflineImageViewerForECPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|PBImageXmlWriter
name|v
init|=
operator|new
name|PBImageXmlWriter
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xml
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|ecSection
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
name|ERASURE_CODING_SECTION_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ecSection
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|policies
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
name|ERASURE_CODING_SECTION_POLICY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|+
name|SystemErasureCodingPolicies
operator|.
name|getPolicies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|policies
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|policies
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|policy
init|=
operator|(
name|Element
operator|)
name|policies
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|getXmlString
argument_list|(
name|policy
argument_list|,
name|ERASURE_CODING_SECTION_POLICY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|addedErasureCodingPolicyName
argument_list|)
condition|)
block|{
name|String
name|cellSize
init|=
name|getXmlString
argument_list|(
name|policy
argument_list|,
name|ERASURE_CODING_SECTION_POLICY_CELL_SIZE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1024"
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|getXmlString
argument_list|(
name|policy
argument_list|,
name|ERASURE_CODING_SECTION_POLICY_STATE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ErasureCodingPolicyState
operator|.
name|ENABLED
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|Element
name|schema
init|=
operator|(
name|Element
operator|)
name|policy
operator|.
name|getElementsByTagName
argument_list|(
name|ERASURE_CODING_SECTION_SCHEMA
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|codecName
init|=
name|getXmlString
argument_list|(
name|schema
argument_list|,
name|ERASURE_CODING_SECTION_SCHEMA_CODEC_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ErasureCodeConstants
operator|.
name|RS_CODEC_NAME
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|NodeList
name|options
init|=
name|schema
operator|.
name|getElementsByTagName
argument_list|(
name|ERASURE_CODING_SECTION_SCHEMA_OPTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|options
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|option1
init|=
operator|(
name|Element
operator|)
name|options
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"k1"
argument_list|,
name|getXmlString
argument_list|(
name|option1
argument_list|,
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|getXmlString
argument_list|(
name|option1
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|option2
init|=
operator|(
name|Element
operator|)
name|options
operator|.
name|item
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"k2"
argument_list|,
name|getXmlString
argument_list|(
name|option2
argument_list|,
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|getXmlString
argument_list|(
name|option2
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

unit|}
end_unit

