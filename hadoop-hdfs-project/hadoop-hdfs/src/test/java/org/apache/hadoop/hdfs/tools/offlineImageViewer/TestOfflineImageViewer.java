begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
DECL|class|TestOfflineImageViewer
specifier|public
class|class
name|TestOfflineImageViewer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OfflineImageViewerPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_DIRS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DIRS
init|=
literal|3
decl_stmt|;
DECL|field|FILES_PER_DIR
specifier|private
specifier|static
specifier|final
name|int
name|FILES_PER_DIR
init|=
literal|4
decl_stmt|;
DECL|field|TEST_RENEWER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RENEWER
init|=
literal|"JobTracker"
decl_stmt|;
DECL|field|originalFsimage
specifier|private
specifier|static
name|File
name|originalFsimage
init|=
literal|null
decl_stmt|;
comment|// namespace as written to dfs, to be compared with viewer's output
DECL|field|writtenFiles
specifier|final
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|writtenFiles
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|dirCount
specifier|static
name|int
name|dirCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
comment|// Create a populated namespace for later testing. Save its contents to a
comment|// data structure and store its fsimage location.
comment|// We only want to generate the fsimage file once and use it for
comment|// multiple tests.
annotation|@
name|BeforeClass
DECL|method|createOriginalFSImage ()
specifier|public
specifier|static
name|void
name|createOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
literal|"RULE:[2:$1@$0](JobTracker@.*FOO.COM)s/@.*//"
operator|+
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create a reasonable namespace
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DIRS
condition|;
name|i
operator|++
operator|,
name|dirCount
operator|++
control|)
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|FILES_PER_DIR
condition|;
name|j
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|j
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|o
init|=
name|hdfs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|o
operator|.
name|write
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|pathToFileEntry
argument_list|(
name|hdfs
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create an empty directory
name|Path
name|emptydir
init|=
operator|new
name|Path
argument_list|(
literal|"/emptydir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|emptydir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|emptydir
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|emptydir
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create a directory whose name should be escaped in XML
name|Path
name|invalidXMLDir
init|=
operator|new
name|Path
argument_list|(
literal|"/dirContainingInvalidXMLChar\u0000here"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|invalidXMLDir
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
comment|// Get delegation tokens so we log the delegation token op
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|delegationTokens
init|=
name|hdfs
operator|.
name|addDelegationTokens
argument_list|(
name|TEST_RENEWER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
range|:
name|delegationTokens
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"got token "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Create INodeReference
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
literal|"/src"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|orig
init|=
operator|new
name|Path
argument_list|(
literal|"/src/orig"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|src
argument_list|,
literal|"snapshot"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
literal|"/dst"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|orig
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set XAttrs so the fsimage contains XAttr ops
specifier|final
name|Path
name|xattr
init|=
operator|new
name|Path
argument_list|(
literal|"/xattr"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
name|dirCount
operator|++
expr_stmt|;
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x37
block|,
literal|0x38
block|,
literal|0x39
block|}
argument_list|)
expr_stmt|;
comment|// OIV should be able to handle empty value XAttrs
name|hdfs
operator|.
name|setXAttr
argument_list|(
name|xattr
argument_list|,
literal|"user.a3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writtenFiles
operator|.
name|put
argument_list|(
name|xattr
operator|.
name|toString
argument_list|()
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|xattr
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write results to the fsimage file
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
comment|// Determine location of fsimage file
name|originalFsimage
operator|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalFsimage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"original FS image file is "
operator|+
name|originalFsimage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|deleteOriginalFSImage ()
specifier|public
specifier|static
name|void
name|deleteOriginalFSImage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|originalFsimage
operator|!=
literal|null
operator|&&
name|originalFsimage
operator|.
name|exists
argument_list|()
condition|)
block|{
name|originalFsimage
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Convenience method to generate a file status from file system for
comment|// later comparison
DECL|method|pathToFileEntry (FileSystem hdfs, String file)
specifier|private
specifier|static
name|FileStatus
name|pathToFileEntry
parameter_list|(
name|FileSystem
name|hdfs
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testTruncatedFSImage ()
specifier|public
name|void
name|testTruncatedFSImage
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|truncatedFile
init|=
name|folder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|PrintStream
name|output
init|=
operator|new
name|PrintStream
argument_list|(
name|NullOutputStream
operator|.
name|NULL_OUTPUT_STREAM
argument_list|)
decl_stmt|;
name|copyPartOfFile
argument_list|(
name|originalFsimage
argument_list|,
name|truncatedFile
argument_list|)
expr_stmt|;
operator|new
name|FileDistributionCalculator
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|output
argument_list|)
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|truncatedFile
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyPartOfFile (File src, File dest)
specifier|private
name|void
name|copyPartOfFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|MAX_BYTES
init|=
literal|700
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|in
operator|.
name|getChannel
argument_list|()
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|MAX_BYTES
argument_list|,
name|out
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileDistributionCalculator ()
specifier|public
name|void
name|testFileDistributionCalculator
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
operator|new
name|FileDistributionCalculator
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|o
argument_list|)
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|outputString
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"totalFiles = (\\d+)\n"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|p
operator|.
name|matcher
argument_list|(
name|outputString
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|int
name|totalFiles
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_DIRS
operator|*
name|FILES_PER_DIR
argument_list|,
name|totalFiles
argument_list|)
expr_stmt|;
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"totalDirectories = (\\d+)\n"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|outputString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|int
name|totalDirs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// totalDirs includes root directory
name|assertEquals
argument_list|(
name|dirCount
operator|+
literal|1
argument_list|,
name|totalDirs
argument_list|)
expr_stmt|;
name|FileStatus
name|maxFile
init|=
name|Collections
operator|.
name|max
argument_list|(
name|writtenFiles
operator|.
name|values
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileStatus
name|first
parameter_list|,
name|FileStatus
name|second
parameter_list|)
block|{
return|return
name|first
operator|.
name|getLen
argument_list|()
operator|<
name|second
operator|.
name|getLen
argument_list|()
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|first
operator|.
name|getLen
argument_list|()
operator|==
name|second
operator|.
name|getLen
argument_list|()
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"maxFileSize = (\\d+)\n"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|output
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxFile
operator|.
name|getLen
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileDistributionCalculatorWithOptions ()
specifier|public
name|void
name|testFileDistributionCalculatorWithOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPBImageXmlWriter ()
specifier|public
name|void
name|testPBImageXmlWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|PBImageXmlWriter
name|v
init|=
operator|new
name|PBImageXmlWriter
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|SAXParserFactory
name|spf
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SAXParser
name|parser
init|=
name|spf
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xml
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebImageViewer ()
specifier|public
name|void
name|testWebImageViewer
parameter_list|()
throws|throws
name|Exception
block|{
name|WebImageViewer
name|viewer
init|=
operator|new
name|WebImageViewer
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|viewer
operator|.
name|initServer
argument_list|(
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|viewer
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// create a WebHdfsFileSystem instance
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"webhdfs://localhost:"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|WebHdfsFileSystem
name|webhdfs
init|=
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// verify the number of directories
name|FileStatus
index|[]
name|statuses
init|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dirCount
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify the number of files in the directory
name|statuses
operator|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILES_PER_DIR
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// compare a file
name|FileStatus
name|status
init|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0/file0"
argument_list|)
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|FileStatus
name|expected
init|=
name|writtenFiles
operator|.
name|get
argument_list|(
literal|"/dir0/file0"
argument_list|)
decl_stmt|;
name|compareFile
argument_list|(
name|expected
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to an empty directory
name|statuses
operator|=
name|webhdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/emptydir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to a invalid path
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/invalid/?op=LISTSTATUS"
argument_list|)
decl_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// LISTSTATUS operation to a invalid prefix
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// GETFILESTATUS operation
name|status
operator|=
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/dir0/file0"
argument_list|)
argument_list|)
expr_stmt|;
name|compareFile
argument_list|(
name|expected
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// GETFILESTATUS operation to a invalid path
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/invalid/?op=GETFILESTATUS"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// invalid operation
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/?op=INVALID"
argument_list|)
expr_stmt|;
name|verifyHttpResponseCode
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// invalid method
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/webhdfs/v1/?op=LISTSTATUS"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_BAD_METHOD
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown the viewer
name|viewer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPBDelimitedWriter ()
specifier|public
name|void
name|testPBDelimitedWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testPBDelimitedWriter
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// Test in memory db.
name|testPBDelimitedWriter
argument_list|(
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
operator|+
literal|"/delimited.db"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidProcessorOption ()
specifier|public
name|void
name|testInvalidProcessorOption
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"invalid"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exit code returned for invalid processor option is incorrect"
argument_list|,
name|status
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOfflineImageViewerHelpMessage ()
specifier|public
name|void
name|testOfflineImageViewerHelpMessage
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exit code returned for help option is incorrect"
argument_list|,
name|status
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Invalid Command error displayed when help option is passed."
argument_list|,
name|bytes
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error parsing command-line options"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|OfflineImageViewerPB
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|,
literal|"-i"
block|,
name|originalFsimage
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-o"
block|,
literal|"-"
block|,
literal|"-p"
block|,
literal|"FileDistribution"
block|,
literal|"-maxSize"
block|,
literal|"512"
block|,
literal|"-step"
block|,
literal|"8"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exit code returned for help with other option is incorrect"
argument_list|,
name|status
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPBDelimitedWriter (String db)
specifier|private
name|void
name|testPBDelimitedWriter
parameter_list|(
name|String
name|db
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|DELIMITER
init|=
literal|"\t"
decl_stmt|;
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|PrintStream
name|o
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
init|)
block|{
name|PBImageDelimitedTextWriter
name|v
init|=
operator|new
name|PBImageDelimitedTextWriter
argument_list|(
name|o
argument_list|,
name|DELIMITER
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|output
operator|.
name|toByteArray
argument_list|()
argument_list|)
init|;
name|BufferedReader
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
name|boolean
name|header
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|String
index|[]
name|fields
init|=
name|line
operator|.
name|split
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|header
condition|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|header
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// writtenFiles does not contain root directory and "invalid XML char" dir.
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|fileNames
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|filename
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
literal|"/dirContainingInvalidXMLChar"
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|writtenFiles
operator|.
name|keySet
argument_list|()
argument_list|,
name|fileNames
argument_list|)
expr_stmt|;
block|}
DECL|method|compareFile (FileStatus expected, FileStatus status)
specifier|private
specifier|static
name|void
name|compareFile
parameter_list|(
name|FileStatus
name|expected
parameter_list|,
name|FileStatus
name|status
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroup
argument_list|()
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLen
argument_list|()
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOwner
argument_list|()
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPermission
argument_list|()
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplication
argument_list|()
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHttpResponseCode (int expectedCode, URL url)
specifier|private
name|void
name|verifyHttpResponseCode
parameter_list|(
name|int
name|expectedCode
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCode
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

