begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Canceler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test FSImage save/load when Snapshot is supported  */
end_comment

begin_class
DECL|class|TestFSImageWithSnapshot
specifier|public
class|class
name|TestFSImageWithSnapshot
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|txid
specifier|static
specifier|final
name|long
name|txid
init|=
literal|1
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
name|String
name|testDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Testing steps:    *<pre>    * 1. Creating/modifying directories/files while snapshots are being taken.    * 2. Dump the FSDirectory tree of the namesystem.    * 3. Save the namesystem to a temp file (FSImage saving).    * 4. Restart the cluster and format the namesystem.    * 5. Load the namesystem from the temp file (FSImage loading).    * 6. Dump the FSDirectory again and compare the two dumped string.    *</pre>    */
annotation|@
name|Test
DECL|method|testSaveLoadImage ()
specifier|public
name|void
name|testSaveLoadImage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make changes to the namesystem
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|Path
name|sub1file1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"sub1file1"
argument_list|)
decl_stmt|;
name|Path
name|sub1file2
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"sub1file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub1file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub1file2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|Path
name|sub2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|Path
name|sub2file1
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"sub2file1"
argument_list|)
decl_stmt|;
name|Path
name|sub2file2
init|=
operator|new
name|Path
argument_list|(
name|sub2
argument_list|,
literal|"sub2file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub2file1
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|sub2file2
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setReplication
argument_list|(
name|sub1file1
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub1file2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setOwner
argument_list|(
name|sub2
argument_list|,
literal|"dr.who"
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|sub2file2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// dump the fsdir tree
name|StringBuffer
name|fsnStrBefore
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|rootDir
operator|.
name|dumpTreeRecursively
argument_list|()
decl_stmt|;
comment|// save the namesystem to a temp file
name|SaveNamespaceContext
name|context
init|=
operator|new
name|SaveNamespaceContext
argument_list|(
name|fsn
argument_list|,
name|txid
argument_list|,
operator|new
name|Canceler
argument_list|()
argument_list|)
decl_stmt|;
name|FSImageFormat
operator|.
name|Saver
name|saver
init|=
operator|new
name|FSImageFormat
operator|.
name|Saver
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|FSImageCompression
name|compression
init|=
name|FSImageCompression
operator|.
name|createCompression
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|File
name|dstFile
init|=
name|getStorageFile
argument_list|(
name|testDir
argument_list|,
name|txid
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|saver
operator|.
name|save
argument_list|(
name|dstFile
argument_list|,
name|compression
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
comment|// restart the cluster, and format the cluster
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// load the namesystem from the temp file
name|FSImageFormat
operator|.
name|Loader
name|loader
init|=
operator|new
name|FSImageFormat
operator|.
name|Loader
argument_list|(
name|conf
argument_list|,
name|fsn
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|loader
operator|.
name|load
argument_list|(
name|dstFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
comment|// dump the fsdir tree again
name|StringBuffer
name|fsnStrAfter
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|rootDir
operator|.
name|dumpTreeRecursively
argument_list|()
decl_stmt|;
comment|// compare two dumped tree
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fsnStrBefore
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|fsnStrAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsnStrBefore
operator|.
name|toString
argument_list|()
argument_list|,
name|fsnStrAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a temp fsimage file for testing.    * @param dir The directory where the fsimage file resides    * @param imageTxId The transaction id of the fsimage    * @return The file of the image file    */
DECL|method|getStorageFile (String dir, long imageTxId)
specifier|private
name|File
name|getStorageFile
parameter_list|(
name|String
name|dir
parameter_list|,
name|long
name|imageTxId
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_%019d"
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|,
name|imageTxId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

