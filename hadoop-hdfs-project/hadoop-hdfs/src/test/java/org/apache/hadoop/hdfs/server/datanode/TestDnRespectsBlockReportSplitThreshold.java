begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_comment
comment|/**  * Tests that the DataNode respects  * {@link DFSConfigKeys#DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY}  */
end_comment

begin_class
DECL|class|TestDnRespectsBlockReportSplitThreshold
specifier|public
class|class
name|TestDnRespectsBlockReportSplitThreshold
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStorageReport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
specifier|final
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xFEEDFACE
decl_stmt|;
DECL|field|BLOCKS_IN_FILE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKS_IN_FILE
init|=
literal|5
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|bpid
specifier|static
name|String
name|bpid
decl_stmt|;
DECL|method|startUpCluster (long splitThreshold)
specifier|public
name|void
name|startUpCluster
parameter_list|(
name|long
name|splitThreshold
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY
argument_list|,
name|splitThreshold
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createFile (String filenamePrefix, int blockCount)
specifier|private
name|void
name|createFile
parameter_list|(
name|String
name|filenamePrefix
parameter_list|,
name|int
name|blockCount
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|filenamePrefix
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|blockCount
operator|*
name|BLOCK_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCapturedArguments ( ArgumentCaptor<StorageBlockReport[]> captor, int expectedReportsPerCall, int expectedTotalBlockCount)
specifier|private
name|void
name|verifyCapturedArguments
parameter_list|(
name|ArgumentCaptor
argument_list|<
name|StorageBlockReport
index|[]
argument_list|>
name|captor
parameter_list|,
name|int
name|expectedReportsPerCall
parameter_list|,
name|int
name|expectedTotalBlockCount
parameter_list|)
block|{
name|List
argument_list|<
name|StorageBlockReport
index|[]
argument_list|>
name|listOfReports
init|=
name|captor
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|int
name|numBlocksReported
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StorageBlockReport
index|[]
name|reports
range|:
name|listOfReports
control|)
block|{
name|assertThat
argument_list|(
name|reports
operator|.
name|length
argument_list|,
name|is
argument_list|(
name|expectedReportsPerCall
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageBlockReport
name|report
range|:
name|reports
control|)
block|{
name|BlockListAsLongs
name|blockList
init|=
name|report
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|numBlocksReported
operator|+=
name|blockList
operator|.
name|getNumberOfBlocks
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|numBlocksReported
operator|>=
name|expectedTotalBlockCount
operator|)
assert|;
block|}
comment|/**    * Test that if splitThreshold is zero, then we always get a separate    * call per storage.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testAlwaysSplit ()
specifier|public
name|void
name|testAlwaysSplit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Create a file with a few blocks.
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
comment|// Insert a spy object for the NN RPC.
name|DatanodeProtocolClientSideTranslatorPB
name|nnSpy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|nn
argument_list|)
decl_stmt|;
comment|// Trigger a block report so there is an interaction with the spy
comment|// object.
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|StorageBlockReport
index|[]
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|StorageBlockReport
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nnSpy
argument_list|,
name|times
argument_list|(
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
argument_list|)
argument_list|)
operator|.
name|blockReport
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|captor
operator|.
name|capture
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|BlockReportContext
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCapturedArguments
argument_list|(
name|captor
argument_list|,
literal|1
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the behavior when the count of blocks is exactly one less than    * the threshold.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCornerCaseUnderThreshold ()
specifier|public
name|void
name|testCornerCaseUnderThreshold
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
name|BLOCKS_IN_FILE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Create a file with a few blocks.
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
comment|// Insert a spy object for the NN RPC.
name|DatanodeProtocolClientSideTranslatorPB
name|nnSpy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|nn
argument_list|)
decl_stmt|;
comment|// Trigger a block report so there is an interaction with the spy
comment|// object.
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|StorageBlockReport
index|[]
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|StorageBlockReport
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nnSpy
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|blockReport
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|captor
operator|.
name|capture
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|BlockReportContext
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCapturedArguments
argument_list|(
name|captor
argument_list|,
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the behavior when the count of blocks is exactly equal to the    * threshold.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testCornerCaseAtThreshold ()
specifier|public
name|void
name|testCornerCaseAtThreshold
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Create a file with a few blocks.
name|createFile
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
comment|// Insert a spy object for the NN RPC.
name|DatanodeProtocolClientSideTranslatorPB
name|nnSpy
init|=
name|InternalDataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|nn
argument_list|)
decl_stmt|;
comment|// Trigger a block report so there is an interaction with the spy
comment|// object.
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|StorageBlockReport
index|[]
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|StorageBlockReport
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|nnSpy
argument_list|,
name|times
argument_list|(
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
argument_list|)
argument_list|)
operator|.
name|blockReport
argument_list|(
name|any
argument_list|(
name|DatanodeRegistration
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|captor
operator|.
name|capture
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|BlockReportContext
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCapturedArguments
argument_list|(
name|captor
argument_list|,
literal|1
argument_list|,
name|BLOCKS_IN_FILE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

