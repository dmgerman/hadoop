begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|AsyncLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|IPCLoggerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Functional tests for QuorumJournalManager.  * For true unit tests, see {@link TestQuorumJournalManagerUnit}.  */
end_comment

begin_class
DECL|class|TestQuorumJournalManager
specifier|public
class|class
name|TestQuorumJournalManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQuorumJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FAKE_NSINFO
specifier|private
specifier|static
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|12345
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|JID
specifier|private
specifier|static
specifier|final
name|String
name|JID
init|=
literal|"testQuorumJournalManager"
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniJournalCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjm
specifier|private
name|QuorumJournalManager
name|qjm
decl_stmt|;
DECL|field|spies
specifier|private
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|spies
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getEpoch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleWriter ()
specifier|public
name|void
name|testSingleWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Should be finalized
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Start a new segment
name|writeSegment
argument_list|(
name|qjm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Should be finalized
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrchestratedFailures ()
specifier|public
name|void
name|testOrchestratedFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|Long
argument_list|>
name|serials
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|AsyncLogger
name|l
range|:
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
control|)
block|{
name|IPCLoggerChannel
name|ch
init|=
operator|(
name|IPCLoggerChannel
operator|)
name|l
decl_stmt|;
name|ch
operator|.
name|waitForAllPendingCalls
argument_list|()
expr_stmt|;
name|serials
operator|.
name|add
argument_list|(
name|ch
operator|.
name|getNextIpcSerial
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All of the loggers should have sent the same number of RPCs, since there
comment|// were no failures.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serials
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|maxSerial
init|=
name|serials
operator|.
name|first
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Max IPC serial = "
operator|+
name|maxSerial
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test case where a new writer picks up from an old one with no failures    * and the previous unfinalized segment entirely consistent -- i.e. all    * the JournalNodes end at the same transaction ID.    */
annotation|@
name|Test
DECL|method|testChangeWritersLogsInSync ()
specifier|public
name|void
name|testChangeWritersLogsInSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a new QJM
name|qjm
operator|=
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where a new writer picks up from an old one which crashed    * with the three loggers at different txnids    */
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync1 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [x, 4, 5]
comment|// Should recovery to txn 5
name|doOutOfSyncTest
argument_list|(
literal|0
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync2 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [3, x, 5]
comment|// Should recovery to txn 5
name|doOutOfSyncTest
argument_list|(
literal|1
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync3 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [3, 4, x]
comment|// Should recovery to txn 4
name|doOutOfSyncTest
argument_list|(
literal|2
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
DECL|method|doOutOfSyncTest (int missingOnRecoveryIdx, long expectedRecoveryTxnId)
specifier|private
name|void
name|doOutOfSyncTest
parameter_list|(
name|int
name|missingOnRecoveryIdx
parameter_list|,
name|long
name|expectedRecoveryTxnId
parameter_list|)
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// This should succeed to 2/3 loggers
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should only succeed to 1 logger (index 2). Hence it should
comment|// fail
try|try
block|{
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to write when only a minority succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"too many exceptions to achieve quorum size 2/3"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut down the specified JN, so it's not present during recovery.
name|cluster
operator|.
name|getJournalNode
argument_list|(
name|missingOnRecoveryIdx
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Make a new QJM
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
name|expectedRecoveryTxnId
argument_list|)
expr_stmt|;
block|}
DECL|method|failLoggerAtTxn (AsyncLogger spy, long txid)
specifier|private
name|void
name|failLoggerAtTxn
parameter_list|(
name|AsyncLogger
name|spy
parameter_list|,
name|long
name|txid
parameter_list|)
block|{
name|TestQuorumJournalManagerUnit
operator|.
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"mock failure"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|txid
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * edit lengths [3,4,5]    * first recovery:    * - sees [3,4,x]    * - picks length 4 for recoveryEndTxId    * - calls acceptRecovery()    * - crashes before finalizing    * second recovery:    * - sees [x, 4, 5]    * - should pick recovery length 4, even though it saw    *   a larger txid, because a previous recovery accepted it    */
annotation|@
name|Test
DECL|method|testRecoverAfterIncompleteRecovery ()
specifier|public
name|void
name|testRecoverAfterIncompleteRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// This should succeed to 2/3 loggers
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should only succeed to 1 logger (index 2). Hence it should
comment|// fail
try|try
block|{
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to write when only a minority succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"too many exceptions to achieve quorum size 2/3"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
comment|// Shut down the logger that has length = 5
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|2
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
comment|// Allow no logger to finalize
for|for
control|(
name|AsyncLogger
name|spy
range|:
name|spies
control|)
block|{
name|TestQuorumJournalManagerUnit
operator|.
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"injected"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|finalizeLogSegment
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed recovery since no finalization occurred"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"injected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Now bring back the logger that had 5, and run recovery again.
comment|// We should recover to 4, even though there's a longer log.
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartJournalNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|createSpyingQJM ()
specifier|private
name|QuorumJournalManager
name|createSpyingQJM
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|createLoggers
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"===> make spies"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|realLoggers
init|=
name|super
operator|.
name|createLoggers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|spies
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|AsyncLogger
name|logger
range|:
name|realLoggers
control|)
block|{
name|spies
operator|.
name|add
argument_list|(
name|Mockito
operator|.
name|spy
argument_list|(
name|logger
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|spies
return|;
block|}
block|}
return|;
block|}
DECL|method|writeSegment (QuorumJournalManager qjm, int startTxId, int numTxns, boolean finalize)
specifier|private
name|void
name|writeSegment
parameter_list|(
name|QuorumJournalManager
name|qjm
parameter_list|,
name|int
name|startTxId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|boolean
name|finalize
parameter_list|)
throws|throws
name|IOException
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
name|startTxId
argument_list|)
decl_stmt|;
comment|// Should create in-progress
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
name|startTxId
argument_list|)
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
name|startTxId
argument_list|,
name|numTxns
argument_list|)
expr_stmt|;
if|if
condition|(
name|finalize
condition|)
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|finalizeLogSegment
argument_list|(
name|startTxId
argument_list|,
name|startTxId
operator|+
name|numTxns
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeTxns (EditLogOutputStream stm, int startTxId, int numTxns)
specifier|private
name|void
name|writeTxns
parameter_list|(
name|EditLogOutputStream
name|stm
parameter_list|,
name|int
name|startTxId
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|txid
init|=
name|startTxId
init|;
name|txid
operator|<
name|startTxId
operator|+
name|numTxns
condition|;
name|txid
operator|++
control|)
block|{
name|TestQuorumJournalManagerUnit
operator|.
name|writeOp
argument_list|(
name|stm
argument_list|,
name|txid
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|assertExistsInQuorum (MiniJournalCluster cluster, String fname)
specifier|private
name|void
name|assertExistsInQuorum
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|File
name|dir
init|=
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|i
argument_list|,
name|JID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fname
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|fname
operator|+
literal|" should exist in a quorum of dirs"
argument_list|,
name|count
operator|>=
name|cluster
operator|.
name|getQuorumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRecovery (MiniJournalCluster cluster, long segmentTxId, long expectedEndTxId)
specifier|private
name|void
name|checkRecovery
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|long
name|segmentTxId
parameter_list|,
name|long
name|expectedEndTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numFinalized
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getNumNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|File
name|logDir
init|=
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|i
argument_list|,
name|JID
argument_list|)
decl_stmt|;
name|EditLogFile
name|elf
init|=
name|FileJournalManager
operator|.
name|getLogFile
argument_list|(
name|logDir
argument_list|,
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|elf
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|elf
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|numFinalized
operator|++
expr_stmt|;
if|if
condition|(
name|elf
operator|.
name|getLastTxId
argument_list|()
operator|!=
name|expectedEndTxId
condition|)
block|{
name|fail
argument_list|(
literal|"File "
operator|+
name|elf
operator|+
literal|" finalized to wrong txid, expected "
operator|+
name|expectedEndTxId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numFinalized
operator|<
name|cluster
operator|.
name|getQuorumSize
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Did not find a quorum of finalized logs starting at "
operator|+
name|segmentTxId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

