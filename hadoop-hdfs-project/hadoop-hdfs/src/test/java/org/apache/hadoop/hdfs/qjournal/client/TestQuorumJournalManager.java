begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|JID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|FAKE_NSINFO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|writeSegment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|writeTxns
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
operator|.
name|verifyEdits
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_comment
comment|/**  * Functional tests for QuorumJournalManager.  * For true unit tests, see {@link TestQuorumJournalManagerUnit}.  */
end_comment

begin_class
DECL|class|TestQuorumJournalManager
specifier|public
class|class
name|TestQuorumJournalManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQuorumJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniJournalCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjm
specifier|private
name|QuorumJournalManager
name|qjm
decl_stmt|;
DECL|field|spies
specifier|private
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|spies
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|ProtobufRpcEngine
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// Don't retry connections - it just slows down the tests.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniJournalCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|format
argument_list|(
name|QJMTestUtil
operator|.
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getEpoch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleWriter ()
specifier|public
name|void
name|testSingleWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Should be finalized
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Start a new segment
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Should be finalized
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|QuorumJournalManager
name|qjm
init|=
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
literal|"testFormat-jid"
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qjm
operator|.
name|hasSomeData
argument_list|()
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|format
argument_list|(
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qjm
operator|.
name|hasSomeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReaderWhileAnotherWrites ()
specifier|public
name|void
name|testReaderWhileAnotherWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|QuorumJournalManager
name|readerQjm
init|=
name|createSpyingQJM
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|readerQjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|readerQjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate the actual stream contents.
name|EditLogInputStream
name|stream
init|=
name|streams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stream
operator|.
name|getFirstTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stream
operator|.
name|getLastTxId
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|stream
operator|.
name|readOp
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|streams
operator|.
name|toArray
argument_list|(
operator|new
name|Closeable
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Ensure correct results when there is a stream in-progress, but we don't
comment|// ask for in-progress.
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readerQjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EditLogInputStream
name|stream
init|=
name|streams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stream
operator|.
name|getFirstTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stream
operator|.
name|getLastTxId
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|streams
operator|.
name|toArray
argument_list|(
operator|new
name|Closeable
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// TODO: check results for selectInputStreams with inProgressOK = true.
comment|// This doesn't currently work, due to a bug where RedundantEditInputStream
comment|// throws an exception if there are any unvalidated in-progress edits in the list!
comment|// But, it shouldn't be necessary for current use cases.
name|qjm
operator|.
name|finalizeLogSegment
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|readerQjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|streams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|streams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirstTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|streams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLastTxId
argument_list|()
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|streams
operator|.
name|toArray
argument_list|(
operator|new
name|Closeable
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Regression test for HDFS-3725. One of the journal nodes is down    * during the writing of one segment, then comes back up later to    * take part in a later segment. Thus, its local edits are    * not a contiguous sequence. This should be handled correctly.    */
annotation|@
name|Test
DECL|method|testOneJNMissingSegments ()
specifier|public
name|void
name|testOneJNMissingSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartJournalNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|1
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QuorumJournalManager
name|readerQjm
init|=
name|createSpyingQJM
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|readerQjm
operator|.
name|selectInputStreams
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyEdits
argument_list|(
name|streams
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|streams
operator|.
name|toArray
argument_list|(
operator|new
name|Closeable
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|readerQjm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the case where the NN crashes after starting a new segment    * on all nodes, but before writing the first transaction to it.    */
annotation|@
name|Test
DECL|method|testCrashAtBeginningOfSegment ()
specifier|public
name|void
name|testCrashAtBeginningOfSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stm
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|// Make a new QJM
name|qjm
operator|=
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOfSyncAtBeginningOfSegment0 ()
specifier|public
name|void
name|testOutOfSyncAtBeginningOfSegment0
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOutOfSyncAtBeginningOfSegment
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOfSyncAtBeginningOfSegment1 ()
specifier|public
name|void
name|testOutOfSyncAtBeginningOfSegment1
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOutOfSyncAtBeginningOfSegment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOfSyncAtBeginningOfSegment2 ()
specifier|public
name|void
name|testOutOfSyncAtBeginningOfSegment2
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOutOfSyncAtBeginningOfSegment
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where, at the beginning of a segment, transactions    * have been written to one JN but not others.    */
DECL|method|doTestOutOfSyncAtBeginningOfSegment (int nodeWithOneTxn)
specifier|public
name|void
name|doTestOutOfSyncAtBeginningOfSegment
parameter_list|(
name|int
name|nodeWithOneTxn
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|nodeWithEmptySegment
init|=
operator|(
name|nodeWithOneTxn
operator|+
literal|1
operator|)
operator|%
literal|3
decl_stmt|;
name|int
name|nodeMissingSegment
init|=
operator|(
name|nodeWithOneTxn
operator|+
literal|2
operator|)
operator|%
literal|3
decl_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getJournalNode
argument_list|(
name|nodeMissingSegment
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Open segment on 2/3 nodes
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write transactions to only 1/3 nodes
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
name|nodeWithEmptySegment
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail even though 2/3 failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"mock failure"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stm
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|// Bring back the down JN.
name|cluster
operator|.
name|restartJournalNode
argument_list|(
name|nodeMissingSegment
argument_list|)
expr_stmt|;
comment|// Make a new QJM. At this point, the state is as follows:
comment|// A: nodeWithEmptySegment: 1-3 finalized, 4_inprogress (empty)
comment|// B: nodeWithOneTxn:       1-3 finalized, 4_inprogress (1 txn)
comment|// C: nodeMissingSegment:   1-3 finalized
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|nodeWithEmptySegment
argument_list|,
name|JID
argument_list|)
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|nodeWithOneTxn
argument_list|,
name|JID
argument_list|)
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|nodeMissingSegment
argument_list|,
name|JID
argument_list|)
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stop one of the nodes. Since we run this test three
comment|// times, rotating the roles of the nodes, we'll test
comment|// all the permutations.
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|2
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeWithOneTxn
operator|==
literal|0
operator|||
name|nodeWithOneTxn
operator|==
literal|1
condition|)
block|{
comment|// If the node that had the transaction committed was one of the nodes
comment|// that responded during recovery, then we should have recovered txid
comment|// 4.
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise, we should have recovered only 1-3 and should be able to
comment|// start a segment at 4.
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test case where a new writer picks up from an old one with no failures    * and the previous unfinalized segment entirely consistent -- i.e. all    * the JournalNodes end at the same transaction ID.    */
annotation|@
name|Test
DECL|method|testChangeWritersLogsInSync ()
specifier|public
name|void
name|testChangeWritersLogsInSync
parameter_list|()
throws|throws
name|Exception
block|{
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QJMTestUtil
operator|.
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a new QJM
name|qjm
operator|=
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case where a new writer picks up from an old one which crashed    * with the three loggers at different txnids    */
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync1 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [x, 4, 5]
comment|// Should recovery to txn 5
name|doOutOfSyncTest
argument_list|(
literal|0
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync2 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [3, x, 5]
comment|// Should recovery to txn 5
name|doOutOfSyncTest
argument_list|(
literal|1
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChangeWritersLogsOutOfSync3 ()
specifier|public
name|void
name|testChangeWritersLogsOutOfSync3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Journal states:  [3, 4, 5]
comment|// During recovery: [3, 4, x]
comment|// Should recovery to txn 4
name|doOutOfSyncTest
argument_list|(
literal|2
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
DECL|method|doOutOfSyncTest (int missingOnRecoveryIdx, long expectedRecoveryTxnId)
specifier|private
name|void
name|doOutOfSyncTest
parameter_list|(
name|int
name|missingOnRecoveryIdx
parameter_list|,
name|long
name|expectedRecoveryTxnId
parameter_list|)
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// This should succeed to 2/3 loggers
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should only succeed to 1 logger (index 2). Hence it should
comment|// fail
try|try
block|{
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to write when only a minority succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"too many exceptions to achieve quorum size 2/3"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
name|QJMTestUtil
operator|.
name|assertExistsInQuorum
argument_list|(
name|cluster
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shut down the specified JN, so it's not present during recovery.
name|cluster
operator|.
name|getJournalNode
argument_list|(
name|missingOnRecoveryIdx
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Make a new QJM
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
name|expectedRecoveryTxnId
argument_list|)
expr_stmt|;
block|}
DECL|method|failLoggerAtTxn (AsyncLogger spy, long txid)
specifier|private
name|void
name|failLoggerAtTxn
parameter_list|(
name|AsyncLogger
name|spy
parameter_list|,
name|long
name|txid
parameter_list|)
block|{
name|TestQuorumJournalManagerUnit
operator|.
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"mock failure"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|sendEdits
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|txid
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * edit lengths [3,4,5]    * first recovery:    * - sees [3,4,x]    * - picks length 4 for recoveryEndTxId    * - calls acceptRecovery()    * - crashes before finalizing    * second recovery:    * - sees [x, 4, 5]    * - should pick recovery length 4, even though it saw    *   a larger txid, because a previous recovery accepted it    */
annotation|@
name|Test
DECL|method|testRecoverAfterIncompleteRecovery ()
specifier|public
name|void
name|testRecoverAfterIncompleteRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|EditLogOutputStream
name|stm
init|=
name|qjm
operator|.
name|startLogSegment
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|failLoggerAtTxn
argument_list|(
name|spies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// This should succeed to 2/3 loggers
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This should only succeed to 1 logger (index 2). Hence it should
comment|// fail
try|try
block|{
name|writeTxns
argument_list|(
name|stm
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to write when only a minority succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuorumException
name|qe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"too many exceptions to achieve quorum size 2/3"
argument_list|,
name|qe
argument_list|)
expr_stmt|;
block|}
comment|// Shut down the logger that has length = 5
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|2
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
comment|// Allow no logger to finalize
for|for
control|(
name|AsyncLogger
name|spy
range|:
name|spies
control|)
block|{
name|TestQuorumJournalManagerUnit
operator|.
name|futureThrows
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"injected"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|finalizeLogSegment
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed recovery since no finalization occurred"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"injected"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Now bring back the logger that had 5, and run recovery again.
comment|// We should recover to 4, even though there's a longer log.
name|cluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stopAndJoin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartJournalNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|qjm
operator|=
name|createSpyingQJM
argument_list|()
expr_stmt|;
name|spies
operator|=
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
operator|.
name|getLoggersForTests
argument_list|()
expr_stmt|;
name|qjm
operator|.
name|recoverUnfinalizedSegments
argument_list|()
expr_stmt|;
name|checkRecovery
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPurgeLogs ()
specifier|public
name|void
name|testPurgeLogs
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|txid
init|=
literal|1
init|;
name|txid
operator|<=
literal|5
condition|;
name|txid
operator|++
control|)
block|{
name|writeSegment
argument_list|(
name|cluster
argument_list|,
name|qjm
argument_list|,
name|txid
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|File
name|curDir
init|=
name|cluster
operator|.
name|getCurrentDir
argument_list|(
literal|0
argument_list|,
name|JID
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|curDir
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|paxosDir
init|=
operator|new
name|File
argument_list|(
name|curDir
argument_list|,
literal|"paxos"
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExists
argument_list|(
name|paxosDir
argument_list|)
expr_stmt|;
comment|// Create new files in the paxos directory, which should get purged too.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|paxosDir
argument_list|,
literal|"1"
argument_list|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|paxosDir
argument_list|,
literal|"3"
argument_list|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|paxosDir
argument_list|,
literal|"\\d+"
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|qjm
operator|.
name|purgeLogsOlderThan
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Log purging is asynchronous, so we have to wait for the calls
comment|// to be sent and respond before verifying.
name|waitForAllPendingCalls
argument_list|(
name|qjm
operator|.
name|getLoggerSetForTests
argument_list|()
argument_list|)
expr_stmt|;
comment|// Older edits should be purged
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|curDir
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Older paxos files should be purged
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|paxosDir
argument_list|,
literal|"\\d+"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSpyingQJM ()
specifier|private
name|QuorumJournalManager
name|createSpyingQJM
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|AsyncLogger
operator|.
name|Factory
name|spyFactory
init|=
operator|new
name|AsyncLogger
operator|.
name|Factory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncLogger
name|createLogger
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|AsyncLogger
name|logger
init|=
operator|new
name|IPCLoggerChannel
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|journalId
argument_list|,
name|addr
argument_list|)
block|{
specifier|protected
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
comment|// Don't parallelize calls to the quorum in the tests.
comment|// This makes the tests more deterministic.
return|return
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|Mockito
operator|.
name|spy
argument_list|(
name|logger
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|QuorumJournalManager
argument_list|(
name|conf
argument_list|,
name|cluster
operator|.
name|getQuorumJournalURI
argument_list|(
name|JID
argument_list|)
argument_list|,
name|FAKE_NSINFO
argument_list|,
name|spyFactory
argument_list|)
return|;
block|}
DECL|method|waitForAllPendingCalls (AsyncLoggerSet als)
specifier|private
specifier|static
name|void
name|waitForAllPendingCalls
parameter_list|(
name|AsyncLoggerSet
name|als
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|AsyncLogger
name|l
range|:
name|als
operator|.
name|getLoggersForTests
argument_list|()
control|)
block|{
name|IPCLoggerChannel
name|ch
init|=
operator|(
name|IPCLoggerChannel
operator|)
name|l
decl_stmt|;
name|ch
operator|.
name|waitForAllPendingCalls
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkRecovery (MiniJournalCluster cluster, long segmentTxId, long expectedEndTxId)
specifier|private
name|void
name|checkRecovery
parameter_list|(
name|MiniJournalCluster
name|cluster
parameter_list|,
name|long
name|segmentTxId
parameter_list|,
name|long
name|expectedEndTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numFinalized
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getNumNodes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|File
name|logDir
init|=
name|cluster
operator|.
name|getCurrentDir
argument_list|(
name|i
argument_list|,
name|JID
argument_list|)
decl_stmt|;
name|EditLogFile
name|elf
init|=
name|FileJournalManager
operator|.
name|getLogFile
argument_list|(
name|logDir
argument_list|,
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|elf
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|elf
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|numFinalized
operator|++
expr_stmt|;
if|if
condition|(
name|elf
operator|.
name|getLastTxId
argument_list|()
operator|!=
name|expectedEndTxId
condition|)
block|{
name|fail
argument_list|(
literal|"File "
operator|+
name|elf
operator|+
literal|" finalized to wrong txid, expected "
operator|+
name|expectedEndTxId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numFinalized
operator|<
name|cluster
operator|.
name|getQuorumSize
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Did not find a quorum of finalized logs starting at "
operator|+
name|segmentTxId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

