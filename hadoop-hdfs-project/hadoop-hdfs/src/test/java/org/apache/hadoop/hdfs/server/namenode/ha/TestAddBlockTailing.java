begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the race condition that IBR and add block may result  * in inconsistent block genstamp.  */
end_comment

begin_class
DECL|class|TestAddBlockTailing
specifier|public
class|class
name|TestAddBlockTailing
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|8192
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
literal|"/TestAddBlockTailing"
decl_stmt|;
DECL|field|qjmhaCluster
specifier|private
specifier|static
name|MiniQJMHACluster
name|qjmhaCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|fsn0
specifier|private
specifier|static
name|FSNamesystem
name|fsn0
decl_stmt|;
DECL|field|fsn1
specifier|private
specifier|static
name|FSNamesystem
name|fsn1
decl_stmt|;
DECL|field|dn0
specifier|private
specifier|static
name|DataNode
name|dn0
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUpCluster ()
specifier|public
specifier|static
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniQJMHACluster
operator|.
name|Builder
name|qjmBuilder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumNameNodes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|qjmBuilder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qjmhaCluster
operator|=
name|qjmBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
name|qjmhaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsn0
operator|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|fsn1
operator|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
argument_list|)
expr_stmt|;
name|dn0
operator|=
name|dfsCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDownCluster ()
specifier|public
specifier|static
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|qjmhaCluster
operator|!=
literal|null
condition|)
block|{
name|qjmhaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStandbyAddBlockIBRRace ()
specifier|public
name|void
name|testStandbyAddBlockIBRRace
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testFile
init|=
name|TEST_DIR
operator|+
literal|"/testStandbyAddBlockIBRRace"
decl_stmt|;
comment|// initial global generation stamp check
name|assertEquals
argument_list|(
literal|"Global Generation stamps on NNs should be the same"
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn0
argument_list|)
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a file, add a block on NN0
comment|// do not journal addBlock yet
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
argument_list|,
literal|true
argument_list|,
name|dfs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|DatanodeManager
name|dnManager
init|=
name|fsn0
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|dnManager
operator|.
name|getDatanode
argument_list|(
name|dn0
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|getStorageInfos
argument_list|()
decl_stmt|;
name|targets
operator|=
operator|new
name|DatanodeStorageInfo
index|[]
block|{
name|targets
index|[
literal|0
index|]
block|}
expr_stmt|;
name|BlockInfo
name|newBlock
init|=
name|NameNodeAdapter
operator|.
name|addBlockNoJournal
argument_list|(
name|fsn0
argument_list|,
name|testFile
argument_list|,
name|targets
argument_list|)
decl_stmt|;
comment|// NN1 tails increment generation stamp transaction
name|fsn0
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|fsn1
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Global Generation stamps on NN0 and "
operator|+
literal|"impending on NN1 should be equal"
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn0
argument_list|)
argument_list|,
name|NameNodeAdapter
operator|.
name|getImpendingGenerationStamp
argument_list|(
name|fsn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// NN1 processes IBR with the replica
name|StorageReceivedDeletedBlocks
index|[]
name|report
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|newBlock
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|dn0
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getStorage
argument_list|(
name|targets
index|[
literal|0
index|]
operator|.
name|getStorageID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fsn1
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn0
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// NN0 persists the block, i.e adds update block transaction
name|INodeFile
name|file
init|=
operator|(
name|INodeFile
operator|)
name|fsn0
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|NameNodeAdapter
operator|.
name|persistBlocks
argument_list|(
name|fsn0
argument_list|,
name|testFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// NN1 tails update block transaction
name|fsn0
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|fsn1
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Global Generation stamps on NN0 and "
operator|+
literal|"impending on NN1 should be equal"
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn0
argument_list|)
argument_list|,
name|NameNodeAdapter
operator|.
name|getImpendingGenerationStamp
argument_list|(
name|fsn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// The new block on NN1 should have the replica
name|BlockInfo
name|newBlock1
init|=
name|NameNodeAdapter
operator|.
name|getStoredBlock
argument_list|(
name|fsn1
argument_list|,
name|newBlock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"New block on NN1 should contain the replica"
argument_list|,
name|newBlock1
operator|.
name|getStorageInfos
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Generation stamps of the block on NNs should be the same"
argument_list|,
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|newBlock1
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Global Generation stamps on NNs should be the same"
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn0
argument_list|)
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the generation stamp restores on Standby after failover
name|ClientProtocol
name|rpc0
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|ClientProtocol
name|rpc1
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|rpc0
operator|.
name|getBlockLocations
argument_list|(
name|testFile
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rpc0
operator|.
name|updateBlockForPipeline
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|gs0
init|=
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn0
argument_list|)
decl_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Global Generation stamps on new active should be "
operator|+
literal|"the same as on the old one"
argument_list|,
name|gs0
argument_list|,
name|NameNodeAdapter
operator|.
name|getGenerationStamp
argument_list|(
name|fsn1
argument_list|)
argument_list|)
expr_stmt|;
name|rpc1
operator|.
name|delete
argument_list|(
name|testFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

