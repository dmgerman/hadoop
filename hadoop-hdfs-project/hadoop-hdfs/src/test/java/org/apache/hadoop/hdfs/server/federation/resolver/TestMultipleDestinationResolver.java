begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|HashResolver
operator|.
name|extractTempFileName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the multiple destination resolver.  */
end_comment

begin_class
DECL|class|TestMultipleDestinationResolver
specifier|public
class|class
name|TestMultipleDestinationResolver
block|{
DECL|field|resolver
specifier|private
name|MultipleDestinationMountTableResolver
name|resolver
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|resolver
operator|=
operator|new
name|MultipleDestinationMountTableResolver
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We manually point /tmp to only subcluster0
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/tmp"
argument_list|,
name|map1
argument_list|)
argument_list|)
expr_stmt|;
comment|// We manually point / to subcluster0,1,2 with default order (hash)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapDefault
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapDefault
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|mapDefault
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|mapDefault
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|MountTable
name|defaultEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|,
name|mapDefault
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
comment|// We manually point /hash to subcluster0,1,2 with hashing
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapHash
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapHash
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/hash"
argument_list|)
expr_stmt|;
name|mapHash
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/hash"
argument_list|)
expr_stmt|;
name|mapHash
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/hash"
argument_list|)
expr_stmt|;
name|MountTable
name|hashEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/hash"
argument_list|,
name|mapHash
argument_list|)
decl_stmt|;
name|hashEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|HASH
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|hashEntry
argument_list|)
expr_stmt|;
comment|// We manually point /hashall to subcluster0,1,2 with hashing (full tree)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapHashAll
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapHashAll
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/hashall"
argument_list|)
expr_stmt|;
name|mapHashAll
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/hashall"
argument_list|)
expr_stmt|;
name|mapHashAll
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/hashall"
argument_list|)
expr_stmt|;
name|MountTable
name|hashEntryAll
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/hashall"
argument_list|,
name|mapHashAll
argument_list|)
decl_stmt|;
name|hashEntryAll
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|HASH_ALL
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|hashEntryAll
argument_list|)
expr_stmt|;
comment|// We point /local to subclusters 0, 1, 2 with the local order
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapLocal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|mapLocal
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/local"
argument_list|)
expr_stmt|;
name|MountTable
name|localEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/local"
argument_list|,
name|mapLocal
argument_list|)
decl_stmt|;
name|localEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|LOCAL
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|localEntry
argument_list|)
expr_stmt|;
comment|// We point /random to subclusters 0, 1, 2 with the random order
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapRandom
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapRandom
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/random"
argument_list|)
expr_stmt|;
name|mapRandom
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/random"
argument_list|)
expr_stmt|;
name|mapRandom
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/random"
argument_list|)
expr_stmt|;
name|MountTable
name|randomEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/random"
argument_list|,
name|mapRandom
argument_list|)
decl_stmt|;
name|randomEntry
operator|.
name|setDestOrder
argument_list|(
name|DestinationOrder
operator|.
name|RANDOM
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|randomEntry
argument_list|)
expr_stmt|;
comment|// Read only mount point
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapReadOnly
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapReadOnly
operator|.
name|put
argument_list|(
literal|"subcluster0"
argument_list|,
literal|"/readonly"
argument_list|)
expr_stmt|;
name|mapReadOnly
operator|.
name|put
argument_list|(
literal|"subcluster1"
argument_list|,
literal|"/readonly"
argument_list|)
expr_stmt|;
name|mapReadOnly
operator|.
name|put
argument_list|(
literal|"subcluster2"
argument_list|,
literal|"/readonly"
argument_list|)
expr_stmt|;
name|MountTable
name|readOnlyEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
literal|"/readonly"
argument_list|,
name|mapReadOnly
argument_list|)
decl_stmt|;
name|readOnlyEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addEntry
argument_list|(
name|readOnlyEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashEqualDistribution ()
specifier|public
name|void
name|testHashEqualDistribution
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First level
name|testEvenDistribution
argument_list|(
literal|"/hash"
argument_list|)
expr_stmt|;
name|testEvenDistribution
argument_list|(
literal|"/hash/folder0"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// All levels
name|testEvenDistribution
argument_list|(
literal|"/hashall"
argument_list|)
expr_stmt|;
name|testEvenDistribution
argument_list|(
literal|"/hashall/folder0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashAll ()
specifier|public
name|void
name|testHashAll
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Files should be spread across subclusters
name|PathLocation
name|dest0
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest0
argument_list|)
expr_stmt|;
name|PathLocation
name|dest1
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest1
argument_list|)
expr_stmt|;
comment|// Files within folder should be spread across subclusters
name|PathLocation
name|dest2
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest2
argument_list|)
expr_stmt|;
name|PathLocation
name|dest3
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest3
argument_list|)
expr_stmt|;
name|PathLocation
name|dest4
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest4
argument_list|)
expr_stmt|;
name|PathLocation
name|dest5
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest5
argument_list|)
expr_stmt|;
name|PathLocation
name|dest6
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest6
argument_list|)
expr_stmt|;
name|PathLocation
name|dest7
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder0/folder0/file2.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest7
argument_list|)
expr_stmt|;
name|PathLocation
name|dest8
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder1"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest8
argument_list|)
expr_stmt|;
name|PathLocation
name|dest9
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder1/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest9
argument_list|)
expr_stmt|;
name|PathLocation
name|dest10
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder1/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest10
argument_list|)
expr_stmt|;
name|PathLocation
name|dest11
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder2"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest11
argument_list|)
expr_stmt|;
name|PathLocation
name|dest12
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder2/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest12
argument_list|)
expr_stmt|;
name|PathLocation
name|dest13
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder2/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest13
argument_list|)
expr_stmt|;
name|PathLocation
name|dest14
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/folder2/file2.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest14
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashFirst ()
specifier|public
name|void
name|testHashFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|PathLocation
name|dest0
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest0
argument_list|)
expr_stmt|;
name|PathLocation
name|dest1
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hashall/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest1
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster0
name|PathLocation
name|dest2
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder0"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest2
argument_list|)
expr_stmt|;
name|PathLocation
name|dest3
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest3
argument_list|)
expr_stmt|;
name|PathLocation
name|dest4
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest4
argument_list|)
expr_stmt|;
name|PathLocation
name|dest5
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder0/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest5
argument_list|)
expr_stmt|;
name|PathLocation
name|dest6
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder0/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest6
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster2
name|PathLocation
name|dest7
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder1"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest7
argument_list|)
expr_stmt|;
name|PathLocation
name|dest8
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder1/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest8
argument_list|)
expr_stmt|;
name|PathLocation
name|dest9
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder1/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest9
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster2
name|PathLocation
name|dest10
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder2"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest10
argument_list|)
expr_stmt|;
name|PathLocation
name|dest11
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder2/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest11
argument_list|)
expr_stmt|;
name|PathLocation
name|dest12
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/hash/folder2/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomEqualDistribution ()
specifier|public
name|void
name|testRandomEqualDistribution
parameter_list|()
throws|throws
name|IOException
block|{
name|testEvenDistribution
argument_list|(
literal|"/random"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleDestination ()
specifier|public
name|void
name|testSingleDestination
parameter_list|()
throws|throws
name|IOException
block|{
comment|// All the files in /tmp should be in subcluster0
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
literal|100
condition|;
name|f
operator|++
control|)
block|{
name|String
name|filename
init|=
literal|"/tmp/b/c/file"
operator|+
name|f
operator|+
literal|".txt"
decl_stmt|;
name|PathLocation
name|destination
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|RemoteLocation
name|loc
init|=
name|destination
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"subcluster0"
argument_list|,
name|loc
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filename
argument_list|,
name|loc
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testResolveSubdirectories ()
specifier|public
name|void
name|testResolveSubdirectories
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Simulate a testdir under a multi-destination mount.
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|String
name|testDir
init|=
literal|"/sort/testdir"
operator|+
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|file1
init|=
name|testDir
operator|+
literal|"/file1"
operator|+
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|file2
init|=
name|testDir
operator|+
literal|"/file2"
operator|+
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
comment|// Verify both files resolve to the same namespace as the parent dir.
name|PathLocation
name|testDirLocation
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
name|RemoteLocation
name|defaultLoc
init|=
name|testDirLocation
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|String
name|testDirNamespace
init|=
name|defaultLoc
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|PathLocation
name|file1Location
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|RemoteLocation
name|defaultLoc1
init|=
name|file1Location
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testDirNamespace
argument_list|,
name|defaultLoc1
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
name|PathLocation
name|file2Location
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|RemoteLocation
name|defaultLoc2
init|=
name|file2Location
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testDirNamespace
argument_list|,
name|defaultLoc2
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtractTempFileName ()
specifier|public
name|void
name|testExtractTempFileName
parameter_list|()
block|{
for|for
control|(
name|String
name|teststring
range|:
operator|new
name|String
index|[]
block|{
literal|"testfile1.txt.COPYING"
block|,
literal|"testfile1.txt._COPYING_"
block|,
literal|"testfile1.txt._COPYING_.attempt_1486662804109_0055_m_000042_0"
block|,
literal|"testfile1.txt.tmp"
block|,
literal|"_temp/testfile1.txt"
block|,
literal|"_temporary/testfile1.txt.af77e2ab-4bc5-4959-ae08-299c880ee6b8"
block|,
literal|"_temporary/0/_temporary/attempt_201706281636_0007_m_000003_46/"
operator|+
literal|"testfile1.txt"
block|}
control|)
block|{
name|String
name|finalName
init|=
name|extractTempFileName
argument_list|(
name|teststring
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testfile1.txt"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
block|}
comment|// False cases
name|assertEquals
argument_list|(
literal|"file1.txt.COPYING1"
argument_list|,
name|extractTempFileName
argument_list|(
literal|"file1.txt.COPYING1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file1.txt.tmp2"
argument_list|,
name|extractTempFileName
argument_list|(
literal|"file1.txt.tmp2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Speculation patterns
name|String
name|finalName
init|=
name|extractTempFileName
argument_list|(
literal|"_temporary/part-00007.af77e2ab-4bc5-4959-ae08-299c880ee6b8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"part-00007"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
name|finalName
operator|=
name|extractTempFileName
argument_list|(
literal|"_temporary/0/_temporary/attempt_201706281636_0007_m_000003_46/"
operator|+
literal|"part-00003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"part-00003"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
comment|// Subfolders
name|finalName
operator|=
name|extractTempFileName
argument_list|(
literal|"folder0/testfile1.txt._COPYING_"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder0/testfile1.txt"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
name|finalName
operator|=
name|extractTempFileName
argument_list|(
literal|"folder0/folder1/testfile1.txt._COPYING_"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder0/folder1/testfile1.txt"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
name|finalName
operator|=
name|extractTempFileName
argument_list|(
literal|"processedHrsData.txt/_temporary/0/_temporary/"
operator|+
literal|"attempt_201706281636_0007_m_000003_46/part-00003"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processedHrsData.txt/part-00003"
argument_list|,
name|finalName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadOnly ()
specifier|public
name|void
name|testReadOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|MountTable
name|mount
init|=
name|resolver
operator|.
name|getMountPoint
argument_list|(
literal|"/readonly"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mount
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|PathLocation
name|dest0
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest0
argument_list|)
expr_stmt|;
name|PathLocation
name|dest1
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest1
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster0
name|PathLocation
name|dest2
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder0"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest2
argument_list|)
expr_stmt|;
name|PathLocation
name|dest3
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest3
argument_list|)
expr_stmt|;
name|PathLocation
name|dest4
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest4
argument_list|)
expr_stmt|;
name|PathLocation
name|dest5
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder0/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest5
argument_list|)
expr_stmt|;
name|PathLocation
name|dest6
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder0/folder0/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest6
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster2
name|PathLocation
name|dest7
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder1"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest7
argument_list|)
expr_stmt|;
name|PathLocation
name|dest8
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder1/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest8
argument_list|)
expr_stmt|;
name|PathLocation
name|dest9
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder1/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster2"
argument_list|,
name|dest9
argument_list|)
expr_stmt|;
comment|// All these must be in the same location: subcluster2
name|PathLocation
name|dest10
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder2"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest10
argument_list|)
expr_stmt|;
name|PathLocation
name|dest11
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder2/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest11
argument_list|)
expr_stmt|;
name|PathLocation
name|dest12
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/readonly/folder2/file1.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster1"
argument_list|,
name|dest12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalResolver ()
specifier|public
name|void
name|testLocalResolver
parameter_list|()
throws|throws
name|IOException
block|{
name|PathLocation
name|dest0
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/local/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|assertDest
argument_list|(
literal|"subcluster0"
argument_list|,
name|dest0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomResolver ()
specifier|public
name|void
name|testRandomResolver
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|destinations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|PathLocation
name|dest
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
literal|"/random/folder0/file0.txt"
argument_list|)
decl_stmt|;
name|RemoteLocation
name|firstDest
init|=
name|dest
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|nsId
init|=
name|firstDest
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|destinations
operator|.
name|add
argument_list|(
name|nsId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|destinations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a path has files distributed across destinations evenly.    * @param path Path to check.    * @throws IOException    */
DECL|method|testEvenDistribution (final String path)
specifier|private
name|void
name|testEvenDistribution
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|testEvenDistribution
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a path has files distributed across destinations evenly or not.    * @param path Path to check.    * @param even If the distribution should be even or not.    * @throws IOException If it cannot check it.    */
DECL|method|testEvenDistribution (final String path, final boolean even)
specifier|private
name|void
name|testEvenDistribution
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|even
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Subcluster -> Files
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
literal|10000
condition|;
name|f
operator|++
control|)
block|{
name|String
name|filename
init|=
name|path
operator|+
literal|"/file"
operator|+
name|f
operator|+
literal|".txt"
decl_stmt|;
name|PathLocation
name|destination
init|=
name|resolver
operator|.
name|getDestinationForPath
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|RemoteLocation
name|loc
init|=
name|destination
operator|.
name|getDefaultLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|filename
argument_list|,
name|loc
operator|.
name|getDest
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nsId
init|=
name|loc
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|containsKey
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|nsId
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|get
argument_list|(
name|nsId
argument_list|)
operator|.
name|add
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|even
condition|)
block|{
comment|// All files should be in one subcluster
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Files should be distributed somewhat evenly
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|files
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
name|count
operator|=
name|count
operator|+
name|files
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|int
name|avg
init|=
name|count
operator|/
name|results
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|files
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|filesCount
init|=
name|files
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Check that the count in each namespace is within 20% of avg
name|assertTrue
argument_list|(
name|filesCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|filesCount
operator|-
name|avg
argument_list|)
operator|<
operator|(
name|avg
operator|/
literal|5
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertDest (String expectedDest, PathLocation loc)
specifier|private
specifier|static
name|void
name|assertDest
parameter_list|(
name|String
name|expectedDest
parameter_list|,
name|PathLocation
name|loc
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedDest
argument_list|,
name|loc
operator|.
name|getDestinations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

