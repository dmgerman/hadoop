begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class tests the decommissioning of datanode with striped blocks.  */
end_comment

begin_class
DECL|class|TestDecommissionWithStriped
specifier|public
class|class
name|TestDecommissionWithStriped
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDecommissionWithStriped
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// heartbeat interval in seconds
DECL|field|HEARTBEAT_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|HEARTBEAT_INTERVAL
init|=
literal|1
decl_stmt|;
comment|// block report in msec
DECL|field|BLOCKREPORT_INTERVAL_MSEC
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKREPORT_INTERVAL_MSEC
init|=
literal|1000
decl_stmt|;
comment|// replication interval
DECL|field|NAMENODE_REPLICATION_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|NAMENODE_REPLICATION_INTERVAL
init|=
literal|1
decl_stmt|;
DECL|field|decommissionDir
specifier|private
name|Path
name|decommissionDir
decl_stmt|;
DECL|field|hostsFile
specifier|private
name|Path
name|hostsFile
decl_stmt|;
DECL|field|excludeFile
specifier|private
name|Path
name|excludeFile
decl_stmt|;
DECL|field|localFileSys
specifier|private
name|FileSystem
name|localFileSys
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
DECL|field|numDNs
specifier|private
name|int
name|numDNs
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|dataBlocks
specifier|private
specifier|final
name|int
name|dataBlocks
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|parityBlocks
specifier|private
specifier|final
name|int
name|parityBlocks
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
init|=
name|cellSize
operator|*
literal|4
decl_stmt|;
DECL|field|blockGroupSize
specifier|private
specifier|final
name|int
name|blockGroupSize
init|=
name|blockSize
operator|*
name|dataBlocks
decl_stmt|;
DECL|field|ecDir
specifier|private
specifier|final
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|fsn
specifier|private
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// Set up the hosts/exclude files.
name|localFileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|workingDir
init|=
name|localFileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|decommissionDir
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|PathUtils
operator|.
name|getTestDirName
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|+
literal|"/work-dir/decommission"
argument_list|)
expr_stmt|;
name|hostsFile
operator|=
operator|new
name|Path
argument_list|(
name|decommissionDir
argument_list|,
literal|"hosts"
argument_list|)
expr_stmt|;
name|excludeFile
operator|=
operator|new
name|Path
argument_list|(
name|decommissionDir
argument_list|,
literal|"exclude"
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|hostsFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Setup conf
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS
argument_list|,
name|hostsFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HOSTS_EXCLUDE
argument_list|,
name|excludeFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
name|BLOCKREPORT_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RECONSTRUCTION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
name|NAMENODE_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DN_EC_RECONSTRUCTION_STRIPED_READ_BUFFER_SIZE_KEY
argument_list|,
name|cellSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|numDNs
operator|=
name|dataBlocks
operator|+
name|parityBlocks
operator|+
literal|2
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDNs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|bm
operator|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|client
operator|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
name|cleanupFile
argument_list|(
name|localFileSys
argument_list|,
name|decommissionDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileFullBlockGroup ()
specifier|public
name|void
name|testFileFullBlockGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testFileFullBlockGroup"
argument_list|)
expr_stmt|;
name|testDecommission
argument_list|(
name|blockSize
operator|*
name|dataBlocks
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|"testFileFullBlockGroup"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileMultipleBlockGroups ()
specifier|public
name|void
name|testFileMultipleBlockGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testFileMultipleBlockGroups"
argument_list|)
expr_stmt|;
name|int
name|writeBytes
init|=
literal|2
operator|*
name|blockSize
operator|*
name|dataBlocks
decl_stmt|;
name|testDecommission
argument_list|(
name|writeBytes
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|"testFileMultipleBlockGroups"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileSmallerThanOneCell ()
specifier|public
name|void
name|testFileSmallerThanOneCell
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testFileSmallerThanOneCell"
argument_list|)
expr_stmt|;
name|testDecommission
argument_list|(
name|cellSize
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|"testFileSmallerThanOneCell"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileSmallerThanOneStripe ()
specifier|public
name|void
name|testFileSmallerThanOneStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testFileSmallerThanOneStripe"
argument_list|)
expr_stmt|;
name|testDecommission
argument_list|(
name|cellSize
operator|*
literal|2
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|"testFileSmallerThanOneStripe"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDecommissionTwoNodes ()
specifier|public
name|void
name|testDecommissionTwoNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommissionTwoNodes"
argument_list|)
expr_stmt|;
name|testDecommission
argument_list|(
name|blockSize
operator|*
name|dataBlocks
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
literal|"testDecommissionTwoNodes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDecommissionWithURBlockForSameBlockGroup ()
specifier|public
name|void
name|testDecommissionWithURBlockForSameBlockGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testDecommissionWithURBlocksForSameBlockGroup"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"testDecommissionWithCorruptBlocks"
argument_list|)
decl_stmt|;
name|int
name|writeBytes
init|=
name|cellSize
operator|*
name|dataBlocks
operator|*
literal|2
decl_stmt|;
name|writeStripedFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bm
operator|.
name|numOfUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommisionNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnLocs
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dataBlocks
operator|+
name|parityBlocks
argument_list|,
name|dnLocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|decommNodeIndex
init|=
name|dataBlocks
operator|-
literal|1
decl_stmt|;
name|int
name|stopNodeIndex
init|=
literal|1
decl_stmt|;
comment|// add the nodes which will be decommissioning
name|decommisionNodes
operator|.
name|add
argument_list|(
name|dnLocs
index|[
name|decommNodeIndex
index|]
argument_list|)
expr_stmt|;
comment|// stop excess dns to avoid immediate reconstruction.
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataNodeProperties
argument_list|>
name|stoppedDns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|liveDn
range|:
name|info
control|)
block|{
name|boolean
name|usedNode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|dnLocs
control|)
block|{
if|if
condition|(
name|liveDn
operator|.
name|getXferAddr
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeInfo
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|usedNode
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|usedNode
condition|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|liveDn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|stoppedDns
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|liveDn
operator|.
name|getXferAddr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setDataNodeDead
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"stop datanode "
operator|+
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNode
argument_list|(
name|dnLocs
index|[
name|stopNodeIndex
index|]
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|dnLocs
index|[
name|stopNodeIndex
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setDataNodeDead
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
expr_stmt|;
name|numDNs
operator|=
name|numDNs
operator|-
literal|1
expr_stmt|;
comment|// Decommission node in a new thread. Verify that node is decommissioned.
specifier|final
name|CountDownLatch
name|decomStarted
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|decomTh
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|decomStarted
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|decommisionNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while decommissioning"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Shouldn't throw exception!"
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
name|int
name|deadDecommissioned
init|=
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveDecommissioned
init|=
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
decl_stmt|;
name|decomTh
operator|.
name|start
argument_list|()
expr_stmt|;
name|decomStarted
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// grace period to trigger decommissioning call
comment|// start datanode so that decommissioning live node will be finished
for|for
control|(
name|DataNodeProperties
name|dnp
range|:
name|stoppedDns
control|)
block|{
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarts stopped datanode:{} to trigger block reconstruction"
argument_list|,
name|dnp
operator|.
name|datanode
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to finish decommissioning node:{}"
argument_list|,
name|decommisionNodes
argument_list|)
expr_stmt|;
name|decomTh
operator|.
name|join
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
comment|// waiting 20secs to finish decommission
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished decommissioning node:{}"
argument_list|,
name|decommisionNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadDecommissioned
argument_list|,
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveDecommissioned
operator|+
name|decommisionNodes
operator|.
name|size
argument_list|()
argument_list|,
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDNs
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
literal|9
argument_list|,
name|decommisionNodes
argument_list|,
name|numDNs
argument_list|)
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|,
name|decommisionNodes
argument_list|,
literal|null
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests to verify that the file checksum should be able to compute after the    * decommission operation.    *    * Below is the block indices list after the decommission. ' represents    * decommissioned node index.    *    * 0, 2, 3, 4, 5, 6, 7, 8, 1, 1'    *    * Here, this list contains duplicated blocks and does not maintaining any    * order.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testFileChecksumAfterDecommission ()
specifier|public
name|void
name|testFileChecksumAfterDecommission
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testFileChecksumAfterDecommission"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
literal|"testFileChecksumAfterDecommission"
argument_list|)
decl_stmt|;
name|int
name|writeBytes
init|=
name|cellSize
operator|*
name|dataBlocks
decl_stmt|;
name|writeStripedFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bm
operator|.
name|numOfUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|FileChecksum
name|fileChecksum1
init|=
name|dfs
operator|.
name|getFileChecksum
argument_list|(
name|ecFile
argument_list|,
name|writeBytes
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommisionNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|dnLocs
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dataBlocks
operator|+
name|parityBlocks
argument_list|,
name|dnLocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|decommNodeIndex
init|=
literal|1
decl_stmt|;
comment|// add the node which will be decommissioning
name|decommisionNodes
operator|.
name|add
argument_list|(
name|dnLocs
index|[
name|decommNodeIndex
index|]
argument_list|)
expr_stmt|;
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|decommisionNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decommisionNodes
operator|.
name|size
argument_list|()
argument_list|,
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
literal|9
argument_list|,
name|decommisionNodes
argument_list|,
name|numDNs
argument_list|)
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|,
name|decommisionNodes
argument_list|,
literal|null
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
comment|// verify checksum
name|FileChecksum
name|fileChecksum2
init|=
name|dfs
operator|.
name|getFileChecksum
argument_list|(
name|ecFile
argument_list|,
name|writeBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fileChecksum1:"
operator|+
name|fileChecksum1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fileChecksum2:"
operator|+
name|fileChecksum2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Checksum mismatches!"
argument_list|,
name|fileChecksum1
operator|.
name|equals
argument_list|(
name|fileChecksum2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecommission (int writeBytes, int storageCount, int decomNodeCount, String filename)
specifier|private
name|void
name|testDecommission
parameter_list|(
name|int
name|writeBytes
parameter_list|,
name|int
name|storageCount
parameter_list|,
name|int
name|decomNodeCount
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|Path
name|ecFile
init|=
operator|new
name|Path
argument_list|(
name|ecDir
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|writeStripedFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommisionNodes
init|=
name|getDecommissionDatanode
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|,
name|decomNodeCount
argument_list|)
decl_stmt|;
name|int
name|deadDecommissioned
init|=
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
decl_stmt|;
name|int
name|liveDecommissioned
init|=
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
init|=
operator|(
operator|(
name|HdfsDataInputStream
operator|)
name|dfs
operator|.
name|open
argument_list|(
name|ecFile
argument_list|)
operator|)
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
comment|// prepare expected block index and token list.
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
argument_list|>
name|locToIndexList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
argument_list|>
name|locToTokenList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|prepareBlockIndexAndTokenList
argument_list|(
name|lbs
argument_list|,
name|locToIndexList
argument_list|,
name|locToTokenList
argument_list|)
expr_stmt|;
comment|// Decommission node. Verify that node is decommissioned.
name|decommissionNode
argument_list|(
literal|0
argument_list|,
name|decommisionNodes
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deadDecommissioned
argument_list|,
name|fsn
operator|.
name|getNumDecomDeadDataNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|liveDecommissioned
operator|+
name|decommisionNodes
operator|.
name|size
argument_list|()
argument_list|,
name|fsn
operator|.
name|getNumDecomLiveDataNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure decommissioned datanode is not automatically shutdown
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All datanodes must be alive"
argument_list|,
name|numDNs
argument_list|,
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|storageCount
argument_list|,
name|decommisionNodes
argument_list|,
name|numDNs
argument_list|)
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|,
name|decommisionNodes
argument_list|,
literal|null
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
name|assertBlockIndexAndTokenPosition
argument_list|(
name|lbs
argument_list|,
name|locToIndexList
argument_list|,
name|locToTokenList
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareBlockIndexAndTokenList (List<LocatedBlock> lbs, List<HashMap<DatanodeInfo, Byte>> locToIndexList, List<HashMap<DatanodeInfo, Token<BlockTokenIdentifier>>> locToTokenList)
specifier|private
name|void
name|prepareBlockIndexAndTokenList
parameter_list|(
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
parameter_list|,
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
argument_list|>
name|locToIndexList
parameter_list|,
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
argument_list|>
name|locToTokenList
parameter_list|)
block|{
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|lbs
control|)
block|{
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
name|locToIndex
init|=
operator|new
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|locToIndexList
operator|.
name|add
argument_list|(
name|locToIndex
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
name|locToToken
init|=
operator|new
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|locToTokenList
operator|.
name|add
argument_list|(
name|locToToken
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|di
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|LocatedStripedBlock
name|stripedBlk
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|lb
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|di
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locToIndex
operator|.
name|put
argument_list|(
name|di
index|[
name|i
index|]
argument_list|,
name|stripedBlk
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|locToToken
operator|.
name|put
argument_list|(
name|di
index|[
name|i
index|]
argument_list|,
name|stripedBlk
operator|.
name|getBlockTokens
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify block index and token values. Must update block indices and block    * tokens after sorting.    */
DECL|method|assertBlockIndexAndTokenPosition (List<LocatedBlock> lbs, List<HashMap<DatanodeInfo, Byte>> locToIndexList, List<HashMap<DatanodeInfo, Token<BlockTokenIdentifier>>> locToTokenList)
specifier|private
name|void
name|assertBlockIndexAndTokenPosition
parameter_list|(
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
parameter_list|,
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
argument_list|>
name|locToIndexList
parameter_list|,
name|List
argument_list|<
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
argument_list|>
name|locToTokenList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlock
name|lb
init|=
name|lbs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LocatedStripedBlock
name|stripedBlk
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|lb
decl_stmt|;
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Byte
argument_list|>
name|locToIndex
init|=
name|locToIndexList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|>
name|locToToken
init|=
name|locToTokenList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|di
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|di
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Block index value mismatches after sorting"
argument_list|,
operator|(
name|byte
operator|)
name|locToIndex
operator|.
name|get
argument_list|(
name|di
index|[
name|j
index|]
argument_list|)
argument_list|,
name|stripedBlk
operator|.
name|getBlockIndices
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Block token value mismatches after sorting"
argument_list|,
name|locToToken
operator|.
name|get
argument_list|(
name|di
index|[
name|j
index|]
argument_list|)
argument_list|,
name|stripedBlk
operator|.
name|getBlockTokens
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDecommissionDatanode (DistributedFileSystem dfs, Path ecFile, int writeBytes, int decomNodeCount)
specifier|private
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|getDecommissionDatanode
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|ecFile
parameter_list|,
name|int
name|writeBytes
parameter_list|,
name|int
name|decomNodeCount
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|fileBlockLocations
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|ecFile
argument_list|,
literal|0
argument_list|,
name|writeBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dnName
range|:
name|fileBlockLocations
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
control|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|info
control|)
block|{
if|if
condition|(
name|dnName
operator|.
name|equals
argument_list|(
name|dn
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|decommissionedNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decommissionedNodes
operator|.
name|size
argument_list|()
operator|>=
name|decomNodeCount
condition|)
block|{
return|return
name|decommissionedNodes
return|;
block|}
block|}
block|}
return|return
name|decommissionedNodes
return|;
block|}
comment|/* Get DFSClient to the namenode */
DECL|method|getDfsClient (NameNode nn, Configuration conf)
specifier|private
specifier|static
name|DFSClient
name|getDfsClient
parameter_list|(
name|NameNode
name|nn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DFSClient
argument_list|(
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|writeStripedFile (DistributedFileSystem dfs, Path ecFile, int writeBytes)
specifier|private
name|void
name|writeStripedFile
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|ecFile
parameter_list|,
name|int
name|writeBytes
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|StripedFileTestUtil
operator|.
name|generateBytes
argument_list|(
name|writeBytes
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|waitBlockGroupsReported
argument_list|(
name|dfs
argument_list|,
name|ecFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StripedFileTestUtil
operator|.
name|checkData
argument_list|(
name|dfs
argument_list|,
name|ecFile
argument_list|,
name|writeBytes
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|blockGroupSize
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConfigFile (Path name, List<String> nodes)
specifier|private
name|void
name|writeConfigFile
parameter_list|(
name|Path
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete if it already exists
if|if
condition|(
name|localFileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|localFileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|stm
init|=
name|localFileSys
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * decommission the DN at index dnIndex or one random node if dnIndex is set    * to -1 and wait for the node to reach the given {@code waitForState}.    */
DECL|method|decommissionNode (int nnIndex, List<DatanodeInfo> decommissionedNodes, AdminStates waitForState)
specifier|private
name|void
name|decommissionNode
parameter_list|(
name|int
name|nnIndex
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|AdminStates
name|waitForState
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSClient
name|client
init|=
name|getDfsClient
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|info
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
comment|// write nodename into the exclude file.
name|ArrayList
argument_list|<
name|String
argument_list|>
name|excludeNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decommissionedNodes
control|)
block|{
name|boolean
name|nodeExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dninfo
range|:
name|info
control|)
block|{
if|if
condition|(
name|dninfo
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|nodeExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Datanode: "
operator|+
name|dn
operator|+
literal|" is not LIVE"
argument_list|,
name|nodeExists
argument_list|)
expr_stmt|;
name|excludeNodes
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Decommissioning node: "
operator|+
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeConfigFile
argument_list|(
name|excludeFile
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
name|refreshNodes
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decommissionedNodes
control|)
block|{
name|DatanodeInfo
name|ret
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
name|nnIndex
argument_list|)
argument_list|,
name|dn
argument_list|)
decl_stmt|;
name|waitNodeState
argument_list|(
name|ret
argument_list|,
name|waitForState
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNodes (final FSNamesystem ns, final Configuration conf)
specifier|private
specifier|static
name|void
name|refreshNodes
parameter_list|(
specifier|final
name|FSNamesystem
name|ns
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Wait till node is fully decommissioned.    */
DECL|method|waitNodeState (DatanodeInfo node, AdminStates state)
specifier|private
name|void
name|waitNodeState
parameter_list|(
name|DatanodeInfo
name|node
parameter_list|,
name|AdminStates
name|state
parameter_list|)
block|{
name|boolean
name|done
init|=
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for node "
operator|+
name|node
operator|+
literal|" to change state to "
operator|+
name|state
operator|+
literal|" current state: "
operator|+
name|node
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_INTERVAL
operator|*
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing
block|}
name|done
operator|=
name|state
operator|==
name|node
operator|.
name|getAdminState
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"node "
operator|+
name|node
operator|+
literal|" reached the state "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the number of replicas are as expected for each block in the    * given file. For blocks with a decommissioned node, verify that their    * replication is 1 more than what is specified. For blocks without    * decommissioned nodes, verify their replication is equal to what is    * specified.    *    * @param decommissionedNodes    *          - if null, there is no decommissioned node for this file.    * @return - null if no failure found, else an error message string.    */
DECL|method|checkFile (FileSystem fileSys, Path name, int repl, List<DatanodeInfo> decommissionedNodes, int numDatanodes)
specifier|private
specifier|static
name|String
name|checkFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|decommissionedNodes
parameter_list|,
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isNodeDown
init|=
name|decommissionedNodes
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
comment|// need a raw stream
name|assertTrue
argument_list|(
literal|"Not HDFS:"
operator|+
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fileSys
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dis
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|dinfo
init|=
name|dis
operator|.
name|getAllBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|dinfo
control|)
block|{
comment|// for each block
name|int
name|hasdown
init|=
literal|0
decl_stmt|;
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// for each replica
name|LOG
operator|.
name|info
argument_list|(
literal|"Block Locations size={}, locs={}, j="
argument_list|,
name|nodes
operator|.
name|length
argument_list|,
name|nodes
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|decommissionedNodes
control|)
block|{
comment|// check against decommissioned list
if|if
condition|(
name|isNodeDown
operator|&&
name|nodes
index|[
name|j
index|]
operator|.
name|getXferAddr
argument_list|()
operator|.
name|equals
argument_list|(
name|datanodeInfo
operator|.
name|getXferAddr
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|hasdown
operator|++
expr_stmt|;
comment|// Downnode must actually be decommissioned
if|if
condition|(
operator|!
name|nodes
index|[
name|j
index|]
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is given as downnode, "
operator|+
literal|"but is not decommissioned"
return|;
block|}
comment|// Decommissioned node (if any) should only be last node in list.
if|if
condition|(
name|j
operator|<
name|repl
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" decommissioned node "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" was not last node in list: "
operator|+
operator|(
name|j
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|nodes
operator|.
name|length
return|;
block|}
comment|// should only be last node in list.
name|LOG
operator|.
name|info
argument_list|(
literal|"Block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is decommissioned."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Non-downnodes must not be decommissioned
if|if
condition|(
operator|!
name|found
operator|&&
name|nodes
index|[
name|j
index|]
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
literal|"For block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" replica on "
operator|+
name|nodes
index|[
name|j
index|]
operator|+
literal|" is unexpectedly decommissioned"
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|" has "
operator|+
name|hasdown
operator|+
literal|" decommissioned replica."
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|min
argument_list|(
name|numDatanodes
argument_list|,
name|repl
operator|+
name|hasdown
argument_list|)
operator|!=
name|nodes
operator|.
name|length
condition|)
block|{
return|return
literal|"Wrong number of replicas for block "
operator|+
name|blk
operator|.
name|getBlock
argument_list|()
operator|+
literal|": "
operator|+
name|nodes
operator|.
name|length
operator|+
literal|", expected "
operator|+
name|Math
operator|.
name|min
argument_list|(
name|numDatanodes
argument_list|,
name|repl
operator|+
name|hasdown
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

