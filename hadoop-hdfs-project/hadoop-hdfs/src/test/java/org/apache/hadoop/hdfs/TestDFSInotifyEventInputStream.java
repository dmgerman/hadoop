begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|MissingEventsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOpCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|TestDFSInotifyEventInputStream
specifier|public
class|class
name|TestDFSInotifyEventInputStream
block|{
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDFSInotifyEventInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|waitForNextEvents (DFSInotifyEventInputStream eis)
specifier|public
specifier|static
name|EventBatch
name|waitForNextEvents
parameter_list|(
name|DFSInotifyEventInputStream
name|eis
parameter_list|)
throws|throws
name|IOException
throws|,
name|MissingEventsException
block|{
name|EventBatch
name|batch
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|batch
operator|=
name|eis
operator|.
name|poll
argument_list|()
operator|)
operator|==
literal|null
condition|)
empty_stmt|;
return|return
name|batch
return|;
block|}
DECL|method|checkTxid (EventBatch batch, long prevTxid)
specifier|private
specifier|static
name|long
name|checkTxid
parameter_list|(
name|EventBatch
name|batch
parameter_list|,
name|long
name|prevTxid
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Previous txid "
operator|+
name|prevTxid
operator|+
literal|" was not less than "
operator|+
literal|"new txid "
operator|+
name|batch
operator|.
name|getTxid
argument_list|()
argument_list|,
name|prevTxid
operator|<
name|batch
operator|.
name|getTxid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|batch
operator|.
name|getTxid
argument_list|()
return|;
block|}
comment|/**    * If this test fails, check whether the newly added op should map to an    * inotify event, and if so, establish the mapping in    * {@link org.apache.hadoop.hdfs.server.namenode.InotifyFSEditLogOpTranslator}    * and update testBasic() to include the new op.    */
annotation|@
name|Test
DECL|method|testOpcodeCount ()
specifier|public
name|void
name|testOpcodeCount
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|54
argument_list|,
name|FSEditLogOpCodes
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests all FsEditLogOps that are converted to inotify events.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testBasic ()
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
throws|,
name|MissingEventsException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// so that we can get an atime change
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniQJMHACluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|MiniQJMHACluster
name|cluster
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file3"
argument_list|)
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/file5"
argument_list|)
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/truncate_file"
argument_list|)
argument_list|,
name|BLOCK_SIZE
operator|*
literal|2
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSInotifyEventInputStream
name|eis
init|=
name|client
operator|.
name|getInotifyEventStream
argument_list|()
decl_stmt|;
name|client
operator|.
name|rename
argument_list|(
literal|"/file"
argument_list|,
literal|"/file4"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// RenameOp -> RenameEvent
name|client
operator|.
name|rename
argument_list|(
literal|"/file4"
argument_list|,
literal|"/file2"
argument_list|)
expr_stmt|;
comment|// RenameOldOp -> RenameEvent
comment|// DeleteOp, AddOp -> UnlinkEvent, CreateEvent
name|OutputStream
name|os
init|=
name|client
operator|.
name|create
argument_list|(
literal|"/file2"
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// CloseOp -> CloseEvent
comment|// AddOp -> AppendEvent
name|os
operator|=
name|client
operator|.
name|append
argument_list|(
literal|"/file2"
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// CloseOp -> CloseEvent
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// so that the atime will get updated on the next line
name|client
operator|.
name|open
argument_list|(
literal|"/file2"
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// TimesOp -> MetadataUpdateEvent
comment|// SetReplicationOp -> MetadataUpdateEvent
name|client
operator|.
name|setReplication
argument_list|(
literal|"/file2"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// ConcatDeleteOp -> AppendEvent, UnlinkEvent, CloseEvent
name|client
operator|.
name|concat
argument_list|(
literal|"/file2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/file3"
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|delete
argument_list|(
literal|"/file2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// DeleteOp -> UnlinkEvent
name|client
operator|.
name|mkdirs
argument_list|(
literal|"/dir"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// MkdirOp -> CreateEvent
comment|// SetPermissionsOp -> MetadataUpdateEvent
name|client
operator|.
name|setPermission
argument_list|(
literal|"/dir"
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rw-rw-rw-"
argument_list|)
argument_list|)
expr_stmt|;
comment|// SetOwnerOp -> MetadataUpdateEvent
name|client
operator|.
name|setOwner
argument_list|(
literal|"/dir"
argument_list|,
literal|"username"
argument_list|,
literal|"groupname"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createSymlink
argument_list|(
literal|"/dir"
argument_list|,
literal|"/dir2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// SymlinkOp -> CreateEvent
name|client
operator|.
name|setXAttr
argument_list|(
literal|"/file5"
argument_list|,
literal|"user.field"
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// SetXAttrOp -> MetadataUpdateEvent
comment|// RemoveXAttrOp -> MetadataUpdateEvent
name|client
operator|.
name|removeXAttr
argument_list|(
literal|"/file5"
argument_list|,
literal|"user.field"
argument_list|)
expr_stmt|;
comment|// SetAclOp -> MetadataUpdateEvent
name|client
operator|.
name|setAcl
argument_list|(
literal|"/file5"
argument_list|,
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
literal|"user::rwx,user:foo:rw-,group::r--,other::---"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|removeAcl
argument_list|(
literal|"/file5"
argument_list|)
expr_stmt|;
comment|// SetAclOp -> MetadataUpdateEvent
name|client
operator|.
name|rename
argument_list|(
literal|"/file5"
argument_list|,
literal|"/dir"
argument_list|)
expr_stmt|;
comment|// RenameOldOp -> RenameEvent
comment|//TruncateOp -> TruncateEvent
name|client
operator|.
name|truncate
argument_list|(
literal|"/truncate_file"
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|client
operator|.
name|create
argument_list|(
literal|"/file_ec_test1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|EventBatch
name|batch
init|=
literal|null
decl_stmt|;
comment|// RenameOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|txid
init|=
name|batch
operator|.
name|getTxid
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|RENAME
argument_list|)
expr_stmt|;
name|Event
operator|.
name|RenameEvent
name|re
init|=
operator|(
name|Event
operator|.
name|RenameEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/file4"
argument_list|,
name|re
operator|.
name|getDstPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/file"
argument_list|,
name|re
operator|.
name|getSrcPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RenameEvent [srcPath="
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|eventsBehind
init|=
name|eis
operator|.
name|getTxidsBehindEstimate
argument_list|()
decl_stmt|;
comment|// RenameOldOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|RENAME
argument_list|)
expr_stmt|;
name|Event
operator|.
name|RenameEvent
name|re2
init|=
operator|(
name|Event
operator|.
name|RenameEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re2
operator|.
name|getDstPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re2
operator|.
name|getSrcPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re2
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// AddOp with overwrite
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CreateEvent
name|ce
init|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getiNodeType
argument_list|()
operator|==
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getCtime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getReplication
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getSymlinkTarget
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|ce
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CreateEvent [INodeType="
argument_list|)
argument_list|)
expr_stmt|;
comment|// CloseOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CloseEvent
name|ce2
init|=
operator|(
name|Event
operator|.
name|CloseEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce2
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce2
operator|.
name|getFileSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce2
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce2
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CloseEvent [path="
argument_list|)
argument_list|)
expr_stmt|;
comment|// AppendOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|Event
operator|.
name|AppendEvent
name|append2
init|=
operator|(
name|Event
operator|.
name|AppendEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/file2"
argument_list|,
name|append2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|append2
operator|.
name|toNewBlock
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|append2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|append2
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"AppendEvent [path="
argument_list|)
argument_list|)
expr_stmt|;
comment|// CloseOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Event
operator|.
name|CloseEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TimesOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|TIMES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MetadataUpdateEvent [path="
argument_list|)
argument_list|)
expr_stmt|;
comment|// SetReplicationOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue2
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue2
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue2
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|REPLICATION
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue2
operator|.
name|getReplication
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ConcatDeleteOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Event
operator|.
name|AppendEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|1
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|UNLINK
argument_list|)
expr_stmt|;
name|Event
operator|.
name|UnlinkEvent
name|ue2
init|=
operator|(
name|Event
operator|.
name|UnlinkEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ue2
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ue2
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ue2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ue2
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"UnlinkEvent [path="
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|2
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CloseEvent
name|ce3
init|=
operator|(
name|Event
operator|.
name|CloseEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce3
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce3
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// DeleteOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|UNLINK
argument_list|)
expr_stmt|;
name|Event
operator|.
name|UnlinkEvent
name|ue
init|=
operator|(
name|Event
operator|.
name|UnlinkEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ue
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ue
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// MkdirOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CreateEvent
name|ce4
init|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce4
operator|.
name|getiNodeType
argument_list|()
operator|==
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|DIRECTORY
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce4
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce4
operator|.
name|getCtime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce4
operator|.
name|getReplication
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce4
operator|.
name|getSymlinkTarget
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SetPermissionsOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue3
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue3
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue3
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|PERMS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue3
operator|.
name|getPerms
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rw-rw-rw-"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SetOwnerOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue4
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue4
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue4
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|OWNER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue4
operator|.
name|getOwnerName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"username"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue4
operator|.
name|getGroupName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"groupname"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SymlinkOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CreateEvent
name|ce5
init|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce5
operator|.
name|getiNodeType
argument_list|()
operator|==
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|SYMLINK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce5
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce5
operator|.
name|getCtime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce5
operator|.
name|getReplication
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce5
operator|.
name|getSymlinkTarget
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce5
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SetXAttrOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue5
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue5
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue5
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|XATTRS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue5
operator|.
name|getxAttrs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue5
operator|.
name|getxAttrs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|mue5
operator|.
name|isxAttrsRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue5
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// RemoveXAttrOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue6
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue6
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue6
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|XATTRS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue6
operator|.
name|getxAttrs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue6
operator|.
name|getxAttrs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue6
operator|.
name|isxAttrsRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue6
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SetAclOp (1)
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue7
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue7
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue7
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|ACLS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue7
operator|.
name|getAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
literal|"user::rwx"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue7
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// SetAclOp (2)
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|Event
operator|.
name|MetadataUpdateEvent
name|mue8
init|=
operator|(
name|Event
operator|.
name|MetadataUpdateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue8
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue8
operator|.
name|getMetadataType
argument_list|()
operator|==
name|Event
operator|.
name|MetadataUpdateEvent
operator|.
name|MetadataType
operator|.
name|ACLS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mue8
operator|.
name|getAcls
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|mue8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// RenameOp (2)
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|RENAME
argument_list|)
expr_stmt|;
name|Event
operator|.
name|RenameEvent
name|re3
init|=
operator|(
name|Event
operator|.
name|RenameEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re3
operator|.
name|getDstPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re3
operator|.
name|getSrcPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file5"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re3
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TruncateOp
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|TRUNCATE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|TruncateEvent
name|et
init|=
operator|(
operator|(
name|Event
operator|.
name|TruncateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|et
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/truncate_file"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|et
operator|.
name|getFileSize
argument_list|()
operator|==
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|et
operator|.
name|getTimestamp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|et
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|et
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"TruncateEvent [path="
argument_list|)
argument_list|)
expr_stmt|;
comment|// CreateEvent without overwrite
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|ce
operator|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getiNodeType
argument_list|()
operator|==
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/file_ec_test1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getCtime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getReplication
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getSymlinkTarget
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ce
operator|.
name|getOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|ce
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CreateEvent [INodeType="
argument_list|)
argument_list|)
expr_stmt|;
comment|// Returns null when there are no further events
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|poll
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// make sure the estimate hasn't changed since the above assertion
comment|// tells us that we are fully caught up to the current namesystem state
comment|// and we should not have been behind at all when eventsBehind was set
comment|// either, since there were few enough events that they should have all
comment|// been read to the client during the first poll() call
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|getTxidsBehindEstimate
argument_list|()
operator|==
name|eventsBehind
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testErasureCodedFiles ()
specifier|public
name|void
name|testErasureCodedFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dataUnits
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parityUnits
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// so that we can get an atime change
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniQJMHACluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|getDfsBuilder
argument_list|()
operator|.
name|numDataNodes
argument_list|(
name|dataUnits
operator|+
name|parityUnits
argument_list|)
expr_stmt|;
name|MiniQJMHACluster
name|cluster
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|ecDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ecdir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ecDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSInotifyEventInputStream
name|eis
init|=
name|client
operator|.
name|getInotifyEventStream
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
name|sz
index|]
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/ecdir/file_ec_test2"
argument_list|)
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|EventBatch
name|batch
init|=
literal|null
decl_stmt|;
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|txid
init|=
name|batch
operator|.
name|getTxid
argument_list|()
decl_stmt|;
name|long
name|eventsBehind
init|=
name|eis
operator|.
name|getTxidsBehindEstimate
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Event
operator|.
name|CreateEvent
name|ce
init|=
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getiNodeType
argument_list|()
operator|==
name|Event
operator|.
name|CreateEvent
operator|.
name|INodeType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/ecdir/file_ec_test2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getCtime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ce
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getSymlinkTarget
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|getOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
argument_list|,
name|ce
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|isErasureCoded
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ce
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CreateEvent [INodeType="
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|txid
operator|=
name|checkTxid
argument_list|(
name|batch
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Event
operator|.
name|CloseEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/ecdir/file_ec_test2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Returns null when there are no further events
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|poll
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// make sure the estimate hasn't changed since the above assertion
comment|// tells us that we are fully caught up to the current namesystem state
comment|// and we should not have been behind at all when eventsBehind was set
comment|// either, since there were few enough events that they should have all
comment|// been read to the client during the first poll() call
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|getTxidsBehindEstimate
argument_list|()
operator|==
name|eventsBehind
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testNNFailover ()
specifier|public
name|void
name|testNNFailover
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|MissingEventsException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniQJMHACluster
name|cluster
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|)
operator|.
name|dfs
decl_stmt|;
name|DFSInotifyEventInputStream
name|eis
init|=
name|client
operator|.
name|getInotifyEventStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|mkdirs
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|EventBatch
name|batch
init|=
literal|null
decl_stmt|;
comment|// we can read all of the edits logged by the old active from the new
comment|// active
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|poll
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTwoActiveNNs ()
specifier|public
name|void
name|testTwoActiveNNs
parameter_list|()
throws|throws
name|IOException
throws|,
name|MissingEventsException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniQJMHACluster
name|cluster
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSClient
name|client0
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSClient
name|client1
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSInotifyEventInputStream
name|eis
init|=
name|client0
operator|.
name|getInotifyEventStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client0
operator|.
name|mkdirs
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client1
operator|.
name|mkdirs
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// make sure that the old active can't read any further than the edits
comment|// it logged itself (it has no idea whether the in-progress edits from
comment|// the other writer have actually been committed)
name|EventBatch
name|batch
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|batch
operator|=
name|waitForNextEvents
argument_list|(
name|eis
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/dir"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eis
operator|.
name|poll
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
comment|// expected because the old active will be unable to flush the
comment|// end-of-segment op since it is fenced
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testReadEventsWithTimeout ()
specifier|public
name|void
name|testReadEventsWithTimeout
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|MissingEventsException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniQJMHACluster
name|cluster
init|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getDfsCluster
argument_list|()
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSInotifyEventInputStream
name|eis
init|=
name|client
operator|.
name|getInotifyEventStream
argument_list|()
decl_stmt|;
name|ScheduledExecutorService
name|ex
init|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
name|ex
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|client
operator|.
name|mkdirs
argument_list|(
literal|"/dir"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// test will fail
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create /dir"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// a very generous wait period -- the edit will definitely have been
comment|// processed by the time this is up
name|EventBatch
name|batch
init|=
name|eis
operator|.
name|poll
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|batch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/dir"
argument_list|,
operator|(
operator|(
name|Event
operator|.
name|CreateEvent
operator|)
name|batch
operator|.
name|getEvents
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

