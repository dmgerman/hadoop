begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class tests the DFS positional read functionality on a single node  * mini-cluster. These tests are inspired from {@link TestPread}. The tests  * are much less comprehensive than other pread tests because pread already  * internally uses {@link ByteBuffer}s.  */
end_comment

begin_class
DECL|class|TestByteBufferPread
specifier|public
class|class
name|TestByteBufferPread
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|fileContents
specifier|private
specifier|static
name|byte
index|[]
name|fileContents
decl_stmt|;
DECL|field|testFile
specifier|private
specifier|static
name|Path
name|testFile
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
name|Random
name|rand
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|12
operator|*
name|BLOCK_SIZE
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup the cluster with a small block size so we can create small files
comment|// that span multiple blocks
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Create a test file that spans 12 blocks, and contains a bunch of random
comment|// bytes
name|fileContents
operator|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|fileContents
argument_list|)
expr_stmt|;
name|testFile
operator|=
operator|new
name|Path
argument_list|(
literal|"/byte-buffer-pread-test.dat"
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|fileContents
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test preads with {@link java.nio.HeapByteBuffer}s.    */
annotation|@
name|Test
DECL|method|testPreadWithHeapByteBuffer ()
specifier|public
name|void
name|testPreadWithHeapByteBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|testPreadWithByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithFullByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithPositionedByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithLimitedByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPositionedPreadWithByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test preads with {@link java.nio.DirectByteBuffer}s.    */
annotation|@
name|Test
DECL|method|testPreadWithDirectByteBuffer ()
specifier|public
name|void
name|testPreadWithDirectByteBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|testPreadWithByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithFullByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithPositionedByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPreadWithLimitedByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|testPositionedPreadWithByteBuffer
argument_list|(
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads the entire testFile using the pread API and validates that its    * contents are properly loaded into the supplied {@link ByteBuffer}.    */
DECL|method|testPreadWithByteBuffer (ByteBuffer buffer)
specifier|private
name|void
name|testPreadWithByteBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
decl_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
comment|// Check that each call to read changes the position of the ByteBuffer
comment|// correctly
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure the buffer is full
name|assertFalse
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the contents of the read buffer equal the contents of the
comment|// file
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bufferContents
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bufferContents
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferContents
argument_list|,
name|fileContents
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Attempts to read the testFile into a {@link ByteBuffer} that is already    * full, and validates that doing so does not change the contents of the    * supplied {@link ByteBuffer}.    */
DECL|method|testPreadWithFullByteBuffer (ByteBuffer buffer)
specifier|private
name|void
name|testPreadWithFullByteBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Load some dummy data into the buffer
name|byte
index|[]
name|existingBufferBytes
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|existingBufferBytes
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|existingBufferBytes
argument_list|)
expr_stmt|;
comment|// Make sure the buffer is full
name|assertFalse
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
comment|// Attempt to read into the buffer, 0 bytes should be read since the
comment|// buffer is full
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Double check the buffer is still full and its contents have not
comment|// changed
name|assertFalse
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bufferContents
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bufferContents
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferContents
argument_list|,
name|existingBufferBytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads half of the testFile into the {@link ByteBuffer} by setting a    * {@link ByteBuffer#limit} on the buffer. Validates that only half of the    * testFile is loaded into the buffer.    */
DECL|method|testPreadWithLimitedByteBuffer ( ByteBuffer buffer)
specifier|private
name|void
name|testPreadWithLimitedByteBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
decl_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
comment|// Set the buffer limit to half the size of the file
name|buffer
operator|.
name|limit
argument_list|(
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
comment|// Check that each call to read changes the position of the ByteBuffer
comment|// correctly
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Since we set the buffer limit to half the size of the file, we should
comment|// have only read half of the file into the buffer
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Check that the buffer is full and the contents equal the first half of
comment|// the file
name|assertFalse
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bufferContents
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
operator|/
literal|2
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bufferContents
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferContents
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads half of the testFile into the {@link ByteBuffer} by setting the    * {@link ByteBuffer#position} the half the size of the file. Validates that    * only half of the testFile is loaded into the buffer.    */
DECL|method|testPreadWithPositionedByteBuffer ( ByteBuffer buffer)
specifier|private
name|void
name|testPreadWithPositionedByteBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
decl_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
comment|// Set the buffer position to half the size of the file
name|buffer
operator|.
name|position
argument_list|(
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
comment|// Check that each call to read changes the position of the ByteBuffer
comment|// correctly
name|assertEquals
argument_list|(
name|totalBytesRead
operator|+
name|FILE_SIZE
operator|/
literal|2
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Since we set the buffer position to half the size of the file, we
comment|// should have only read half of the file into the buffer
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Check that the buffer is full and the contents equal the first half of
comment|// the file
name|assertFalse
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bufferContents
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
operator|/
literal|2
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bufferContents
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferContents
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileContents
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads half of the testFile into the {@link ByteBuffer} by specifying a    * position for the pread API that is half of the file size. Validates that    * only half of the testFile is loaded into the buffer.    */
DECL|method|testPositionedPreadWithByteBuffer ( ByteBuffer buffer)
specifier|private
name|void
name|testPositionedPreadWithByteBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
decl_stmt|;
name|int
name|totalBytesRead
init|=
literal|0
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
comment|// Start reading from halfway through the file
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|totalBytesRead
operator|+
name|FILE_SIZE
operator|/
literal|2
argument_list|,
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|totalBytesRead
operator|+=
name|bytesRead
expr_stmt|;
comment|// Check that each call to read changes the position of the ByteBuffer
comment|// correctly
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Since we starting reading halfway through the file, the buffer should
comment|// only be half full
name|assertEquals
argument_list|(
name|totalBytesRead
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the buffer contents equal the second half of the file
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bufferContents
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
operator|/
literal|2
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bufferContents
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bufferContents
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileContents
argument_list|,
name|FILE_SIZE
operator|/
literal|2
argument_list|,
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

