begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests some ECAdmin scenarios that are hard to test from  * {@link org.apache.hadoop.cli.TestErasureCodingCLI}.  */
end_comment

begin_class
DECL|class|TestECAdmin
specifier|public
class|class
name|TestECAdmin
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestECAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|admin
specifier|private
name|ECAdmin
name|admin
init|=
operator|new
name|ECAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|field|RS_3_2
specifier|private
specifier|final
specifier|static
name|String
name|RS_3_2
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|RS_6_3
specifier|private
specifier|final
specifier|static
name|String
name|RS_6_3
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_6_3_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|RS_10_4
specifier|private
specifier|final
specifier|static
name|String
name|RS_10_4
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|RS_10_4_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|XOR_2_1
specifier|private
specifier|final
specifier|static
name|String
name|XOR_2_1
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|resetOutputs
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRS63MinDN ()
specifier|public
name|void
name|testRS63MinDN
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDataNodes
init|=
literal|6
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|expectedNumDataNodes
init|=
literal|9
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughDataNodesMessage
argument_list|(
name|RS_6_3
argument_list|,
name|numDataNodes
argument_list|,
name|expectedNumDataNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRS104MinRacks ()
specifier|public
name|void
name|testRS104MinRacks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testPolicy
init|=
name|RS_10_4
decl_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|expectedNumRacks
init|=
literal|4
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|testPolicy
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughRacksMessage
argument_list|(
name|testPolicy
argument_list|,
name|numRacks
argument_list|,
name|expectedNumRacks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXOR21MinRacks ()
specifier|public
name|void
name|testXOR21MinRacks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testPolicy
init|=
name|XOR_2_1
decl_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|expectedNumRacks
init|=
literal|3
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|testPolicy
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughRacksMessage
argument_list|(
name|testPolicy
argument_list|,
name|numRacks
argument_list|,
name|expectedNumRacks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRS32MinRacks ()
specifier|public
name|void
name|testRS32MinRacks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testPolicy
init|=
name|RS_3_2
decl_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|expectedNumRacks
init|=
literal|3
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|testPolicy
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughRacksMessage
argument_list|(
name|testPolicy
argument_list|,
name|numRacks
argument_list|,
name|expectedNumRacks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRS63Good ()
specifier|public
name|void
name|testRS63Good
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is successful"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result of cluster topology verify "
operator|+
literal|"should be logged correctly"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The cluster setup can support EC policies: "
operator|+
name|RS_6_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error output should be empty"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoECEnabled ()
specifier|public
name|void
name|testNoECEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
literal|9
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is successful"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result of cluster topology verify "
operator|+
literal|"should be logged correctly"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No erasure coding policy is given"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error output should be empty"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnsuccessfulEnablePolicyMessage ()
specifier|public
name|void
name|testUnsuccessfulEnablePolicyMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testPolicy
init|=
name|RS_3_2
decl_stmt|;
specifier|final
name|int
name|numDataNodes
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-enablePolicy"
argument_list|,
literal|"-policy"
argument_list|,
name|testPolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is successful"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Enabling policy should be logged"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Erasure coding policy "
operator|+
name|testPolicy
operator|+
literal|" is enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Warning about cluster topology should be printed"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Warning: The cluster setup does not support "
operator|+
literal|"EC policy "
operator|+
name|testPolicy
operator|+
literal|". Reason:"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Warning about cluster topology should be printed"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|" racks are required for the erasure coding policies: "
operator|+
name|testPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuccessfulEnablePolicyMessage ()
specifier|public
name|void
name|testSuccessfulEnablePolicyMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testPolicy
init|=
name|RS_3_2
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-enablePolicy"
argument_list|,
literal|"-policy"
argument_list|,
name|testPolicy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is successful"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Enabling policy should be logged"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Erasure coding policy "
operator|+
name|testPolicy
operator|+
literal|" is enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Warning about cluster topology should not be printed"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Warning: The cluster setup does not support"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error output should be empty"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableNonExistentPolicyMessage ()
specifier|public
name|void
name|testEnableNonExistentPolicyMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|RS_6_3
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-enablePolicy"
argument_list|,
literal|"-policy"
argument_list|,
literal|"NonExistentPolicy"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is unsuccessful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Enabling policy should not be logged when "
operator|+
literal|"it was unsuccessful"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error message should be printed"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"RemoteException: The policy name "
operator|+
literal|"NonExistentPolicy does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyClusterSetupWithGivenPolicies ()
specifier|public
name|void
name|testVerifyClusterSetupWithGivenPolicies
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDataNodes
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|numRacks
init|=
literal|2
decl_stmt|;
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDataNodes
argument_list|,
name|numRacks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|,
literal|"-policy"
argument_list|,
name|RS_3_2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughRacksMessage
argument_list|(
name|RS_3_2
argument_list|,
name|numRacks
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|resetOutputs
argument_list|()
expr_stmt|;
name|ret
operator|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|,
literal|"-policy"
argument_list|,
name|RS_10_4
argument_list|,
name|RS_3_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
literal|2
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertNotEnoughDataNodesMessage
argument_list|(
name|RS_10_4
operator|+
literal|", "
operator|+
name|RS_3_2
argument_list|,
name|numDataNodes
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|resetOutputs
argument_list|()
expr_stmt|;
name|ret
operator|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|,
literal|"-policy"
argument_list|,
literal|"invalidPolicy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error message should be logged"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The given erasure coding policy invalidPolicy "
operator|+
literal|"does not exist."
argument_list|)
argument_list|)
expr_stmt|;
name|resetOutputs
argument_list|()
expr_stmt|;
name|ret
operator|=
name|runCommandWithParams
argument_list|(
literal|"-verifyClusterSetup"
argument_list|,
literal|"-policy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Return value of the command is not successful"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error message should be logged"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"NotEnoughArgumentsException: Not enough arguments: "
operator|+
literal|"expected 1 but got 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|resetOutputs ()
specifier|private
name|void
name|resetOutputs
parameter_list|()
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNotEnoughDataNodesMessage (String policy, int numDataNodes, int expectedNumDataNodes)
specifier|private
name|void
name|assertNotEnoughDataNodesMessage
parameter_list|(
name|String
name|policy
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|int
name|expectedNumDataNodes
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Result of cluster topology verify "
operator|+
literal|"should be logged correctly"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedNumDataNodes
operator|+
literal|" DataNodes are required "
operator|+
literal|"for the erasure coding policies: "
operator|+
name|policy
operator|+
literal|". The number of DataNodes is only "
operator|+
name|numDataNodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error output should be empty"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotEnoughRacksMessage (String policy, int numRacks, int expectedNumRacks)
specifier|private
name|void
name|assertNotEnoughRacksMessage
parameter_list|(
name|String
name|policy
parameter_list|,
name|int
name|numRacks
parameter_list|,
name|int
name|expectedNumRacks
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Result of cluster topology verify "
operator|+
literal|"should be logged correctly"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedNumRacks
operator|+
literal|" racks are required for "
operator|+
literal|"the erasure coding policies: "
operator|+
name|policy
operator|+
literal|". The number of racks is only "
operator|+
name|numRacks
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error output should be empty"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runCommandWithParams (String... args)
specifier|private
name|int
name|runCommandWithParams
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ret
init|=
name|admin
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Command stdout: {}"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Command stderr: {}"
argument_list|,
name|err
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

