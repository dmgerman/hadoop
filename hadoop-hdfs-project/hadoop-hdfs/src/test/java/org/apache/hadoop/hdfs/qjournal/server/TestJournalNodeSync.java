begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniJournalCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|getLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Unit test for Journal Node formatting upon re-installation and syncing.  */
end_comment

begin_class
DECL|class|TestJournalNodeSync
specifier|public
class|class
name|TestJournalNodeSync
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjmhaCluster
specifier|private
name|MiniQJMHACluster
name|qjmhaCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|jCluster
specifier|private
name|MiniJournalCluster
name|jCluster
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|editsPerformed
specifier|private
name|int
name|editsPerformed
init|=
literal|0
decl_stmt|;
DECL|field|jid
specifier|private
specifier|final
name|String
name|jid
init|=
literal|"ns1"
decl_stmt|;
DECL|field|activeNNindex
specifier|private
name|int
name|activeNNindex
init|=
literal|0
decl_stmt|;
DECL|field|DFS_HA_TAILEDITS_PERIOD_SECONDS
specifier|private
specifier|static
specifier|final
name|int
name|DFS_HA_TAILEDITS_PERIOD_SECONDS
init|=
literal|1
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUpMiniCluster ()
specifier|public
name|void
name|setUpMiniCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_ENABLE_SYNC_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_SYNC_INTERVAL_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
if|if
condition|(
name|testName
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testSyncAfterJNdowntimeWithoutQJournalQueue"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_QUEUE_SIZE_LIMIT_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testName
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testSyncDuringRollingUpgrade"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
name|DFS_HA_TAILEDITS_PERIOD_SECONDS
argument_list|)
expr_stmt|;
block|}
name|qjmhaCluster
operator|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumNameNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
name|qjmhaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
name|jCluster
operator|=
name|qjmhaCluster
operator|.
name|getJournalCluster
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|namesystem
operator|=
name|dfsCluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownMiniCluster ()
specifier|public
name|void
name|shutDownMiniCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|qjmhaCluster
operator|!=
literal|null
condition|)
block|{
name|qjmhaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testJournalNodeSync ()
specifier|public
name|void
name|testJournalNodeSync
parameter_list|()
throws|throws
name|Exception
block|{
comment|//As by default 3 journal nodes are started;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|jCluster
operator|.
name|getJournalNode
argument_list|(
name|i
argument_list|)
operator|.
name|getJournalSyncerStatus
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
comment|// Generate some edit logs and delete one.
name|long
name|firstTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|generateEditLog
argument_list|()
expr_stmt|;
name|File
name|missingLog
init|=
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|missingLog
argument_list|)
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSyncForMultipleMissingLogs ()
specifier|public
name|void
name|testSyncForMultipleMissingLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
comment|// Generate some edit logs and delete two.
name|long
name|firstTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|long
name|nextTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|nextTxId
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSyncForDiscontinuousMissingLogs ()
specifier|public
name|void
name|testSyncForDiscontinuousMissingLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
comment|// Generate some edit logs and delete two discontinuous logs.
name|long
name|firstTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|generateEditLog
argument_list|()
expr_stmt|;
name|long
name|nextTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|nextTxId
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMultipleJournalsMissingLogs ()
specifier|public
name|void
name|testMultipleJournalsMissingLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|secondJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|1
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
operator|new
name|StorageDirectory
argument_list|(
name|secondJournalDir
argument_list|)
decl_stmt|;
name|File
name|secondJournalCurrentDir
init|=
name|sd
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
comment|// Generate some edit logs and delete one log from two journals.
name|long
name|firstTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|generateEditLog
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMultipleJournalsMultipleMissingLogs ()
specifier|public
name|void
name|testMultipleJournalsMultipleMissingLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|secondJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|1
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|secondJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|secondJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|thirdJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|2
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|thirdJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|thirdJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
comment|// Generate some edit logs and delete multiple logs in multiple journals.
name|long
name|firstTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|long
name|secondTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|long
name|thirdTxId
init|=
name|generateEditLog
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|firstTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|secondTxId
argument_list|)
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|thirdJournalCurrentDir
argument_list|,
name|thirdTxId
argument_list|)
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|// Test JournalNode Sync by randomly deleting edit logs from one or two of
comment|// the journals.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRandomJournalMissingLogs ()
specifier|public
name|void
name|testRandomJournalMissingLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|deleteEditLogsFromRandomJN
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|// Test JournalNode Sync when a JN id down while NN is actively writing
comment|// logs and comes back up after some time.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000
argument_list|)
DECL|method|testSyncAfterJNdowntime ()
specifier|public
name|void
name|testSyncAfterJNdowntime
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|secondJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|1
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|secondJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|secondJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|long
index|[]
name|startTxIds
init|=
operator|new
name|long
index|[
literal|10
index|]
decl_stmt|;
name|startTxIds
index|[
literal|0
index|]
operator|=
name|generateEditLog
argument_list|()
expr_stmt|;
name|startTxIds
index|[
literal|1
index|]
operator|=
name|generateEditLog
argument_list|()
expr_stmt|;
comment|// Stop the first JN
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Roll some more edits while the first JN is down
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|startTxIds
index|[
name|i
index|]
operator|=
name|generateEditLog
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// Re-start the first JN
name|jCluster
operator|.
name|restartJournalNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Roll an edit to update the committed tx id of the first JN
name|generateEditLog
argument_list|()
expr_stmt|;
comment|// List the edit logs rolled during JN down time.
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|EditLogFile
name|logFile
init|=
name|getLogFile
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|startTxIds
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|logFile
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that JNSync downloaded the edit logs rolled during JN down time.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test JournalNode Sync when a JN id down while NN is actively writing    * logs and comes back up after some time with no edit log queueing.    * Queuing disabled during the cluster setup {@link #setUpMiniCluster()}    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000
argument_list|)
DECL|method|testSyncAfterJNdowntimeWithoutQJournalQueue ()
specifier|public
name|void
name|testSyncAfterJNdowntimeWithoutQJournalQueue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// QJournal Queuing is disabled during the cluster setup
comment|// {@link #setUpMiniCluster()}
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|secondJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|1
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|secondJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|secondJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|long
index|[]
name|startTxIds
init|=
operator|new
name|long
index|[
literal|10
index|]
decl_stmt|;
name|startTxIds
index|[
literal|0
index|]
operator|=
name|generateEditLog
argument_list|()
expr_stmt|;
name|startTxIds
index|[
literal|1
index|]
operator|=
name|generateEditLog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Stop the first JN
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Roll some more edits while the first JN is down
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|startTxIds
index|[
name|i
index|]
operator|=
name|generateEditLog
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// Re-start the first JN
name|jCluster
operator|.
name|restartJournalNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// After JN restart and before rolling another edit, the missing edit
comment|// logs will not by synced as the committed tx id of the JN will be
comment|// less than the start tx id's of the missing edit logs and edit log queuing
comment|// has been disabled.
comment|// Roll an edit to update the committed tx id of the first JN
name|generateEditLog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// List the edit logs rolled during JN down time.
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|EditLogFile
name|logFile
init|=
name|getLogFile
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|startTxIds
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|logFile
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that JNSync downloaded the edit logs rolled during JN down time.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// Check that all the missing edit logs have been downloaded via
comment|// JournalNodeSyncer alone (as the edit log queueing has been disabled)
name|long
name|numEditLogsSynced
init|=
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrCreateJournal
argument_list|(
name|jid
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumEditLogsSynced
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Edit logs downloaded outside syncer. Expected 8 or "
operator|+
literal|"more downloads, got "
operator|+
name|numEditLogsSynced
operator|+
literal|" downloads instead"
argument_list|,
name|numEditLogsSynced
operator|>=
literal|8
argument_list|)
expr_stmt|;
block|}
comment|// Test JournalNode Sync when a JN is formatted while NN is actively writing
comment|// logs.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000
argument_list|)
DECL|method|testSyncAfterJNformat ()
specifier|public
name|void
name|testSyncAfterJNformat
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|firstJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|0
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|firstJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|firstJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|secondJournalDir
init|=
name|jCluster
operator|.
name|getJournalDir
argument_list|(
literal|1
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|File
name|secondJournalCurrentDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|secondJournalDir
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|long
index|[]
name|startTxIds
init|=
operator|new
name|long
index|[
literal|10
index|]
decl_stmt|;
name|startTxIds
index|[
literal|0
index|]
operator|=
name|generateEditLog
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startTxIds
index|[
literal|1
index|]
operator|=
name|generateEditLog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|startTxIds
index|[
literal|2
index|]
operator|=
name|generateEditLog
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|startTxIds
index|[
literal|3
index|]
operator|=
name|generateEditLog
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|Journal
name|journal1
init|=
name|jCluster
operator|.
name|getJournalNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrCreateJournal
argument_list|(
name|jid
argument_list|)
decl_stmt|;
name|NamespaceInfo
name|nsInfo
init|=
name|journal1
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceInfo
argument_list|()
decl_stmt|;
comment|// Delete contents of current directory of one JN
for|for
control|(
name|File
name|file
range|:
name|firstJournalCurrentDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// Format the JN
name|journal1
operator|.
name|format
argument_list|(
name|nsInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Roll some more edits
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|startTxIds
index|[
name|i
index|]
operator|=
name|generateEditLog
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// List the edit logs rolled during JN down time.
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|EditLogFile
name|logFile
init|=
name|getLogFile
argument_list|(
name|secondJournalCurrentDir
argument_list|,
name|startTxIds
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|firstJournalCurrentDir
argument_list|,
name|logFile
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that the formatted JN has all the edit logs.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
comment|// Test JournalNode Sync during a Rolling Upgrade of NN.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000
argument_list|)
DECL|method|testSyncDuringRollingUpgrade ()
specifier|public
name|void
name|testSyncDuringRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|dfsActive
decl_stmt|;
name|int
name|standbyNNindex
decl_stmt|;
if|if
condition|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|isActiveState
argument_list|()
condition|)
block|{
name|activeNNindex
operator|=
literal|0
expr_stmt|;
name|standbyNNindex
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|activeNNindex
operator|=
literal|1
expr_stmt|;
name|standbyNNindex
operator|=
literal|0
expr_stmt|;
block|}
name|dfsActive
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
name|activeNNindex
argument_list|)
expr_stmt|;
comment|// Prepare for rolling upgrade
specifier|final
name|RollingUpgradeInfo
name|info
init|=
name|dfsActive
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|PREPARE
argument_list|)
decl_stmt|;
comment|//query rolling upgrade
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
argument_list|,
name|dfsActive
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart the Standby NN with rollingUpgrade option
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
name|standbyNNindex
argument_list|,
literal|true
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"started"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
argument_list|,
name|dfsActive
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do some edits and delete some edit logs
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|deleteEditLogsFromRandomJN
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|// Transition the active NN to standby and standby to active
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
name|activeNNindex
argument_list|)
expr_stmt|;
comment|// Let Standby NN catch up tailing edit logs before transitioning it to
comment|// active
name|Thread
operator|.
name|sleep
argument_list|(
literal|30
operator|*
name|DFS_HA_TAILEDITS_PERIOD_SECONDS
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
name|standbyNNindex
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|activeNNindex
operator|=
name|standbyNNindex
expr_stmt|;
name|standbyNNindex
operator|=
operator|(
operator|(
name|activeNNindex
operator|+
literal|1
operator|)
operator|%
literal|2
operator|)
expr_stmt|;
name|dfsActive
operator|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
name|activeNNindex
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|activeNNindex
argument_list|)
operator|.
name|isActiveState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|standbyNNindex
argument_list|)
operator|.
name|isActiveState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart the current standby NN (previously active)
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
name|standbyNNindex
argument_list|,
literal|true
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"started"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
argument_list|,
name|dfsActive
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Do some edits and delete some edit logs
name|missingLogs
operator|.
name|addAll
argument_list|(
name|deleteEditLogsFromRandomJN
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that JNSync downloaded the edit logs rolled during rolling upgrade.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
name|editLogExists
argument_list|(
name|missingLogs
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
comment|//finalize rolling upgrade
specifier|final
name|RollingUpgradeInfo
name|finalize
init|=
name|dfsActive
operator|.
name|rollingUpgrade
argument_list|(
name|HdfsConstants
operator|.
name|RollingUpgradeAction
operator|.
name|FINALIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|finalize
operator|.
name|isFinalized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the missing edit logs exist after finalizing rolling upgrade
for|for
control|(
name|File
name|editLog
range|:
name|missingLogs
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Edit log missing after finalizing rolling upgrade"
argument_list|,
name|editLog
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteEditLog (File currentDir, long startTxId)
specifier|private
name|File
name|deleteEditLog
parameter_list|(
name|File
name|currentDir
parameter_list|,
name|long
name|startTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|EditLogFile
name|logFile
init|=
name|getLogFile
argument_list|(
name|currentDir
argument_list|,
name|startTxId
argument_list|)
decl_stmt|;
while|while
condition|(
name|logFile
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|activeNNindex
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|logFile
operator|=
name|getLogFile
argument_list|(
name|currentDir
argument_list|,
name|startTxId
argument_list|)
expr_stmt|;
block|}
name|File
name|deleteFile
init|=
name|logFile
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Couldn't delete edit log file"
argument_list|,
name|deleteFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|deleteFile
return|;
block|}
DECL|method|deleteEditLogsFromRandomJN ()
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|deleteEditLogsFromRandomJN
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|journalCurrentDirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|journalCurrentDirs
operator|.
name|add
argument_list|(
operator|new
name|StorageDirectory
argument_list|(
name|jCluster
operator|.
name|getJournalDir
argument_list|(
name|i
argument_list|,
name|jid
argument_list|)
argument_list|)
operator|.
name|getCurrentDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|startTxIds
init|=
operator|new
name|long
index|[
literal|20
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|startTxIds
index|[
name|i
index|]
operator|=
name|generateEditLog
argument_list|()
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|,
name|startTxIdIndex
decl_stmt|;
name|long
name|startTxId
decl_stmt|;
name|int
name|journalIndex
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|missingLogs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|deletedStartTxIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|5
condition|)
block|{
comment|// Select a random edit log to delete
name|startTxIdIndex
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
while|while
condition|(
name|deletedStartTxIds
operator|.
name|contains
argument_list|(
name|startTxIdIndex
argument_list|)
condition|)
block|{
name|startTxIdIndex
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
name|startTxId
operator|=
name|startTxIds
index|[
name|startTxIdIndex
index|]
expr_stmt|;
name|deletedStartTxIds
operator|.
name|add
argument_list|(
name|startTxIdIndex
argument_list|)
expr_stmt|;
comment|// Delete the randomly selected edit log segment from randomly selected
comment|// journal node
name|journalIndex
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|missingLogs
operator|.
name|add
argument_list|(
name|deleteEditLog
argument_list|(
name|journalCurrentDirs
operator|.
name|get
argument_list|(
name|journalIndex
argument_list|)
argument_list|,
name|startTxId
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|missingLogs
return|;
block|}
comment|/**    * Do a mutative metadata operation on the file system.    *    * @return true if the operation was successful, false otherwise.    */
DECL|method|doAnEdit ()
specifier|private
name|boolean
name|doAnEdit
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
name|activeNNindex
argument_list|)
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|editsPerformed
operator|++
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Does an edit and rolls the Edit Log.    *    * @return the startTxId of next segment after rolling edits.    */
DECL|method|generateEditLog ()
specifier|private
name|long
name|generateEditLog
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|generateEditLog
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Does specified number of edits and rolls the Edit Log.    *    * @param numEdits number of Edits to perform    * @return the startTxId of next segment after rolling edits.    */
DECL|method|generateEditLog (int numEdits)
specifier|private
name|long
name|generateEditLog
parameter_list|(
name|int
name|numEdits
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|lastWrittenTxId
init|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|activeNNindex
argument_list|)
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numEdits
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to do an edit"
argument_list|,
name|doAnEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|activeNNindex
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
return|return
name|lastWrittenTxId
return|;
block|}
DECL|method|editLogExists (List<File> editLogs)
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|editLogExists
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|editLogs
parameter_list|)
block|{
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|supplier
init|=
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
for|for
control|(
name|File
name|editLog
range|:
name|editLogs
control|)
block|{
if|if
condition|(
operator|!
name|editLog
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
return|return
name|supplier
return|;
block|}
block|}
end_class

end_unit

