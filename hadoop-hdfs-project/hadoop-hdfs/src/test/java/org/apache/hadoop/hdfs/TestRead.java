begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedByInterruptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|SimulatedFSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
operator|.
name|ShortCircuitTestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRead
specifier|public
class|class
name|TestRead
block|{
DECL|field|BLOCK_SIZE
specifier|final
specifier|private
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|method|testEOF (MiniDFSCluster cluster, int fileLength)
specifier|private
name|void
name|testEOF
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|fileLength
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"testEOF."
operator|+
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|fileLength
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xBEEFBEEF
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|fis
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ByteBuffer
name|empty
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// A read into an empty bytebuffer at the beginning of the file gives 0.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|.
name|seek
argument_list|(
name|fileLength
argument_list|)
expr_stmt|;
comment|// A read into an empty bytebuffer at the end of the file gives -1.
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileLength
operator|>
name|BLOCK_SIZE
condition|)
block|{
name|fis
operator|.
name|seek
argument_list|(
name|fileLength
operator|-
name|BLOCK_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|dbb
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BLOCK_SIZE
operator|-
literal|1
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|dbb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEOFWithBlockReaderLocal ()
specifier|public
name|void
name|testEOFWithBlockReaderLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ShortCircuitTestContext
name|testContext
init|=
operator|new
name|ShortCircuitTestContext
argument_list|(
literal|"testEOFWithBlockReaderLocal"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|conf
init|=
name|testContext
operator|.
name|newConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEOFWithRemoteBlockReader ()
specifier|public
name|void
name|testEOFWithRemoteBlockReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Regression test for HDFS-7045.    * If deadlock happen, the test will time out.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReadReservedPath ()
specifier|public
name|void
name|testReadReservedPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved/.inodes/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Open a non existing file should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInterruptReader ()
specifier|public
name|void
name|testInterruptReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FSDATASET_FACTORY_KEY
argument_list|,
name|DelayedSimulatedFSDataset
operator|.
name|Factory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|readInterrupted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|reader
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|in
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ClosedByInterruptException
operator|||
name|e
operator|instanceof
name|InterruptedIOException
condition|)
block|{
name|readInterrupted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|reader
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|reader
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|readInterrupted
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DelayedSimulatedFSDataset
specifier|private
specifier|static
class|class
name|DelayedSimulatedFSDataset
extends|extends
name|SimulatedFSDataset
block|{
DECL|field|isDelayed
specifier|private
specifier|volatile
name|boolean
name|isDelayed
init|=
literal|true
decl_stmt|;
DECL|method|DelayedSimulatedFSDataset (DataNode datanode, DataStorage storage, Configuration conf)
name|DelayedSimulatedFSDataset
parameter_list|(
name|DataNode
name|datanode
parameter_list|,
name|DataStorage
name|storage
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|datanode
argument_list|,
name|storage
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlockInputStream (ExtendedBlock b, long seekOffset)
specifier|public
specifier|synchronized
name|InputStream
name|getBlockInputStream
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|isDelayed
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{         }
block|}
name|InputStream
name|result
init|=
name|super
operator|.
name|getBlockInputStream
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|result
argument_list|,
name|seekOffset
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|Factory
specifier|static
class|class
name|Factory
extends|extends
name|FsDatasetSpi
operator|.
name|Factory
argument_list|<
name|DelayedSimulatedFSDataset
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance (DataNode datanode, DataStorage storage, Configuration conf)
specifier|public
name|DelayedSimulatedFSDataset
name|newInstance
parameter_list|(
name|DataNode
name|datanode
parameter_list|,
name|DataStorage
name|storage
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DelayedSimulatedFSDataset
argument_list|(
name|datanode
argument_list|,
name|storage
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSimulated ()
specifier|public
name|boolean
name|isSimulated
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

