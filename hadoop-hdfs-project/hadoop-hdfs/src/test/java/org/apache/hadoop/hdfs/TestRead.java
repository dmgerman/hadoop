begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
operator|.
name|ShortCircuitTestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRead
specifier|public
class|class
name|TestRead
block|{
DECL|field|BLOCK_SIZE
specifier|final
specifier|private
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|method|testEOF (MiniDFSCluster cluster, int fileLength)
specifier|private
name|void
name|testEOF
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|int
name|fileLength
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"testEOF."
operator|+
name|fileLength
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|fileLength
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xBEEFBEEF
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|fis
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ByteBuffer
name|empty
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// A read into an empty bytebuffer at the beginning of the file gives 0.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|.
name|seek
argument_list|(
name|fileLength
argument_list|)
expr_stmt|;
comment|// A read into an empty bytebuffer at the end of the file gives -1.
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileLength
operator|>
name|BLOCK_SIZE
condition|)
block|{
name|fis
operator|.
name|seek
argument_list|(
name|fileLength
operator|-
name|BLOCK_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|dbb
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BLOCK_SIZE
operator|-
literal|1
argument_list|,
name|fis
operator|.
name|read
argument_list|(
name|dbb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEOFWithBlockReaderLocal ()
specifier|public
name|void
name|testEOFWithBlockReaderLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|ShortCircuitTestContext
name|testContext
init|=
operator|new
name|ShortCircuitTestContext
argument_list|(
literal|"testEOFWithBlockReaderLocal"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Configuration
name|conf
init|=
name|testContext
operator|.
name|newConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEOFWithRemoteBlockReader ()
specifier|public
name|void
name|testEOFWithRemoteBlockReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|testEOF
argument_list|(
name|cluster
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

