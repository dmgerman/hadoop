begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.top.window
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|MetricValueMap
import|;
end_import

begin_class
DECL|class|TestRollingWindowManager
specifier|public
class|class
name|TestRollingWindowManager
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|manager
name|RollingWindowManager
name|manager
decl_stmt|;
DECL|field|users
name|String
index|[]
name|users
decl_stmt|;
DECL|field|MIN_2_MS
specifier|final
specifier|static
name|int
name|MIN_2_MS
init|=
literal|60000
decl_stmt|;
DECL|field|WINDOW_LEN_MS
specifier|final
name|int
name|WINDOW_LEN_MS
init|=
literal|1
operator|*
name|MIN_2_MS
decl_stmt|;
DECL|field|BUCKET_CNT
specifier|final
name|int
name|BUCKET_CNT
init|=
literal|10
decl_stmt|;
DECL|field|N_TOP_USERS
specifier|final
name|int
name|N_TOP_USERS
init|=
literal|10
decl_stmt|;
DECL|field|BUCKET_LEN
specifier|final
name|int
name|BUCKET_LEN
init|=
name|WINDOW_LEN_MS
operator|/
name|BUCKET_CNT
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
argument_list|,
name|BUCKET_CNT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
argument_list|,
name|N_TOP_USERS
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|RollingWindowManager
argument_list|(
name|conf
argument_list|,
name|WINDOW_LEN_MS
argument_list|)
expr_stmt|;
name|users
operator|=
operator|new
name|String
index|[
literal|2
operator|*
name|N_TOP_USERS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|users
index|[
name|i
index|]
operator|=
literal|"user"
operator|+
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTops ()
specifier|public
name|void
name|testTops
parameter_list|()
block|{
name|long
name|time
init|=
name|WINDOW_LEN_MS
operator|+
name|BUCKET_LEN
operator|*
literal|3
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|manager
operator|.
name|recordMetric
argument_list|(
name|time
argument_list|,
literal|"open"
argument_list|,
name|users
index|[
name|i
index|]
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|time
operator|++
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|manager
operator|.
name|recordMetric
argument_list|(
name|time
argument_list|,
literal|"close"
argument_list|,
name|users
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|time
operator|++
expr_stmt|;
name|MetricValueMap
name|tops
init|=
name|manager
operator|.
name|snapshot
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of returned top metrics is invalid"
argument_list|,
literal|2
operator|*
operator|(
name|N_TOP_USERS
operator|+
literal|1
operator|)
argument_list|,
name|tops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|userIndex
init|=
name|users
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|String
name|metricName
init|=
name|RollingWindowManager
operator|.
name|createMetricName
argument_list|(
literal|"open"
argument_list|,
name|users
index|[
name|userIndex
index|]
argument_list|)
decl_stmt|;
name|boolean
name|includes
init|=
name|tops
operator|.
name|containsKey
argument_list|(
name|metricName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The order of entries in top metrics is wrong"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The reported value by top is different from recorded one"
argument_list|,
operator|(
name|userIndex
operator|+
literal|1
operator|)
operator|*
literal|2
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|tops
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// move the window forward not to see the "open" results
name|time
operator|+=
name|WINDOW_LEN_MS
operator|-
literal|2
expr_stmt|;
comment|// top should not include only "close" results
name|tops
operator|=
name|manager
operator|.
name|snapshot
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The number of returned top metrics is invalid"
argument_list|,
name|N_TOP_USERS
operator|+
literal|1
argument_list|,
name|tops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|includes
operator|=
name|tops
operator|.
name|containsKey
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"After rolling, the top list still includes the stale metrics"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|metricName
operator|=
name|RollingWindowManager
operator|.
name|createMetricName
argument_list|(
literal|"close"
argument_list|,
name|users
index|[
name|userIndex
index|]
argument_list|)
expr_stmt|;
name|includes
operator|=
name|tops
operator|.
name|containsKey
argument_list|(
name|metricName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The order of entries in top metrics is wrong"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The reported value by top is different from recorded one"
argument_list|,
operator|(
name|userIndex
operator|+
literal|1
operator|)
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|tops
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

