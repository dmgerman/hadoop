begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_BROWSER_USERAGENTS_REGEX_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Tests use of the cross-site-request forgery (CSRF) prevention filter with  * WebHDFS.  This is a parameterized test that covers various combinations of  * CSRF protection enabled or disabled at the NameNode, the DataNode and the  * WebHDFS client.  If the server is configured with CSRF prevention, but the  * client is not, then protected operations are expected to fail.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestWebHdfsWithRestCsrfPreventionFilter
specifier|public
class|class
name|TestWebHdfsWithRestCsrfPreventionFilter
block|{
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|Path
name|FILE
init|=
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
decl_stmt|;
DECL|field|nnRestCsrf
specifier|private
specifier|final
name|boolean
name|nnRestCsrf
decl_stmt|;
DECL|field|dnRestCsrf
specifier|private
specifier|final
name|boolean
name|dnRestCsrf
decl_stmt|;
DECL|field|clientRestCsrf
specifier|private
specifier|final
name|boolean
name|clientRestCsrf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
DECL|field|webhdfs
specifier|private
name|FileSystem
name|fs
decl_stmt|,
name|webhdfs
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|TestWebHdfsWithRestCsrfPreventionFilter (boolean nnRestCsrf, boolean dnRestCsrf, boolean clientRestCsrf)
specifier|public
name|TestWebHdfsWithRestCsrfPreventionFilter
parameter_list|(
name|boolean
name|nnRestCsrf
parameter_list|,
name|boolean
name|dnRestCsrf
parameter_list|,
name|boolean
name|clientRestCsrf
parameter_list|)
block|{
name|this
operator|.
name|nnRestCsrf
operator|=
name|nnRestCsrf
expr_stmt|;
name|this
operator|.
name|dnRestCsrf
operator|=
name|dnRestCsrf
expr_stmt|;
name|this
operator|.
name|clientRestCsrf
operator|=
name|clientRestCsrf
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
block|,
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|}
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|nnConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|nnConf
operator|.
name|setBoolean
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
argument_list|,
name|nnRestCsrf
argument_list|)
expr_stmt|;
comment|// Set configuration to treat anything as a browser, so that CSRF prevention
comment|// checks actually get enforced.
name|nnConf
operator|.
name|set
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_BROWSER_USERAGENTS_REGEX_KEY
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|nnConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Configuration
name|dnConf
init|=
operator|new
name|Configuration
argument_list|(
name|nnConf
argument_list|)
decl_stmt|;
name|dnConf
operator|.
name|setBoolean
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
argument_list|,
name|dnRestCsrf
argument_list|)
expr_stmt|;
comment|// By default the datanode loads the CSRF filter handler
name|dnConf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTPSERVER_FILTER_HANDLERS
argument_list|,
literal|"org.apache.hadoop.hdfs.server.datanode.web.RestCsrfPreventionFilterHandler"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|dnConf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|clientConf
operator|.
name|setBoolean
argument_list|(
name|DFS_WEBHDFS_REST_CSRF_ENABLED_KEY
argument_list|,
name|clientRestCsrf
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|webhdfs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"webhdfs://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|webhdfs
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create is a HTTP PUT that redirects from NameNode to DataNode, so we
comment|// expect CSRF prevention on either server to block an unconfigured client.
if|if
condition|(
operator|(
name|nnRestCsrf
operator|||
name|dnRestCsrf
operator|)
operator|&&
operator|!
name|clientRestCsrf
condition|)
block|{
name|expectException
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|createNewFile
argument_list|(
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|FILE
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// delete is an HTTP DELETE that executes solely within the NameNode as a
comment|// metadata operation, so we expect CSRF prevention configured on the
comment|// NameNode to block an unconfigured client.
if|if
condition|(
name|nnRestCsrf
operator|&&
operator|!
name|clientRestCsrf
condition|)
block|{
name|expectException
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|delete
argument_list|(
name|FILE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileStatus ()
specifier|public
name|void
name|testGetFileStatus
parameter_list|()
throws|throws
name|Exception
block|{
comment|// getFileStatus is an HTTP GET, not subject to CSRF prevention, so we
comment|// expect it to succeed always, regardless of CSRF configuration.
name|assertNotNull
argument_list|(
name|webhdfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncate ()
specifier|public
name|void
name|testTruncate
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|FILE
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// truncate is an HTTP POST that executes solely within the NameNode as a
comment|// metadata operation, so we expect CSRF prevention configured on the
comment|// NameNode to block an unconfigured client.
if|if
condition|(
name|nnRestCsrf
operator|&&
operator|!
name|clientRestCsrf
condition|)
block|{
name|expectException
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|webhdfs
operator|.
name|truncate
argument_list|(
name|FILE
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|expectException ()
specifier|private
name|void
name|expectException
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Missing Required Header"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

