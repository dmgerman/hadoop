begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * This class tests hflushing concurrently from many threads.  */
end_comment

begin_class
DECL|class|TestMultiThreadedHflush
specifier|public
class|class
name|TestMultiThreadedHflush
block|{
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|numBlocks
specifier|static
specifier|final
name|int
name|numBlocks
init|=
literal|10
decl_stmt|;
DECL|field|fileSize
specifier|static
specifier|final
name|int
name|fileSize
init|=
name|numBlocks
operator|*
name|blockSize
operator|+
literal|1
decl_stmt|;
DECL|field|NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|10
decl_stmt|;
DECL|field|WRITE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|WRITE_SIZE
init|=
literal|517
decl_stmt|;
DECL|field|NUM_WRITES_PER_THREAD
specifier|private
specifier|static
specifier|final
name|int
name|NUM_WRITES_PER_THREAD
init|=
literal|1000
decl_stmt|;
DECL|field|toWrite
specifier|private
name|byte
index|[]
name|toWrite
init|=
literal|null
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|InterDatanodeProtocol
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/*    * creates a file but does not close it    */
DECL|method|createFile (FileSystem fileSys, Path name, int repl)
specifier|private
name|FSDataOutputStream
name|createFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
return|return
name|stm
return|;
block|}
DECL|method|initBuffer (int size)
specifier|private
name|void
name|initBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|long
name|seed
init|=
name|AppendTestUtil
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|toWrite
operator|=
name|AppendTestUtil
operator|.
name|randomBytes
argument_list|(
name|seed
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|class|WriterThread
specifier|private
class|class
name|WriterThread
extends|extends
name|Thread
block|{
DECL|field|stm
specifier|private
specifier|final
name|FSDataOutputStream
name|stm
decl_stmt|;
DECL|field|thrown
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
decl_stmt|;
DECL|field|numWrites
specifier|private
specifier|final
name|int
name|numWrites
decl_stmt|;
DECL|field|countdown
specifier|private
specifier|final
name|CountDownLatch
name|countdown
decl_stmt|;
DECL|method|WriterThread (FSDataOutputStream stm, AtomicReference<Throwable> thrown, CountDownLatch countdown, int numWrites)
specifier|public
name|WriterThread
parameter_list|(
name|FSDataOutputStream
name|stm
parameter_list|,
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
parameter_list|,
name|CountDownLatch
name|countdown
parameter_list|,
name|int
name|numWrites
parameter_list|)
block|{
name|this
operator|.
name|stm
operator|=
name|stm
expr_stmt|;
name|this
operator|.
name|thrown
operator|=
name|thrown
expr_stmt|;
name|this
operator|.
name|numWrites
operator|=
name|numWrites
expr_stmt|;
name|this
operator|.
name|countdown
operator|=
name|countdown
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|countdown
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWrites
operator|&&
name|thrown
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|doAWrite
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doAWrite ()
specifier|private
name|void
name|doAWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|stm
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test case where a bunch of threads are both appending and flushing.    * They all finish before the file is closed.    */
annotation|@
name|Test
DECL|method|testMultipleHflushers ()
specifier|public
name|void
name|testMultipleHflushers
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/multiple-hflushers.dat"
argument_list|)
decl_stmt|;
try|try
block|{
name|doMultithreadedWrites
argument_list|(
name|conf
argument_list|,
name|p
argument_list|,
name|NUM_THREADS
argument_list|,
name|WRITE_SIZE
argument_list|,
name|NUM_WRITES_PER_THREAD
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test case where a bunch of threads are continuously calling hflush() while another    * thread appends some data and then closes the file.    *    * The hflushing threads should eventually catch an IOException stating that the stream    * was closed -- and not an NPE or anything like that.    */
annotation|@
name|Test
DECL|method|testHflushWhileClosing ()
specifier|public
name|void
name|testHflushWhileClosing
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/hflush-and-close.dat"
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|flushers
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|flusher
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ioe
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DFSOutputStream is closed"
argument_list|)
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|flusher
operator|.
name|start
argument_list|()
expr_stmt|;
name|flushers
operator|.
name|add
argument_list|(
name|flusher
argument_list|)
expr_stmt|;
block|}
comment|// Write some data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|stm
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Close it while the flushing threads are still flushing
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for the flushers to all die.
for|for
control|(
name|Thread
name|t
range|:
name|flushers
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// They should have all gotten the expected exception, not anything
comment|// else.
if|if
condition|(
name|thrown
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|thrown
operator|.
name|get
argument_list|()
throw|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doMultithreadedWrites ( Configuration conf, Path p, int numThreads, int bufferSize, int numWrites)
specifier|public
name|void
name|doMultithreadedWrites
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|p
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|numWrites
parameter_list|)
throws|throws
name|Exception
block|{
name|initBuffer
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
comment|// create a new file.
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|createFile
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created file simpleFlush.dat"
argument_list|)
expr_stmt|;
comment|// There have been a couple issues with flushing empty buffers, so do
comment|// some empty flushes first.
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|CountDownLatch
name|countdown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
init|=
operator|new
name|WriterThread
argument_list|(
name|stm
argument_list|,
name|thrown
argument_list|,
name|countdown
argument_list|,
name|numWrites
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Start all the threads at the same time for maximum raciness!
name|countdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|thrown
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Deferred"
argument_list|,
name|thrown
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Closed file."
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|TestMultiThreadedHflush
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<path to test file> "
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|TestMultiThreadedHflush
name|test
init|=
operator|new
name|TestMultiThreadedHflush
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|doMultithreadedWrites
argument_list|(
name|conf
argument_list|,
name|p
argument_list|,
literal|10
argument_list|,
literal|511
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|long
name|et
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finished in "
operator|+
operator|(
operator|(
name|et
operator|-
name|st
operator|)
operator|/
literal|1000000
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

