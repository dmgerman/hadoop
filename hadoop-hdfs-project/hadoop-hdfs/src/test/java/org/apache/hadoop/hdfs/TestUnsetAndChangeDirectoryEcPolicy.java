begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCodeNative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|NativeRSRawErasureCoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test unset and change directory's erasure coding policy.  */
end_comment

begin_class
DECL|class|TestUnsetAndChangeDirectoryEcPolicy
specifier|public
class|class
name|TestUnsetAndChangeDirectoryEcPolicy
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestUnsetAndChangeDirectoryEcPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
DECL|field|dataBlocks
specifier|private
specifier|final
name|short
name|dataBlocks
init|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
DECL|field|parityBlocks
specifier|private
specifier|final
name|short
name|parityBlocks
init|=
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
init|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
DECL|field|stripsPerBlock
specifier|private
specifier|final
name|int
name|stripsPerBlock
init|=
literal|2
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
init|=
name|stripsPerBlock
operator|*
name|cellSize
decl_stmt|;
DECL|field|blockGroupSize
specifier|private
specifier|final
name|int
name|blockGroupSize
init|=
name|dataBlocks
operator|*
name|blockSize
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErasureCodeNative
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CodecUtil
operator|.
name|IO_ERASURECODE_CODEC_RS_RAWCODER_KEY
argument_list|,
name|NativeRSRawErasureCoderFactory
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|dataBlocks
operator|+
name|parityBlocks
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/*    * Test unset EC policy on directory.    */
annotation|@
name|Test
DECL|method|testUnsetEcPolicy ()
specifier|public
name|void
name|testUnsetEcPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
name|numBlocks
decl_stmt|;
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecFilePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"ec_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicateFilePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"3x_file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
comment|// Test unset a directory which has no EC policy
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
comment|// Set EC policy on directory
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicateFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// ec_file should has EC policy
name|ErasureCodingPolicy
name|tempEcPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// rep_file should not have EC policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicateFilePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Replicate file should not have erasure coding policy!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
comment|// Directory should not return erasure coding policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Directory should no have erasure coding policy set!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*   * Test nested directory with different EC policy.   */
annotation|@
name|Test
DECL|method|testNestedEcPolicy ()
specifier|public
name|void
name|testNestedEcPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
name|numBlocks
decl_stmt|;
specifier|final
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec-6-3"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
literal|"/ec-6-3/ec-3-2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ec63FilePath
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"ec_6_3_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ec32FilePath
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"ec_3_2_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ec63FilePath2
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"ec_6_3_file_2"
argument_list|)
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ec32Policy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getPolicyByPolicyID
argument_list|(
name|HdfsConstants
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|parentDir
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
comment|// Create RS(6,3) EC policy file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ec63FilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Set RS(3,2) EC policy on child directory
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|childDir
argument_list|,
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create RS(3,2) EC policy file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ec32FilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Start to check
comment|// ec_6_3_file should has RS-6-3 EC policy
name|ErasureCodingPolicy
name|tempEcPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ec63FilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ec_3_2_file should have RS-3-2 policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ec32FilePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Child directory should have RS-3-2 policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory should have erasure coding policy set!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unset EC policy on child directory
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ec63FilePath2
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// ec_6_3_file_2 should have RS-6-3 policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ec63FilePath2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Child directory should have RS-6-3 policy now
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory should have erasure coding policy set!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test unset EC policy on root directory.    */
annotation|@
name|Test
DECL|method|testUnsetRootDirEcPolicy ()
specifier|public
name|void
name|testUnsetRootDirEcPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
name|numBlocks
decl_stmt|;
specifier|final
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecFilePath
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"ec_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicateFilePath
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"rep_file"
argument_list|)
decl_stmt|;
comment|// Test unset root path which has no EC policy
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
comment|// Set EC policy on root path
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicateFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// ec_file should has EC policy set
name|ErasureCodingPolicy
name|tempEcPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// rep_file should not have EC policy set
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicateFilePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Replicate file should not have erasure coding policy!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
comment|// Directory should not return erasure coding policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Directory should not have erasure coding policy set!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*   * Test change EC policy on root directory.   */
annotation|@
name|Test
DECL|method|testChangeRootDirEcPolicy ()
specifier|public
name|void
name|testChangeRootDirEcPolicy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
name|numBlocks
decl_stmt|;
specifier|final
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ec63FilePath
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"ec_6_3_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ec32FilePath
init|=
operator|new
name|Path
argument_list|(
name|rootPath
argument_list|,
literal|"ec_3_2_file"
argument_list|)
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ec32Policy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getPolicyByPolicyID
argument_list|(
name|HdfsConstants
operator|.
name|RS_3_2_POLICY_ID
argument_list|)
decl_stmt|;
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create RS(6,3) EC policy file
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ec63FilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Change EC policy from RS(6,3) to RS(3,2)
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|,
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ec32FilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// start to check
comment|// ec_6_3_file should has RS-6-3 ec policy set
name|ErasureCodingPolicy
name|tempEcPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ec63FilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ec_3_2_file should have RS-3-2 policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ec32FilePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Root directory should have RS-3-2 policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Directory should have erasure coding policy!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ec32Policy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|rootPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test different replica factor files.    */
annotation|@
name|Test
DECL|method|testDifferentReplicaFactor ()
specifier|public
name|void
name|testDifferentReplicaFactor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
name|numBlocks
decl_stmt|;
specifier|final
name|Path
name|ecDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|ecFilePath
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"ec_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicateFilePath
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"rep_file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|replicateFilePath2
init|=
operator|new
name|Path
argument_list|(
name|ecDirPath
argument_list|,
literal|"rep_file2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ecDirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecDirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecDirPath
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicateFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|replicateFilePath2
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// ec_file should has EC policy set
name|ErasureCodingPolicy
name|tempEcPolicy
init|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecFilePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Erasure coding policy mismatch!"
argument_list|,
name|tempEcPolicy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// rep_file should not have EC policy set
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicateFilePath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Replicate file should not have erasure coding policy!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|replicateFilePath2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Replicate file should not have erasure coding policy!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
comment|// Directory should not return erasure coding policy
name|tempEcPolicy
operator|=
name|fs
operator|.
name|getErasureCodingPolicy
argument_list|(
name|ecDirPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Directory should not have erasure coding policy set!"
argument_list|,
name|tempEcPolicy
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|ecDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test set and unset EC policy on directory doesn't exist.    */
annotation|@
name|Test
DECL|method|testNonExistentDir ()
specifier|public
name|void
name|testNonExistentDir
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
comment|// Unset EC policy on non-existent directory
try|try
block|{
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|dirPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Set EC policy on non-existent directory
try|try
block|{
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileNotFoundException should be thrown for a non-existent"
operator|+
literal|" file path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Path not found: "
operator|+
name|dirPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test set and unset EC policy on file.    */
annotation|@
name|Test
DECL|method|testEcPolicyOnFile ()
specifier|public
name|void
name|testEcPolicyOnFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|ecFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/striped_file"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fileLen
init|=
name|blockGroupSize
operator|*
literal|2
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ecFilePath
argument_list|,
name|fileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Set EC policy on file
try|try
block|{
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|ecFilePath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IOException should be thrown for setting EC policy on file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Attempt to set an erasure coding policy "
operator|+
literal|"for a file "
operator|+
name|ecFilePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Unset EC policy on file
try|try
block|{
name|fs
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|ecFilePath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IOException should be thrown for unsetting EC policy on file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Cannot unset an erasure coding policy on a file "
operator|+
name|ecFilePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

