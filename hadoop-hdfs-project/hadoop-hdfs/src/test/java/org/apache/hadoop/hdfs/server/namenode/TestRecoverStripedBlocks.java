begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|BlockECRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CHUNK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|EC_STORAGE_POLICY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestRecoverStripedBlocks
specifier|public
class|class
name|TestRecoverStripedBlocks
block|{
DECL|field|GROUP_SIZE
specifier|private
specifier|final
name|short
name|GROUP_SIZE
init|=
name|NUM_DATA_BLOCKS
operator|+
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dirPath
specifier|private
specifier|final
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
DECL|field|filePath
specifier|private
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Large value to make sure the pending replication request can stay in
comment|// DatanodeDescriptor.replicateBlocks before test timeout.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Make sure BlockManager can pull all blocks from UnderReplicatedBlocks via
comment|// chooseUnderReplicatedBlocks at once.
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|GROUP_SIZE
operator|+
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createECFile (MiniDFSCluster cluster, Path file, Path dir, int numBlocks)
specifier|public
specifier|static
name|void
name|createECFile
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|file
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|Exception
block|{
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|EC_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// create an empty file
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsdir
init|=
name|ns
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|newBlock
init|=
name|createBlock
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
argument_list|,
name|ns
argument_list|,
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|fileNode
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|previous
argument_list|)
decl_stmt|;
name|previous
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|ns
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|newBlock
argument_list|)
expr_stmt|;
block|}
name|ns
operator|.
name|completeFile
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|previous
argument_list|,
name|fileNode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createBlock (List<DataNode> dataNodes, FSNamesystem ns, String file, INodeFile fileNode, String clientName, ExtendedBlock previous)
specifier|static
name|Block
name|createBlock
parameter_list|(
name|List
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
parameter_list|,
name|FSNamesystem
name|ns
parameter_list|,
name|String
name|file
parameter_list|,
name|INodeFile
name|fileNode
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|)
throws|throws
name|Exception
block|{
name|ns
operator|.
name|getAdditionalBlock
argument_list|(
name|file
argument_list|,
name|fileNode
operator|.
name|getId
argument_list|()
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|BlockInfo
name|lastBlock
init|=
name|fileNode
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
specifier|final
name|int
name|groupSize
init|=
name|fileNode
operator|.
name|getBlockReplication
argument_list|()
decl_stmt|;
comment|// 1. RECEIVING_BLOCK IBR
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|i
operator|<
name|groupSize
condition|)
block|{
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
operator|++
argument_list|,
literal|0
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|block
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReceivedDeletedBlocks
name|report
range|:
name|reports
control|)
block|{
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// 2. RECEIVED_BLOCK IBR
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
if|if
condition|(
name|i
operator|<
name|groupSize
condition|)
block|{
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
operator|++
argument_list|,
name|BLOCK_STRIPED_CHUNK_SIZE
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|block
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReceivedDeletedBlocks
name|report
range|:
name|reports
control|)
block|{
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|lastBlock
operator|.
name|setNumBytes
argument_list|(
name|BLOCK_STRIPED_CHUNK_SIZE
operator|*
name|NUM_DATA_BLOCKS
argument_list|)
expr_stmt|;
return|return
name|lastBlock
return|;
block|}
annotation|@
name|Test
DECL|method|testMissingStripedBlock ()
specifier|public
name|void
name|testMissingStripedBlock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|4
decl_stmt|;
name|createECFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
name|dirPath
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
comment|// make sure the file is complete in NN
specifier|final
name|INodeFile
name|fileNode
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|fileNode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileNode
operator|.
name|isWithStripedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numBlocks
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockInfo
name|blk
range|:
name|blocks
control|)
block|{
name|assertTrue
argument_list|(
name|blk
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blk
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_STRIPED_CHUNK_SIZE
operator|*
name|NUM_DATA_BLOCKS
argument_list|,
name|blk
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BlockInfoStriped
name|sb
init|=
operator|(
name|BlockInfoStriped
operator|)
name|blk
decl_stmt|;
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|sb
operator|.
name|numNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockManager
name|bm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|BlockInfo
name|firstBlock
init|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|storageInfos
init|=
name|bm
operator|.
name|getStorages
argument_list|(
name|firstBlock
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|secondDn
init|=
name|storageInfos
index|[
literal|1
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numBlocks
argument_list|,
name|secondDn
operator|.
name|numBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|removeDatanode
argument_list|(
name|secondDn
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|bm
argument_list|)
expr_stmt|;
comment|// all the recovery work will be scheduled on the last DN
name|DataNode
name|lastDn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|GROUP_SIZE
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|last
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|lastDn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Counting the number of outstanding EC tasks"
argument_list|,
name|numBlocks
argument_list|,
name|last
operator|.
name|getNumberOfBlocksToBeErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BlockECRecoveryInfo
argument_list|>
name|recovery
init|=
name|last
operator|.
name|getErasureCodeCommand
argument_list|(
name|numBlocks
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockECRecoveryInfo
name|info
range|:
name|recovery
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|info
operator|.
name|targets
index|[
literal|0
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GROUP_SIZE
operator|-
literal|1
argument_list|,
name|info
operator|.
name|sources
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GROUP_SIZE
operator|-
literal|1
argument_list|,
name|info
operator|.
name|liveBlockIndices
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

