begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPathNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPoolNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|PoolWritePermissionDeniedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|InvalidIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|NoSuchIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_class
DECL|class|TestPathBasedCacheRequests
specifier|public
class|class
name|TestPathBasedCacheRequests
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPathBasedCacheRequests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unprivilegedUser
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|unprivilegedUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unprivilegedUser"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|static
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|static
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|proto
specifier|static
specifier|private
name|NamenodeProtocols
name|proto
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// set low limits here for testing purposes
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|proto
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasicPoolOperations ()
specifier|public
name|void
name|testBasicPoolOperations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"bob"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"bobgroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|150
argument_list|)
decl_stmt|;
comment|// Add a pool
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some bad addCachePools
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added the pool with the same name twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"pool1 already exists"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Modify the pool
name|info
operator|.
name|setOwnerName
argument_list|(
literal|"jane"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"janegroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|314
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some invalid modify pools
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"fool"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified non-existent cache pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"fool does not exist"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Remove the pool
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
comment|// Do some bad removePools
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateAndModifyPools ()
specifier|public
name|void
name|testCreateAndModifyPools
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"abc"
decl_stmt|;
name|String
name|groupName
init|=
literal|"123"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
literal|150
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolInfo
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|info
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|ownerName
operator|=
literal|"def"
expr_stmt|;
name|groupName
operator|=
literal|"456"
expr_stmt|;
name|mode
operator|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
expr_stmt|;
name|weight
operator|=
literal|151
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|info
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|weight
argument_list|)
argument_list|,
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|listCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateListAll ( RemoteIterator<PathBasedCacheDescriptor> iter, PathBasedCacheDescriptor... descriptors)
specifier|private
specifier|static
name|void
name|validateListAll
parameter_list|(
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|iter
parameter_list|,
name|PathBasedCacheDescriptor
modifier|...
name|descriptors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|PathBasedCacheDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpectedly few elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected descriptor"
argument_list|,
name|descriptor
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpectedly many list elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addAsUnprivileged ( final PathBasedCacheDirective directive)
specifier|private
specifier|static
name|PathBasedCacheDescriptor
name|addAsUnprivileged
parameter_list|(
specifier|final
name|PathBasedCacheDirective
name|directive
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|unprivilegedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PathBasedCacheDescriptor
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|myDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|myDfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddRemoveDirectives ()
specifier|public
name|void
name|testAddRemoveDirectives
parameter_list|()
throws|throws
name|Exception
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool3"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PathBasedCacheDirective
name|alpha
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|beta
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/beta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|delta
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/delta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDescriptor
name|alphaD
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|PathBasedCacheDescriptor
name|alphaD2
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to get the same descriptor when re-adding"
operator|+
literal|"an existing PathBasedCacheDirective"
argument_list|,
name|alphaD
argument_list|,
name|alphaD2
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|betaD
init|=
name|addAsUnprivileged
argument_list|(
name|beta
argument_list|)
decl_stmt|;
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/unicorn"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"no_such_pool"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidPoolNameError
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/blackhole"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a pool with "
operator|+
literal|"mode 0 (no permissions for anyone)."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|PoolWritePermissionDeniedError
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/illegal:path/"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding a malformed path "
operator|+
literal|"to the cache directives."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/emptypoolname"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|setPool
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when adding a PathBasedCache "
operator|+
literal|"directive with an empty pool name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidPoolNameError
argument_list|)
expr_stmt|;
block|}
name|PathBasedCacheDescriptor
name|deltaD
init|=
name|addAsUnprivileged
argument_list|(
name|delta
argument_list|)
decl_stmt|;
comment|// We expect the following to succeed, because DistributedFileSystem
comment|// qualifies the path.
name|PathBasedCacheDescriptor
name|relativeD
init|=
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"relative"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|iter
decl_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaD
argument_list|,
name|betaD
argument_list|,
name|deltaD
argument_list|,
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaD
argument_list|,
name|deltaD
argument_list|,
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|betaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|betaD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|betaD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|NoSuchIdException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
operator|-
literal|42l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a negative ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidIdException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
literal|43l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|NoSuchIdException
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|alphaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|deltaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCacheManagerRestart ()
specifier|public
name|void
name|testCacheManagerRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|createCachingConf
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Create and validate a pool
specifier|final
name|String
name|pool
init|=
literal|"poolparty"
decl_stmt|;
name|String
name|groupName
init|=
literal|"partygroup"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
literal|747
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolInfo
argument_list|>
name|pit
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|info
init|=
name|pit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|weight
argument_list|,
operator|(
name|int
operator|)
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create some cache entries
name|int
name|numEntries
init|=
literal|10
decl_stmt|;
name|String
name|entryPrefix
init|=
literal|"/party-"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|dfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|dit
init|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache descriptors found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart namenode
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
comment|// Check that state came back up
name|pit
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|pit
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|weight
argument_list|,
operator|(
name|int
operator|)
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected # of cache pools found"
argument_list|,
name|pit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|dit
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected # of cache entries: "
operator|+
name|i
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|cd
init|=
name|dit
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cd
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entryPrefix
operator|+
name|i
argument_list|,
name|cd
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
argument_list|,
name|cd
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpected # of cache descriptors found"
argument_list|,
name|dit
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForCachedBlocks (NameNode nn, final int expectedCachedBlocks, final int expectedCachedReplicas)
specifier|private
specifier|static
name|void
name|waitForCachedBlocks
parameter_list|(
name|NameNode
name|nn
parameter_list|,
specifier|final
name|int
name|expectedCachedBlocks
parameter_list|,
specifier|final
name|int
name|expectedCachedReplicas
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FSNamesystem
name|namesystem
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|CacheManager
name|cacheManager
init|=
name|namesystem
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|expectedCachedBlocks
operator|+
literal|" blocks with "
operator|+
name|expectedCachedReplicas
operator|+
literal|" replicas."
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|int
name|numCachedBlocks
init|=
literal|0
decl_stmt|,
name|numCachedReplicas
init|=
literal|0
decl_stmt|;
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
init|=
name|cacheManager
operator|.
name|getCachedBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedBlocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|iter
init|=
name|cachedBlocks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CachedBlock
name|cachedBlock
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|numCachedBlocks
operator|++
expr_stmt|;
name|numCachedReplicas
operator|+=
name|cachedBlock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|numCachedBlocks
operator|==
name|expectedCachedBlocks
operator|)
operator|&&
operator|(
name|numCachedReplicas
operator|==
name|expectedCachedReplicas
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"cached blocks: have "
operator|+
name|numCachedBlocks
operator|+
literal|" / "
operator|+
name|expectedCachedBlocks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cached replicas: have "
operator|+
name|numCachedReplicas
operator|+
literal|" / "
operator|+
name|expectedCachedReplicas
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
argument_list|,
literal|500
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|4
decl_stmt|;
comment|// Most Linux installs will allow non-root users to lock 64KB.
DECL|field|CACHE_CAPACITY
specifier|private
specifier|static
specifier|final
name|long
name|CACHE_CAPACITY
init|=
literal|64
operator|*
literal|1024
operator|/
name|NUM_DATANODES
decl_stmt|;
comment|/**    * Return true if we can test DN caching.    */
DECL|method|canTestDatanodeCaching ()
specifier|private
specifier|static
name|boolean
name|canTestDatanodeCaching
parameter_list|()
block|{
if|if
condition|(
operator|!
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
comment|// Need NativeIO in order to cache blocks on the DN.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|NativeIO
operator|.
name|getMemlockLimit
argument_list|()
operator|<
name|CACHE_CAPACITY
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|createCachingConf ()
specifier|private
specifier|static
name|HdfsConfiguration
name|createCachingConf
parameter_list|()
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DATANODE_MAX_LOCKED_MEMORY_KEY
argument_list|,
name|CACHE_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_CACHEREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWaitForCachedReplicas ()
specifier|public
name|void
name|testWaitForCachedReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|canTestDatanodeCaching
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsConfiguration
name|conf
init|=
name|createCachingConf
argument_list|()
decl_stmt|;
name|FileSystemTestHelper
name|helper
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|nnRpc
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|helper
operator|.
name|getDefaultWorkingDirectory
argument_list|(
name|dfs
argument_list|)
decl_stmt|;
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
name|nnRpc
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"friendlyPool"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|int
name|numFiles
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"testCachePaths-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the initial statistics at the namenode
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Cache and check each path in sequence
name|int
name|expected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|PathBasedCacheDirective
name|directive
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDescriptor
name|descriptor
init|=
name|nnRpc
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Descriptor does not match requested path"
argument_list|,
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|descriptor
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Descriptor does not match requested pool"
argument_list|,
name|pool
argument_list|,
name|descriptor
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|+=
name|numBlocksPerFile
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// Uncache and check each path in sequence
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|entries
init|=
name|nnRpc
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|PathBasedCacheDescriptor
name|descriptor
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|nnRpc
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|descriptor
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|-=
name|numBlocksPerFile
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testAddingPathBasedCacheDirectivesWhenCachingIsDisabled ()
specifier|public
name|void
name|testAddingPathBasedCacheDirectivesWhenCachingIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|createCachingConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
comment|// Create the pool
name|String
name|pool
init|=
literal|"pool1"
decl_stmt|;
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|int
name|numFiles
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testCachePaths-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the initial statistics at the namenode
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Cache and check each path in sequence
name|int
name|expected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|PathBasedCacheDirective
name|directive
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWaitForCachedReplicasInDirectory ()
specifier|public
name|void
name|testWaitForCachedReplicasInDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|canTestDatanodeCaching
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsConfiguration
name|conf
init|=
name|createCachingConf
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
comment|// Create the pool
specifier|final
name|String
name|pool
init|=
literal|"friendlyPool"
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|pool
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create some test files
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|LinkedList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2/baz2"
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numBlocksPerFile
init|=
literal|2
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|numBlocksPerFile
argument_list|,
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// cache entire directory
name|PathBasedCacheDescriptor
name|descriptor
init|=
name|dfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Descriptor does not match requested pool"
argument_list|,
name|pool
argument_list|,
name|descriptor
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// remove and watch numCached go to 0
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|waitForCachedBlocks
argument_list|(
name|namenode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

