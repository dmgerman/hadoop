begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPathNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPoolNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|PoolWritePermissionDeniedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|InvalidIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|NoSuchIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPathBasedCacheRequests
specifier|public
class|class
name|TestPathBasedCacheRequests
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPathBasedCacheRequests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|unprivilegedUser
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|unprivilegedUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unprivilegedUser"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|static
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|static
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|static
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|proto
specifier|static
specifier|private
name|NamenodeProtocols
name|proto
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// set low limits here for testing purposes
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|proto
operator|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBasicPoolOperations ()
specifier|public
name|void
name|testBasicPoolOperations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"bob"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"bobgroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|150
argument_list|)
decl_stmt|;
comment|// Add a pool
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some bad addCachePools
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added the pool with the same name twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"pool1 already exists"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"added null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Modify the pool
name|info
operator|.
name|setOwnerName
argument_list|(
literal|"jane"
argument_list|)
operator|.
name|setGroupName
argument_list|(
literal|"janegroup"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|314
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// Do some invalid modify pools
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"fool"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified non-existent cache pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"fool does not exist"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|modifyCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"modified null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"CachePoolInfo is null"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Remove the pool
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
comment|// Do some bad removePools
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove "
operator|+
literal|"non-existent cache pool"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed empty pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"removed null pool"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"invalid empty cache pool name"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAndModifyPools ()
specifier|public
name|void
name|testCreateAndModifyPools
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|poolName
init|=
literal|"pool1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"abc"
decl_stmt|;
name|String
name|groupName
init|=
literal|"123"
decl_stmt|;
name|FsPermission
name|mode
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
name|int
name|weight
init|=
literal|150
decl_stmt|;
name|dfs
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|CachePoolInfo
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|info
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|ownerName
operator|=
literal|"def"
expr_stmt|;
name|groupName
operator|=
literal|"456"
expr_stmt|;
name|mode
operator|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
expr_stmt|;
name|weight
operator|=
literal|151
expr_stmt|;
name|dfs
operator|.
name|modifyCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|info
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ownerName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupName
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|weight
argument_list|)
argument_list|,
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|listCachePools
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
literal|"pool99"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected to get an exception when "
operator|+
literal|"removing a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"can't remove non-existent"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|dfs
operator|.
name|listCachePools
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected no cache pools after deleting pool"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateListAll ( RemoteIterator<PathBasedCacheDescriptor> iter, PathBasedCacheDescriptor... descriptors)
specifier|private
specifier|static
name|void
name|validateListAll
parameter_list|(
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|iter
parameter_list|,
name|PathBasedCacheDescriptor
modifier|...
name|descriptors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|PathBasedCacheDescriptor
name|descriptor
range|:
name|descriptors
control|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpectedly few elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected descriptor"
argument_list|,
name|descriptor
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Unexpectedly many list elements"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addAsUnprivileged ( final PathBasedCacheDirective directive)
specifier|private
specifier|static
name|PathBasedCacheDescriptor
name|addAsUnprivileged
parameter_list|(
specifier|final
name|PathBasedCacheDirective
name|directive
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|unprivilegedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PathBasedCacheDescriptor
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|myDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|myDfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testAddRemoveDirectives ()
specifier|public
name|void
name|testAddRemoveDirectives
parameter_list|()
throws|throws
name|Exception
block|{
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool3"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|proto
operator|.
name|addCachePool
argument_list|(
operator|new
name|CachePoolInfo
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PathBasedCacheDirective
name|alpha
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/alpha"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|beta
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/beta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|delta
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/delta"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PathBasedCacheDescriptor
name|alphaD
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|PathBasedCacheDescriptor
name|alphaD2
init|=
name|addAsUnprivileged
argument_list|(
name|alpha
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to get the same descriptor when re-adding"
operator|+
literal|"an existing PathBasedCacheDirective"
argument_list|,
name|alphaD
argument_list|,
name|alphaD2
argument_list|)
expr_stmt|;
name|PathBasedCacheDescriptor
name|betaD
init|=
name|addAsUnprivileged
argument_list|(
name|beta
argument_list|)
decl_stmt|;
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/unicorn"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"no_such_pool"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a non-existent pool."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidPoolNameError
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/blackhole"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool4"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding to a pool with "
operator|+
literal|"mode 0 (no permissions for anyone)."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|PoolWritePermissionDeniedError
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/illegal:path/"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an error when adding a malformed path "
operator|+
literal|"to the cache directives."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/emptypoolname"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when adding a PathBasedCache "
operator|+
literal|"directive with an empty pool name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidPoolNameError
argument_list|)
expr_stmt|;
block|}
name|PathBasedCacheDescriptor
name|deltaD
init|=
name|addAsUnprivileged
argument_list|(
name|delta
argument_list|)
decl_stmt|;
comment|// We expect the following to succeed, because DistributedFileSystem
comment|// qualifies the path.
name|PathBasedCacheDescriptor
name|relativeD
init|=
name|addAsUnprivileged
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"relative"
argument_list|)
argument_list|)
operator|.
name|setPool
argument_list|(
literal|"pool1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|iter
decl_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaD
argument_list|,
name|betaD
argument_list|,
name|deltaD
argument_list|,
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool3"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|alphaD
argument_list|,
name|deltaD
argument_list|,
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|validateListAll
argument_list|(
name|iter
argument_list|,
name|betaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|betaD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|"pool2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|betaD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|NoSuchIdException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
operator|-
literal|42l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a negative ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InvalidIdException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|proto
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
literal|43l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected an error when removing a non-existent ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|NoSuchIdException
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|alphaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|deltaD
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|removePathBasedCacheDescriptor
argument_list|(
name|relativeD
argument_list|)
expr_stmt|;
name|iter
operator|=
name|dfs
operator|.
name|listPathBasedCacheDescriptors
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

