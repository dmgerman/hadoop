begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSymlinkHdfsFileSystem
specifier|public
class|class
name|TestSymlinkHdfsFileSystem
extends|extends
name|TestSymlinkHdfs
block|{
annotation|@
name|BeforeClass
DECL|method|testSetup ()
specifier|public
specifier|static
name|void
name|testSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|wrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|dfs
argument_list|,
literal|"/tmp/TestSymlinkHdfsFileSystem"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Ignore
argument_list|(
literal|"FileSystem adds missing authority in absolute URIs"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCreateWithPartQualPathFails ()
specifier|public
name|void
name|testCreateWithPartQualPathFails
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"FileSystem#create creates parent directories,"
operator|+
literal|" so dangling links to directories are created"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCreateFileViaDanglingLinkParent ()
specifier|public
name|void
name|testCreateFileViaDanglingLinkParent
parameter_list|()
throws|throws
name|IOException
block|{}
comment|// Additional tests for DFS-only methods
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRecoverLease ()
specifier|public
name|void
name|testRecoverLease
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|createAndWriteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Attempt recoverLease through a symlink
name|boolean
name|closed
init|=
name|dfs
operator|.
name|recoverLease
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected recoverLease to return true"
argument_list|,
name|closed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testIsFileClosed ()
specifier|public
name|void
name|testIsFileClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|createAndWriteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Attempt recoverLease through a symlink
name|boolean
name|closed
init|=
name|dfs
operator|.
name|isFileClosed
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected isFileClosed to return true"
argument_list|,
name|closed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir2
argument_list|()
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|dir2
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Concat with a target and srcs through a link
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|link
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|createAndWriteFile
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|link
argument_list|,
literal|"src-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|createAndWriteFile
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|concat
argument_list|(
name|target
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSnapshot ()
specifier|public
name|void
name|testSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir1
argument_list|()
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|testBaseDir2
argument_list|()
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|createSymlink
argument_list|(
name|dir2
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|disallowSnapshot
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|link
argument_list|,
literal|"mcmillan"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|renameSnapshot
argument_list|(
name|link
argument_list|,
literal|"mcmillan"
argument_list|,
literal|"seaborg"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|deleteSnapshot
argument_list|(
name|link
argument_list|,
literal|"seaborg"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

