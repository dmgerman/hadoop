begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestRollingUpgrade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockLocalPathInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Ensure that the DataNode correctly handles rolling upgrade  * finalize and rollback.  */
end_comment

begin_class
DECL|class|TestDataNodeRollingUpgrade
specifier|public
class|class
name|TestDataNodeRollingUpgrade
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDataNodeRollingUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
specifier|final
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|FILE_SIZE
init|=
name|BLOCK_SIZE
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0x1BADF00DL
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|dn
name|DataNode
name|dn
init|=
literal|null
decl_stmt|;
DECL|field|nn
name|NameNode
name|nn
init|=
literal|null
decl_stmt|;
DECL|field|blockPoolId
name|String
name|blockPoolId
init|=
literal|null
decl_stmt|;
DECL|method|startCluster ()
specifier|private
name|void
name|startCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|dn
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|blockPoolId
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdownCluster ()
specifier|private
name|void
name|shutdownCluster
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|fs
operator|=
literal|null
expr_stmt|;
name|nn
operator|=
literal|null
expr_stmt|;
name|dn
operator|=
literal|null
expr_stmt|;
name|blockPoolId
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|triggerHeartBeats ()
specifier|private
name|void
name|triggerHeartBeats
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Sleep briefly so that DN learns of the rolling upgrade
comment|// state and other states from heartbeats.
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
comment|/** Test assumes that the file has a single block */
DECL|method|getBlockForFile (Path path, boolean exists)
specifier|private
name|File
name|getBlockForFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|exists
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlocks
name|blocks
init|=
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|block
init|=
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|BlockLocalPathInfo
name|bInfo
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
operator|new
name|File
argument_list|(
name|bInfo
operator|.
name|getBlockPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exists
argument_list|,
name|blockFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|blockFile
return|;
block|}
DECL|method|getTrashFileForBlock (File blockFile, boolean exists)
specifier|private
name|File
name|getTrashFileForBlock
parameter_list|(
name|File
name|blockFile
parameter_list|,
name|boolean
name|exists
parameter_list|)
block|{
name|File
name|trashFile
init|=
operator|new
name|File
argument_list|(
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|getTrashDirectoryForBlockFile
argument_list|(
name|blockPoolId
argument_list|,
name|blockFile
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exists
argument_list|,
name|trashFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|trashFile
return|;
block|}
comment|/**    * Ensures that the blocks belonging to the deleted file are in trash    */
DECL|method|deleteAndEnsureInTrash (Path pathToDelete, File blockFile, File trashFile)
specifier|private
name|void
name|deleteAndEnsureInTrash
parameter_list|(
name|Path
name|pathToDelete
parameter_list|,
name|File
name|blockFile
parameter_list|,
name|File
name|trashFile
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|blockFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trashFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now delete the file and ensure the corresponding block in trash
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting file "
operator|+
name|pathToDelete
operator|+
literal|" during rolling upgrade"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|pathToDelete
argument_list|,
literal|false
argument_list|)
expr_stmt|;
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|pathToDelete
argument_list|)
operator|)
assert|;
name|triggerHeartBeats
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|trashFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|blockFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureTrashDisabled ()
specifier|private
name|void
name|ensureTrashDisabled
parameter_list|()
block|{
comment|// Trash is disabled; trash root does not exist
name|assertFalse
argument_list|(
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|trashEnabled
argument_list|(
name|blockPoolId
argument_list|)
argument_list|)
expr_stmt|;
name|BlockPoolSliceStorage
name|bps
init|=
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|getBPStorage
argument_list|(
name|blockPoolId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bps
operator|.
name|trashEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures that the blocks from trash are restored    */
DECL|method|ensureTrashRestored (File blockFile, File trashFile)
specifier|private
name|void
name|ensureTrashRestored
parameter_list|(
name|File
name|blockFile
parameter_list|,
name|File
name|trashFile
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|blockFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|trashFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ensureTrashDisabled
argument_list|()
expr_stmt|;
block|}
DECL|method|startRollingUpgrade ()
specifier|private
name|void
name|startRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rolling upgrade"
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsadmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TestRollingUpgrade
operator|.
name|runCmd
argument_list|(
name|dfsadmin
argument_list|,
literal|true
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"prepare"
argument_list|)
expr_stmt|;
name|triggerHeartBeats
argument_list|()
expr_stmt|;
comment|// Ensure datanode rolling upgrade is started
name|assertTrue
argument_list|(
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|trashEnabled
argument_list|(
name|blockPoolId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|finalizeRollingUpgrade ()
specifier|private
name|void
name|finalizeRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalizing rolling upgrade"
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsadmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TestRollingUpgrade
operator|.
name|runCmd
argument_list|(
name|dfsadmin
argument_list|,
literal|true
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"finalize"
argument_list|)
expr_stmt|;
name|triggerHeartBeats
argument_list|()
expr_stmt|;
comment|// Ensure datanode rolling upgrade is started
name|assertFalse
argument_list|(
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|trashEnabled
argument_list|(
name|blockPoolId
argument_list|)
argument_list|)
expr_stmt|;
name|BlockPoolSliceStorage
name|bps
init|=
name|dn
operator|.
name|getStorage
argument_list|()
operator|.
name|getBPStorage
argument_list|(
name|blockPoolId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bps
operator|.
name|trashEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|rollbackRollingUpgrade ()
specifier|private
name|void
name|rollbackRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Shutdown datanodes and namenodes
comment|// Restart the namenode with rolling upgrade rollback
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rollback of the rolling upgrade"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dnprop
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdownNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|"-rollingupgrade"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnprop
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|nn
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dn
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|triggerHeartBeats
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testDatanodeRollingUpgradeWithFinalize ()
specifier|public
name|void
name|testDatanodeRollingUpgradeWithFinalize
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startCluster
argument_list|()
expr_stmt|;
comment|// Create files in DFS.
name|Path
name|testFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade1.dat"
argument_list|)
decl_stmt|;
name|Path
name|testFile2
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade2.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile2
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|startRollingUpgrade
argument_list|()
expr_stmt|;
name|File
name|blockFile
init|=
name|getBlockForFile
argument_list|(
name|testFile2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|trashFile
init|=
name|getTrashFileForBlock
argument_list|(
name|blockFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|deleteAndEnsureInTrash
argument_list|(
name|testFile2
argument_list|,
name|blockFile
argument_list|,
name|trashFile
argument_list|)
expr_stmt|;
name|finalizeRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Ensure that delete file testFile2 stays deleted after finalize
name|ensureTrashDisabled
argument_list|()
expr_stmt|;
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|testFile2
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile1
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testDatanodeRollingUpgradeWithRollback ()
specifier|public
name|void
name|testDatanodeRollingUpgradeWithRollback
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startCluster
argument_list|()
expr_stmt|;
comment|// Create files in DFS.
name|Path
name|testFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade1.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|String
name|fileContents1
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|)
decl_stmt|;
name|startRollingUpgrade
argument_list|()
expr_stmt|;
name|File
name|blockFile
init|=
name|getBlockForFile
argument_list|(
name|testFile1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|trashFile
init|=
name|getTrashFileForBlock
argument_list|(
name|blockFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|deleteAndEnsureInTrash
argument_list|(
name|testFile1
argument_list|,
name|blockFile
argument_list|,
name|trashFile
argument_list|)
expr_stmt|;
comment|// Now perform a rollback to restore DFS to the pre-rollback state.
name|rollbackRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Ensure that block was restored from trash
name|ensureTrashRestored
argument_list|(
name|blockFile
argument_list|,
name|trashFile
argument_list|)
expr_stmt|;
comment|// Ensure that files exist and restored file contents are the same.
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile1
argument_list|)
operator|)
assert|;
name|String
name|fileContents2
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fileContents1
argument_list|,
name|is
argument_list|(
name|fileContents2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

