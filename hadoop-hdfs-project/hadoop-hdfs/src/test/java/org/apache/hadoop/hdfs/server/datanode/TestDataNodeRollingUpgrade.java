begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Ensure that the DataNode correctly handles rolling upgrade  * finalize and rollback.  */
end_comment

begin_class
DECL|class|TestDataNodeRollingUpgrade
specifier|public
class|class
name|TestDataNodeRollingUpgrade
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDataNodeRollingUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
specifier|final
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|FILE_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|FILE_SIZE
init|=
literal|1024L
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0x1BADF00DL
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|method|runCmd (DFSAdmin dfsadmin, String... args)
specifier|private
name|void
name|runCmd
parameter_list|(
name|DFSAdmin
name|dfsadmin
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|dfsadmin
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startRollingUpgrade ()
specifier|private
name|void
name|startRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rolling upgrade"
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsadmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|runCmd
argument_list|(
name|dfsadmin
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
block|}
DECL|method|finalizeRollingUpgrade ()
specifier|private
name|void
name|finalizeRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Finalizing rolling upgrade"
argument_list|)
expr_stmt|;
specifier|final
name|DFSAdmin
name|dfsadmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|runCmd
argument_list|(
name|dfsadmin
argument_list|,
literal|"-rollingUpgrade"
argument_list|,
literal|"finalize"
argument_list|)
expr_stmt|;
block|}
DECL|method|rollbackRollingUpgrade ()
specifier|private
name|void
name|rollbackRollingUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rollback of the rolling upgrade"
argument_list|)
expr_stmt|;
comment|// Shutdown the DN and the NN in preparation for rollback.
name|DataNodeProperties
name|dnprop
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|shutdownNameNodes
argument_list|()
expr_stmt|;
comment|// Restart the daemons with rollback flags.
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|"-rollingupgrade"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
name|dnprop
operator|.
name|setDnArgs
argument_list|(
literal|"-rollingupgrade"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dnprop
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testDatanodeRollingUpgradeWithFinalize ()
specifier|public
name|void
name|testDatanodeRollingUpgradeWithFinalize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
try|try
block|{
comment|// Start a cluster.
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|testFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade1.dat"
argument_list|)
decl_stmt|;
name|Path
name|testFile2
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade2.dat"
argument_list|)
decl_stmt|;
comment|// Create files in DFS.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile2
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|startRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Sleep briefly so that DN learns of the rolling upgrade
comment|// from heartbeats.
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFile2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Sleep briefly so that block files can be moved to trash
comment|// (this is scheduled for asynchronous execution).
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|finalizeRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Ensure that testFile2 stays deleted.
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|testFile2
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile1
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testDatanodeRollingUpgradeWithRollback ()
specifier|public
name|void
name|testDatanodeRollingUpgradeWithRollback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a cluster
try|try
block|{
comment|// Start a cluster.
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|Path
name|testFile1
init|=
operator|new
name|Path
argument_list|(
literal|"/TestDataNodeRollingUpgrade1.dat"
argument_list|)
decl_stmt|;
comment|// Create files in DFS.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|String
name|fileContents1
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|)
decl_stmt|;
name|startRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Sleep briefly so that DN learns of the rolling upgrade
comment|// from heartbeats.
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting file during rolling upgrade"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFile1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Sleep briefly so that block files can be moved to trash
comment|// (this is scheduled for asynchronous execution).
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|testFile1
argument_list|)
operator|)
assert|;
comment|// Now perform a rollback to restore DFS to the pre-rollback state.
name|rollbackRollingUpgrade
argument_list|()
expr_stmt|;
comment|// Ensure that testFile1 was restored after the rollback.
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|testFile1
argument_list|)
operator|)
assert|;
name|String
name|fileContents2
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|testFile1
argument_list|)
decl_stmt|;
comment|// Ensure that file contents are the same.
name|assertThat
argument_list|(
name|fileContents1
argument_list|,
name|is
argument_list|(
name|fileContents2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

