begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FsDatasetTestUtils
operator|.
name|MaterializedReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|BZip2Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ServerSocketUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * This class tests commands from DFSShell.  */
end_comment

begin_class
DECL|class|TestDFSShell
specifier|public
class|class
name|TestDFSShell
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDFSShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|counter
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|SUCCESS
specifier|private
specifier|final
name|int
name|SUCCESS
init|=
literal|0
decl_stmt|;
DECL|field|ERROR
specifier|private
specifier|final
name|int
name|ERROR
init|=
literal|1
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|static
specifier|final
name|String
name|TEST_ROOT_DIR
init|=
name|PathUtils
operator|.
name|getTestDirName
argument_list|(
name|TestDFSShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RAW_A1
specifier|private
specifier|static
specifier|final
name|String
name|RAW_A1
init|=
literal|"raw.a1"
decl_stmt|;
DECL|field|TRUSTED_A1
specifier|private
specifier|static
specifier|final
name|String
name|TRUSTED_A1
init|=
literal|"trusted.a1"
decl_stmt|;
DECL|field|USER_A1
specifier|private
specifier|static
specifier|final
name|String
name|USER_A1
init|=
literal|"user.a1"
decl_stmt|;
DECL|field|RAW_A1_VALUE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|RAW_A1_VALUE
init|=
operator|new
name|byte
index|[]
block|{
literal|0x32
block|,
literal|0x32
block|,
literal|0x32
block|}
decl_stmt|;
DECL|field|TRUSTED_A1_VALUE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TRUSTED_A1_VALUE
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x31
block|,
literal|0x31
block|}
decl_stmt|;
DECL|field|USER_A1_VALUE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|USER_A1_VALUE
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|miniCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|miniCluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
comment|// set up the shared miniCluster directory so individual tests can launch
comment|// new clusters without conflict
name|conf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"TestDFSShell"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|miniCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|miniCluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|miniCluster
operator|!=
literal|null
condition|)
block|{
name|miniCluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
decl_stmt|;
comment|// 30s
DECL|method|writeFile (FileSystem fs, Path f)
specifier|static
name|Path
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"dhruba: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|writeByte (FileSystem fs, Path f)
specifier|static
name|Path
name|writeByte
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|mkdir (FileSystem fs, Path p)
specifier|static
name|Path
name|mkdir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|rmr (FileSystem fs, Path p)
specifier|static
name|void
name|rmr
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Create a local file whose content contains its full path. */
DECL|method|createLocalFile (File f)
specifier|static
name|File
name|createLocalFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"createLocalFile: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|createLocalFileWithRandomData (int fileLength, File f)
specifier|static
name|File
name|createLocalFileWithRandomData
parameter_list|(
name|int
name|fileLength
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|fileLength
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|show (String s)
specifier|static
name|void
name|show
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|2
index|]
operator|+
literal|" "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testZeroSizeFile ()
specifier|public
name|void
name|testZeroSizeFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|//create a zero size file
specifier|final
name|File
name|f1
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|f1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|//copy to remote
specifier|final
name|Path
name|root
init|=
name|mkdir
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testZeroSizeFile/zeroSizeFile"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|remotef
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dst"
argument_list|)
decl_stmt|;
name|show
argument_list|(
literal|"copy local "
operator|+
name|f1
operator|+
literal|" to remote "
operator|+
name|remotef
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|f1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|remotef
argument_list|)
expr_stmt|;
comment|//getBlockSize() should not throw exception
name|show
argument_list|(
literal|"Block size = "
operator|+
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|remotef
argument_list|)
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//copy back
specifier|final
name|File
name|f2
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyToLocalFile
argument_list|(
name|remotef
argument_list|,
operator|new
name|Path
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f2
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|f2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|f1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRecursiveRm ()
specifier|public
name|void
name|testRecursiveRm
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testRecursiveRm"
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed because dir is not empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//should have thrown an exception
block|}
name|dfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDu ()
specifier|public
name|void
name|testDu
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|replication
init|=
literal|2
decl_stmt|;
name|PrintStream
name|psBackup
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|psOut
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|psOut
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testDu"
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
name|myPath
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|myFile2
init|=
operator|new
name|Path
argument_list|(
name|myPath
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile2
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|myFileLength
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|myFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Long
name|myFileDiskUsed
init|=
name|myFileLength
operator|*
name|replication
decl_stmt|;
name|Long
name|myFile2Length
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|myFile2
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Long
name|myFile2DiskUsed
init|=
name|myFile2Length
operator|*
name|replication
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|returnString
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Check if size matches as expected
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|myFileLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|myFileDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|myFile2Length
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|myFile2DiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that -du -s reports the state of the snapshot
name|String
name|snapshotName
init|=
literal|"ss1"
decl_stmt|;
name|Path
name|snapshotPath
init|=
operator|new
name|Path
argument_list|(
name|myPath
argument_list|,
literal|".snapshot/"
operator|+
name|snapshotName
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|myPath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|myPath
argument_list|,
name|snapshotName
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|delete
argument_list|(
name|myFile
argument_list|,
literal|false
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-s"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|snapshotPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|val
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Long
name|combinedLength
init|=
name|myFileLength
operator|+
name|myFile2Length
decl_stmt|;
name|Long
name|combinedDiskUsed
init|=
name|myFileDiskUsed
operator|+
name|myFile2DiskUsed
decl_stmt|;
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|combinedLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|returnString
argument_list|,
name|containsString
argument_list|(
name|combinedDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if output is rendered properly with multiple input paths
specifier|final
name|Path
name|myFile3
init|=
operator|new
name|Path
argument_list|(
name|myPath
argument_list|,
literal|"file3"
argument_list|)
decl_stmt|;
name|writeByte
argument_list|(
name|dfs
argument_list|,
name|myFile3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile3
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile3
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|myFile2
operator|.
name|toString
argument_list|()
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Return code should be 0."
argument_list|,
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
literal|"1   2   "
operator|+
name|myFile3
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
literal|"25  50  "
operator|+
name|myFile2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|psBackup
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testDuSnapshots ()
specifier|public
name|void
name|testDuSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|replication
init|=
literal|2
decl_stmt|;
specifier|final
name|PrintStream
name|psBackup
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|psOut
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|setOut
argument_list|(
name|psOut
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testDuSnapshots"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|dfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|file2
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|fileLength
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|fileDiskUsed
init|=
name|fileLength
operator|*
name|replication
decl_stmt|;
specifier|final
name|Long
name|file2Length
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file2
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|file2DiskUsed
init|=
name|file2Length
operator|*
name|replication
decl_stmt|;
comment|/*        * Construct dir as follows:        * /test/dir/file<- this will later be deleted after snapshot taken.        * /test/dir/newfile<- this will be created after snapshot taken.        * /test/dir/file2        * Snapshot enabled on /test        */
comment|// test -du on /test/dir
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-du"
block|,
name|dir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|String
name|returnString
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-du return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
comment|// Check if size matches as expected
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|fileLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|fileDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|file2Length
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|file2DiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// take a snapshot, then remove file and add newFile
specifier|final
name|String
name|snapshotName
init|=
literal|"ss1"
decl_stmt|;
specifier|final
name|Path
name|snapshotPath
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|".snapshot/"
operator|+
name|snapshotName
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|snapshotName
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
name|rmr
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"newfile"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|newFileLength
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|newFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|newFileDiskUsed
init|=
name|newFileLength
operator|*
name|replication
decl_stmt|;
comment|// test -du -s on /test
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-du"
block|,
literal|"-s"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-du -s return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|Long
name|combinedLength
init|=
name|fileLength
operator|+
name|file2Length
operator|+
name|newFileLength
decl_stmt|;
name|Long
name|combinedDiskUsed
init|=
name|fileDiskUsed
operator|+
name|file2DiskUsed
operator|+
name|newFileDiskUsed
decl_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|combinedLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|combinedDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test -du on /test
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-du"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-du return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|combinedLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|combinedDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test -du -s -x on /test
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-du"
block|,
literal|"-s"
block|,
literal|"-x"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-du -s -x return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|Long
name|exludeSnapshotLength
init|=
name|file2Length
operator|+
name|newFileLength
decl_stmt|;
name|Long
name|excludeSnapshotDiskUsed
init|=
name|file2DiskUsed
operator|+
name|newFileDiskUsed
decl_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|exludeSnapshotLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|excludeSnapshotDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test -du -x on /test
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-du"
block|,
literal|"-x"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-du -x return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|exludeSnapshotLength
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnString
operator|.
name|contains
argument_list|(
name|excludeSnapshotDiskUsed
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|psBackup
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testCountSnapshots ()
specifier|public
name|void
name|testCountSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|PrintStream
name|psBackup
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|psOut
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|psOut
argument_list|)
expr_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testCountSnapshots"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|dfs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|file2
argument_list|)
expr_stmt|;
specifier|final
name|long
name|fileLength
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|long
name|file2Length
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file2
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|dfs
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|/*        * Construct dir as follows:        * /test/dir/file<- this will later be deleted after snapshot taken.        * /test/dir/newfile<- this will be created after snapshot taken.        * /test/dir/file2        * /test/dir2<- this will later be deleted after snapshot taken.        * Snapshot enabled on /test        */
comment|// take a snapshot
comment|// then create /test/dir/newfile and remove /test/dir/file, /test/dir2
specifier|final
name|String
name|snapshotName
init|=
literal|"s1"
decl_stmt|;
specifier|final
name|Path
name|snapshotPath
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|".snapshot/"
operator|+
name|snapshotName
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|parent
argument_list|,
name|snapshotName
argument_list|)
argument_list|,
name|is
argument_list|(
name|snapshotPath
argument_list|)
argument_list|)
expr_stmt|;
name|rmr
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|rmr
argument_list|(
name|dfs
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"new file"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|newFile
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|newFileLength
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|newFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// test -count on /test. Include header for easier debugging.
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-count"
block|,
literal|"-v"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|String
name|returnString
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-count return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|Scanner
name|in
init|=
operator|new
name|Scanner
argument_list|(
name|returnString
argument_list|)
decl_stmt|;
name|in
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//DIR_COUNT
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//FILE_COUNT
name|assertEquals
argument_list|(
name|fileLength
operator|+
name|file2Length
operator|+
name|newFileLength
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//CONTENT_SIZE
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test -count -x on /test. Include header for easier debugging.
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-count"
block|,
literal|"-x"
block|,
literal|"-v"
block|,
name|parent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|returnString
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-count -x return is:\n"
operator|+
name|returnString
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|Scanner
argument_list|(
name|returnString
argument_list|)
expr_stmt|;
name|in
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//DIR_COUNT
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//FILE_COUNT
name|assertEquals
argument_list|(
name|file2Length
operator|+
name|newFileLength
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|//CONTENT_SIZE
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|psBackup
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
comment|// remove left over crc files:
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|".f1.crc"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|".f2.crc"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
specifier|final
name|File
name|f1
init|=
name|createLocalFile
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|File
name|f2
init|=
name|createLocalFile
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"f2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|root
init|=
name|mkdir
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testPut"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dst"
argument_list|)
decl_stmt|;
name|show
argument_list|(
literal|"begin"
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|copy2ndFileThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|show
argument_list|(
literal|"copy local "
operator|+
name|f2
operator|+
literal|" to remote "
operator|+
name|dst
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|show
argument_list|(
literal|"good "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//should not be here, must got IOException
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//use SecurityManager to pause the copying of f1 and begin copying f2
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SecurityManager = "
operator|+
name|sm
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|SecurityManager
argument_list|()
block|{
specifier|private
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|firstTime
condition|)
block|{
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DataNode"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
literal|""
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"FileUtil.copyContent"
argument_list|)
condition|)
block|{
comment|//pause at FileUtil.copyContent
name|firstTime
operator|=
literal|false
expr_stmt|;
name|copy2ndFileThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|show
argument_list|(
literal|"copy local "
operator|+
name|f1
operator|+
literal|" to remote "
operator|+
name|dst
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|f1
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|show
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
try|try
block|{
name|copy2ndFileThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{ }
name|System
operator|.
name|setSecurityManager
argument_list|(
name|sm
argument_list|)
expr_stmt|;
comment|// copy multiple files to destination directory
specifier|final
name|Path
name|destmultiple
init|=
name|mkdir
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"putmultiple"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
literal|2
index|]
decl_stmt|;
name|srcs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|f1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|srcs
argument_list|,
name|destmultiple
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|destmultiple
argument_list|,
literal|"f1"
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|destmultiple
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// move multiple files to destination directory
specifier|final
name|Path
name|destmultiple2
init|=
name|mkdir
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"movemultiple"
argument_list|)
argument_list|)
decl_stmt|;
name|srcs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|f1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|moveFromLocalFile
argument_list|(
name|srcs
argument_list|,
name|destmultiple2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|destmultiple2
argument_list|,
literal|"f1"
argument_list|)
expr_stmt|;
name|srcs
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|destmultiple2
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/** check command error outputs and exit statuses. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testErrOutPut ()
specifier|public
name|void
name|testErrOutPut
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/nonexistentfile"
argument_list|)
decl_stmt|;
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|tmp
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-cat"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|root
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" -cat returned 1 "
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|String
name|returned
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cat does not print exceptions "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Exception"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|root
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -rm returned 1 "
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rm prints reasonable error "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"No such file or directory"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|root
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -rmr returned 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rmr prints reasonable error "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"No such file or directory"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/nonexistentfile"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -du prints reasonable error "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"No such file or directory"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-dus"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/nonexistentfile"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -dus prints reasonable error"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"No such file or directory"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/nonexistenfile"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -ls does not return Found 0 items"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Found 0"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/nonexistentfile"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -lsr should fail "
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testdir"
argument_list|)
argument_list|)
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testdir"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -ls does not print out anything "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Found 0"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/user/nonxistant/*"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -ls on nonexistent glob returns 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mkdir"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testdir"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -mkdir returned 1 "
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -mkdir returned File exists"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"File exists"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|OutputStream
name|outtmp
init|=
name|dfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|outtmp
operator|.
name|write
argument_list|(
name|testFile
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outtmp
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mkdir"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testfile"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -mkdir returned 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -mkdir returned this is a file "
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"not a directory"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mkdir"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testParent/testChild"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -mkdir returned 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" -mkdir returned there is No file or directory but has testChild in the path"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"testChild"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mv"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testfile"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"/no-such-dir/file"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mv failed to rename"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mv"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testfile"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"/testfiletest"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no output from rename"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Renamed"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mv"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testfile"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"/testfiletmp"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" unix like output"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"No such file or"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dfs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|" no error "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"empty path specified"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"empty string"
argument_list|)
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"-d"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"/no/such/dir"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|" -test -d wrong result "
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returned
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMoveWithTargetPortEmpty ()
specifier|public
name|void
name|testMoveWithTargetPortEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|nameNodePort
argument_list|(
name|ServerSocketUtil
operator|.
name|waitForPort
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_PORT_DEFAULT
argument_list|,
literal|60
argument_list|)
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|srcFs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mkdir"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"/testfile"
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-mv"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|srcFs
operator|.
name|getUri
argument_list|()
operator|+
literal|"/testfile"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"hdfs://"
operator|+
name|srcFs
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|"/testfile2"
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mv should have succeeded"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testURIPaths ()
specifier|public
name|void
name|testURIPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|srcConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Configuration
name|dstConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|srcCluster
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|dstCluster
init|=
literal|null
decl_stmt|;
name|File
name|bak
init|=
operator|new
name|File
argument_list|(
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
literal|"testURIPaths"
argument_list|)
decl_stmt|;
name|bak
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|srcCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|srcConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dstConf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR
argument_list|,
name|bak
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|dstCluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|dstConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|srcConf
argument_list|)
expr_stmt|;
comment|//check for ls
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ls works on remote uri "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//check for rm -r
name|dstFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoopdir"
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/hadoopdir"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-rmr works on remote uri "
operator|+
name|argv
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//check du
name|argv
index|[
literal|0
index|]
operator|=
literal|"-du"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"du works on remote uri "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//check put
name|File
name|furi
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"furi"
argument_list|)
decl_stmt|;
name|createLocalFile
argument_list|(
name|furi
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-put"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|furi
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/furi"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" put is working "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//check cp
name|argv
index|[
literal|0
index|]
operator|=
literal|"-cp"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/furi"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
name|srcFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/furi"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" cp is working "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|srcFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/furi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//check cat
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-cat"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/furi"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" cat is working "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|//check chown
name|dstFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/furi"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hadoopdir"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|file
init|=
literal|"/tmp/chownTest"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|TestDFSShell
operator|.
name|writeFile
argument_list|(
name|dstFs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chgrp"
argument_list|,
literal|"-R"
argument_list|,
literal|"herbivores"
argument_list|,
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/*"
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"herbivores"
argument_list|,
name|dstFs
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"-R"
argument_list|,
literal|":reptiles"
argument_list|,
name|dstFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"reptiles"
argument_list|,
name|dstFs
argument_list|,
name|root
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|//check if default hdfs:/// works
name|argv
index|[
literal|0
index|]
operator|=
literal|"-cat"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"hdfs:///furi"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" default works for cat"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"hdfs:///"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default works for ls "
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"hdfs:///furi"
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default works for rm/rmr"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|srcCluster
condition|)
block|{
name|srcCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dstCluster
condition|)
block|{
name|dstCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that -head displays first kilobyte of the file to stdout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHead ()
specifier|public
name|void
name|testHead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|fileLen
init|=
literal|5
operator|*
name|BLOCK_SIZE
decl_stmt|;
comment|// create a text file with multiple KB bytes (and multiple blocks)
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"testHead"
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
name|fileLen
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|pout
init|=
name|dfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|pout
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-head"
block|,
name|testFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|argv
argument_list|)
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-head returned "
operator|+
name|out
operator|.
name|size
argument_list|()
operator|+
literal|" bytes data, expected 1KB"
argument_list|,
literal|1024
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// tailed out last 1KB of the file content
name|assertArrayEquals
argument_list|(
literal|"Head output doesn't match input"
argument_list|,
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that -tail displays last kilobyte of the file to stdout.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTail ()
specifier|public
name|void
name|testTail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|fileLen
init|=
literal|5
operator|*
name|BLOCK_SIZE
decl_stmt|;
comment|// create a text file with multiple KB bytes (and multiple blocks)
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"testTail"
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
name|fileLen
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|pout
init|=
name|dfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|pout
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-tail"
block|,
name|testFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|argv
argument_list|)
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-tail returned "
operator|+
name|out
operator|.
name|size
argument_list|()
operator|+
literal|" bytes data, expected 1KB"
argument_list|,
literal|1024
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// tailed out last 1KB of the file content
name|assertArrayEquals
argument_list|(
literal|"Tail output doesn't match input"
argument_list|,
name|text
operator|.
name|substring
argument_list|(
name|fileLen
operator|-
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that -tail -f outputs appended data as the file grows.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTailWithFresh ()
specifier|public
name|void
name|testTailWithFresh
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"testTailWithFresh"
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Thread
name|tailer
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-tail"
block|,
literal|"-f"
block|,
name|testFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Client that tails the test file fails"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|tailer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait till the tailer is sleeping
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|tailer
operator|.
name|getState
argument_list|()
operator|==
name|Thread
operator|.
name|State
operator|.
name|TIMED_WAITING
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
specifier|final
name|String
name|text
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|pout
init|=
name|dfs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|pout
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The tailer should eventually show the file contents
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testText ()
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|textTest
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/texttest"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|dfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|dfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|textTest
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"texttest"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|textTest (Path root, Configuration conf)
specifier|private
name|void
name|textTest
parameter_list|(
name|Path
name|root
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// Test the gzip type of files. Magic detection.
name|OutputStream
name|zout
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.gz"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|bak
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|ByteArrayOutputStream
name|file
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|Character
operator|.
name|forDigit
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|10
argument_list|,
literal|36
argument_list|)
decl_stmt|;
name|file
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|zout
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|zout
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-text"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.gz"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"'-text "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|file
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a sequence file with a gz extension, to test proper
comment|// container detection. Magic detection.
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.gz"
argument_list|)
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
literal|"Foo"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-text"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.gz"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'-text "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
literal|"Foo\tBar\n"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test deflate. Extension-based detection.
name|OutputStream
name|dout
init|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.deflate"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|outbytes
init|=
literal|"foo"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|dout
operator|.
name|write
argument_list|(
name|outbytes
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-text"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.deflate"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'-text "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|outbytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test a simple codec. Extension based detection. We use
comment|// Bzip2 cause its non-native.
name|CompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|BZip2Codec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|extension
init|=
name|codec
operator|.
name|getDefaultExtension
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file."
operator|+
name|extension
argument_list|)
decl_stmt|;
name|OutputStream
name|fout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|writebytes
init|=
literal|"foo"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|writebytes
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-text"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|p
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'-text "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|writebytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test a plain text.
name|OutputStream
name|pout
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|writebytes
operator|=
literal|"bar"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|pout
operator|.
name|write
argument_list|(
name|writebytes
argument_list|)
expr_stmt|;
name|pout
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-text"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"file.txt"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'-text "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" returned "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Output doesn't match input"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|writebytes
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|bak
condition|)
block|{
name|System
operator|.
name|setOut
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCopyToLocal ()
specifier|public
name|void
name|testCopyToLocal
parameter_list|()
throws|throws
name|IOException
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|root
init|=
name|createTree
argument_list|(
name|dfs
argument_list|,
literal|"copyToLocal"
argument_list|)
decl_stmt|;
comment|// Verify copying the tree
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-copyToLocal"
argument_list|,
name|root
operator|+
literal|"*"
argument_list|,
name|TEST_ROOT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|localroot
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"copyToLocal"
argument_list|)
decl_stmt|;
name|File
name|localroot2
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"copyToLocal2"
argument_list|)
decl_stmt|;
name|File
name|f1
init|=
operator|new
name|File
argument_list|(
name|localroot
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|f1
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f2
init|=
operator|new
name|File
argument_list|(
name|localroot
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|f2
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|sub
init|=
operator|new
name|File
argument_list|(
name|localroot
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|sub
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f3
init|=
operator|new
name|File
argument_list|(
name|sub
argument_list|,
literal|"f3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|f3
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f4
init|=
operator|new
name|File
argument_list|(
name|sub
argument_list|,
literal|"f4"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|f4
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f5
init|=
operator|new
name|File
argument_list|(
name|localroot2
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Copying failed."
argument_list|,
name|f5
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|f1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f3
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f4
operator|.
name|delete
argument_list|()
expr_stmt|;
name|f5
operator|.
name|delete
argument_list|()
expr_stmt|;
name|sub
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// Verify copying non existing sources do not create zero byte
comment|// destination files
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-copyToLocal"
block|,
literal|"nosuchfile"
block|,
name|TEST_ROOT_DIR
block|}
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|f6
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"nosuchfile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f6
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTree (FileSystem fs, String name)
specifier|static
name|String
name|createTree
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a tree
comment|//   ROOT
comment|//   |- f1
comment|//   |- f2
comment|//   + sub
comment|//      |- f3
comment|//      |- f4
comment|//   ROOT2
comment|//   |- f1
name|String
name|path
init|=
literal|"/test/"
operator|+
name|name
decl_stmt|;
name|Path
name|root
init|=
name|mkdir
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|sub
init|=
name|mkdir
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"sub"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|root2
init|=
name|mkdir
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|path
operator|+
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"f3"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|sub
argument_list|,
literal|"f4"
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root2
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|root2
argument_list|,
literal|"sub"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|root
init|=
name|createTree
argument_list|(
name|dfs
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
comment|// Verify the counts
name|runCount
argument_list|(
name|root
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|shell
argument_list|)
expr_stmt|;
name|runCount
argument_list|(
name|root
operator|+
literal|"2"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|shell
argument_list|)
expr_stmt|;
name|runCount
argument_list|(
name|root
operator|+
literal|"2/f1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|shell
argument_list|)
expr_stmt|;
name|runCount
argument_list|(
name|root
operator|+
literal|"2/sub"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|shell
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|localpath
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testcount"
argument_list|)
decl_stmt|;
name|localpath
operator|=
name|localpath
operator|.
name|makeQualified
argument_list|(
name|localfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|localfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|localfs
operator|.
name|mkdirs
argument_list|(
name|localpath
argument_list|)
expr_stmt|;
specifier|final
name|String
name|localstr
init|=
name|localpath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"localstr="
operator|+
name|localstr
argument_list|)
expr_stmt|;
name|runCount
argument_list|(
name|localstr
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|shell
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-count"
argument_list|,
name|root
argument_list|,
name|localstr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTotalSizeOfAllFiles ()
specifier|public
name|void
name|testTotalSizeOfAllFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/testTotalSizeOfAllFiles"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// create file under root
name|FSDataOutputStream
name|File1
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"File1"
argument_list|)
argument_list|)
decl_stmt|;
name|File1
operator|.
name|write
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|File1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create file under sub-folder
name|FSDataOutputStream
name|File2
init|=
name|dfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"Folder1/File2"
argument_list|)
argument_list|)
decl_stmt|;
name|File2
operator|.
name|write
argument_list|(
literal|"hi"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|File2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// getUsed() should return total length of all the files in Filesystem
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dfs
operator|.
name|getUsed
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runCount (String path, long dirs, long files, FsShell shell )
specifier|private
specifier|static
name|void
name|runCount
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|dirs
parameter_list|,
name|long
name|files
parameter_list|,
name|FsShell
name|shell
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Scanner
name|in
init|=
literal|null
decl_stmt|;
name|String
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-count"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|Scanner
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dirs
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|files
argument_list|,
name|in
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results:\n"
operator|+
name|results
argument_list|)
expr_stmt|;
block|}
block|}
comment|//throws IOException instead of Exception as shell.run() does.
DECL|method|runCmd (FsShell shell, String... args)
specifier|private
specifier|static
name|int
name|runCmd
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|cmdline
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RUN:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
name|cmdline
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|cmdline
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|exitCode
decl_stmt|;
name|exitCode
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN: "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" exit="
operator|+
name|exitCode
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RUN: "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" IOException="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RUN: "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" RuntimeException="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RUN: "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" Exception="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Test chmod.    */
DECL|method|testChmod (Configuration conf, FileSystem fs, String chmodDir)
name|void
name|testChmod
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|chmodDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
comment|//first make dir
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|chmodDir
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|confirmPermissionChange
argument_list|(
comment|/* Setting */
literal|"u+rwx,g=rw,o-rwx"
argument_list|,
comment|/* Should give */
literal|"rwxrw----"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|//create an empty file
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|chmodDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|TestDFSShell
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|//test octal mode
name|confirmPermissionChange
argument_list|(
literal|"644"
argument_list|,
literal|"rw-r--r--"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|//test recursive
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chmod"
argument_list|,
literal|"-R"
argument_list|,
literal|"a+rwX"
argument_list|,
name|chmodDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwxrwxrwx"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rw-rw-rw-"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip "sticky bit" tests on Windows.
comment|//
if|if
condition|(
operator|!
name|Path
operator|.
name|WINDOWS
condition|)
block|{
comment|// test sticky bit on directories
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"stickybit"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing sticky bit on: "
operator|+
name|dir2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sticky bit directory initial mode: "
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir2
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|confirmPermissionChange
argument_list|(
literal|"u=rwx,g=rx,o=rx"
argument_list|,
literal|"rwxr-xr-x"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit explicit set
name|confirmPermissionChange
argument_list|(
literal|"+t"
argument_list|,
literal|"rwxr-xr-t"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit explicit reset
name|confirmPermissionChange
argument_list|(
literal|"-t"
argument_list|,
literal|"rwxr-xr-x"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|confirmPermissionChange
argument_list|(
literal|"=t"
argument_list|,
literal|"--------T"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// reset all permissions
name|confirmPermissionChange
argument_list|(
literal|"0000"
argument_list|,
literal|"---------"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// turn on rw permissions for all
name|confirmPermissionChange
argument_list|(
literal|"1666"
argument_list|,
literal|"rw-rw-rwT"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit explicit set along with x permission
name|confirmPermissionChange
argument_list|(
literal|"1777"
argument_list|,
literal|"rwxrwxrwt"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit explicit reset
name|confirmPermissionChange
argument_list|(
literal|"0777"
argument_list|,
literal|"rwxrwxrwx"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit explicit set
name|confirmPermissionChange
argument_list|(
literal|"1777"
argument_list|,
literal|"rwxrwxrwt"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// sticky bit implicit reset
name|confirmPermissionChange
argument_list|(
literal|"777"
argument_list|,
literal|"rwxrwxrwx"
argument_list|,
name|fs
argument_list|,
name|shell
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipped sticky bit tests on Windows"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{}
block|}
block|}
comment|// Apply a new permission to a path and confirm that the new permission
comment|// is the one you were expecting
DECL|method|confirmPermissionChange (String toApply, String expected, FileSystem fs, FsShell shell, Path dir2)
specifier|private
name|void
name|confirmPermissionChange
parameter_list|(
name|String
name|toApply
parameter_list|,
name|String
name|expected
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FsShell
name|shell
parameter_list|,
name|Path
name|dir2
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Confirming permission change of "
operator|+
name|toApply
operator|+
literal|" to "
operator|+
name|expected
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chmod"
argument_list|,
name|toApply
argument_list|,
name|dir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir2
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Permission change result: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|confirmOwner (String owner, String group, FileSystem fs, Path... paths)
specifier|private
name|void
name|confirmOwner
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
modifier|...
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|group
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFilePermissions ()
specifier|public
name|void
name|testFilePermissions
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|//test chmod on local fs
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|testChmod
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
operator|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"chmodTest"
argument_list|)
operator|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//test chmod on DFS
name|fs
operator|=
name|dfs
expr_stmt|;
name|conf
operator|=
name|dfs
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|testChmod
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
literal|"/tmp/chmodTest"
argument_list|)
expr_stmt|;
comment|// test chown and chgrp on DFS:
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|/* For dfs, I am the super user and I can change owner of any file to      * anything. "-R" option is already tested by chmod test above.      */
name|String
name|file
init|=
literal|"/tmp/chownTest"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|TestDFSShell
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chgrp"
argument_list|,
literal|"-R"
argument_list|,
literal|"herbivores"
argument_list|,
literal|"/*"
argument_list|,
literal|"unknownFile*"
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"herbivores"
argument_list|,
name|fs
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chgrp"
argument_list|,
literal|"mammals"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"mammals"
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"-R"
argument_list|,
literal|":reptiles"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"reptiles"
argument_list|,
name|fs
argument_list|,
name|root
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"python:"
argument_list|,
literal|"/nonExistentFile"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|"python"
argument_list|,
literal|"reptiles"
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"-R"
argument_list|,
literal|"hadoop:toys"
argument_list|,
literal|"unknownFile"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|"hadoop"
argument_list|,
literal|"toys"
argument_list|,
name|fs
argument_list|,
name|root
argument_list|,
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// Test different characters in names
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"hdfs.user"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|"hdfs.user"
argument_list|,
literal|null
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"_Hdfs.User-10:_hadoop.users--"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|"_Hdfs.User-10"
argument_list|,
literal|"_hadoop.users--"
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"hdfs/hadoop-core@apache.org:asf-projects"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|"hdfs/hadoop-core@apache.org"
argument_list|,
literal|"asf-projects"
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chgrp"
argument_list|,
literal|"hadoop-core@apache.org/100"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|confirmOwner
argument_list|(
literal|null
argument_list|,
literal|"hadoop-core@apache.org/100"
argument_list|,
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests various options of DFSShell.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDFSShell ()
specifier|public
name|void
name|testDFSShell
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* This tests some properties of ChecksumFileSystem as well.      * Make sure that we create ChecksumDFS */
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// First create a new directory with mkdirs
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testDFSShell/mkdirs"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second, create a file in that directory.
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testDFSShell/mkdirs/myFile"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|myFile2
init|=
operator|new
name|Path
argument_list|(
literal|"/testDFSShell/mkdirs/myFile2"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that rm with a pattern
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile*"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile2
argument_list|)
argument_list|)
expr_stmt|;
comment|//re-create the files for other tests
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can read the file
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-cat"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile2"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|dfs
operator|.
name|delete
argument_list|(
name|myFile2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify that we get an error while trying to read an nonexistent file
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-cat"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile1"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we get an error while trying to delete an nonexistent file
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile1"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we succeed in removing the file we created
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/myFile"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify touch/test
block|{
name|String
index|[]
name|args
decl_stmt|;
name|int
name|val
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-e"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/noFileHere"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-z"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-touchz"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/isFileHere"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-touchz"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/mkdirs/thisDirNotExists/isFileHere"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|3
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-e"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/isFileHere"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-d"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-z"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify that cp from a directory to a subdirectory fails
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-mkdir"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/dir1"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// this should fail
name|String
index|[]
name|args1
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args1
index|[
literal|0
index|]
operator|=
literal|"-cp"
expr_stmt|;
name|args1
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/dir1"
expr_stmt|;
name|args1
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/dir1/dir2"
expr_stmt|;
name|val
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// this should succeed
name|args1
index|[
literal|0
index|]
operator|=
literal|"-cp"
expr_stmt|;
name|args1
index|[
literal|1
index|]
operator|=
literal|"/testDFSShell/dir1"
expr_stmt|;
name|args1
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/dir1foo"
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// this should fail
name|args1
index|[
literal|0
index|]
operator|=
literal|"-cp"
expr_stmt|;
name|args1
index|[
literal|1
index|]
operator|=
literal|"/"
expr_stmt|;
name|args1
index|[
literal|2
index|]
operator|=
literal|"/test"
expr_stmt|;
name|val
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -f negative case (missing file)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-f"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/noFileHere"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -f negative case (directory rather than file)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-f"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -f positive case
block|{
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-f"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -s negative case (missing file)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-s"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/noFileHere"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -s negative case (zero length file)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-s"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/testDFSShell/mkdirs/isFileHere"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -s positive case (nonzero length file)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-s"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Verify -test -w/-r
block|{
name|Path
name|permDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testDFSShell/permDir"
argument_list|)
decl_stmt|;
name|Path
name|permFile
init|=
operator|new
name|Path
argument_list|(
literal|"/testDFSShell/permDir/permFile"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|dfs
argument_list|,
name|permDir
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|permFile
argument_list|)
expr_stmt|;
comment|// Verify -test -w positive case (dir exists and can write)
specifier|final
name|String
index|[]
name|wargs
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|wargs
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|wargs
index|[
literal|1
index|]
operator|=
literal|"-w"
expr_stmt|;
name|wargs
index|[
literal|2
index|]
operator|=
name|permDir
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|wargs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// Verify -test -r positive case (file exists and can read)
specifier|final
name|String
index|[]
name|rargs
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|rargs
index|[
literal|0
index|]
operator|=
literal|"-test"
expr_stmt|;
name|rargs
index|[
literal|1
index|]
operator|=
literal|"-r"
expr_stmt|;
name|rargs
index|[
literal|2
index|]
operator|=
name|permFile
operator|.
name|toString
argument_list|()
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|rargs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from DFSShell.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// Verify -test -r negative case (file exists but cannot read)
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chmod"
argument_list|,
literal|"600"
argument_list|,
name|permFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|smokeUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"smokeUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hadoop"
block|}
argument_list|)
decl_stmt|;
name|smokeUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|shell
operator|.
name|run
argument_list|(
name|rargs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Verify -test -w negative case (dir exists but cannot write)
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"-R"
argument_list|,
literal|"not_allowed"
argument_list|,
name|permDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chmod"
argument_list|,
literal|"-R"
argument_list|,
literal|"700"
argument_list|,
name|permDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|smokeUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
name|shell
operator|.
name|run
argument_list|(
name|wargs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// cleanup
name|dfs
operator|.
name|delete
argument_list|(
name|permDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMaterializedReplicas ( MiniDFSCluster cluster)
specifier|private
specifier|static
name|List
argument_list|<
name|MaterializedReplica
argument_list|>
name|getMaterializedReplicas
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MaterializedReplica
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
argument_list|>
name|blocks
init|=
name|cluster
operator|.
name|getAllBlockReports
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
name|map
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeStorage
argument_list|,
name|BlockListAsLongs
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Block
name|b
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|replicas
operator|.
name|add
argument_list|(
name|cluster
operator|.
name|getMaterializedReplica
argument_list|(
name|i
argument_list|,
operator|new
name|ExtendedBlock
argument_list|(
name|poolId
argument_list|,
name|b
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|replicas
return|;
block|}
DECL|method|corrupt ( List<MaterializedReplica> replicas, String content)
specifier|private
specifier|static
name|void
name|corrupt
parameter_list|(
name|List
argument_list|<
name|MaterializedReplica
argument_list|>
name|replicas
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|char
name|c
init|=
name|content
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|sb
operator|.
name|setCharAt
argument_list|(
literal|0
argument_list|,
operator|++
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|MaterializedReplica
name|replica
range|:
name|replicas
control|)
block|{
name|replica
operator|.
name|corruptData
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|TestGetRunner
specifier|static
interface|interface
name|TestGetRunner
block|{
DECL|method|run (int exitcode, String... options)
name|String
name|run
parameter_list|(
name|int
name|exitcode
parameter_list|,
name|String
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRemoteException ()
specifier|public
name|void
name|testRemoteException
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|tmpUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"tmpname"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|tmpUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|fshell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|tmp
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/foo"
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|IOException
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FSInputChecker
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fname
init|=
literal|"testGet.txt"
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/test/get"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|remotef
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|fname
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TestGetRunner
name|runner
init|=
operator|new
name|TestGetRunner
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|public
name|String
name|run
parameter_list|(
name|int
name|exitcode
parameter_list|,
name|String
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dst
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|fname
operator|+
operator|++
name|count
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|options
operator|.
name|length
operator|+
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-get"
expr_stmt|;
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|2
index|]
operator|=
name|remotef
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|dst
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|options
index|[
name|i
index|]
expr_stmt|;
block|}
name|show
argument_list|(
literal|"args="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|exitcode
argument_list|,
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|exitcode
operator|==
literal|0
condition|?
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
operator|new
name|File
argument_list|(
name|dst
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
name|File
name|localf
init|=
name|createLocalFile
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|fname
argument_list|)
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mkdir
argument_list|(
name|dfs
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|localf
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|remotef
argument_list|)
expr_stmt|;
name|String
name|localfcontent
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|localf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|localfcontent
argument_list|,
name|runner
operator|.
name|run
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localfcontent
argument_list|,
name|runner
operator|.
name|run
argument_list|(
literal|0
argument_list|,
literal|"-ignoreCrc"
argument_list|)
argument_list|)
expr_stmt|;
comment|// find block files to modify later
name|List
argument_list|<
name|MaterializedReplica
argument_list|>
name|replicas
init|=
name|getMaterializedReplicas
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
comment|// Shut down miniCluster and then corrupt the block files by overwriting a
comment|// portion with junk data.  We must shut down the miniCluster so that threads
comment|// in the data node do not hold locks on the block files while we try to
comment|// write into them.  Particularly on Windows, the data node's use of the
comment|// FileChannel.transferTo method can cause block files to be memory mapped
comment|// in read-only mode during the transfer to a client, and this causes a
comment|// locking conflict.  The call to shutdown the miniCluster blocks until all
comment|// DataXceiver threads exit, preventing this problem.
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|show
argument_list|(
literal|"replicas="
operator|+
name|replicas
argument_list|)
expr_stmt|;
name|corrupt
argument_list|(
name|replicas
argument_list|,
name|localfcontent
argument_list|)
expr_stmt|;
comment|// Start the miniCluster again, but do not reformat, so prior files remain.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|runner
operator|.
name|run
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|corruptedcontent
init|=
name|runner
operator|.
name|run
argument_list|(
literal|0
argument_list|,
literal|"-ignoreCrc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|localfcontent
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|corruptedcontent
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localfcontent
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|1
argument_list|,
name|corruptedcontent
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|dfs
condition|)
block|{
try|try
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
if|if
condition|(
literal|null
operator|!=
name|cluster
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|localf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test -stat [format]<path>... prints statistics about the file/directory    * at<path> in the specified format.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testStat ()
specifier|public
name|void
name|testStat
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SimpleDateFormat
name|fmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|testDir1
init|=
operator|new
name|Path
argument_list|(
literal|"testStat"
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
operator|new
name|Path
argument_list|(
name|testDir1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|testFile2
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|status1
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testDir1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mtime1
init|=
name|fmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|status1
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|atime1
init|=
name|fmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|status1
operator|.
name|getAccessTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setTimes
argument_list|(
name|testFile2
argument_list|,
name|now
operator|+
literal|3000
argument_list|,
name|now
operator|+
literal|6000
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|status2
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testFile2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mtime2
init|=
name|fmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|status2
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|atime2
init|=
name|fmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|status2
operator|.
name|getAccessTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|testDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected -stat output: "
operator|+
name|out
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s%n"
argument_list|,
name|mtime1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|testDir1
argument_list|,
name|testFile2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected -stat output: "
operator|+
name|out
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s%n%s%n"
argument_list|,
name|mtime1
argument_list|,
name|mtime2
argument_list|)
argument_list|)
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|"%F %u:%g %b %y %n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|"%F %a %A %u:%g %b %y %n"
argument_list|,
name|testDir1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|mtime1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"directory"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|status1
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|status1
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|status1
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
decl_stmt|;
name|int
name|octal
init|=
operator|(
name|n
operator|>>>
literal|9
operator|&
literal|1
operator|)
operator|*
literal|1000
operator|+
operator|(
name|n
operator|>>>
literal|6
operator|&
literal|7
operator|)
operator|*
literal|100
operator|+
operator|(
name|n
operator|>>>
literal|3
operator|&
literal|7
operator|)
operator|*
literal|10
operator|+
operator|(
name|n
operator|&
literal|7
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|octal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|doFsStat
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|,
literal|"%F %a %A %u:%g %b %x %y %n"
argument_list|,
name|testDir1
argument_list|,
name|testFile2
argument_list|)
expr_stmt|;
name|n
operator|=
name|status2
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
expr_stmt|;
name|octal
operator|=
operator|(
name|n
operator|>>>
literal|9
operator|&
literal|1
operator|)
operator|*
literal|1000
operator|+
operator|(
name|n
operator|>>>
literal|6
operator|&
literal|7
operator|)
operator|*
literal|100
operator|+
operator|(
name|n
operator|>>>
literal|3
operator|&
literal|7
operator|)
operator|*
literal|10
operator|+
operator|(
name|n
operator|&
literal|7
operator|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|mtime1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|atime1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"regular file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|status2
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|octal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|mtime2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|atime2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doFsStat (Configuration conf, String format, Path... files)
specifier|private
specifier|static
name|void
name|doFsStat
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|format
parameter_list|,
name|Path
modifier|...
name|files
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|argv
init|=
operator|(
name|format
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{
literal|"-stat"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"-stat"
block|,
name|format
block|}
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have failed with missing arguments"
argument_list|,
operator|-
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argv
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|argv
operator|.
name|add
argument_list|(
literal|"-stat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|argv
operator|.
name|add
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|f
range|:
name|files
control|)
block|{
name|argv
operator|.
name|add
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|argv
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|argv
operator|+
literal|" returned non-zero status "
operator|+
name|ret
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLsr ()
specifier|public
name|void
name|testLsr
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|String
name|root
init|=
name|createTree
argument_list|(
name|dfs
argument_list|,
literal|"lsr"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"zzz"
argument_list|)
argument_list|)
expr_stmt|;
name|runLsr
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|sub
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"sub"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
name|sub
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tmpusername
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"1"
decl_stmt|;
name|UserGroupInformation
name|tmpUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|tmpusername
argument_list|,
operator|new
name|String
index|[]
block|{
name|tmpusername
block|}
argument_list|)
decl_stmt|;
name|String
name|results
init|=
name|tmpUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|runLsr
argument_list|(
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
argument_list|,
name|root
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|contains
argument_list|(
literal|"zzz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runLsr (final FsShell shell, String root, int returnvalue )
specifier|private
specifier|static
name|String
name|runLsr
parameter_list|(
specifier|final
name|FsShell
name|shell
parameter_list|,
name|String
name|root
parameter_list|,
name|int
name|returnvalue
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"root="
operator|+
name|root
operator|+
literal|", returnvalue="
operator|+
name|returnvalue
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|PrintStream
name|oldErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|String
name|results
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|returnvalue
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
name|root
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErr
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"results:\n"
operator|+
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * default setting is file:// which is not a DFS    * so DFSAdmin should throw and catch InvalidArgumentException    * and return -1 exit code.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInvalidShell ()
specifier|public
name|void
name|testInvalidShell
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// default FS (non-DFS)
name|DFSAdmin
name|admin
init|=
operator|new
name|DFSAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|admin
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-refreshNodes"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected to fail -1"
argument_list|,
name|res
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Preserve Copy Option is -ptopxa (timestamps, ownership, permission, XATTR,
comment|// ACLs)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCopyCommandsWithPreserveOption ()
specifier|public
name|void
name|testCopyCommandsWithPreserveOption
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testCopyCommandsWithPreserveOption-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|src
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setAcl
argument_list|(
name|src
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|EXECUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mtime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|atime
init|=
name|status
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
name|status
operator|.
name|getOwner
argument_list|()
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|status
operator|.
name|getGroup
argument_list|()
decl_stmt|;
specifier|final
name|FsPermission
name|perm
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
name|USER_A1
argument_list|,
name|USER_A1_VALUE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
name|TRUSTED_A1
argument_list|,
name|TRUSTED_A1_VALUE
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// -p
name|Path
name|target1
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile1"
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-p"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target1
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cp -p is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|FileStatus
name|targetStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|targetPerm
init|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|target1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls
init|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target1
argument_list|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptop
name|Path
name|target2
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile2"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptop"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target2
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptop is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|target2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target2
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptopx
name|Path
name|target3
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile3"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptopx"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target3
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptopx is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|target3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|USER_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|USER_A1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TRUSTED_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|TRUSTED_A1
argument_list|)
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target3
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptopa
name|Path
name|target4
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile4"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptopa"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target4
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptopa is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|target4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target4
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|src
argument_list|)
argument_list|,
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target4
argument_list|)
argument_list|)
expr_stmt|;
comment|// -ptoa (verify -pa option will preserve permissions also)
name|Path
name|target5
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile5"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptoa"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target5
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptoa is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|target5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target5
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|src
argument_list|)
argument_list|,
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target5
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|shell
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCopyCommandsWithRawXAttrs ()
specifier|public
name|void
name|testCopyCommandsWithRawXAttrs
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testCopyCommandsWithRawXAttrs-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawHdfsTestDir
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw"
operator|+
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rawSrcBase
init|=
literal|"/.reserved/raw"
operator|+
name|testdir
decl_stmt|;
specifier|final
name|Path
name|rawSrc
init|=
operator|new
name|Path
argument_list|(
name|rawSrcBase
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|src
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcdir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawSrcDir
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw"
operator|+
name|testdir
argument_list|,
literal|"srcdir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|srcDirFile
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawSrcDirFile
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw"
operator|+
name|srcDirFile
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|srcDirFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
block|{
name|rawSrc
block|,
name|rawSrcDir
block|,
name|rawSrcDirFile
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|xattrNames
init|=
block|{
name|USER_A1
block|,
name|RAW_A1
block|}
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|xattrVals
init|=
block|{
name|USER_A1_VALUE
block|,
name|RAW_A1_VALUE
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|xattrNames
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|dfs
operator|.
name|setXAttr
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|xattrNames
index|[
name|j
index|]
argument_list|,
name|xattrVals
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Check that a file as the source path works ok. */
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|src
argument_list|,
name|hdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|rawSrc
argument_list|,
name|hdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|src
argument_list|,
name|rawHdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|rawSrc
argument_list|,
name|rawHdfsTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* Use a relative /.reserved/raw path. */
specifier|final
name|Path
name|savedWd
init|=
name|dfs
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|rawSrcBase
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|relRawSrc
init|=
operator|new
name|Path
argument_list|(
literal|"../srcfile"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|relRawHdfsTestDir
init|=
operator|new
name|Path
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|relRawSrc
argument_list|,
name|relRawHdfsTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dfs
operator|.
name|setWorkingDirectory
argument_list|(
name|savedWd
argument_list|)
expr_stmt|;
block|}
comment|/* Check that a directory as the source path works ok. */
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|srcDir
argument_list|,
name|hdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|rawSrcDir
argument_list|,
name|hdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|srcDir
argument_list|,
name|rawHdfsTestDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
name|rawSrcDir
argument_list|,
name|rawHdfsTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* Use relative in an absolute path. */
specifier|final
name|String
name|relRawSrcDir
init|=
literal|"./.reserved/../.reserved/raw/../raw"
operator|+
name|testdir
operator|+
literal|"/srcdir"
decl_stmt|;
specifier|final
name|String
name|relRawDstDir
init|=
literal|"./.reserved/../.reserved/raw/../raw"
operator|+
name|testdir
decl_stmt|;
name|doTestCopyCommandsWithRawXAttrs
argument_list|(
name|shell
argument_list|,
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|relRawSrcDir
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|relRawDstDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|shell
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dfs
operator|.
name|delete
argument_list|(
name|hdfsTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestCopyCommandsWithRawXAttrs (FsShell shell, FileSystem fs, Path src, Path hdfsTestDir, boolean expectRaw)
specifier|private
name|void
name|doTestCopyCommandsWithRawXAttrs
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|hdfsTestDir
parameter_list|,
name|boolean
name|expectRaw
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|target
decl_stmt|;
name|boolean
name|srcIsRaw
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|srcIsRaw
operator|=
name|src
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/.reserved/raw"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcIsRaw
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|src
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/.reserved/raw"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|destIsRaw
init|=
name|hdfsTestDir
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/.reserved/raw"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|srcDestMismatch
init|=
name|srcIsRaw
operator|^
name|destIsRaw
decl_stmt|;
comment|// -p (possibly preserve raw if src& dst are both /.r/r */
if|if
condition|(
name|srcDestMismatch
condition|)
block|{
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|"-p"
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|"-p"
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
name|checkXAttrs
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|expectRaw
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// -px (possibly preserve raw, always preserve non-raw xattrs. */
if|if
condition|(
name|srcDestMismatch
condition|)
block|{
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|"-px"
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|"-px"
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
name|checkXAttrs
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|expectRaw
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// no args (possibly preserve raw, never preserve non-raw xattrs. */
if|if
condition|(
name|srcDestMismatch
condition|)
block|{
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|ERROR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|doCopyAndTest
argument_list|(
name|shell
argument_list|,
name|hdfsTestDir
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|SUCCESS
argument_list|)
expr_stmt|;
name|checkXAttrs
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|expectRaw
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doCopyAndTest (FsShell shell, Path dest, Path src, String cpArgs, int expectedExitCode)
specifier|private
name|Path
name|doCopyAndTest
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|Path
name|dest
parameter_list|,
name|Path
name|src
parameter_list|,
name|String
name|cpArgs
parameter_list|,
name|int
name|expectedExitCode
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|,
literal|"targetfile"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|argv
init|=
name|cpArgs
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
name|cpArgs
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cp -p is not working"
argument_list|,
name|expectedExitCode
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
DECL|method|checkXAttrs (FileSystem fs, Path target, boolean expectRaw, boolean expectVanillaXAttrs)
specifier|private
name|void
name|checkXAttrs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|target
parameter_list|,
name|boolean
name|expectRaw
parameter_list|,
name|boolean
name|expectVanillaXAttrs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|fs
operator|.
name|getXAttrs
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|expectRaw
condition|)
block|{
name|assertArrayEquals
argument_list|(
literal|"raw.a1 has incorrect value"
argument_list|,
name|RAW_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|RAW_A1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|expectVanillaXAttrs
condition|)
block|{
name|assertArrayEquals
argument_list|(
literal|"user.a1 has incorrect value"
argument_list|,
name|USER_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|USER_A1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"xattrs size mismatch"
argument_list|,
name|expectedCount
argument_list|,
name|xattrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify cp -ptopxa option will preserve directory attributes.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCopyCommandsToDirectoryWithPreserveOption ()
specifier|public
name|void
name|testCopyCommandsToDirectoryWithPreserveOption
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testCopyCommandsToDirectoryWithPreserveOption-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
name|Path
name|srcDir
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcDir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|srcDir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setAcl
argument_list|(
name|srcDir
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|EXECUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set sticky bit
name|dfs
operator|.
name|setPermission
argument_list|(
name|srcDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|ALL
argument_list|,
name|READ_EXECUTE
argument_list|,
name|EXECUTE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file in srcDir to check if modification time of
comment|// srcDir to be preserved after copying the file.
comment|// If cp -p command is to preserve modification time and then copy child
comment|// (srcFile), modification time will not be preserved.
name|Path
name|srcFile
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"srcFile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|srcFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|status
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mtime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|atime
init|=
name|status
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
name|status
operator|.
name|getOwner
argument_list|()
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|status
operator|.
name|getGroup
argument_list|()
decl_stmt|;
specifier|final
name|FsPermission
name|perm
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setXAttr
argument_list|(
name|srcDir
argument_list|,
name|USER_A1
argument_list|,
name|USER_A1_VALUE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setXAttr
argument_list|(
name|srcDir
argument_list|,
name|TRUSTED_A1
argument_list|,
name|TRUSTED_A1_VALUE
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// -p
name|Path
name|targetDir1
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetDir1"
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-p"
block|,
name|srcDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|targetDir1
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cp -p is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|FileStatus
name|targetStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetDir1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|targetPerm
init|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|targetDir1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls
init|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir1
argument_list|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptop
name|Path
name|targetDir2
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetDir2"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptop"
block|,
name|srcDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|targetDir2
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptop is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetDir2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|targetDir2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir2
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptopx
name|Path
name|targetDir3
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetDir3"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptopx"
block|,
name|srcDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|targetDir3
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptopx is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetDir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|targetDir3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xattrs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|USER_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|USER_A1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TRUSTED_A1_VALUE
argument_list|,
name|xattrs
operator|.
name|get
argument_list|(
name|TRUSTED_A1
argument_list|)
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir3
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptopa
name|Path
name|targetDir4
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetDir4"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptopa"
block|,
name|srcDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|targetDir4
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptopa is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetDir4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|targetDir4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir4
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|srcDir
argument_list|)
argument_list|,
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir4
argument_list|)
argument_list|)
expr_stmt|;
comment|// -ptoa (verify -pa option will preserve permissions also)
name|Path
name|targetDir5
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetDir5"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptoa"
block|,
name|srcDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|targetDir5
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptoa is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|targetDir5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|xattrs
operator|=
name|dfs
operator|.
name|getXAttrs
argument_list|(
name|targetDir5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xattrs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir5
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|srcDir
argument_list|)
argument_list|,
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|targetDir5
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|shell
operator|!=
literal|null
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Verify cp -pa option will preserve both ACL and sticky bit.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCopyCommandsPreserveAclAndStickyBit ()
specifier|public
name|void
name|testCopyCommandsPreserveAclAndStickyBit
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testCopyCommandsPreserveAclAndStickyBit-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|src
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setAcl
argument_list|(
name|src
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|EXECUTE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set sticky bit
name|dfs
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|ALL
argument_list|,
name|READ_EXECUTE
argument_list|,
name|EXECUTE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mtime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|atime
init|=
name|status
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
name|status
operator|.
name|getOwner
argument_list|()
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|status
operator|.
name|getGroup
argument_list|()
decl_stmt|;
specifier|final
name|FsPermission
name|perm
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// -p preserves sticky bit and doesn't preserve ACL
name|Path
name|target1
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile1"
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-p"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target1
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cp is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|FileStatus
name|targetStatus
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|targetPerm
init|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls
init|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target1
argument_list|)
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
comment|// -ptopa preserves both sticky bit and ACL
name|Path
name|target2
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"targetfile2"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-ptopa"
block|,
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|target2
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -ptopa is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|targetStatus
operator|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|target2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|targetStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atime
argument_list|,
name|targetStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|owner
argument_list|,
name|targetStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|group
argument_list|,
name|targetStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|targetPerm
operator|=
name|targetStatus
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|.
name|equals
argument_list|(
name|targetPerm
argument_list|)
argument_list|)
expr_stmt|;
name|acls
operator|=
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target2
argument_list|)
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|acls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetStatus
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|src
argument_list|)
argument_list|,
name|dfs
operator|.
name|getAclStatus
argument_list|(
name|target2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|shell
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// force Copy Option is -f
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCopyCommandsWithForceOption ()
specifier|public
name|void
name|testCopyCommandsWithForceOption
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testFileForPut"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|localfilepath
init|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testCopyCommandsWithForceOption-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
name|localFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"testFileForPut"
argument_list|)
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|()
expr_stmt|;
comment|// Tests for put
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
literal|"-f"
block|,
name|localfilepath
block|,
name|testdir
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"put -f is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"put command itself is able to overwrite the file"
argument_list|,
name|ERROR
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Tests for copyFromLocal
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-copyFromLocal"
block|,
literal|"-f"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"copyFromLocal -f is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-copyFromLocal"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"copyFromLocal command itself is able to overwrite the file"
argument_list|,
name|ERROR
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Tests for cp
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
literal|"-f"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp -f is not working"
argument_list|,
name|SUCCESS
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-cp"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cp command itself is able to overwrite the file"
argument_list|,
name|ERROR
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|shell
condition|)
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
name|localFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* [refs HDFS-5033]    *    * return a "Permission Denied" message instead of "No such file or Directory"    * when trying to put/copyFromLocal a file that doesn't have read access    *    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCopyFromLocalWithPermissionDenied ()
specifier|public
name|void
name|testCopyFromLocalWithPermissionDenied
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
specifier|final
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testFileWithNoReadPermissions"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|localfilepath
init|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-CopyFromLocalWithPermissionDenied-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|hdfsTestDir
argument_list|)
expr_stmt|;
name|localFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|localFile
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"testFileForPut"
argument_list|)
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|()
expr_stmt|;
comment|// capture system error messages, snarfed from testErrOutPut()
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|tmp
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
comment|// Tests for put
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
name|localfilepath
block|,
name|testdir
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"put is working"
argument_list|,
name|ERROR
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|String
name|returned
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|" outputs Permission denied error message"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// Tests for copyFromLocal
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-copyFromLocal"
block|,
name|localfilepath
block|,
name|testdir
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"copyFromLocal -f is working"
argument_list|,
name|ERROR
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|returned
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|" outputs Permission denied error message"
argument_list|,
operator|(
name|returned
operator|.
name|lastIndexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|shell
condition|)
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|localFile
operator|.
name|exists
argument_list|()
condition|)
name|localFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|hdfsTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test -setrep with a replication factor that is too low.  We have to test    * this here because the mini-miniCluster used with testHDFSConf.xml uses a    * replication factor of 1 (for good reason).    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetrepLow ()
specifier|public
name|void
name|testSetrepLow
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_MIN_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MiniDFSCluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|builder
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-testSetrepLow"
decl_stmt|;
specifier|final
name|Path
name|hdfsFile
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"testFileForSetrepLow"
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|final
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create test directory"
argument_list|,
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|hdfsFile
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Capture the command output so we can examine it
specifier|final
name|ByteArrayOutputStream
name|bao
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|capture
init|=
operator|new
name|PrintStream
argument_list|(
name|bao
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|capture
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|capture
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-setrep"
block|,
literal|"1"
block|,
name|hdfsFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"Command did not return the expected exit code"
argument_list|,
literal|1
argument_list|,
name|shell
operator|.
name|run
argument_list|(
name|argv
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Error message is not the expected error message"
operator|+
name|bao
operator|.
name|toString
argument_list|()
argument_list|,
name|bao
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"setrep: Requested replication factor of 1 is less than "
operator|+
literal|"the required minimum of 2 for /tmp/TestDFSShell-"
operator|+
literal|"testSetrepLow/testFileForSetrepLow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// setrep for file and directory.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetrep ()
specifier|public
name|void
name|testSetrep
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testdir1
init|=
literal|"/tmp/TestDFSShell-testSetrep-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testdir2
init|=
name|testdir1
operator|+
literal|"/nestedDir"
decl_stmt|;
specifier|final
name|Path
name|hdfsFile1
init|=
operator|new
name|Path
argument_list|(
name|testdir1
argument_list|,
literal|"testFileForSetrep"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hdfsFile2
init|=
operator|new
name|Path
argument_list|(
name|testdir2
argument_list|,
literal|"testFileForSetrep"
argument_list|)
decl_stmt|;
specifier|final
name|Short
name|oldRepFactor
init|=
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Short
name|newRepFactor
init|=
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|String
index|[]
name|argv
decl_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|testdir2
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|hdfsFile1
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|hdfsFile2
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Tests for setrep on a file.
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setrep"
block|,
name|newRepFactor
operator|.
name|toString
argument_list|()
block|,
name|hdfsFile1
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|shell
operator|.
name|run
argument_list|(
name|argv
argument_list|)
argument_list|,
name|is
argument_list|(
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|hdfsFile1
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|,
name|is
argument_list|(
name|newRepFactor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|hdfsFile2
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|,
name|is
argument_list|(
name|oldRepFactor
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tests for setrep
comment|// Tests for setrep on a directory and make sure it is applied recursively.
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-setrep"
block|,
name|newRepFactor
operator|.
name|toString
argument_list|()
block|,
name|testdir1
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|shell
operator|.
name|run
argument_list|(
name|argv
argument_list|)
argument_list|,
name|is
argument_list|(
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|hdfsFile1
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|,
name|is
argument_list|(
name|newRepFactor
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|hdfsFile2
argument_list|)
operator|.
name|getReplication
argument_list|()
argument_list|,
name|is
argument_list|(
name|newRepFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|shell
operator|!=
literal|null
condition|)
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete a file optionally configuring trash on the server and client.    */
DECL|method|deleteFileUsingTrash ( boolean serverTrash, boolean clientTrash)
specifier|private
name|void
name|deleteFileUsingTrash
parameter_list|(
name|boolean
name|serverTrash
parameter_list|,
name|boolean
name|clientTrash
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Run a miniCluster, optionally with trash enabled on the server
name|Configuration
name|serverConf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverTrash
condition|)
block|{
name|serverConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|serverConf
argument_list|)
decl_stmt|;
comment|// Create a client, optionally with trash enabled
if|if
condition|(
name|clientTrash
condition|)
block|{
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create and delete a file
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// Use a separate tmp dir for each invocation.
specifier|final
name|String
name|testdir
init|=
literal|"/tmp/TestDFSShell-deleteFileUsingTrash-"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testFile
init|=
name|testdir
operator|+
literal|"/foo"
decl_stmt|;
specifier|final
name|String
name|trashFile
init|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|()
operator|+
literal|"/"
operator|+
name|testFile
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|testFile
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverTrash
condition|)
block|{
comment|// If the server config was set we should use it unconditionally
name|assertTrue
argument_list|(
literal|"File not in trash"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|trashFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clientTrash
condition|)
block|{
comment|// If the server config was not set but the client config was
comment|// set then we should use it
name|assertTrue
argument_list|(
literal|"File not in trashed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|trashFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If neither was set then we should not have trashed the file
name|assertFalse
argument_list|(
literal|"File was not removed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|testFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File was trashed"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|trashFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testAppendToFile ()
specifier|public
name|void
name|testAppendToFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|inputFileLength
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|File
name|testRoot
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testAppendtoFileDir"
argument_list|)
decl_stmt|;
name|testRoot
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file1
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|File
name|file2
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|createLocalFileWithRandomData
argument_list|(
name|inputFileLength
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|createLocalFileWithRandomData
argument_list|(
name|inputFileLength
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|FileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not a HDFS: "
operator|+
name|dfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|dfs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
comment|// Run appendToFile once, make sure that the target file is
comment|// created and is of the right size.
name|Path
name|remoteFile
init|=
operator|new
name|Path
argument_list|(
literal|"/remoteFile"
argument_list|)
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-appendToFile"
block|,
name|file1
operator|.
name|toString
argument_list|()
block|,
name|file2
operator|.
name|toString
argument_list|()
block|,
name|remoteFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|remoteFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|inputFileLength
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run the command once again and make sure that the target file
comment|// size has been doubled.
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|remoteFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|inputFileLength
operator|*
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testAppendToFileBadArgs ()
specifier|public
name|void
name|testAppendToFileBadArgs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|inputFileLength
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|File
name|testRoot
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testAppendToFileBadArgsDir"
argument_list|)
decl_stmt|;
name|testRoot
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file1
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|createLocalFileWithRandomData
argument_list|(
name|inputFileLength
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Run appendToFile with insufficient arguments.
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-appendToFile"
block|,
name|file1
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mix stdin with other input files. Must fail.
name|Path
name|remoteFile
init|=
operator|new
name|Path
argument_list|(
literal|"/remoteFile"
argument_list|)
decl_stmt|;
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-appendToFile"
block|,
name|file1
operator|.
name|toString
argument_list|()
block|,
literal|"-"
block|,
name|remoteFile
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|res
argument_list|,
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetXAttrPermission ()
specifier|public
name|void
name|testSetXAttrPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
specifier|final
name|FsShell
name|fshell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
comment|// No permission to write xattr
name|dfs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"-v"
block|,
literal|"1234"
block|,
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"-v"
block|,
literal|"1234"
block|,
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// No permission to read and remove
name|dfs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Read
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Remove
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"user.a1"
block|,
literal|"/foo"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|str
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* HDFS-6413 xattr names erroneously handled as case-insensitive */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetXAttrCaseSensitivity ()
specifier|public
name|void
name|testSetXAttrCaseSensitivity
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/mydir"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
specifier|final
name|FsShell
name|fshell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"User.Foo"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.FOO"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|,
literal|"user.FOO"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"USER.foo"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|,
literal|"user.FOO"
block|,
literal|"user.foo"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"USER.fOo"
block|,
literal|"-v"
block|,
literal|"myval"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|,
literal|"user.FOO"
block|,
literal|"user.foo"
block|,
literal|"user.fOo=\"myval\""
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo="
block|,
literal|"user.FOO="
block|,
literal|"user.foo="
block|}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"useR.foo"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|,
literal|"user.FOO"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"USER.FOO"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user.Foo"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"FOO"
block|}
argument_list|)
expr_stmt|;
name|doSetXattr
argument_list|(
name|out
argument_list|,
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"useR.Foo"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-n"
block|,
literal|"User.Foo"
block|,
literal|"/mydir"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Foo"
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setOut
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doSetXattr (ByteArrayOutputStream out, FsShell fshell, String[] setOp, String[] getOp, String[] expectArr, String[] dontExpectArr)
specifier|private
name|void
name|doSetXattr
parameter_list|(
name|ByteArrayOutputStream
name|out
parameter_list|,
name|FsShell
name|fshell
parameter_list|,
name|String
index|[]
name|setOp
parameter_list|,
name|String
index|[]
name|getOp
parameter_list|,
name|String
index|[]
name|expectArr
parameter_list|,
name|String
index|[]
name|dontExpectArr
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
name|setOp
argument_list|)
decl_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
name|getOp
argument_list|)
expr_stmt|;
specifier|final
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|expect
init|=
name|expectArr
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Incorrect results from getfattr. Expected: "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expect
argument_list|)
operator|.
name|append
argument_list|(
literal|" Full Result: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
name|expect
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dontExpectArr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dontExpect
init|=
name|dontExpectArr
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Incorrect results from getfattr. Didn't Expect: "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dontExpect
argument_list|)
operator|.
name|append
argument_list|(
literal|" Full Result: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
name|dontExpect
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    *    * Test to make sure that user namespace xattrs can be set only if path has    * access and for sticky directorries, only owner/privileged user can write.    * Trusted namespace xattrs can be set only with privileged users.    *    * As user1: Create a directory (/foo) as user1, chown it to user1 (and    * user1's group), grant rwx to "other".    *    * As user2: Set an xattr (should pass with path access).    *    * As user1: Set an xattr (should pass).    *    * As user2: Read the xattr (should pass). Remove the xattr (should pass with    * path access).    *    * As user1: Read the xattr (should pass). Remove the xattr (should pass).    *    * As user1: Change permissions only to owner    *    * As User2: Set an Xattr (Should fail set with no path access) Remove an    * Xattr (Should fail with no path access)    *    * As SuperUser: Set an Xattr with Trusted (Should pass)    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetXAttrPermissionAsDifferentOwner ()
specifier|public
name|void
name|testSetXAttrPermissionAsDifferentOwner
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|root
init|=
literal|"/testSetXAttrPermissionAsDifferentOwner"
decl_stmt|;
specifier|final
name|String
name|USER1
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|GROUP1
init|=
literal|"supergroup"
decl_stmt|;
specifier|final
name|UserGroupInformation
name|user1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER1
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP1
block|}
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|user2
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup2"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|SUPERUSER
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|PrintStream
name|bak
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|)
argument_list|,
name|USER1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|bak
operator|=
name|System
operator|.
name|err
expr_stmt|;
specifier|final
name|FsShell
name|fshell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test 1.  Let user1 be owner for /foo
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-mkdir"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Test 2. Give access to others
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Give access to "other"
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-chmod"
block|,
literal|"707"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 3. Should be allowed to write xattr if there is a path access to
comment|// user (user2).
name|user2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"-v"
block|,
literal|"1234"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Test 4. There should be permission to write xattr for
comment|// the owning user with write permissions.
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"-v"
block|,
literal|"1234"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 5. There should be permission to read non-owning user (user2) if
comment|// there is path access to that user and also can remove.
name|user2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Read
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Remove
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"user.a1"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 6. There should be permission to read/remove for
comment|// the owning user with path access.
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 7. Change permission to have path access only to owner(user1)
name|user1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Give access to "other"
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-chmod"
block|,
literal|"700"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Return should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 8. There should be no permissions to set for
comment|// the non-owning user with no path access.
name|user2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a2"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
specifier|final
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 9. There should be no permissions to remove for
comment|// the non-owning user with no path access.
name|user2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-x"
block|,
literal|"user.a2"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 1"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
specifier|final
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied printed"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"Permission denied"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test 10. Superuser should be allowed to set with trusted namespace
name|SUPERUSER
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"trusted.a3"
block|,
name|root
operator|+
literal|"/foo"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|bak
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bak
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * 1. Test that CLI throws an exception and returns non-0 when user does    * not have permission to read an xattr.    * 2. Test that CLI throws an exception and returns non-0 when a non-existent    * xattr is requested.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testGetFAttrErrors ()
specifier|public
name|void
name|testGetFAttrErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
name|PrintStream
name|bakErr
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/testGetFAttrErrors"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bakErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
specifier|final
name|FsShell
name|fshell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
comment|// No permission for "other".
name|dfs
operator|.
name|setPermission
argument_list|(
name|p
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"-v"
block|,
literal|"1234"
block|,
name|p
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Returned should be 0"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
name|p
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"xattr value was incorrectly returned"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"1234"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|{
specifier|final
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fshell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-n"
block|,
literal|"user.nonexistent"
block|,
name|p
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"xattr value was incorrectly returned"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"getfattr: At least one of the attributes provided was not found"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|bakErr
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setErr
argument_list|(
name|bakErr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that the server trash configuration is respected when    * the client configuration is not set.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testServerConfigRespected ()
specifier|public
name|void
name|testServerConfigRespected
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFileUsingTrash
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that server trash configuration is respected even when the    * client configuration is set.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testServerConfigRespectedWithClient ()
specifier|public
name|void
name|testServerConfigRespectedWithClient
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFileUsingTrash
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the client trash configuration is respected when    * the server configuration is not set.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClientConfigRespected ()
specifier|public
name|void
name|testClientConfigRespected
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFileUsingTrash
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that trash is disabled by default.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNoTrashConfig ()
specifier|public
name|void
name|testNoTrashConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFileUsingTrash
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testListReserved ()
specifier|public
name|void
name|testListReserved
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
name|test
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FSDirectory
operator|.
name|DOT_RESERVED_STRING
argument_list|,
name|test
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Listing /.reserved/ should show 2 items: raw and .inodes
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FSDirectory
operator|.
name|DOT_INODES_STRING
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_KEY
argument_list|)
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"raw"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_KEY
argument_list|)
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|// Listing / should not show /.reserved
name|stats
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// runCmd prints error into System.err, thus verify from there.
name|PrintStream
name|syserr
init|=
name|System
operator|.
name|err
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|ps
argument_list|)
expr_stmt|;
try|try
block|{
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-ls"
argument_list|,
literal|"/.reserved"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-ls"
argument_list|,
literal|"/.reserved/raw/.reserved"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No such file or directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|syserr
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMkdirReserved ()
specifier|public
name|void
name|testMkdirReserved
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't mkdir /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected, HadoopIllegalArgumentException thrown from remote
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"\".reserved\" is reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRmReserved ()
specifier|public
name|void
name|testRmReserved
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|dfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't delete /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected, InvalidPathException thrown from remote
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path name /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|//(timeout = 30000)
DECL|method|testCopyReserved ()
specifier|public
name|void
name|testCopyReserved
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testFileForPut"
argument_list|)
decl_stmt|;
name|localFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
specifier|final
name|String
name|localfilepath
init|=
operator|new
name|Path
argument_list|(
name|localFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|localfilepath
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't copyFromLocal to /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected, InvalidPathException thrown from remote
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path name /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|testdir
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"TestDFSShell-testCopyReserved"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|hdfsTestDir
init|=
operator|new
name|Path
argument_list|(
name|testdir
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testdir
argument_list|,
literal|"testFileForPut"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|hdfsTestDir
argument_list|,
literal|"srcfile"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|src
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
comment|// runCmd prints error into System.err, thus verify from there.
name|PrintStream
name|syserr
init|=
name|System
operator|.
name|err
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|ps
argument_list|)
expr_stmt|;
try|try
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-cp"
argument_list|,
name|src
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/.reserved"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path name /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|syserr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testChmodReserved ()
specifier|public
name|void
name|testChmodReserved
parameter_list|()
throws|throws
name|IOException
block|{
comment|// runCmd prints error into System.err, thus verify from there.
name|PrintStream
name|syserr
init|=
name|System
operator|.
name|err
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|ps
argument_list|)
expr_stmt|;
try|try
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chmod"
argument_list|,
literal|"777"
argument_list|,
literal|"/.reserved"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path name /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|syserr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testChownReserved ()
specifier|public
name|void
name|testChownReserved
parameter_list|()
throws|throws
name|IOException
block|{
comment|// runCmd prints error into System.err, thus verify from there.
name|PrintStream
name|syserr
init|=
name|System
operator|.
name|err
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|ps
argument_list|)
expr_stmt|;
try|try
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|runCmd
argument_list|(
name|shell
argument_list|,
literal|"-chown"
argument_list|,
literal|"user1"
argument_list|,
literal|"/.reserved"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid path name /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|syserr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSymLinkReserved ()
specifier|public
name|void
name|testSymLinkReserved
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|dfs
operator|.
name|createSymlink
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/rl1"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't create symlink to /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected, InvalidPathException thrown from remote
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid target name: /.reserved"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSnapshotReserved ()
specifier|public
name|void
name|testSnapshotReserved
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|reserved
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved"
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|allowSnapshot
argument_list|(
name|reserved
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't allow snapshot on /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Directory does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|createSnapshot
argument_list|(
name|reserved
argument_list|,
literal|"snap"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't create snapshot on /.reserved"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Directory/File does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

