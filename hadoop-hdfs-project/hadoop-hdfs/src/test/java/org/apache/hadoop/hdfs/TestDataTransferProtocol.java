begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|PacketHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|PipelineAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ReadOpChecksumInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|InternalDataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This tests data transfer protocol handling in the Datanode. It sends  * various forms of wrong data and verifies that Datanode handles it well.  */
end_comment

begin_class
DECL|class|TestDataTransferProtocol
specifier|public
class|class
name|TestDataTransferProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestDataTransferProtocol"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_CHECKSUM
specifier|private
specifier|static
specifier|final
name|DataChecksum
name|DEFAULT_CHECKSUM
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|512
argument_list|)
decl_stmt|;
DECL|field|datanode
name|DatanodeID
name|datanode
decl_stmt|;
DECL|field|dnAddr
name|InetSocketAddress
name|dnAddr
decl_stmt|;
DECL|field|sendBuf
specifier|final
name|ByteArrayOutputStream
name|sendBuf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|128
argument_list|)
decl_stmt|;
DECL|field|sendOut
specifier|final
name|DataOutputStream
name|sendOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|sendBuf
argument_list|)
decl_stmt|;
DECL|field|sender
specifier|final
name|Sender
name|sender
init|=
operator|new
name|Sender
argument_list|(
name|sendOut
argument_list|)
decl_stmt|;
DECL|field|recvBuf
specifier|final
name|ByteArrayOutputStream
name|recvBuf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|128
argument_list|)
decl_stmt|;
DECL|field|recvOut
specifier|final
name|DataOutputStream
name|recvOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|recvBuf
argument_list|)
decl_stmt|;
DECL|method|sendRecvData (String testDescription, boolean eofExpected)
specifier|private
name|void
name|sendRecvData
parameter_list|(
name|String
name|testDescription
parameter_list|,
name|boolean
name|eofExpected
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Opens a socket to datanode      * sends the data in sendBuf.      * If there is data in expectedBuf, expects to receive the data      *     from datanode that matches expectedBuf.      * If there is an exception while recieving, throws it      *     only if exceptionExcepted is false.      */
name|Socket
name|sock
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|testDescription
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing : "
operator|+
name|testDescription
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to write:"
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|sendBuf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sock
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
name|sock
operator|.
name|connect
argument_list|(
name|dnAddr
argument_list|,
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setSoTimeout
argument_list|(
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|sock
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
comment|// Should we excuse
name|byte
index|[]
name|retBuf
init|=
operator|new
name|byte
index|[
name|recvBuf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sendBuf
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|retBuf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
if|if
condition|(
name|eofExpected
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got EOF as expected."
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
name|eof
throw|;
block|}
name|String
name|received
init|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|retBuf
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|recvBuf
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected: "
operator|+
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|eofExpected
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Did not recieve IOException when an exception "
operator|+
literal|"is expected while reading from "
operator|+
name|datanode
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFile (FileSystem fs, Path path, int fileLen)
name|void
name|readFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|fileLen
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|fileLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
DECL|method|writeZeroLengthPacket (ExtendedBlock block, String description)
specifier|private
name|void
name|writeZeroLengthPacket
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|IOException
block|{
name|PacketHeader
name|hdr
init|=
operator|new
name|PacketHeader
argument_list|(
literal|8
argument_list|,
comment|// size of packet
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
comment|// OffsetInBlock
literal|100
argument_list|,
comment|// sequencenumber
literal|true
argument_list|,
comment|// lastPacketInBlock
literal|0
argument_list|,
comment|// chunk length
literal|false
argument_list|)
decl_stmt|;
comment|// sync block
name|hdr
operator|.
name|write
argument_list|(
name|sendOut
argument_list|)
expr_stmt|;
name|sendOut
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// zero checksum
comment|//ok finally write a block with 0 len
name|sendResponse
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
operator|new
name|PipelineAck
argument_list|(
literal|100
argument_list|,
operator|new
name|int
index|[]
block|{
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|DISABLED
argument_list|,
name|Status
operator|.
name|SUCCESS
argument_list|)
block|}
argument_list|)
operator|.
name|write
argument_list|(
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
name|description
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|sendResponse (Status status, String firstBadLink, String message, DataOutputStream out)
specifier|private
name|void
name|sendResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|firstBadLink
parameter_list|,
name|String
name|message
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstBadLink
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFirstBadLink
argument_list|(
name|firstBadLink
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrite (ExtendedBlock block, BlockConstructionStage stage, long newGS, String description, Boolean eofExcepted)
specifier|private
name|void
name|testWrite
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|BlockConstructionStage
name|stage
parameter_list|,
name|long
name|newGS
parameter_list|,
name|String
name|description
parameter_list|,
name|Boolean
name|eofExcepted
parameter_list|)
throws|throws
name|IOException
block|{
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|block
argument_list|,
name|stage
argument_list|,
name|newGS
argument_list|,
name|DEFAULT_CHECKSUM
argument_list|)
expr_stmt|;
if|if
condition|(
name|eofExcepted
condition|)
block|{
name|sendResponse
argument_list|(
name|Status
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
name|description
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stage
operator|==
name|BlockConstructionStage
operator|.
name|PIPELINE_CLOSE_RECOVERY
condition|)
block|{
comment|//ok finally write a block with 0 len
name|sendResponse
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
name|description
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeZeroLengthPacket
argument_list|(
name|block
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpWrite ()
specifier|public
name|void
name|testOpWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|BLOCK_ID_FUDGE
init|=
literal|128
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|datanode
operator|=
name|InternalDataNodeTestUtils
operator|.
name|getDNRegistrationForBP
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|poolId
argument_list|)
expr_stmt|;
name|dnAddr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|datanode
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|/* Test writing to finalized replicas */
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// get the first blockid for the file
name|ExtendedBlock
name|firstBlock
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
decl_stmt|;
comment|// test PIPELINE_SETUP_CREATE on a finalized block
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0L
argument_list|,
literal|"Cannot create an existing block"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_DATA_STREAMING on a finalized block
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|DATA_STREAMING
argument_list|,
literal|0L
argument_list|,
literal|"Unexpected stage"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_STREAMING_RECOVERY on an existing block
name|long
name|newGS
init|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
decl_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_STREAMING_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Cannot recover data streaming to a finalized replica"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND on an existing block
name|newGS
operator|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND
argument_list|,
name|newGS
argument_list|,
literal|"Append to a finalized replica"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|firstBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND_RECOVERY on an existing block
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol1.dat"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|firstBlock
operator|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|newGS
operator|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Recover appending to a finalized replica"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test PIPELINE_CLOSE_RECOVERY on an existing block
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol2.dat"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|firstBlock
operator|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|newGS
operator|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_CLOSE_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Recover failed close to a finalized replica"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|firstBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
comment|// Test writing to a new block. Don't choose the next sequential
comment|// block ID to avoid conflicting with IDs chosen by the NN.
name|long
name|newBlockId
init|=
name|firstBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|BLOCK_ID_FUDGE
decl_stmt|;
name|ExtendedBlock
name|newBlock
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|firstBlock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|newBlockId
argument_list|,
literal|0
argument_list|,
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|// test PIPELINE_SETUP_CREATE on a new block
name|testWrite
argument_list|(
name|newBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0L
argument_list|,
literal|"Create a new block"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_STREAMING_RECOVERY on a new block
name|newGS
operator|=
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|newBlock
operator|.
name|setBlockId
argument_list|(
name|newBlock
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|testWrite
argument_list|(
name|newBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_STREAMING_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Recover a new block"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND on a new block
name|newGS
operator|=
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|newBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND
argument_list|,
name|newGS
argument_list|,
literal|"Cannot append to a new block"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND_RECOVERY on a new block
name|newBlock
operator|.
name|setBlockId
argument_list|(
name|newBlock
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|newGS
operator|=
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|newBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Cannot append to a new block"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* Test writing to RBW replicas */
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol1.dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSOutputStream
name|out
init|=
call|(
name|DFSOutputStream
call|)
argument_list|(
name|fileSys
operator|.
name|append
argument_list|(
name|file1
argument_list|)
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|firstBlock
operator|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|firstBlock
operator|.
name|setNumBytes
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
try|try
block|{
comment|// test PIPELINE_SETUP_CREATE on a RBW block
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0L
argument_list|,
literal|"Cannot create a RBW block"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND on an existing block
name|newGS
operator|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND
argument_list|,
name|newGS
argument_list|,
literal|"Cannot append to a RBW replica"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_APPEND on an existing block
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_APPEND_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Recover append to a RBW replica"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|firstBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
comment|// test PIPELINE_SETUP_STREAMING_RECOVERY on a RBW block
name|file
operator|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol2.dat"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1L
argument_list|,
operator|(
name|short
operator|)
name|numDataNodes
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|out
operator|=
call|(
name|DFSOutputStream
call|)
argument_list|(
name|fileSys
operator|.
name|append
argument_list|(
name|file
argument_list|)
operator|.
name|getWrappedStream
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|in
operator|=
name|fileSys
operator|.
name|open
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|firstBlock
operator|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|in
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|firstBlock
operator|.
name|setNumBytes
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|newGS
operator|=
name|firstBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|testWrite
argument_list|(
name|firstBlock
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_STREAMING_RECOVERY
argument_list|,
name|newGS
argument_list|,
literal|"Recover a RBW replica"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDataTransferProtocol ()
specifier|public
name|void
name|testDataTransferProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|oneMil
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"dataprotocol.dat"
argument_list|)
decl_stmt|;
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|numDataNodes
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|datanode
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|dnAddr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|datanode
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|fileLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|,
name|fileLen
argument_list|,
name|fileSys
operator|.
name|getDefaultBlockSize
argument_list|(
name|file
argument_list|)
argument_list|,
name|fileSys
operator|.
name|getDefaultReplication
argument_list|(
name|file
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// get the first blockid for the file
specifier|final
name|ExtendedBlock
name|firstBlock
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|)
decl_stmt|;
specifier|final
name|String
name|poolId
init|=
name|firstBlock
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|long
name|newBlockId
init|=
name|firstBlock
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
decl_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// bad version
name|recvOut
operator|.
name|writeShort
argument_list|(
call|(
name|short
call|)
argument_list|(
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sendOut
operator|.
name|writeShort
argument_list|(
call|(
name|short
call|)
argument_list|(
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Wrong Version"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// bad ops
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sendOut
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|DataTransferProtocol
operator|.
name|DATA_TRANSFER_VERSION
argument_list|)
expr_stmt|;
name|sendOut
operator|.
name|writeByte
argument_list|(
name|Op
operator|.
name|WRITE_BLOCK
operator|.
name|code
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Wrong Op Code"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* Test OP_WRITE_BLOCK */
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataChecksum
name|badChecksum
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|DEFAULT_CHECKSUM
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|badChecksum
argument_list|)
operator|.
name|getBytesPerChecksum
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|poolId
argument_list|,
name|newBlockId
argument_list|,
name|badChecksum
argument_list|)
expr_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sendResponse
argument_list|(
name|Status
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"wrong bytesPerChecksum while writing"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|poolId
argument_list|,
operator|++
name|newBlockId
argument_list|,
name|DEFAULT_CHECKSUM
argument_list|)
expr_stmt|;
name|PacketHeader
name|hdr
init|=
operator|new
name|PacketHeader
argument_list|(
literal|4
argument_list|,
comment|// size of packet
literal|0
argument_list|,
comment|// offset in block,
literal|100
argument_list|,
comment|// seqno
literal|false
argument_list|,
comment|// last packet
operator|-
literal|1
operator|-
name|random
operator|.
name|nextInt
argument_list|(
name|oneMil
argument_list|)
argument_list|,
comment|// bad datalen
literal|false
argument_list|)
decl_stmt|;
name|hdr
operator|.
name|write
argument_list|(
name|sendOut
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
operator|new
name|PipelineAck
argument_list|(
literal|100
argument_list|,
operator|new
name|int
index|[]
block|{
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|DISABLED
argument_list|,
name|Status
operator|.
name|ERROR
argument_list|)
block|}
argument_list|)
operator|.
name|write
argument_list|(
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"negative DATA_CHUNK len while writing block "
operator|+
name|newBlockId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test for writing a valid zero size block
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeBlock
argument_list|(
name|poolId
argument_list|,
operator|++
name|newBlockId
argument_list|,
name|DEFAULT_CHECKSUM
argument_list|)
expr_stmt|;
name|hdr
operator|=
operator|new
name|PacketHeader
argument_list|(
literal|8
argument_list|,
comment|// size of packet
literal|0
argument_list|,
comment|// OffsetInBlock
literal|100
argument_list|,
comment|// sequencenumber
literal|true
argument_list|,
comment|// lastPacketInBlock
literal|0
argument_list|,
comment|// chunk length
literal|false
argument_list|)
expr_stmt|;
name|hdr
operator|.
name|write
argument_list|(
name|sendOut
argument_list|)
expr_stmt|;
name|sendOut
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// zero checksum
name|sendOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//ok finally write a block with 0 len
name|sendResponse
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
operator|new
name|PipelineAck
argument_list|(
literal|100
argument_list|,
operator|new
name|int
index|[]
block|{
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|DISABLED
argument_list|,
name|Status
operator|.
name|SUCCESS
argument_list|)
block|}
argument_list|)
operator|.
name|write
argument_list|(
name|recvOut
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Writing a zero len block blockid "
operator|+
name|newBlockId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* Test OP_READ_BLOCK */
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|blk
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
name|firstBlock
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|blkid
init|=
name|blk
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
comment|// bad block id
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|blk
operator|.
name|setBlockId
argument_list|(
name|blkid
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
literal|0L
argument_list|,
name|fileLen
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Wrong block ID "
operator|+
name|newBlockId
operator|+
literal|" for read"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// negative block start offset -1L
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|blk
operator|.
name|setBlockId
argument_list|(
name|blkid
argument_list|)
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
operator|-
literal|1L
argument_list|,
name|fileLen
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Negative start-offset for read for block "
operator|+
name|firstBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// bad block start offset
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
name|fileLen
argument_list|,
name|fileLen
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Wrong start-offset for reading block "
operator|+
name|firstBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// negative length is ok. Datanode assumes we want to read the whole block.
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|)
operator|.
name|setReadOpChecksumInfo
argument_list|(
name|ReadOpChecksumInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChecksum
argument_list|(
name|DataTransferProtoUtil
operator|.
name|toProto
argument_list|(
name|DEFAULT_CHECKSUM
argument_list|)
argument_list|)
operator|.
name|setChunkOffset
argument_list|(
literal|0L
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|recvOut
argument_list|)
expr_stmt|;
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
literal|0L
argument_list|,
operator|-
literal|1L
operator|-
name|random
operator|.
name|nextInt
argument_list|(
name|oneMil
argument_list|)
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Negative length for reading block "
operator|+
name|firstBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// length is more than size of block.
name|recvBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sendResponse
argument_list|(
name|Status
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
literal|"opReadBlock "
operator|+
name|firstBlock
operator|+
literal|" received exception java.io.IOException:  "
operator|+
literal|"Offset 0 and length 4097 don't match block "
operator|+
name|firstBlock
operator|+
literal|" ( blockLen 4096 )"
argument_list|,
name|recvOut
argument_list|)
expr_stmt|;
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
literal|0L
argument_list|,
name|fileLen
operator|+
literal|1
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|sendRecvData
argument_list|(
literal|"Wrong length for reading block "
operator|+
name|firstBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//At the end of all this, read the file to make sure that succeeds finally.
name|sendBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|sender
operator|.
name|readBlock
argument_list|(
name|blk
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
literal|0L
argument_list|,
name|fileLen
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|readFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
name|fileLen
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPacketHeader ()
specifier|public
name|void
name|testPacketHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|PacketHeader
name|hdr
init|=
operator|new
name|PacketHeader
argument_list|(
literal|4
argument_list|,
comment|// size of packet
literal|1024
argument_list|,
comment|// OffsetInBlock
literal|100
argument_list|,
comment|// sequencenumber
literal|false
argument_list|,
comment|// lastPacketInBlock
literal|4096
argument_list|,
comment|// chunk length
literal|false
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|hdr
operator|.
name|write
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read back using DataInput
name|PacketHeader
name|readBack
init|=
operator|new
name|PacketHeader
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|readBack
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdr
argument_list|,
name|readBack
argument_list|)
expr_stmt|;
comment|// Read back using ByteBuffer
name|readBack
operator|=
operator|new
name|PacketHeader
argument_list|()
expr_stmt|;
name|readBack
operator|.
name|readFields
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hdr
argument_list|,
name|readBack
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hdr
operator|.
name|sanityCheck
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hdr
operator|.
name|sanityCheck
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|TestPipeLineAckCompatibility ()
specifier|public
name|void
name|TestPipeLineAckCompatibility
parameter_list|()
throws|throws
name|IOException
block|{
name|DataTransferProtos
operator|.
name|PipelineAckProto
name|proto
init|=
name|DataTransferProtos
operator|.
name|PipelineAckProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSeqno
argument_list|(
literal|0
argument_list|)
operator|.
name|addReply
argument_list|(
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DataTransferProtos
operator|.
name|PipelineAckProto
name|newProto
init|=
name|DataTransferProtos
operator|.
name|PipelineAckProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|proto
argument_list|)
operator|.
name|addFlag
argument_list|(
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|SUPPORTED
argument_list|,
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|oldAckBytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|oldAckBytes
argument_list|)
expr_stmt|;
name|PipelineAck
name|oldAck
init|=
operator|new
name|PipelineAck
argument_list|()
decl_stmt|;
name|oldAck
operator|.
name|readFields
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|oldAckBytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|DISABLED
argument_list|,
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
argument_list|,
name|oldAck
operator|.
name|getHeaderFlag
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|PipelineAck
name|newAck
init|=
operator|new
name|PipelineAck
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|newAckBytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|newProto
operator|.
name|writeDelimitedTo
argument_list|(
name|newAckBytes
argument_list|)
expr_stmt|;
name|newAck
operator|.
name|readFields
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|newAckBytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PipelineAck
operator|.
name|combineHeader
argument_list|(
name|PipelineAck
operator|.
name|ECN
operator|.
name|SUPPORTED
argument_list|,
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
argument_list|,
name|newAck
operator|.
name|getHeaderFlag
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBlock (String poolId, long blockId, DataChecksum checksum)
name|void
name|writeBlock
parameter_list|(
name|String
name|poolId
parameter_list|,
name|long
name|blockId
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBlock
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
name|poolId
argument_list|,
name|blockId
argument_list|)
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0L
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBlock (ExtendedBlock block, BlockConstructionStage stage, long newGS, DataChecksum checksum)
name|void
name|writeBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|BlockConstructionStage
name|stage
parameter_list|,
name|long
name|newGS
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|)
throws|throws
name|IOException
block|{
name|sender
operator|.
name|writeBlock
argument_list|(
name|block
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
literal|"cl"
argument_list|,
operator|new
name|DatanodeInfo
index|[
literal|1
index|]
argument_list|,
operator|new
name|StorageType
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|,
name|stage
argument_list|,
literal|0
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|newGS
argument_list|,
name|checksum
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

