begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaByStorageTypeExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDiskspaceQuotaUpdate
specifier|public
class|class
name|TestDiskspaceQuotaUpdate
block|{
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|4
decl_stmt|;
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0L
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestQuotaUpdate"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsdir
specifier|private
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsdir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test if the quota can be correctly updated for create file    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQuotaUpdateWithFileCreate ()
specifier|public
name|void
name|testQuotaUpdateWithFileCreate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|createdFile
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"created_file.data"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|foo
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|long
name|fileLen
init|=
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|createdFile
argument_list|,
name|BLOCKSIZE
operator|/
literal|16
argument_list|,
name|fileLen
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|INode
name|fnode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fnode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaCounts
name|cnt
init|=
name|fnode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cnt
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fileLen
operator|*
name|REPLICATION
argument_list|,
name|cnt
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the quota can be correctly updated for append    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateQuotaForAppend ()
specifier|public
name|void
name|testUpdateQuotaForAppend
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|long
name|currentFileLen
init|=
name|BLOCKSIZE
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|currentFileLen
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|foo
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// append half of the block data, the previous file length is at block
comment|// boundary
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|currentFileLen
operator|+=
operator|(
name|BLOCKSIZE
operator|/
literal|2
operator|)
expr_stmt|;
name|INodeDirectory
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fooNode
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaCounts
name|quota
init|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|long
name|ns
init|=
name|quota
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
name|long
name|ds
init|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// foo and bar
name|assertEquals
argument_list|(
name|currentFileLen
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|ContentSummary
name|c
init|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
comment|// append another block, the previous file length is not at block boundary
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|currentFileLen
operator|+=
name|BLOCKSIZE
expr_stmt|;
name|quota
operator|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|ns
operator|=
name|quota
operator|.
name|getNameSpace
argument_list|()
expr_stmt|;
name|ds
operator|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// foo and bar
name|assertEquals
argument_list|(
name|currentFileLen
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
comment|// append several blocks
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
operator|*
literal|3
operator|+
name|BLOCKSIZE
operator|/
literal|8
argument_list|)
expr_stmt|;
name|currentFileLen
operator|+=
operator|(
name|BLOCKSIZE
operator|*
literal|3
operator|+
name|BLOCKSIZE
operator|/
literal|8
operator|)
expr_stmt|;
name|quota
operator|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|ns
operator|=
name|quota
operator|.
name|getNameSpace
argument_list|()
expr_stmt|;
name|ds
operator|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// foo and bar
name|assertEquals
argument_list|(
name|currentFileLen
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|c
operator|=
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the quota can be correctly updated when file length is updated    * through fsync    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateQuotaForFSync ()
specifier|public
name|void
name|testUpdateQuotaForFSync
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|foo
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|append
argument_list|(
name|bar
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|BLOCKSIZE
operator|/
literal|4
index|]
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|HdfsDataOutputStream
operator|.
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|INodeDirectory
name|fooNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|QuotaCounts
name|quota
init|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|long
name|ns
init|=
name|quota
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
name|long
name|ds
init|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// foo and bar
name|assertEquals
argument_list|(
name|BLOCKSIZE
operator|*
literal|2
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
comment|// file is under construction
name|out
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
name|BLOCKSIZE
operator|/
literal|4
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fooNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
name|quota
operator|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|ns
operator|=
name|quota
operator|.
name|getNameSpace
argument_list|()
expr_stmt|;
name|ds
operator|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|BLOCKSIZE
operator|+
name|BLOCKSIZE
operator|/
literal|2
operator|)
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
comment|// append another block
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|quota
operator|=
name|fooNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
expr_stmt|;
name|ns
operator|=
name|quota
operator|.
name|getNameSpace
argument_list|()
expr_stmt|;
name|ds
operator|=
name|quota
operator|.
name|getStorageSpace
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// foo and bar
name|assertEquals
argument_list|(
operator|(
name|BLOCKSIZE
operator|*
literal|2
operator|+
name|BLOCKSIZE
operator|/
literal|2
operator|)
operator|*
name|REPLICATION
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test append over storage quota does not mark file as UC or create lease    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppendOverStorageQuota ()
specifier|public
name|void
name|testAppendOverStorageQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestAppendOverQuota"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
comment|// create partial block file
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
operator|/
literal|2
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// lower quota to cause exception when appending to partial block
name|dfs
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|dirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|spaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"append didn't fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DSQuotaExceededException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|LeaseManager
name|lm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLeaseManager
argument_list|()
decl_stmt|;
comment|// check that the file exists, isn't UC, and has no dangling lease
name|INodeFile
name|inode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"should not be UC"
argument_list|,
name|inode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"should not have a lease"
argument_list|,
name|lm
operator|.
name|getLease
argument_list|(
name|inode
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the quota usage is unchanged
specifier|final
name|long
name|newSpaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|spaceUsed
argument_list|,
name|newSpaceUsed
argument_list|)
expr_stmt|;
comment|// make sure edits aren't corrupted
name|dfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test append over a specific type of storage quota does not mark file as    * UC or create a lease    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppendOverTypeQuota ()
specifier|public
name|void
name|testAppendOverTypeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestAppendOverTypeQuota"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
comment|// create partial block file
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// set the storage policy on dir
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
operator|/
literal|2
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// set quota of SSD to 1L
name|dfs
operator|.
name|setQuotaByStorageType
argument_list|(
name|dir
argument_list|,
name|StorageType
operator|.
name|SSD
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|dirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|spaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"append didn't fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QuotaByStorageTypeExceededException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
comment|// check that the file exists, isn't UC, and has no dangling lease
name|LeaseManager
name|lm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLeaseManager
argument_list|()
decl_stmt|;
name|INodeFile
name|inode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"should not be UC"
argument_list|,
name|inode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"should not have a lease"
argument_list|,
name|lm
operator|.
name|getLease
argument_list|(
name|inode
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the quota usage is unchanged
specifier|final
name|long
name|newSpaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|spaceUsed
argument_list|,
name|newSpaceUsed
argument_list|)
expr_stmt|;
comment|// make sure edits aren't corrupted
name|dfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test truncate over quota does not mark file as UC or create a lease    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTruncateOverQuota ()
specifier|public
name|void
name|testTruncateOverQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestTruncateOverquota"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
comment|// create partial block file
name|dfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|BLOCKSIZE
operator|/
literal|2
argument_list|,
name|REPLICATION
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// lower quota to cause exception when appending to partial block
name|dfs
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|dirNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|spaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|truncate
argument_list|(
name|file
argument_list|,
name|BLOCKSIZE
operator|/
literal|2
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"truncate didn't fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getClassName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DSQuotaExceededException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that the file exists, isn't UC, and has no dangling lease
name|LeaseManager
name|lm
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLeaseManager
argument_list|()
decl_stmt|;
name|INodeFile
name|inode
init|=
name|fsdir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|inode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"should not be UC"
argument_list|,
name|inode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"should not have a lease"
argument_list|,
name|lm
operator|.
name|getLease
argument_list|(
name|inode
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the quota usage is unchanged
specifier|final
name|long
name|newSpaceUsed
init|=
name|dirNode
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|spaceUsed
argument_list|,
name|newSpaceUsed
argument_list|)
expr_stmt|;
comment|// make sure edits aren't corrupted
name|dfs
operator|.
name|recoverLease
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check whether the quota is initialized correctly.    */
annotation|@
name|Test
DECL|method|testQuotaInitialization ()
specifier|public
name|void
name|testQuotaInitialization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|size
init|=
literal|500
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
literal|"/testDir"
argument_list|)
decl_stmt|;
name|long
name|expectedSize
init|=
literal|3
operator|*
name|BLOCKSIZE
operator|+
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|testDir
argument_list|,
name|size
operator|*
literal|4
argument_list|,
name|expectedSize
operator|*
name|size
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Path
index|[]
name|testDirs
init|=
operator|new
name|Path
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|testDirs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"sub"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|testDirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setQuota
argument_list|(
name|testDirs
index|[
name|i
index|]
argument_list|,
literal|100
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|testDirs
index|[
name|i
index|]
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|expectedSize
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|// Directly access the name system to obtain the current cached usage.
name|INodeDirectory
name|root
init|=
name|fsdir
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|dsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|scanDirsWithQuota
argument_list|(
name|root
argument_list|,
name|nsMap
argument_list|,
name|dsMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FSImage
operator|.
name|updateCountForQuota
argument_list|(
name|fsdir
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
name|root
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scanDirsWithQuota
argument_list|(
name|root
argument_list|,
name|nsMap
argument_list|,
name|dsMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSImage
operator|.
name|updateCountForQuota
argument_list|(
name|fsdir
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
name|root
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanDirsWithQuota
argument_list|(
name|root
argument_list|,
name|nsMap
argument_list|,
name|dsMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSImage
operator|.
name|updateCountForQuota
argument_list|(
name|fsdir
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|,
name|root
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scanDirsWithQuota
argument_list|(
name|root
argument_list|,
name|nsMap
argument_list|,
name|dsMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|scanDirsWithQuota (INodeDirectory dir, HashMap<String, Long> nsMap, HashMap<String, Long> dsMap, boolean verify)
specifier|private
name|void
name|scanDirsWithQuota
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nsMap
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|dsMap
parameter_list|,
name|boolean
name|verify
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isQuotaSet
argument_list|()
condition|)
block|{
comment|// get the current consumption
name|QuotaCounts
name|q
init|=
name|dir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dir
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
if|if
condition|(
name|verify
condition|)
block|{
name|assertEquals
argument_list|(
name|nsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|q
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|q
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|getNameSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dsMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|INode
name|child
range|:
name|dir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|INodeDirectory
condition|)
block|{
name|scanDirsWithQuota
argument_list|(
operator|(
name|INodeDirectory
operator|)
name|child
argument_list|,
name|nsMap
argument_list|,
name|dsMap
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

