begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_EXECUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|READ_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclTestHelpers
operator|.
name|aclEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * A class for testing the behavior of HDFS directory and file ACL.  */
end_comment

begin_class
DECL|class|TestExtendedAcls
specifier|public
class|class
name|TestExtendedAcls
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|hdfs
specifier|private
specifier|static
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Set default ACL to a directory.    * Create subdirectory, it must have default acls set.    * Create sub file and it should have default acls.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDefaultAclNewChildDirFile ()
specifier|public
name|void
name|testDefaultAclNewChildDirFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testDefaultAclNewChildDirFile"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|acls
argument_list|)
expr_stmt|;
comment|// create sub directory
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
comment|// the sub directory should have the default acls
name|AclEntry
index|[]
name|childDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childDirAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// create sub file
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|childFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// the sub file should have the default acls
name|AclEntry
index|[]
name|childFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set default ACL to a directory and make sure existing sub dirs/files    * does not have default acl.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDefaultAclExistingDirFile ()
specifier|public
name|void
name|testDefaultAclExistingDirFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testDefaultAclExistingDirFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// the old acls
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
comment|// the new acls
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
comment|// set parent to old acl
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|acls1
argument_list|)
expr_stmt|;
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
comment|// the sub directory should also have the old acl
name|AclEntry
index|[]
name|childDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childDirAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
comment|// the sub file should also have the old acl
name|hdfs
operator|.
name|create
argument_list|(
name|childFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|AclEntry
index|[]
name|childFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// now change parent to new acls
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|acls2
argument_list|)
expr_stmt|;
comment|// sub directory and sub file should still have the old acls
name|childDirAcl
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|childFileAcl
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// now remove the parent acls
name|hdfs
operator|.
name|removeAcl
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// sub directory and sub file should still have the old acls
name|childDirAcl
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|childFileAcl
operator|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// check changing the access mode of the file
comment|// mask out the access of group other for testing
name|hdfs
operator|.
name|setPermission
argument_list|(
name|childFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|canAccess
init|=
name|tryAccess
argument_list|(
name|childFile
argument_list|,
literal|"other"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"other"
block|}
argument_list|,
name|READ
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|canAccess
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that access acl does not get inherited on newly created subdir/file.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testAccessAclNotInherited ()
specifier|public
name|void
name|testAccessAclNotInherited
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testAccessAclNotInherited"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// parent have both access acl and default acl
name|List
argument_list|<
name|AclEntry
argument_list|>
name|acls
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|OTHER
argument_list|,
name|READ
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"bar"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
comment|// subdirectory should only have the default acl inherited
name|AclEntry
index|[]
name|childDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childDirAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|childFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// sub file should only have the default acl inherited
name|AclEntry
index|[]
name|childFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a parent dir and set default acl to allow foo read/write access.    * Create a sub dir and set default acl to allow bar group read/write access.    * parent dir/file can not be viewed/appended by bar group.    * parent dir/child dir/file can be viewed/appended by bar group.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGradSubdirMoreAccess ()
specifier|public
name|void
name|testGradSubdirMoreAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testGradSubdirMoreAccess"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclsParent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclsChild
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_WRITE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|aclsParent
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|parentDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|parentAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|parentDirExpectedAcl
argument_list|,
name|parentAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|childDir
argument_list|,
name|aclsChild
argument_list|)
expr_stmt|;
comment|// child dir should inherit the default acls from parent, plus bar group
name|AclEntry
index|[]
name|childDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_WRITE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childDirAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|parentFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"parentFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|parentFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|parentFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
comment|// parent dir/parent file allows foo to access but not bar group
name|AclEntry
index|[]
name|parentFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|parentFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|parentFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|parentFileExpectedAcl
argument_list|,
name|parentFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|childFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|childFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
comment|// child dir/child file allows foo user and bar group to access
name|AclEntry
index|[]
name|childFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|READ_WRITE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent file should not be accessible for bar group
name|assertFalse
argument_list|(
name|tryAccess
argument_list|(
name|parentFile
argument_list|,
literal|"barUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// child file should be accessible for bar group
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|childFile
argument_list|,
literal|"barUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// parent file should be accessible for foo user
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|parentFile
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fooGroup"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// child file should be accessible for foo user
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|childFile
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fooGroup"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that sub directory can restrict acl with acl inherited from parent.    * Create a parent dir and set default to allow foo and bar full access    * Create a sub dir and set default to restrict bar to empty access    *    * parent dir/file can be viewed by foo    * parent dir/child dir/file can be viewed by foo    * parent dir/child dir/file can not be viewed by bar    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testRestrictAtSubDir ()
specifier|public
name|void
name|testRestrictAtSubDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testRestrictAtSubDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclsParent
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
argument_list|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|ALL
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|setAcl
argument_list|(
name|parent
argument_list|,
name|aclsParent
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|parentDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|parentAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|parentDirExpectedAcl
argument_list|,
name|parentAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|parentFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"parentFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|parentFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|parentFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|parentFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|ALL
argument_list|)
block|,     }
decl_stmt|;
name|AclStatus
name|parentFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|parentFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|parentFileExpectedAcl
argument_list|,
name|parentFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childDir
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"childDir"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|newAclsChild
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|NONE
argument_list|)
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|modifyAclEntries
argument_list|(
name|childDir
argument_list|,
name|newAclsChild
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|childDirExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|NONE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|MASK
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|DEFAULT
argument_list|,
name|OTHER
argument_list|,
name|READ_EXECUTE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childDirAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childDirExpectedAcl
argument_list|,
name|childDirAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|childFile
init|=
operator|new
name|Path
argument_list|(
name|childDir
argument_list|,
literal|"childFile"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|create
argument_list|(
name|childFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setPermission
argument_list|(
name|childFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0640
argument_list|)
argument_list|)
expr_stmt|;
name|AclEntry
index|[]
name|childFileExpectedAcl
init|=
operator|new
name|AclEntry
index|[]
block|{
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|USER
argument_list|,
literal|"foo"
argument_list|,
name|ALL
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
name|READ_EXECUTE
argument_list|)
block|,
name|aclEntry
argument_list|(
name|ACCESS
argument_list|,
name|GROUP
argument_list|,
literal|"bar"
argument_list|,
name|NONE
argument_list|)
block|}
decl_stmt|;
name|AclStatus
name|childFileAcl
init|=
name|hdfs
operator|.
name|getAclStatus
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|childFileExpectedAcl
argument_list|,
name|childFileAcl
operator|.
name|getEntries
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// child file should not be accessible for bar group
name|assertFalse
argument_list|(
name|tryAccess
argument_list|(
name|childFile
argument_list|,
literal|"barUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// child file should be accessible for foo user
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|childFile
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fooGroup"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// parent file should be accessible for bar group
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|parentFile
argument_list|,
literal|"barUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// parent file should be accessible for foo user
name|assertTrue
argument_list|(
name|tryAccess
argument_list|(
name|parentFile
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fooGroup"
block|}
argument_list|,
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|tryAccess (Path path, String user, String[] group, FsAction action)
specifier|private
name|boolean
name|tryAccess
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|group
parameter_list|,
name|FsAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|testUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|boolean
name|canAccess
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|access
argument_list|(
name|path
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|canAccess
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|canAccess
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|canAccess
return|;
block|}
block|}
end_class

end_unit

