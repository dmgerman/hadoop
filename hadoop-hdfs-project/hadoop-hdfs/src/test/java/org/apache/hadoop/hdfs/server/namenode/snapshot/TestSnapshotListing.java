begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSnapshotListing
specifier|public
class|class
name|TestSnapshotListing
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/test.snapshot/dir"
argument_list|)
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fsn
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|hdfs
name|DistributedFileSystem
name|hdfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fsn
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test listing snapshots under a snapshottable directory    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testListSnapshots ()
specifier|public
name|void
name|testListSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|snapshotsPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|".snapshot"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stats
init|=
literal|null
decl_stmt|;
comment|// special case: snapshots of root
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.snapshot"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be 0 since root's snapshot quota is 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// list before set dir as snapshottable
try|try
block|{
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotsPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect SnapshotException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// list before creating snapshots
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotsPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// list while creating snapshots
specifier|final
name|int
name|snapshotNum
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|sNum
init|=
literal|0
init|;
name|sNum
operator|<
name|snapshotNum
condition|;
name|sNum
operator|++
control|)
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s_"
operator|+
name|sNum
argument_list|)
expr_stmt|;
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotsPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sNum
operator|+
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|sNum
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"s_"
operator|+
name|i
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// list while deleting snapshots
for|for
control|(
name|int
name|sNum
init|=
name|snapshotNum
operator|-
literal|1
init|;
name|sNum
operator|>
literal|0
condition|;
name|sNum
operator|--
control|)
block|{
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s_"
operator|+
name|sNum
argument_list|)
expr_stmt|;
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotsPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sNum
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sNum
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"s_"
operator|+
name|i
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove the last snapshot
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"s_0"
argument_list|)
expr_stmt|;
name|stats
operator|=
name|hdfs
operator|.
name|listStatus
argument_list|(
name|snapshotsPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

