begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|CreateEncryptionZoneFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EncryptionFaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EncryptionZoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NamenodeFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|CryptoAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
operator|.
name|PBImageXmlWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|DelegationTokenIssuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
operator|.
name|verifyFilesEqual
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_class
DECL|class|TestEncryptionZones
specifier|public
class|class
name|TestEncryptionZones
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestEncryptionZones
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsHelper
specifier|private
name|FileSystemTestHelper
name|fsHelper
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfsAdmin
specifier|protected
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|fs
specifier|protected
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|testRootDir
specifier|private
name|File
name|testRootDir
decl_stmt|;
DECL|field|TEST_KEY
specifier|protected
specifier|final
name|String
name|TEST_KEY
init|=
literal|"test_key"
decl_stmt|;
DECL|field|NS_METRICS
specifier|private
specifier|static
specifier|final
name|String
name|NS_METRICS
init|=
literal|"FSNamesystem"
decl_stmt|;
DECL|field|AUTHORIZATION_EXCEPTION_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZATION_EXCEPTION_MESSAGE
init|=
literal|"User [root] is not authorized to perform [READ] on key "
operator|+
literal|"with ACL name [key2]!!"
decl_stmt|;
DECL|field|fsWrapper
specifier|protected
name|FileSystemTestWrapper
name|fsWrapper
decl_stmt|;
DECL|field|fcWrapper
specifier|protected
name|FileContextTestWrapper
name|fcWrapper
decl_stmt|;
DECL|field|NO_TRASH
specifier|protected
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|CreateEncryptionZoneFlag
argument_list|>
name|NO_TRASH
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|NO_TRASH
argument_list|)
decl_stmt|;
DECL|method|getKeyProviderURI ()
specifier|protected
name|String
name|getKeyProviderURI
parameter_list|()
block|{
return|return
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
operator|.
name|toUri
argument_list|()
return|;
block|}
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|120
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|fsHelper
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
expr_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|testRootDir
operator|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|getKeyProviderURI
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Lower the batch size for testing
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_ENCRYPTION_ZONES_NUM_RESPONSES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|EncryptionZoneManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsWrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|fcWrapper
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setProvider
argument_list|()
expr_stmt|;
comment|// Create a test key
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setProvider ()
specifier|protected
name|void
name|setProvider
parameter_list|()
block|{
comment|// Need to set the client's KeyProvider to the NN's for JKS,
comment|// else the updates do not get flushed properly
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|setKeyProvider
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
operator|new
name|EncryptionFaultInjector
argument_list|()
expr_stmt|;
block|}
DECL|method|assertNumZones (final int numZones)
specifier|public
name|void
name|assertNumZones
parameter_list|(
specifier|final
name|int
name|numZones
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|EncryptionZone
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected number of encryption zones!"
argument_list|,
name|numZones
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that an encryption zone with the specified keyName and path (if not    * null) is present.    *    * @throws IOException if a matching zone could not be found    */
DECL|method|assertZonePresent (String keyName, String path)
specifier|public
name|void
name|assertZonePresent
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RemoteIterator
argument_list|<
name|EncryptionZone
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EncryptionZone
name|zone
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|matchKey
init|=
operator|(
name|keyName
operator|==
literal|null
operator|)
decl_stmt|;
name|boolean
name|matchPath
init|=
operator|(
name|path
operator|==
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|keyName
operator|!=
literal|null
operator|&&
name|zone
operator|.
name|getKeyName
argument_list|()
operator|.
name|equals
argument_list|(
name|keyName
argument_list|)
condition|)
block|{
name|matchKey
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|zone
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|matchPath
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|matchKey
operator|&&
name|matchPath
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find expected encryption zone with keyName "
operator|+
name|keyName
operator|+
literal|" path "
operator|+
name|path
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure hdfs crypto -createZone command creates a trash directory    * with sticky bits.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testTrashStickyBit ()
specifier|public
name|void
name|testTrashStickyBit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create an EZ /zones/zone1, make it world writable.
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
name|CryptoAdmin
name|cryptoAdmin
init|=
operator|new
name|CryptoAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|setPermission
argument_list|(
name|zone1
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|cryptoArgv
init|=
operator|new
name|String
index|[]
block|{
literal|"-createZone"
block|,
literal|"-keyName"
block|,
name|TEST_KEY
block|,
literal|"-path"
block|,
name|zone1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
block|}
decl_stmt|;
name|cryptoAdmin
operator|.
name|run
argument_list|(
name|cryptoArgv
argument_list|)
expr_stmt|;
comment|// create a file in EZ
specifier|final
name|Path
name|ezfile1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
comment|// Create the encrypted file in zone1
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|ezfile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// enable trash, delete /zones/zone1/file1,
comment|// which moves the file to
comment|// /zones/zone1/.Trash/$SUPERUSER/Current/zones/zone1/file1
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|ezfile1
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Can't remove a file in EZ as superuser"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashDir
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fsWrapper
operator|.
name|exists
argument_list|(
name|trashDir
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|trashFileStatus
init|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|trashDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|trashFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a non-privileged user
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|ezfile2
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
comment|// create a file /zones/zone1/file2 in EZ
comment|// this file is owned by user:mygroup
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs2
argument_list|,
name|ezfile2
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// delete /zones/zone1/file2,
comment|// which moves the file to
comment|// /zones/zone1/.Trash/user/Current/zones/zone1/file2
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|ezfile2
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Can't remove a file in EZ as user:mygroup"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure hdfs crypto -provisionTrash command creates a trash directory    * with sticky bits.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testProvisionTrash ()
specifier|public
name|void
name|testProvisionTrash
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create an EZ /zones/zone1
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
name|CryptoAdmin
name|cryptoAdmin
init|=
operator|new
name|CryptoAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|cryptoArgv
init|=
operator|new
name|String
index|[]
block|{
literal|"-createZone"
block|,
literal|"-keyName"
block|,
name|TEST_KEY
block|,
literal|"-path"
block|,
name|zone1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
block|}
decl_stmt|;
name|cryptoAdmin
operator|.
name|run
argument_list|(
name|cryptoArgv
argument_list|)
expr_stmt|;
comment|// remove the trash directory
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|trashDir
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rmdir"
block|,
name|trashDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unable to delete trash directory."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fsWrapper
operator|.
name|exists
argument_list|(
name|trashDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// execute -provisionTrash command option and make sure the trash
comment|// directory has sticky bit.
name|String
index|[]
name|provisionTrashArgv
init|=
operator|new
name|String
index|[]
block|{
literal|"-provisionTrash"
block|,
literal|"-path"
block|,
name|zone1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
block|}
decl_stmt|;
name|cryptoAdmin
operator|.
name|run
argument_list|(
name|provisionTrashArgv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsWrapper
operator|.
name|exists
argument_list|(
name|trashDir
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|trashFileStatus
init|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|trashDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|trashFileStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CHECKSTYLE:OFF:MethodLengthCheck
annotation|@
name|Test
DECL|method|testBasicOperations ()
specifier|public
name|void
name|testBasicOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"key provider is not present"
argument_list|,
name|dfsAdmin
operator|.
name|getKeyProvider
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numZones
init|=
literal|0
decl_stmt|;
comment|/* Number of EZs should be 0 if no EZ is created */
name|assertEquals
argument_list|(
literal|"Unexpected number of encryption zones!"
argument_list|,
name|numZones
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getNumEncryptionZones
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Test failure of create EZ on a directory that doesn't exist. */
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected /test doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"cannot find"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Normal creation of an EZ */
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|zone1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Test failure of create EZ on a directory which is already an EZ. */
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"is already an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* create EZ on parent of an EZ should fail */
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneParent
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EZ over an EZ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"encryption zone for a non-empty directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* create EZ on a folder with a folder fails */
specifier|final
name|Path
name|notEmpty
init|=
operator|new
name|Path
argument_list|(
literal|"/notEmpty"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|notEmptyChild
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|notEmptyChild
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|notEmpty
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created EZ on an non-empty directory with folder"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fsWrapper
operator|.
name|delete
argument_list|(
name|notEmptyChild
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* create EZ on a folder with a file fails */
name|fsWrapper
operator|.
name|createFile
argument_list|(
name|notEmptyChild
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|notEmpty
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created EZ on an non-empty directory with file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Test failure of create EZ on a file. */
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|notEmptyChild
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created EZ on a file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone for a file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Test failure of creating an EZ passing a key that doesn't exist. */
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
literal|"/zone2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone2
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|myKeyName
init|=
literal|"mykeyname"
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
name|myKeyName
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected key doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"doesn't exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Test failure of empty and null key name */
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
literal|""
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"created a zone with empty key name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Must specify a key name when creating"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
literal|null
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"created a zone with null key name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Must specify a key name when creating"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNumZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|/* Test success of creating an EZ when they key exists. */
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|myKeyName
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
name|myKeyName
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
name|myKeyName
argument_list|,
name|zone2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Test failure of create encryption zones as a non super user. */
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonSuper
init|=
operator|new
name|Path
argument_list|(
literal|"/nonSuper"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|nonSuper
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|nonSuper
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createEncryptionZone is superuser-only operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test success of creating an encryption zone a few levels down.
name|Path
name|deepZone
init|=
operator|new
name|Path
argument_list|(
literal|"/d/e/e/p/zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|deepZone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|deepZone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|deepZone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create and list some zones to test batching of listEZ
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/listZone"
operator|+
name|i
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|numZones
operator|++
expr_stmt|;
name|assertNumZones
argument_list|(
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|zonePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
name|numZones
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of encryption zones!"
argument_list|,
name|numZones
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getNumEncryptionZones
argument_list|()
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"NumEncryptionZones"
argument_list|,
name|numZones
argument_list|,
name|getMetrics
argument_list|(
name|NS_METRICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|zone1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify newly added ez is present after restarting the NameNode
comment|// without persisting the namespace.
name|Path
name|nonpersistZone
init|=
operator|new
name|Path
argument_list|(
literal|"/nonpersistZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|nonpersistZone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|nonpersistZone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|numZones
operator|++
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|nonpersistZone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CHECKSTYLE:ON:MethodLengthCheck
annotation|@
name|Test
DECL|method|testBasicOperationsRootDir ()
specifier|public
name|void
name|testBasicOperationsRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numZones
init|=
literal|0
decl_stmt|;
specifier|final
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
comment|/* Normal creation of an EZ on rootDir */
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|rootDir
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|rootDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify rootDir ez is present after restarting the NameNode
comment|// and saving/loading from fsimage.
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|rootDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEZwithFullyQualifiedPath ()
specifier|public
name|void
name|testEZwithFullyQualifiedPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Test failure of create EZ on a directory that doesn't exist. */
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1FQP
init|=
operator|new
name|Path
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|zone1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone2FQP
init|=
operator|new
name|Path
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|zone2
argument_list|)
decl_stmt|;
name|int
name|numZones
init|=
literal|0
decl_stmt|;
name|EnumSet
argument_list|<
name|CreateEncryptionZoneFlag
argument_list|>
name|withTrash
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateEncryptionZoneFlag
operator|.
name|PROVISION_TRASH
argument_list|)
decl_stmt|;
comment|// Create EZ with Trash using FQP
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1FQP
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1FQP
argument_list|,
name|TEST_KEY
argument_list|,
name|withTrash
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
name|TEST_KEY
argument_list|,
name|zone1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that zone1 contains a .Trash directory
specifier|final
name|Path
name|zone1Trash
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
name|fs
operator|.
name|TRASH_PREFIX
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"CreateEncryptionZone with trash enabled should create a "
operator|+
literal|".Trash directory in the EZ"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|zone1Trash
argument_list|)
argument_list|)
expr_stmt|;
comment|// getEncryptionZoneForPath for FQP should return the path component
name|EncryptionZone
name|ezForZone1
init|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|zone1FQP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getEncryptionZoneForPath for fully qualified path should "
operator|+
literal|"return the path component"
argument_list|,
name|ezForZone1
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|zone1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create EZ without Trash
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone2FQP
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2FQP
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
name|TEST_KEY
argument_list|,
name|zone2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Provision Trash on zone2 using FQP
name|dfsAdmin
operator|.
name|provisionEncryptionZoneTrash
argument_list|(
name|zone2FQP
argument_list|)
expr_stmt|;
name|EncryptionZone
name|ezForZone2
init|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|zone2FQP
argument_list|)
decl_stmt|;
name|Path
name|ezTrashForZone2
init|=
operator|new
name|Path
argument_list|(
name|ezForZone2
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"provisionEZTrash with fully qualified path should create "
operator|+
literal|"trash directory "
argument_list|,
name|fsWrapper
operator|.
name|exists
argument_list|(
name|ezTrashForZone2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test listing encryption zones as a non super user.    */
annotation|@
name|Test
DECL|method|testListEncryptionZonesAsNonSuperUser ()
specifier|public
name|void
name|testListEncryptionZonesAsNonSuperUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/TestEncryptionZones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|superPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"superuseronly"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|allPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"accessall"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|superPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|superPath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|allPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0707
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|allPath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|listEncryptionZones
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getEncryptionZoneForPath as a non super user.    */
annotation|@
name|Test
DECL|method|testGetEZAsNonSuperUser ()
specifier|public
name|void
name|testGetEZAsNonSuperUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/TestEncryptionZones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|superPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"superuseronly"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|superPathFile
init|=
operator|new
name|Path
argument_list|(
name|superPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|allPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"accessall"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|allPathFile
init|=
operator|new
name|Path
argument_list|(
name|allPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonEZDir
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"nonEZDir"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonEZFile
init|=
operator|new
name|Path
argument_list|(
name|nonEZDir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonexistent
init|=
operator|new
name|Path
argument_list|(
literal|"/nonexistent"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|testRoot
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|superPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|allPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|nonEZDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|superPath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|allPath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|newSnap
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|superPathFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|allPathFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|nonEZFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Check null arg
try|try
block|{
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|/*            * IWBNI we could use assertExceptionContains, but the NPE that is            * thrown has no message text.            */
block|}
comment|// Check operation with accessible paths
name|assertEquals
argument_list|(
literal|"expected ez path"
argument_list|,
name|allPath
operator|.
name|toString
argument_list|()
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|allPath
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected ez path"
argument_list|,
name|allPath
operator|.
name|toString
argument_list|()
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|allPathFile
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check operation with inaccessible (lack of permissions) path
try|try
block|{
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|superPathFile
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected AccessControlException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Permission denied:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"expected null for nonexistent path"
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|nonexistent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check operation with non-ez paths
name|assertNull
argument_list|(
literal|"expected null for non-ez path"
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|nonEZDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for non-ez path"
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|nonEZFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check operation with snapshots
name|String
name|snapshottedAllPath
init|=
name|newSnap
operator|.
name|toString
argument_list|()
operator|+
name|allPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected ez path"
argument_list|,
name|allPath
operator|.
name|toString
argument_list|()
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshottedAllPath
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * Delete the file from the non-snapshot and test that it is still ok          * in the ez.          */
name|fs
operator|.
name|delete
argument_list|(
name|allPathFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected ez path"
argument_list|,
name|allPath
operator|.
name|toString
argument_list|()
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshottedAllPath
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the ez and make sure ss's ez is still ok.
name|fs
operator|.
name|delete
argument_list|(
name|allPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected ez path"
argument_list|,
name|allPath
operator|.
name|toString
argument_list|()
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshottedAllPath
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for deleted file path"
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|allPathFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"expected null for deleted directory path"
argument_list|,
name|userAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|allPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test success of Rename EZ on a directory which is already an EZ.    */
DECL|method|doRenameEncryptionZone (FSTestWrapper wrapper)
specifier|private
name|void
name|doRenameEncryptionZone
parameter_list|(
name|FSTestWrapper
name|wrapper
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/TestEncryptionZones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFoo
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFooBaz
init|=
operator|new
name|Path
argument_list|(
name|pathFoo
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFooBazFile
init|=
operator|new
name|Path
argument_list|(
name|pathFooBaz
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFooBar
init|=
operator|new
name|Path
argument_list|(
name|pathFoo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFooBarFile
init|=
operator|new
name|Path
argument_list|(
name|pathFooBar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|wrapper
operator|.
name|mkdir
argument_list|(
name|pathFoo
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|pathFoo
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|mkdir
argument_list|(
name|pathFooBaz
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|pathFooBazFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|pathFooBazFile
argument_list|)
decl_stmt|;
try|try
block|{
name|wrapper
operator|.
name|rename
argument_list|(
name|pathFooBaz
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
name|pathFooBaz
operator|.
name|toString
argument_list|()
operator|+
literal|" can't be moved from"
operator|+
literal|" an encryption zone."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can rename dir and files within an encryption zone.
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|pathFooBaz
argument_list|,
name|pathFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Rename of dir and file within ez failed"
argument_list|,
operator|!
name|wrapper
operator|.
name|exists
argument_list|(
name|pathFooBaz
argument_list|)
operator|&&
name|wrapper
operator|.
name|exists
argument_list|(
name|pathFooBar
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Renamed file contents not the same"
argument_list|,
name|contents
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|pathFooBarFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that we can rename an EZ root
specifier|final
name|Path
name|newFoo
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"newfoo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Rename of EZ root"
argument_list|,
name|fs
operator|.
name|rename
argument_list|(
name|pathFoo
argument_list|,
name|newFoo
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Rename of EZ root failed"
argument_list|,
operator|!
name|wrapper
operator|.
name|exists
argument_list|(
name|pathFoo
argument_list|)
operator|&&
name|wrapper
operator|.
name|exists
argument_list|(
name|newFoo
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that we can't rename an EZ root onto itself
try|try
block|{
name|wrapper
operator|.
name|rename
argument_list|(
name|newFoo
argument_list|,
name|newFoo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"are the same"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileSystem ()
specifier|public
name|void
name|testRenameFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|doRenameEncryptionZone
argument_list|(
name|fsWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileContext ()
specifier|public
name|void
name|testRenameFileContext
parameter_list|()
throws|throws
name|Exception
block|{
name|doRenameEncryptionZone
argument_list|(
name|fcWrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileEncryptionInfo (Path path)
specifier|private
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|LocatedBlocks
name|blocks
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|blocks
operator|.
name|getFileEncryptionInfo
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testReadWrite ()
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Create a base file for comparison
specifier|final
name|Path
name|baseFile
init|=
operator|new
name|Path
argument_list|(
literal|"/base"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Create the first enc file
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Read them back in and compare byte-by-byte
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Roll the key of the encryption zone
name|assertNumZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|keyName
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|rollNewVersion
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|invalidateCache
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
comment|// Read them back in and compare byte-by-byte
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Write a new enc file and validate
specifier|final
name|Path
name|encFile2
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// FEInfos should be different
name|FileEncryptionInfo
name|feInfo1
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|FileEncryptionInfo
name|feInfo2
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"EDEKs should be different"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|feInfo1
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|,
name|feInfo2
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Key was rolled, versions should be different"
argument_list|,
name|feInfo1
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|feInfo2
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Contents still equal
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWriteUsingWebHdfs ()
specifier|public
name|void
name|testReadWriteUsingWebHdfs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|webHdfsFs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
comment|/* Create an unencrypted file for comparison purposes. */
specifier|final
name|Path
name|unencFile
init|=
operator|new
name|Path
argument_list|(
literal|"/unenc"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|webHdfsFs
argument_list|,
name|unencFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|/*      * Create the same file via webhdfs, but this time encrypted. Compare it      * using both webhdfs and DFS.      */
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|webHdfsFs
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|webHdfsFs
argument_list|,
name|unencFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|unencFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|/*      * Same thing except this time create the encrypted file using DFS.      */
specifier|final
name|Path
name|encFile2
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|webHdfsFs
argument_list|,
name|unencFile
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|unencFile
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|/* Verify appending to files works correctly. */
name|appendOneByte
argument_list|(
name|fs
argument_list|,
name|unencFile
argument_list|)
expr_stmt|;
name|appendOneByte
argument_list|(
name|webHdfsFs
argument_list|,
name|encFile1
argument_list|)
expr_stmt|;
name|appendOneByte
argument_list|(
name|fs
argument_list|,
name|encFile2
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|webHdfsFs
argument_list|,
name|unencFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|unencFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|webHdfsFs
argument_list|,
name|unencFile
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|unencFile
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|appendOneByte (FileSystem fs, Path p)
specifier|private
name|void
name|appendOneByte
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0x123
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersionAndSuiteNegotiation ()
specifier|public
name|void
name|testVersionAndSuiteNegotiation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
comment|// Create a file in an EZ, which should succeed
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Pass no supported versions, fail
name|DFSOutputStream
operator|.
name|SUPPORTED_CRYPTO_VERSIONS
operator|=
operator|new
name|CryptoProtocolVersion
index|[]
block|{}
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a crypto protocol version"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCryptoProtocolVersionException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"No crypto protocol versions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown versions, fail
name|DFSOutputStream
operator|.
name|SUPPORTED_CRYPTO_VERSIONS
operator|=
operator|new
name|CryptoProtocolVersion
index|[]
block|{
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|,
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|}
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a known crypto protocol version"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCryptoProtocolVersionException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"No crypto protocol versions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown and a good cipherSuites, success
name|DFSOutputStream
operator|.
name|SUPPORTED_CRYPTO_VERSIONS
operator|=
operator|new
name|CryptoProtocolVersion
index|[]
block|{
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|,
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|,
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
block|}
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSOutputStream
operator|.
name|SUPPORTED_CRYPTO_VERSIONS
operator|=
operator|new
name|CryptoProtocolVersion
index|[]
block|{
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
block|,
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|,
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
block|}
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success3"
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Check KeyProvider state
comment|// Flushing the KP on the NN, since it caches, and init a test one
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|KeyProvider
name|provider
init|=
name|KeyProviderFactory
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|provider
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected NN to have created one key per zone"
argument_list|,
literal|1
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|allVersions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|versions
init|=
name|provider
operator|.
name|getKeyVersions
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only have one key version per key"
argument_list|,
literal|1
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allVersions
operator|.
name|addAll
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
comment|// Check that the specified CipherSuite was correctly saved on the NN
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FileEncryptionInfo
name|feInfo
init|=
name|getFileEncryptionInfo
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
operator|+
literal|"/success"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|feInfo
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
block|}
name|DFSClient
name|old
init|=
name|fs
operator|.
name|dfs
decl_stmt|;
try|try
block|{
name|testCipherSuiteNegotiation
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|dfs
operator|=
name|old
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|mockCreate (ClientProtocol mcp, CipherSuite suite, CryptoProtocolVersion version)
specifier|private
specifier|static
name|void
name|mockCreate
parameter_list|(
name|ClientProtocol
name|mcp
parameter_list|,
name|CipherSuite
name|suite
parameter_list|,
name|CryptoProtocolVersion
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|HdfsFileStatus
operator|.
name|Builder
argument_list|()
operator|.
name|replication
argument_list|(
literal|1
argument_list|)
operator|.
name|blocksize
argument_list|(
literal|1024
argument_list|)
operator|.
name|perm
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|)
operator|.
name|owner
argument_list|(
literal|"owner"
argument_list|)
operator|.
name|group
argument_list|(
literal|"group"
argument_list|)
operator|.
name|symlink
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
operator|.
name|path
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
operator|.
name|fileId
argument_list|(
literal|1010
argument_list|)
operator|.
name|feInfo
argument_list|(
operator|new
name|FileEncryptionInfo
argument_list|(
name|suite
argument_list|,
name|version
argument_list|,
operator|new
name|byte
index|[
name|suite
operator|.
name|getAlgorithmBlockSize
argument_list|()
index|]
argument_list|,
operator|new
name|byte
index|[
name|suite
operator|.
name|getAlgorithmBlockSize
argument_list|()
index|]
argument_list|,
literal|"fakeKey"
argument_list|,
literal|"fakeVersion"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mcp
argument_list|)
operator|.
name|create
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This test only uses mocks. Called from the end of an existing test to
comment|// avoid an extra mini cluster.
DECL|method|testCipherSuiteNegotiation (DistributedFileSystem fs, Configuration conf)
specifier|private
specifier|static
name|void
name|testCipherSuiteNegotiation
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set up mock ClientProtocol to test client-side CipherSuite negotiation
specifier|final
name|ClientProtocol
name|mcp
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Try with an empty conf
specifier|final
name|Configuration
name|noCodecConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|CipherSuite
name|suite
init|=
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
decl_stmt|;
specifier|final
name|String
name|confKey
init|=
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
operator|+
name|suite
operator|.
name|getConfigSuffix
argument_list|()
decl_stmt|;
name|noCodecConf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fs
operator|.
name|dfs
operator|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|mcp
argument_list|,
name|noCodecConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mockCreate
argument_list|(
name|mcp
argument_list|,
name|suite
argument_list|,
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/mock"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created with no configured codecs!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCipherSuiteException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"No configuration found for the cipher"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Try create with an UNKNOWN CipherSuite
name|fs
operator|.
name|dfs
operator|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|mcp
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CipherSuite
name|unknown
init|=
name|CipherSuite
operator|.
name|UNKNOWN
decl_stmt|;
name|unknown
operator|.
name|setUnknownValue
argument_list|(
literal|989
argument_list|)
expr_stmt|;
name|mockCreate
argument_list|(
name|mcp
argument_list|,
name|unknown
argument_list|,
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/mock"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created with unknown cipher!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"unknown CipherSuite with ID 989"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateEZWithNoProvider ()
specifier|public
name|void
name|testCreateEZWithNoProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Unset the key provider and make sure EZ ops don't work
specifier|final
name|Configuration
name|clusterConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|clusterConf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"since no key provider is available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try listing EZs as well
name|assertNumZones
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsEncryptedMethod ()
specifier|public
name|void
name|testIsEncryptedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIsEncryptedMethod
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|doTestIsEncryptedMethod
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIsEncryptedMethod (Path prefix)
specifier|private
name|void
name|doTestIsEncryptedMethod
parameter_list|(
name|Path
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|dTIEM
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|fsWrapper
operator|.
name|listStatus
argument_list|(
name|prefix
argument_list|)
control|)
block|{
name|fsWrapper
operator|.
name|delete
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|dTIEM (Path prefix)
specifier|private
name|void
name|dTIEM
parameter_list|(
name|Path
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Create an unencrypted file to check isEncrypted returns false
specifier|final
name|Path
name|baseFile
init|=
operator|new
name|Path
argument_list|(
name|prefix
argument_list|,
literal|"base"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|createFile
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expected isEncrypted to return false for "
operator|+
name|baseFile
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create an encrypted file to check isEncrypted returns true
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|prefix
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"encfile"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|createFile
argument_list|(
name|encFile
argument_list|)
expr_stmt|;
name|stat
operator|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|encFile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected isEncrypted to return true for enc file"
operator|+
name|encFile
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that it returns true for an ez root
name|stat
operator|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected isEncrypted to return true for ezroot"
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that it returns true for a dir in the ez
specifier|final
name|Path
name|zoneSubdir
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"subdir"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zoneSubdir
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stat
operator|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|zoneSubdir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected isEncrypted to return true for ez subdir "
operator|+
name|zoneSubdir
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that it returns false for a non ez dir
specifier|final
name|Path
name|nonEzDirPath
init|=
operator|new
name|Path
argument_list|(
name|prefix
argument_list|,
literal|"nonzone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|nonEzDirPath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stat
operator|=
name|fsWrapper
operator|.
name|getFileStatus
argument_list|(
name|nonEzDirPath
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Expected isEncrypted to return false for directory "
operator|+
name|nonEzDirPath
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that it returns true for listings within an ez
name|FileStatus
index|[]
name|statuses
init|=
name|fsWrapper
operator|.
name|listStatus
argument_list|(
name|zone
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected isEncrypted to return true for ez stat "
operator|+
name|zone
argument_list|,
name|s
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statuses
operator|=
name|fsWrapper
operator|.
name|listStatus
argument_list|(
name|encFile
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected isEncrypted to return true for ez file stat "
operator|+
name|encFile
argument_list|,
name|s
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check that it returns false for listings outside an ez
name|statuses
operator|=
name|fsWrapper
operator|.
name|listStatus
argument_list|(
name|nonEzDirPath
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
name|assertFalse
argument_list|(
literal|"Expected isEncrypted to return false for nonez stat "
operator|+
name|nonEzDirPath
argument_list|,
name|s
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statuses
operator|=
name|fsWrapper
operator|.
name|listStatus
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
name|assertFalse
argument_list|(
literal|"Expected isEncrypted to return false for non ez stat "
operator|+
name|baseFile
argument_list|,
name|s
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AuthorizationExceptionInjector
specifier|private
class|class
name|AuthorizationExceptionInjector
extends|extends
name|EncryptionFaultInjector
block|{
annotation|@
name|Override
DECL|method|ensureKeyIsInitialized ()
specifier|public
name|void
name|ensureKeyIsInitialized
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
name|AUTHORIZATION_EXCEPTION_MESSAGE
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExceptionInformationReturn ()
specifier|public
name|void
name|testExceptionInformationReturn
parameter_list|()
block|{
comment|/* Test exception information can be returned when     creating transparent encryption zone.*/
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
operator|new
name|AuthorizationExceptionInjector
argument_list|()
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception information can be returned when creating "
operator|+
literal|"transparent encryption zone"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|RemoteException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|AuthorizationException
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
name|AUTHORIZATION_EXCEPTION_MESSAGE
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyInjector
specifier|private
class|class
name|MyInjector
extends|extends
name|EncryptionFaultInjector
block|{
DECL|field|generateCount
specifier|volatile
name|int
name|generateCount
decl_stmt|;
DECL|field|ready
name|CountDownLatch
name|ready
decl_stmt|;
DECL|field|wait
name|CountDownLatch
name|wait
decl_stmt|;
DECL|method|MyInjector ()
specifier|public
name|MyInjector
parameter_list|()
block|{
name|this
operator|.
name|ready
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|wait
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startFileNoKey ()
specifier|public
name|void
name|startFileNoKey
parameter_list|()
throws|throws
name|IOException
block|{
name|generateCount
operator|=
operator|-
literal|1
expr_stmt|;
name|syncWithLatches
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startFileBeforeGenerateKey ()
specifier|public
name|void
name|startFileBeforeGenerateKey
parameter_list|()
throws|throws
name|IOException
block|{
name|syncWithLatches
argument_list|()
expr_stmt|;
block|}
DECL|method|syncWithLatches ()
specifier|private
name|void
name|syncWithLatches
parameter_list|()
throws|throws
name|IOException
block|{
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|wait
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|startFileAfterGenerateKey ()
specifier|public
name|void
name|startFileAfterGenerateKey
parameter_list|()
throws|throws
name|IOException
block|{
name|generateCount
operator|++
expr_stmt|;
block|}
block|}
DECL|class|CreateFileTask
specifier|private
class|class
name|CreateFileTask
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|fsWrapper
specifier|private
name|FileSystemTestWrapper
name|fsWrapper
decl_stmt|;
DECL|field|name
specifier|private
name|Path
name|name
decl_stmt|;
DECL|method|CreateFileTask (FileSystemTestWrapper fsWrapper, Path name)
name|CreateFileTask
parameter_list|(
name|FileSystemTestWrapper
name|fsWrapper
parameter_list|,
name|Path
name|name
parameter_list|)
block|{
name|this
operator|.
name|fsWrapper
operator|=
name|fsWrapper
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|fsWrapper
operator|.
name|createFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|class|InjectFaultTask
specifier|private
class|class
name|InjectFaultTask
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|zone1
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
DECL|field|file
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
DECL|field|injector
name|MyInjector
name|injector
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up the injector
name|injector
operator|=
operator|new
name|MyInjector
argument_list|()
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CreateFileTask
argument_list|(
name|fsWrapper
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|injector
operator|.
name|ready
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Do the fault
name|doFault
argument_list|()
expr_stmt|;
comment|// Allow create to proceed
block|}
finally|finally
block|{
comment|// Always decrement latch to avoid hanging the tests on failure.
name|injector
operator|.
name|wait
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Cleanup and postconditions
name|doCleanup
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|doFault ()
specifier|public
name|void
name|doFault
parameter_list|()
throws|throws
name|Exception
block|{}
DECL|method|doCleanup ()
specifier|public
name|void
name|doCleanup
parameter_list|()
throws|throws
name|Exception
block|{}
block|}
comment|/**    * Tests the retry logic in startFile. We release the lock while generating    * an EDEK, so tricky things can happen in the intervening time.    */
annotation|@
name|Test
DECL|method|testStartFileRetry ()
specifier|public
name|void
name|testStartFileRetry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
comment|// Test when the parent directory becomes an EZ.  With no initial EZ,
comment|// the fsn lock must not be yielded.
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|InjectFaultTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Expected no startFile key generation"
argument_list|,
operator|-
literal|1
argument_list|,
name|injector
operator|.
name|generateCount
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Test when the parent directory unbecomes an EZ.  The generation of
comment|// the EDEK will yield the lock, then re-resolve the path and use the
comment|// previous EDEK.
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|InjectFaultTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFault
parameter_list|()
throws|throws
name|Exception
block|{
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Expected no startFile retries"
argument_list|,
literal|1
argument_list|,
name|injector
operator|.
name|generateCount
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Test when the parent directory becomes a different EZ.  The generation
comment|// of the EDEK will yield the lock, re-resolve will detect the EZ has
comment|// changed, and client will be asked to retry a 2nd time
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|otherKey
init|=
literal|"other_key"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|otherKey
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|InjectFaultTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFault
parameter_list|()
throws|throws
name|Exception
block|{
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|otherKey
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Expected a startFile retry"
argument_list|,
literal|2
argument_list|,
name|injector
operator|.
name|generateCount
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Test that the retry limit leads to an error
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|anotherKey
init|=
literal|"another_key"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|anotherKey
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|anotherKey
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|String
name|keyToUse
init|=
name|otherKey
decl_stmt|;
name|MyInjector
name|injector
init|=
operator|new
name|MyInjector
argument_list|()
decl_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|CreateFileTask
argument_list|(
name|fsWrapper
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|// Flip-flop between two EZs to repeatedly fail
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DFSOutputStream
operator|.
name|CREATE_RETRY_COUNT
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|injector
operator|.
name|ready
operator|.
name|await
argument_list|()
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|keyToUse
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyToUse
operator|==
name|otherKey
condition|)
block|{
name|keyToUse
operator|=
name|anotherKey
expr_stmt|;
block|}
else|else
block|{
name|keyToUse
operator|=
name|otherKey
expr_stmt|;
block|}
name|injector
operator|.
name|wait
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|injector
operator|=
operator|new
name|MyInjector
argument_list|()
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|instance
operator|=
name|injector
expr_stmt|;
block|}
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception from too many retries"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Too many retries because of encryption zone operations"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests obtaining delegation token from stored key    */
annotation|@
name|Test
DECL|method|testDelegationToken ()
specifier|public
name|void
name|testDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"JobTracker"
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|KeyProvider
name|keyProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|DelegationTokenExtension
operator|.
name|class
argument_list|,
name|CryptoExtension
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|keyProvider
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|testIdentifier
init|=
literal|"Test identifier for delegation token"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Token
name|testToken
init|=
operator|new
name|Token
argument_list|(
name|testIdentifier
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
operator|(
operator|(
name|DelegationTokenIssuer
operator|)
name|keyProvider
operator|)
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"service"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
operator|(
operator|(
name|DelegationTokenIssuer
operator|)
name|keyProvider
operator|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testToken
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|setKeyProvider
argument_list|(
name|keyProvider
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|tokens
index|[]
init|=
name|dfs
operator|.
name|addDelegationTokens
argument_list|(
literal|"JobTracker"
argument_list|,
name|creds
argument_list|)
decl_stmt|;
name|DistributedFileSystem
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delegation tokens: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test running fsck on a system with encryption zones.    */
annotation|@
name|Test
DECL|method|testFsckOnEncryptionZones ()
specifier|public
name|void
name|testFsckOnEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1File
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zone1File
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bStream
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|errCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Fsck ran with non-zero error code"
argument_list|,
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|bStream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Fsck did not return HEALTHY status"
argument_list|,
name|result
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run fsck directly on the encryption zone instead of root
name|errCode
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSck
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|zoneParent
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fsck ran with non-zero error code"
argument_list|,
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
name|result
operator|=
name|bStream
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Fsck did not return HEALTHY status"
argument_list|,
name|result
operator|.
name|contains
argument_list|(
name|NamenodeFsck
operator|.
name|HEALTHY_STATUS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test correctness of successive snapshot creation and deletion    * on a system with encryption zones.    */
annotation|@
name|Test
DECL|method|testSnapshotsOnEncryptionZones ()
specifier|public
name|void
name|testSnapshotsOnEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_KEY2
init|=
literal|"testkey2"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY2
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"zoneFile"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
name|zoneParent
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|snap1
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zoneParent
argument_list|,
literal|"snap1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|snap1Zone
init|=
operator|new
name|Path
argument_list|(
name|snap1
argument_list|,
name|zone
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap1Zone
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now delete the encryption zone, recreate the dir, and take another
comment|// snapshot
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zone
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|snap2
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zoneParent
argument_list|,
literal|"snap2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|snap2Zone
init|=
operator|new
name|Path
argument_list|(
name|snap2
argument_list|,
name|zone
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap1Zone
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected null ez path"
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap2Zone
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the encryption zone again, and that shouldn't affect old snapshot
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY2
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|EncryptionZone
name|ezSnap1
init|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap1Zone
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|ezSnap1
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ez key"
argument_list|,
name|TEST_KEY
argument_list|,
name|ezSnap1
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected null ez path"
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap2Zone
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|snap3
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zoneParent
argument_list|,
literal|"snap3"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|snap3Zone
init|=
operator|new
name|Path
argument_list|(
name|snap3
argument_list|,
name|zone
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check that snap3's EZ has the correct settings
name|EncryptionZone
name|ezSnap3
init|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap3Zone
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|ezSnap3
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ez key"
argument_list|,
name|TEST_KEY2
argument_list|,
name|ezSnap3
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that older snapshots still have the old EZ settings
name|ezSnap1
operator|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap1Zone
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|ezSnap1
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ez key"
argument_list|,
name|TEST_KEY
argument_list|,
name|ezSnap1
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected null ez path"
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap2Zone
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that listEZs only shows the current filesystem state
name|ArrayList
argument_list|<
name|EncryptionZone
argument_list|>
name|listZones
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|EncryptionZone
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|listZones
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EncryptionZone
name|z
range|:
name|listZones
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Did not expect additional encryption zones!"
argument_list|,
literal|1
argument_list|,
name|listZones
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EncryptionZone
name|listZone
init|=
name|listZones
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|listZone
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ez key"
argument_list|,
name|TEST_KEY2
argument_list|,
name|listZone
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify contents of the snapshotted file
specifier|final
name|Path
name|snapshottedZoneFile
init|=
operator|new
name|Path
argument_list|(
name|snap1
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|zone
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|zoneFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Contents of snapshotted file have changed unexpectedly"
argument_list|,
name|contents
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|snapshottedZoneFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now delete the snapshots out of order and verify the zones are still
comment|// correct
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|zoneParent
argument_list|,
name|snap2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap1Zone
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap3Zone
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteSnapshot
argument_list|(
name|zoneParent
argument_list|,
name|snap1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|snap3Zone
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test correctness of encryption zones on a existing snapshot path.    * Specifically, test the file in encryption zones with no encryption info    */
annotation|@
name|Test
DECL|method|testSnapshotWithFile ()
specifier|public
name|void
name|testSnapshotWithFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"zoneFile"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|)
decl_stmt|;
comment|// Create the snapshot which contains the file
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
name|zoneParent
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|snap1
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zoneParent
argument_list|,
literal|"snap1"
argument_list|)
decl_stmt|;
comment|// Now delete the file and create encryption zone
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zoneFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
name|zone
operator|.
name|toString
argument_list|()
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|zone
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// The file in snapshot shouldn't have any encryption info
specifier|final
name|Path
name|snapshottedZoneFile
init|=
operator|new
name|Path
argument_list|(
name|snap1
operator|+
literal|"/"
operator|+
name|zone
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|zoneFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileEncryptionInfo
name|feInfo
init|=
name|getFileEncryptionInfo
argument_list|(
name|snapshottedZoneFile
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Expected null ez info"
argument_list|,
name|feInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Contents of snapshotted file have changed unexpectedly"
argument_list|,
name|contents
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|snapshottedZoneFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the correctness of the diff reports.    */
DECL|method|verifyDiffReport (Path dir, String from, String to, DiffReportEntry... entries)
specifier|private
name|void
name|verifyDiffReport
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|DiffReportEntry
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|verifySnapshotDiffReport
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test correctness of snapshotDiff for encryption zone.    * snapshtoDiff should work when the path parameter is prefixed with    * /.reserved/raw for path that's both snapshottable and encryption zone.    */
annotation|@
name|Test
DECL|method|testSnapshotDiffOnEncryptionZones ()
specifier|public
name|void
name|testSnapshotDiffOnEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_KEY2
init|=
literal|"testkey2"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|TEST_KEY2
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawZone
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw/zone"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"zoneFile"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zone
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|delete
argument_list|(
name|zoneFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSnapshot
argument_list|(
name|zone
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|zone
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"zoneFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|rawZone
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"zoneFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify symlinks can be created in encryption zones and that    * they function properly when the target is in the same    * or different ez.    */
annotation|@
name|Test
DECL|method|testEncryptionZonesWithSymlinks ()
specifier|public
name|void
name|testEncryptionZonesWithSymlinks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify we can create an encryption zone over both link and target
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/parent"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|linkParent
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"symdir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|targetParent
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"symdir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|linkParent
argument_list|,
literal|"link"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|targetParent
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|parent
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|linkParent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetParent
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Contents read from link are not the same as target"
argument_list|,
name|content
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now let's test when the symlink and target are in different
comment|// encryption zones
name|fs
operator|.
name|mkdirs
argument_list|(
name|linkParent
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|targetParent
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|linkParent
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|targetParent
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|content
operator|=
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Contents read from link are not the same as target"
argument_list|,
name|content
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|link
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcatFailsInEncryptionZones ()
specifier|public
name|void
name|testConcatFailsInEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
specifier|final
name|Path
name|ez
init|=
operator|new
name|Path
argument_list|(
literal|"/ez"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ez
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|ez
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|src1
init|=
operator|new
name|Path
argument_list|(
name|ez
argument_list|,
literal|"src1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|src2
init|=
operator|new
name|Path
argument_list|(
name|ez
argument_list|,
literal|"src2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|ez
argument_list|,
literal|"target"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|src1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|src2
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|target
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|Path
index|[]
block|{
name|src1
block|,
name|src2
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected concat to throw en exception for files in an ez"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"concat can not be called for files in an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|ez
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test running the OfflineImageViewer on a system with encryption zones.    */
annotation|@
name|Test
DECL|method|testOfflineImageViewerOnEncryptionZones ()
specifier|public
name|void
name|testOfflineImageViewerOnEncryptionZones
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|zoneParent
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
name|zoneParent
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1File
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zone1File
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|File
name|originalFsimage
init|=
name|FSImageTestUtil
operator|.
name|findLatestImageFile
argument_list|(
name|FSImageTestUtil
operator|.
name|getFSImage
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalFsimage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Didn't generate or can't find fsimage"
argument_list|)
throw|;
block|}
comment|// Run the XML OIV processor
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|pw
init|=
operator|new
name|PrintStream
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|PBImageXmlWriter
name|v
init|=
operator|new
name|PBImageXmlWriter
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|pw
argument_list|)
decl_stmt|;
name|v
operator|.
name|visit
argument_list|(
operator|new
name|RandomAccessFile
argument_list|(
name|originalFsimage
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xml
init|=
name|output
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SAXParser
name|parser
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creating encryption zone on the root path    */
annotation|@
name|Test
DECL|method|testEncryptionZonesOnRootPath ()
specifier|public
name|void
name|testEncryptionZonesOnRootPath
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawFile
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw/file"
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|rootDir
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File can be created on the root encryption zone "
operator|+
literal|"with correct length"
argument_list|,
name|len
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|zoneFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root dir is encrypted"
argument_list|,
literal|true
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootDir
argument_list|)
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File is encrypted"
argument_list|,
literal|true
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|zoneFile
argument_list|)
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|verifyFilesNotEqual
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|rawFile
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionZonesOnRelativePath ()
specifier|public
name|void
name|testEncryptionZonesOnRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|len
init|=
literal|8196
decl_stmt|;
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
literal|"/somewhere/base"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneDir
init|=
operator|new
name|Path
argument_list|(
literal|"zone"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zoneDir
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneDir
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|zoneFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
name|TEST_KEY
argument_list|,
literal|"/somewhere/base/zone"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected ez path"
argument_list|,
literal|"/somewhere/base/zone"
argument_list|,
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|zoneDir
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetEncryptionZoneOnANonExistentPaths ()
specifier|public
name|void
name|testGetEncryptionZoneOnANonExistentPaths
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|ezPath
init|=
operator|new
name|Path
argument_list|(
literal|"/ez"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ezPath
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|ezPath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Path
name|zoneFile
init|=
operator|new
name|Path
argument_list|(
name|ezPath
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|EncryptionZone
name|ez
init|=
name|fs
operator|.
name|getEZForPath
argument_list|(
name|zoneFile
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected EZ for non-existent path in EZ"
argument_list|,
name|ez
argument_list|)
expr_stmt|;
name|ez
operator|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
name|zoneFile
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected EZ for non-existent path in EZ"
argument_list|,
name|ez
argument_list|)
expr_stmt|;
name|ez
operator|=
name|dfsAdmin
operator|.
name|getEncryptionZoneForPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/does/not/exist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Expected null for non-existent path not in EZ"
argument_list|,
name|ez
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncryptionZoneWithTrash ()
specifier|public
name|void
name|testEncryptionZoneWithTrash
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the encryption zone1
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
comment|// Create the encrypted file in zone1
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"encFile1"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
comment|// Delete encrypted file from the shell with trash enabled
comment|// Verify the file is moved to appropriate trash within the zone
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|encFile1
argument_list|)
expr_stmt|;
comment|// Delete encryption zone from the shell with trash enabled
comment|// Verify the zone is moved to appropriate trash location in user's home dir
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|zone1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|topEZ
init|=
operator|new
name|Path
argument_list|(
literal|"/topEZ"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|topEZ
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|topEZ
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|NESTED_EZ_TEST_KEY
init|=
literal|"nested_ez_test_key"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createKey
argument_list|(
name|NESTED_EZ_TEST_KEY
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|nestedEZ
init|=
operator|new
name|Path
argument_list|(
name|topEZ
argument_list|,
literal|"nestedEZ"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|nestedEZ
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|nestedEZ
argument_list|,
name|NESTED_EZ_TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|topEZFile
init|=
operator|new
name|Path
argument_list|(
name|topEZ
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nestedEZFile
init|=
operator|new
name|Path
argument_list|(
name|nestedEZ
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|topEZFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|nestedEZFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|topEZFile
argument_list|)
expr_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|nestedEZFile
argument_list|)
expr_stmt|;
comment|//Test nested EZ with webHDFS
specifier|final
name|WebHdfsFileSystem
name|webFS
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|expectedTopTrash
init|=
operator|new
name|Path
argument_list|(
name|topEZ
argument_list|,
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|,
name|currentUser
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|expectedNestedTrash
init|=
operator|new
name|Path
argument_list|(
name|nestedEZ
argument_list|,
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|,
name|currentUser
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|topTrash
init|=
name|webFS
operator|.
name|getTrashRoot
argument_list|(
name|topEZFile
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nestedTrash
init|=
name|webFS
operator|.
name|getTrashRoot
argument_list|(
name|nestedEZFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTopTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|topTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNestedTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|nestedTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|nestedEZ
argument_list|)
expr_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|topEZ
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRootDirEZTrash ()
specifier|public
name|void
name|testRootDirEZTrash
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|rootDir
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile
init|=
operator|new
name|Path
argument_list|(
literal|"/encFile"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|encFile
argument_list|)
expr_stmt|;
comment|// Trash path should be consistent
comment|// if root path is an encryption zone
name|Path
name|encFileCurrentTrash
init|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|encFile
argument_list|)
decl_stmt|;
name|Path
name|rootDirCurrentTrash
init|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|rootDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Root trash should be equal with ezFile trash"
argument_list|,
name|encFileCurrentTrash
argument_list|,
name|rootDirCurrentTrash
argument_list|)
expr_stmt|;
comment|// Use webHDFS client to test trash root path
specifier|final
name|WebHdfsFileSystem
name|webFS
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|expectedTrash
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
operator|new
name|Path
argument_list|(
name|FileSystem
operator|.
name|TRASH_PREFIX
argument_list|,
name|currentUser
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|webHDFSTrash
init|=
name|webFS
operator|.
name|getTrashRoot
argument_list|(
name|encFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webHDFSTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encFileCurrentTrash
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|webHDFSTrash
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetTrashRoots ()
specifier|public
name|void
name|testGetTrashRoots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|ezRoot1
init|=
operator|new
name|Path
argument_list|(
literal|"/ez1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ezRoot1
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|ezRoot1
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Path
name|ezRoot2
init|=
operator|new
name|Path
argument_list|(
literal|"/ez2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ezRoot2
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|ezRoot2
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Path
name|ezRoot3
init|=
operator|new
name|Path
argument_list|(
literal|"/ez3"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|ezRoot3
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|ezRoot3
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|trashRootsBegin
init|=
name|fs
operator|.
name|getTrashRoots
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected getTrashRoots result"
argument_list|,
literal|0
argument_list|,
name|trashRootsBegin
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile
init|=
operator|new
name|Path
argument_list|(
name|ezRoot2
argument_list|,
literal|"encFile"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|encFile
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|trashRootsDelete1
init|=
name|fs
operator|.
name|getTrashRoots
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected getTrashRoots result"
argument_list|,
literal|1
argument_list|,
name|trashRootsDelete1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|nonEncFile
init|=
operator|new
name|Path
argument_list|(
literal|"/nonEncFile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|nonEncFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|nonEncFile
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|FileStatus
argument_list|>
name|trashRootsDelete2
init|=
name|fs
operator|.
name|getTrashRoots
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected getTrashRoots result"
argument_list|,
literal|2
argument_list|,
name|trashRootsDelete2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyShellDeleteWithTrash (FsShell shell, Path path)
specifier|private
name|void
name|verifyShellDeleteWithTrash
parameter_list|(
name|FsShell
name|shell
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Path
name|trashDir
init|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Verify that trashDir has a path component named ".Trash"
name|Path
name|checkTrash
init|=
name|trashDir
decl_stmt|;
while|while
condition|(
operator|!
name|checkTrash
operator|.
name|isRoot
argument_list|()
operator|&&
operator|!
name|checkTrash
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".Trash"
argument_list|)
condition|)
block|{
name|checkTrash
operator|=
name|checkTrash
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"No .Trash component found in trash dir "
operator|+
name|trashDir
argument_list|,
literal|".Trash"
argument_list|,
name|checkTrash
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|trashFile
init|=
operator|new
name|Path
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|path
argument_list|)
operator|+
literal|"/"
operator|+
name|path
argument_list|)
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
literal|"-r"
block|,
name|path
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rm failed"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File not in trash : "
operator|+
name|trashFile
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|trashFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** This test tests that client will first lookup secrets map    * for key provider uri from {@link Credentials} in    * {@link UserGroupInformation}    * @throws Exception    */
annotation|@
name|Test
DECL|method|testProviderUriInCredentials ()
specifier|public
name|void
name|testProviderUriInCredentials
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dummyKeyProvider
init|=
literal|"dummy://foo:bar@test_provider1"
decl_stmt|;
name|DFSClient
name|client
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// Key provider uri should be in the secret map of credentials object with
comment|// namenode uri as key
name|Text
name|lookUpKey
init|=
name|HdfsKMSUtil
operator|.
name|getKeyProviderMapKey
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|lookUpKey
argument_list|,
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|dummyKeyProvider
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|ugi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Client Key provider is different from provider in "
operator|+
literal|"credentials map"
argument_list|,
name|dummyKeyProvider
argument_list|,
name|client
operator|.
name|getKeyProviderUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * Testing the fallback behavior of keyProviderUri.   * This test tests first the key provider uri is used from conf   * and then used from serverDefaults.   * @throws IOException   */
annotation|@
name|Test
DECL|method|testKeyProviderFallBackBehavior ()
specifier|public
name|void
name|testKeyProviderFallBackBehavior
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|clusterConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|dummyKeyProviderUri1
init|=
literal|"dummy://foo:bar@test_provider1"
decl_stmt|;
comment|// set the key provider uri in conf.
name|clusterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|dummyKeyProviderUri1
argument_list|)
expr_stmt|;
name|DFSClient
name|mockClient
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
argument_list|)
decl_stmt|;
comment|// Namenode returning null as keyProviderUri in FSServerDefaults.
name|FsServerDefaults
name|serverDefaultsWithKeyProviderNull
init|=
name|getTestServerDefaults
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|serverDefaultsWithKeyProviderNull
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key provider uri from client doesn't match with uri from conf"
argument_list|,
name|dummyKeyProviderUri1
argument_list|,
name|mockClient
operator|.
name|getKeyProviderUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockClient
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
name|String
name|dummyKeyProviderUri2
init|=
literal|"dummy://foo:bar@test_provider2"
decl_stmt|;
name|FsServerDefaults
name|serverDefaultsWithDummyKeyProvider
init|=
name|getTestServerDefaults
argument_list|(
name|dummyKeyProviderUri2
argument_list|)
decl_stmt|;
comment|// Namenode returning dummyKeyProvider2 in serverDefaults.
name|Mockito
operator|.
name|doReturn
argument_list|(
name|serverDefaultsWithDummyKeyProvider
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key provider uri from client doesn't match with uri from namenode"
argument_list|,
name|dummyKeyProviderUri2
argument_list|,
name|mockClient
operator|.
name|getKeyProviderUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockClient
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test makes sure the client gets the key provider uri from namenode    * instead of its own conf.    * This test assumes both the namenode and client are upgraded.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDifferentKMSProviderOnUpgradedNamenode ()
specifier|public
name|void
name|testDifferentKMSProviderOnUpgradedNamenode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|clusterConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|URI
name|namenodeKeyProviderUri
init|=
name|URI
operator|.
name|create
argument_list|(
name|getKeyProviderURI
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key Provider for client and namenode are different"
argument_list|,
name|namenodeKeyProviderUri
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unset the provider path in conf
name|clusterConf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
comment|// Even after unsetting the local conf, the client key provider should be
comment|// the same as namenode's provider.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key Provider for client and namenode are different"
argument_list|,
name|namenodeKeyProviderUri
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the provider path to some dummy scheme.
name|clusterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
literal|"dummy://foo:bar@test_provider1"
argument_list|)
expr_stmt|;
comment|// Even after pointing the conf to some dummy provider, the client key
comment|// provider should be the same as namenode's provider.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key Provider for client and namenode are different"
argument_list|,
name|namenodeKeyProviderUri
argument_list|,
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getKeyProviderUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test makes sure the client trusts its local conf    * This test assumes the client is upgraded but the namenode is not.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDifferentKMSProviderOnUnUpgradedNamenode ()
specifier|public
name|void
name|testDifferentKMSProviderOnUnUpgradedNamenode
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|clusterConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|URI
name|namenodeKeyProviderUri
init|=
name|URI
operator|.
name|create
argument_list|(
name|getKeyProviderURI
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|clientKeyProviderUri
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getKeyProviderUri
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|clientKeyProviderUri
argument_list|)
expr_stmt|;
comment|// Since the client and the namenode share the same conf, they will have
comment|// identical key provider.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Key Provider for client and namenode are different"
argument_list|,
name|namenodeKeyProviderUri
argument_list|,
name|clientKeyProviderUri
argument_list|)
expr_stmt|;
name|String
name|dummyKeyProviderUri
init|=
literal|"dummy://foo:bar@test_provider"
decl_stmt|;
comment|// Unset the provider path in conf.
name|clusterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|dummyKeyProviderUri
argument_list|)
expr_stmt|;
name|FsServerDefaults
name|spyServerDefaults
init|=
name|getTestServerDefaults
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Creating a fake serverdefaults so that we can simulate namenode not
comment|// being upgraded.
name|DFSClient
name|spyClient
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|spyServerDefaults
argument_list|)
operator|.
name|when
argument_list|(
name|spyClient
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
comment|// Since FsServerDefaults#keyProviderUri is null, the client
comment|// will fallback to local conf which is null.
name|clientKeyProviderUri
operator|=
name|spyClient
operator|.
name|getKeyProviderUri
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Client keyProvider should be "
operator|+
name|dummyKeyProviderUri
argument_list|,
name|dummyKeyProviderUri
argument_list|,
name|clientKeyProviderUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyClient
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
block|}
comment|// Given a provider uri return serverdefaults.
comment|// provider uri == null means the namenode does not support returning
comment|// provider uri in FSServerDefaults object.
DECL|method|getTestServerDefaults (String providerPath)
specifier|private
name|FsServerDefaults
name|getTestServerDefaults
parameter_list|(
name|String
name|providerPath
parameter_list|)
block|{
name|FsServerDefaults
name|serverDefaults
init|=
operator|new
name|FsServerDefaults
argument_list|(
name|conf
operator|.
name|getLongBytes
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|DFS_REPLICATION_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
argument_list|,
name|providerPath
argument_list|)
decl_stmt|;
return|return
name|serverDefaults
return|;
block|}
comment|/**    * This test performs encrypted read/write and picks up the key provider uri    * from the credentials and not the conf.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testEncryptedReadWriteUsingDiffKeyProvider ()
specifier|public
name|void
name|testEncryptedReadWriteUsingDiffKeyProvider
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Configuration
name|clusterConf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|clusterConf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|lookUpKey
init|=
name|HdfsKMSUtil
operator|.
name|getKeyProviderMapKey
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|lookUpKey
argument_list|,
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|getKeyProviderURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|ugi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
comment|// Create a base file for comparison
specifier|final
name|Path
name|baseFile
init|=
operator|new
name|Path
argument_list|(
literal|"/base"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Create the first enc file
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Read them back in and compare byte-by-byte
name|verifyFilesEqual
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test listing encryption zones after zones had been deleted,    * but still exist under snapshots. This test first moves EZs    * to trash folder, so that an inodereference is created for the EZ,    * then it removes the EZ from trash folder to emulate condition where    * the EZ inode will not be complete.    */
annotation|@
name|Test
DECL|method|testListEncryptionZonesWithSnapshots ()
specifier|public
name|void
name|testListEncryptionZonesWithSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|snapshottable
init|=
operator|new
name|Path
argument_list|(
literal|"/zones"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneDirectChild
init|=
operator|new
name|Path
argument_list|(
name|snapshottable
argument_list|,
literal|"zone1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|snapshottableChild
init|=
operator|new
name|Path
argument_list|(
name|snapshottable
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zoneSubChild
init|=
operator|new
name|Path
argument_list|(
name|snapshottableChild
argument_list|,
literal|"zone2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zoneDirectChild
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zoneSubChild
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|allowSnapshot
argument_list|(
name|snapshottable
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneDirectChild
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zoneSubChild
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|snap1
init|=
name|fs
operator|.
name|createSnapshot
argument_list|(
name|snapshottable
argument_list|,
literal|"snap1"
argument_list|)
decl_stmt|;
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
comment|//will "trash" the zone under subfolder of snapshottable directory
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|snapshottableChild
argument_list|)
expr_stmt|;
comment|//permanently remove zone under subfolder of snapshottable directory
name|fsWrapper
operator|.
name|delete
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|snapshottableChild
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|EncryptionZone
argument_list|>
name|it
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EncryptionZone
name|ez
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"EncryptionZone "
operator|+
name|zoneSubChild
operator|.
name|toString
argument_list|()
operator|+
literal|" should not be listed."
argument_list|,
name|ez
operator|.
name|getPath
argument_list|()
argument_list|,
name|zoneSubChild
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//will "trash" the zone direct child of snapshottable directory
name|verifyShellDeleteWithTrash
argument_list|(
name|shell
argument_list|,
name|zoneDirectChild
argument_list|)
expr_stmt|;
comment|//permanently remove zone direct child of snapshottable directory
name|fsWrapper
operator|.
name|delete
argument_list|(
name|shell
operator|.
name|getCurrentTrashDir
argument_list|(
name|zoneDirectChild
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"listEncryptionZones should not return anything, "
operator|+
literal|"since both EZs were deleted."
argument_list|,
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * This test returns mocked kms token when   * {@link WebHdfsFileSystem#addDelegationTokens(String, Credentials)} method   * is called.   * @throws Exception   */
annotation|@
name|Test
DECL|method|addMockKmsToken ()
specifier|public
name|void
name|addMockKmsToken
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"JobTracker"
argument_list|)
expr_stmt|;
name|WebHdfsFileSystem
name|webfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|KeyProvider
name|keyProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|DelegationTokenExtension
operator|.
name|class
argument_list|,
name|CryptoExtension
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|keyProvider
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|testIdentifier
init|=
literal|"Test identifier for delegation token"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Token
name|testToken
init|=
operator|new
name|Token
argument_list|(
name|testIdentifier
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|Text
argument_list|(
literal|"kms-dt"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
operator|(
operator|(
name|DelegationTokenIssuer
operator|)
name|keyProvider
operator|)
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"service"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
operator|(
operator|(
name|DelegationTokenIssuer
operator|)
name|keyProvider
operator|)
operator|.
name|getDelegationToken
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|testToken
argument_list|)
expr_stmt|;
name|webfs
operator|.
name|setTestProvider
argument_list|(
name|keyProvider
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|webfs
operator|.
name|addDelegationTokens
argument_list|(
literal|"JobTracker"
argument_list|,
name|creds
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|,
name|testToken
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a file with stable {@link DistributedFileSystem}.    * Tests the following 2 scenarios.    * 1. The decrypted data using {@link WebHdfsFileSystem} should be same as    * input data.    * 2. Gets the underlying raw encrypted stream and verifies that the    * encrypted data is different than input data.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWebhdfsRead ()
specifier|public
name|void
name|testWebhdfsRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encryptedFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone/encryptedFile.txt"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rawPath
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw/TestEncryptionZone/encryptedFile.txt"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"hello world"
decl_stmt|;
comment|// Create a file using DistributedFileSystem.
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|encryptedFilePath
argument_list|,
name|content
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|webhdfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
comment|// Verify whether decrypted input stream data is same as content.
name|InputStream
name|decryptedIputStream
init|=
name|webhdfs
operator|.
name|open
argument_list|(
name|encryptedFilePath
argument_list|)
decl_stmt|;
name|verifyStreamsSame
argument_list|(
name|content
argument_list|,
name|decryptedIputStream
argument_list|)
expr_stmt|;
comment|// Get the underlying stream from CryptoInputStream which should be
comment|// raw encrypted bytes.
name|InputStream
name|cryptoStream
init|=
name|webhdfs
operator|.
name|open
argument_list|(
name|encryptedFilePath
argument_list|)
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"cryptoStream should be an instance of "
operator|+
literal|"CryptoInputStream"
argument_list|,
operator|(
name|cryptoStream
operator|instanceof
name|CryptoInputStream
operator|)
argument_list|)
expr_stmt|;
name|InputStream
name|encryptedStream
init|=
operator|(
operator|(
name|CryptoInputStream
operator|)
name|cryptoStream
operator|)
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
comment|// Verify that the data read from the raw input stream is different
comment|// from the original content. Also check it is identical to the raw
comment|// encrypted data from dfs.
name|verifyRaw
argument_list|(
name|content
argument_list|,
name|encryptedStream
argument_list|,
name|fs
operator|.
name|open
argument_list|(
name|rawPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyStreamsSame (String content, InputStream is)
specifier|private
name|void
name|verifyStreamsSame
parameter_list|(
name|String
name|content
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|streamBytes
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|streamBytes
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|,
name|streamBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRaw (String content, InputStream is, InputStream rawIs)
specifier|private
name|void
name|verifyRaw
parameter_list|(
name|String
name|content
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|InputStream
name|rawIs
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|streamBytes
decl_stmt|,
name|rawBytes
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|streamBytes
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|,
name|streamBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// webhdfs raw bytes should match the raw bytes from dfs.
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|rawIs
argument_list|,
name|os
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rawBytes
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|rawBytes
argument_list|,
name|streamBytes
argument_list|)
expr_stmt|;
block|}
comment|/* Tests that if client is old and namenode is new then the    * data will be decrypted by datanode.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWebhdfsReadOldBehavior ()
specifier|public
name|void
name|testWebhdfsReadOldBehavior
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encryptedFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone/foo"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"hello world"
decl_stmt|;
comment|// Create a file using DistributedFileSystem.
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|encryptedFilePath
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"?op=OPEN"
argument_list|)
decl_stmt|;
comment|// Return a connection with client not supporting EZ.
name|HttpURLConnection
name|namenodeConnection
init|=
name|returnConnection
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|namenodeConnection
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|URL
name|datanodeURL
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|datanodeURL
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|datanodeConnection
init|=
name|returnConnection
argument_list|(
name|datanodeURL
argument_list|,
literal|"GET"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|datanodeConnection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
comment|// Comparing with the original contents
comment|// and making sure they are decrypted.
name|verifyStreamsSame
argument_list|(
name|content
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
comment|/* Tests namenode returns path starting with /.reserved/raw if client    * supports EZ and not if otherwise    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWebhfsEZRedirectLocation ()
specifier|public
name|void
name|testWebhfsEZRedirectLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encryptedFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone/foo"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"hello world"
decl_stmt|;
comment|// Create a file using DistributedFileSystem.
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|encryptedFilePath
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"?op=OPEN"
argument_list|)
decl_stmt|;
comment|// Return a connection with client not supporting EZ.
name|HttpURLConnection
name|namenodeConnection
init|=
name|returnConnection
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|namenodeConnection
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|datanodeUrl
init|=
operator|new
name|URL
argument_list|(
name|namenodeConnection
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|datanodeUrl
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|datanodeUrl
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"?op=OPEN"
argument_list|)
expr_stmt|;
comment|// Return a connection with client supporting EZ.
name|namenodeConnection
operator|=
name|returnConnection
argument_list|(
name|url
argument_list|,
literal|"GET"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|namenodeConnection
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeUrl
operator|=
operator|new
name|URL
argument_list|(
name|namenodeConnection
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|datanodeUrl
argument_list|)
expr_stmt|;
name|path
operator|=
name|datanodeUrl
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/.reserved/raw"
operator|+
name|encryptedFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|returnConnection (URL url, String httpRequestType, boolean supportEZ)
specifier|private
specifier|static
name|HttpURLConnection
name|returnConnection
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|httpRequestType
parameter_list|,
name|boolean
name|supportEZ
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|httpRequestType
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportEZ
condition|)
block|{
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|WebHdfsFileSystem
operator|.
name|EZ_HEADER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
comment|/*    * Test seek behavior of the webhdfs input stream which reads data from    * encryption zone.    */
annotation|@
name|Test
DECL|method|testPread ()
specifier|public
name|void
name|testPread
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encryptedFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestEncryptionZone/foo"
argument_list|)
decl_stmt|;
comment|// Create a file using DistributedFileSystem.
name|WebHdfsFileSystem
name|webfs
init|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|webfs
argument_list|,
name|encryptedFilePath
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|DFSTestUtil
operator|.
name|readFileAsBytes
argument_list|(
name|fs
argument_list|,
name|encryptedFilePath
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|webfs
operator|.
name|open
argument_list|(
name|encryptedFilePath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|data
index|[
name|i
index|]
operator|&
literal|0XFF
operator|)
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that namenode doesn't generate edek if we are writing to    * /.reserved/raw directory.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWriteToEZReservedRaw ()
specifier|public
name|void
name|testWriteToEZReservedRaw
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unEncryptedBytes
init|=
literal|"hello world"
decl_stmt|;
comment|// Create an Encryption Zone.
specifier|final
name|Path
name|zonePath
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zonePath
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zonePath
argument_list|,
name|TEST_KEY
argument_list|,
name|NO_TRASH
argument_list|)
expr_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|zonePath
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|Path
name|reservedRawPath
init|=
operator|new
name|Path
argument_list|(
literal|"/.reserved/raw/"
operator|+
name|p1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create an empty file with /.reserved/raw/ path.
name|OutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|reservedRawPath
argument_list|)
decl_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getXAttr
argument_list|(
name|reservedRawPath
argument_list|,
name|HdfsServerConstants
operator|.
name|CRYPTO_XATTR_FILE_ENCRYPTION_INFO
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getXAttr should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"At least one of the attributes provided was "
operator|+
literal|"not found."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

