begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EncryptionZoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestEncryptionZones
specifier|public
class|class
name|TestEncryptionZones
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsHelper
specifier|private
name|FileSystemTestHelper
name|fsHelper
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfsAdmin
specifier|private
name|HdfsAdmin
name|dfsAdmin
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|fsWrapper
specifier|protected
name|FileSystemTestWrapper
name|fsWrapper
decl_stmt|;
DECL|field|fcWrapper
specifier|protected
name|FileContextTestWrapper
name|fcWrapper
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|fsHelper
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
expr_stmt|;
comment|// Set up java key store
name|String
name|testRoot
init|=
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|,
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|testRootDir
operator|+
literal|"/test.jks"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|EncryptionZoneManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|fsWrapper
operator|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|fcWrapper
operator|=
operator|new
name|FileContextTestWrapper
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|=
operator|new
name|HdfsAdmin
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertNumZones (final int numZones)
specifier|public
name|void
name|assertNumZones
parameter_list|(
specifier|final
name|int
name|numZones
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of encryption zones!"
argument_list|,
name|numZones
argument_list|,
name|zones
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that an encryption zone with the specified keyId and path (if not    * null) is present.    *    * @throws IOException if a matching zone could not be found    */
DECL|method|assertZonePresent (String keyId, String path)
specifier|public
name|void
name|assertZonePresent
parameter_list|(
name|String
name|keyId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EncryptionZone
name|zone
range|:
name|zones
control|)
block|{
name|boolean
name|matchKey
init|=
operator|(
name|keyId
operator|==
literal|null
operator|)
decl_stmt|;
name|boolean
name|matchPath
init|=
operator|(
name|path
operator|==
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|keyId
operator|!=
literal|null
operator|&&
name|zone
operator|.
name|getKeyId
argument_list|()
operator|.
name|equals
argument_list|(
name|keyId
argument_list|)
condition|)
block|{
name|matchKey
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|zone
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|matchPath
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|matchKey
operator|&&
name|matchPath
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find expected encryption zone with keyId "
operator|+
name|keyId
operator|+
literal|" path "
operator|+
name|path
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to create a key in the Key Provider.    */
DECL|method|createKey (String keyId)
specifier|private
name|void
name|createKey
parameter_list|(
name|String
name|keyId
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|KeyProvider
name|provider
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
decl_stmt|;
specifier|final
name|KeyProvider
operator|.
name|Options
name|options
init|=
name|KeyProvider
operator|.
name|options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createKey
argument_list|(
name|keyId
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasicOperations ()
specifier|public
name|void
name|testBasicOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numZones
init|=
literal|0
decl_stmt|;
comment|/* Test failure of create EZ on a directory that doesn't exist. */
specifier|final
name|Path
name|zone1
init|=
operator|new
name|Path
argument_list|(
literal|"/zone1"
argument_list|)
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected /test doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"cannot find"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Normal creation of an EZ */
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|zone1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Test failure of create EZ on a directory which is already an EZ. */
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"already in an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Test failure of create EZ operation in an existing EZ. */
specifier|final
name|Path
name|zone1Child
init|=
operator|new
name|Path
argument_list|(
name|zone1
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone1Child
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone1Child
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"EZ in an EZ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"already in an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* create EZ on a folder with a folder fails */
specifier|final
name|Path
name|notEmpty
init|=
operator|new
name|Path
argument_list|(
literal|"/notEmpty"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|notEmptyChild
init|=
operator|new
name|Path
argument_list|(
name|notEmpty
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|notEmptyChild
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|notEmpty
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created EZ on an non-empty directory with folder"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|fsWrapper
operator|.
name|delete
argument_list|(
name|notEmptyChild
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* create EZ on a folder with a file fails */
name|fsWrapper
operator|.
name|createFile
argument_list|(
name|notEmptyChild
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|notEmpty
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created EZ on an non-empty directory with file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"create an encryption zone"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* Test failure of creating an EZ passing a key that doesn't exist. */
specifier|final
name|Path
name|zone2
init|=
operator|new
name|Path
argument_list|(
literal|"/zone2"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|zone2
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|myKeyId
init|=
literal|"mykeyid"
decl_stmt|;
try|try
block|{
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
name|myKeyId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected key doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"doesn't exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNumZones
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|/* Test success of creating an EZ when they key exists. */
name|createKey
argument_list|(
name|myKeyId
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone2
argument_list|,
name|myKeyId
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
name|myKeyId
argument_list|,
name|zone2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Test failure of create encryption zones as a non super user. */
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|nonSuper
init|=
operator|new
name|Path
argument_list|(
literal|"/nonSuper"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|nonSuper
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|nonSuper
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createEncryptionZone is superuser-only operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test success of creating an encryption zone a few levels down.
name|Path
name|deepZone
init|=
operator|new
name|Path
argument_list|(
literal|"/d/e/e/p/zone"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|deepZone
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|deepZone
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNumZones
argument_list|(
operator|++
name|numZones
argument_list|)
expr_stmt|;
name|assertZonePresent
argument_list|(
literal|null
argument_list|,
name|deepZone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test listing encryption zones as a non super user.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListEncryptionZonesAsNonSuperUser ()
specifier|public
name|void
name|testListEncryptionZonesAsNonSuperUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mygroup"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|superPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"superuseronly"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|allPath
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"accessall"
argument_list|)
decl_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|superPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|superPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsWrapper
operator|.
name|mkdir
argument_list|(
name|allPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0707
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|allPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|userAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|userAdmin
operator|.
name|listEncryptionZones
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"Superuser privilege is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test success of Rename EZ on a directory which is already an EZ.    */
DECL|method|doRenameEncryptionZone (FSTestWrapper wrapper)
specifier|private
name|void
name|doRenameEncryptionZone
parameter_list|(
name|FSTestWrapper
name|wrapper
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
name|fsHelper
operator|.
name|getTestRootDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFoo
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|pathFooBaz
init|=
operator|new
name|Path
argument_list|(
name|pathFoo
argument_list|,
literal|"baz"
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|mkdir
argument_list|(
name|pathFoo
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|pathFoo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|mkdir
argument_list|(
name|pathFooBaz
argument_list|,
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|wrapper
operator|.
name|rename
argument_list|(
name|pathFooBaz
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
name|pathFooBaz
operator|.
name|toString
argument_list|()
operator|+
literal|" can't be moved from"
operator|+
literal|" an encryption zone."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFileSystem ()
specifier|public
name|void
name|testRenameFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|doRenameEncryptionZone
argument_list|(
name|fsWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRenameFileContext ()
specifier|public
name|void
name|testRenameFileContext
parameter_list|()
throws|throws
name|Exception
block|{
name|doRenameEncryptionZone
argument_list|(
name|fcWrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|validateFiles (Path p1, Path p2, int len)
specifier|private
name|void
name|validateFiles
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataInputStream
name|in1
init|=
name|fs
operator|.
name|open
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in2
init|=
name|fs
operator|.
name|open
argument_list|(
name|p2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Mismatch at byte "
operator|+
name|i
argument_list|,
name|in1
operator|.
name|read
argument_list|()
argument_list|,
name|in2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in1
operator|.
name|close
argument_list|()
expr_stmt|;
name|in2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileEncryptionInfo (Path path)
specifier|private
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|LocatedBlocks
name|blocks
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|blocks
operator|.
name|getFileEncryptionInfo
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testReadWrite ()
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Create a base file for comparison
specifier|final
name|Path
name|baseFile
init|=
operator|new
name|Path
argument_list|(
literal|"/base"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
literal|8192
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|baseFile
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Create the first enc file
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|encFile1
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Read them back in and compare byte-by-byte
name|validateFiles
argument_list|(
name|baseFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Roll the key of the encryption zone
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|zones
init|=
name|dfsAdmin
operator|.
name|listEncryptionZones
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 EZ"
argument_list|,
literal|1
argument_list|,
name|zones
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|keyId
init|=
name|zones
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|rollNewVersion
argument_list|(
name|keyId
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|ezManager
operator|.
name|kickMonitor
argument_list|()
expr_stmt|;
comment|// Read them back in and compare byte-by-byte
name|validateFiles
argument_list|(
name|baseFile
argument_list|,
name|encFile1
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Write a new enc file and validate
specifier|final
name|Path
name|encFile2
init|=
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"myfile2"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// FEInfos should be different
name|FileEncryptionInfo
name|feInfo1
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile1
argument_list|)
decl_stmt|;
name|FileEncryptionInfo
name|feInfo2
init|=
name|getFileEncryptionInfo
argument_list|(
name|encFile2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"EDEKs should be different"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|feInfo1
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|,
name|feInfo2
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Key was rolled, versions should be different"
argument_list|,
name|feInfo1
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|feInfo2
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Contents still equal
name|validateFiles
argument_list|(
name|encFile1
argument_list|,
name|encFile2
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCipherSuiteNegotiation ()
specifier|public
name|void
name|testCipherSuiteNegotiation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HdfsAdmin
name|dfsAdmin
init|=
operator|new
name|HdfsAdmin
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|zone
init|=
operator|new
name|Path
argument_list|(
literal|"/zone"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|dfsAdmin
operator|.
name|createEncryptionZone
argument_list|(
name|zone
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Create a file in an EZ, which should succeed
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success1"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Pass no cipherSuites, fail
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a CipherSuite!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCipherSuiteException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"No cipher suites"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown cipherSuites, fail
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"fail"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Created a file without specifying a CipherSuite!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownCipherSuiteException
name|e
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"No cipher suites"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pass some unknown and a good cipherSuites, success
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success2"
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|cipherSuites
operator|.
name|add
argument_list|(
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|zone
argument_list|,
literal|"success3"
argument_list|)
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0xFEED
argument_list|)
expr_stmt|;
comment|// Check KeyProvider state
comment|// Flushing the KP on the NN, since it caches, and init a test one
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getProvider
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|KeyProvider
name|provider
init|=
name|KeyProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|provider
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected NN to have created one key per zone"
argument_list|,
literal|1
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|allVersions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|versions
init|=
name|provider
operator|.
name|getKeyVersions
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only have one key version per key"
argument_list|,
literal|1
argument_list|,
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allVersions
operator|.
name|addAll
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
comment|// Check that the specified CipherSuite was correctly saved on the NN
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|FileEncryptionInfo
name|feInfo
init|=
name|getFileEncryptionInfo
argument_list|(
operator|new
name|Path
argument_list|(
name|zone
operator|.
name|toString
argument_list|()
operator|+
literal|"/success"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|feInfo
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|CipherSuite
operator|.
name|AES_CTR_NOPADDING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

