begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_PROTECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_DERIVED_QOP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SEND_QOP_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This test tests access NameNode on different port with different  * configured QOP.  */
end_comment

begin_class
DECL|class|TestMultipleNNPortQOP
specifier|public
class|class
name|TestMultipleNNPortQOP
extends|extends
name|SaslDataTransferTestCase
block|{
DECL|field|PATH1
specifier|private
specifier|static
specifier|final
name|Path
name|PATH1
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
DECL|field|PATH2
specifier|private
specifier|static
specifier|final
name|Path
name|PATH2
init|=
operator|new
name|Path
argument_list|(
literal|"/file2"
argument_list|)
decl_stmt|;
DECL|field|PATH3
specifier|private
specifier|static
specifier|final
name|Path
name|PATH3
init|=
operator|new
name|Path
argument_list|(
literal|"/file3"
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
DECL|field|NUM_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|3
decl_stmt|;
DECL|field|clusterConf
specifier|private
specifier|static
name|HdfsConfiguration
name|clusterConf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|clusterConf
operator|=
name|createSecureConfig
argument_list|(
literal|"authentication,integrity,privacy"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
argument_list|,
literal|"12000,12100,12200"
argument_list|)
expr_stmt|;
comment|// explicitly setting service rpc for datanode. This because
comment|// DFSUtil.getNNServiceRpcAddressesForCluster looks up client facing port
comment|// and service port at the same time, and if no setting for service
comment|// rpc, it would return client port, in this case, it will be the
comment|// auxiliary port for data node. Which is not what auxiliary is for.
comment|// setting service rpc port to avoid this.
name|clusterConf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
literal|"localhost:9020"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|,
literal|"org.apache.hadoop.security.IngressPortBasedResolver"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"ingress.port.sasl.configured.ports"
argument_list|,
literal|"12000,12100,12200"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"ingress.port.sasl.prop.12000"
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"ingress.port.sasl.prop.12100"
argument_list|,
literal|"integrity"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"ingress.port.sasl.prop.12200"
argument_list|,
literal|"privacy"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SEND_QOP_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test accessing NameNode from three different ports.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMultipleNNPort ()
specifier|public
name|void
name|testMultipleNNPort
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|HdfsConfiguration
name|clientConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|URI
name|currentURI
init|=
name|cluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|URI
name|uriAuthPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12000"
argument_list|)
decl_stmt|;
name|URI
name|uriIntegrityPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12100"
argument_list|)
decl_stmt|;
name|URI
name|uriPrivacyPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12200"
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"privacy"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsPrivacy
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriPrivacyPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsPrivacy
argument_list|,
name|PATH1
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|SaslDataTransferServer
name|saslServer
init|=
name|dn
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth-conf"
argument_list|,
name|saslServer
operator|.
name|getNegotiatedQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"integrity"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsIntegrity
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriIntegrityPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsIntegrity
argument_list|,
name|PATH2
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|SaslDataTransferServer
name|saslServer
init|=
name|dn
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth-int"
argument_list|,
name|saslServer
operator|.
name|getNegotiatedQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsAuth
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriAuthPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsAuth
argument_list|,
name|PATH3
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|SaslDataTransferServer
name|saslServer
init|=
name|dn
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|saslServer
operator|.
name|getNegotiatedQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test accessing NameNode from three different ports, tests    * overwriting downstream DN in the pipeline.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMultipleNNPortOverwriteDownStream ()
specifier|public
name|void
name|testMultipleNNPortOverwriteDownStream
parameter_list|()
throws|throws
name|Exception
block|{
name|clusterConf
operator|.
name|set
argument_list|(
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_NEW_QOP_KEY
argument_list|,
literal|"auth"
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|DFS_ENCRYPT_DATA_OVERWRITE_DOWNSTREAM_DERIVED_QOP_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|clusterConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|HdfsConfiguration
name|clientConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|unset
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|URI
name|currentURI
init|=
name|cluster
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|URI
name|uriAuthPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12000"
argument_list|)
decl_stmt|;
name|URI
name|uriIntegrityPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12100"
argument_list|)
decl_stmt|;
name|URI
name|uriPrivacyPort
init|=
operator|new
name|URI
argument_list|(
name|currentURI
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|currentURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":12200"
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"privacy"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsPrivacy
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriPrivacyPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsPrivacy
argument_list|,
name|PATH1
argument_list|)
expr_stmt|;
comment|// add a wait so that data has reached not only first DN,
comment|// but also the rest
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SaslDataTransferClient
name|saslClient
init|=
name|dn
operator|.
name|getSaslClient
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|saslClient
operator|.
name|getTargetQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"integrity"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsIntegrity
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriIntegrityPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsIntegrity
argument_list|,
name|PATH2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SaslDataTransferClient
name|saslClient
init|=
name|dn
operator|.
name|getSaslClient
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|saslClient
operator|.
name|getTargetQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"authentication"
argument_list|)
expr_stmt|;
name|FileSystem
name|fsAuth
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uriAuthPort
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|fsAuth
argument_list|,
name|PATH3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|dataNodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SaslDataTransferServer
name|saslServer
init|=
name|dn
operator|.
name|getSaslServer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|saslServer
operator|.
name|getNegotiatedQOP
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTest (FileSystem fs, Path path)
specifier|private
name|void
name|doTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|NUM_BLOCKS
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|FileSystemTestHelper
operator|.
name|getFileData
argument_list|(
name|NUM_BLOCKS
argument_list|,
name|BLOCK_SIZE
argument_list|)
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|blockLocations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|blockLocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_BLOCKS
argument_list|,
name|blockLocations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockLocation
name|blockLocation
range|:
name|blockLocations
control|)
block|{
name|assertNotNull
argument_list|(
name|blockLocation
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blockLocation
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

