begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This is a unit test, which tests {@link Util#stringAsURI(String)}  * for IDs being used in HDFS, e.g. ClusterID and BlockPoolID.  */
end_comment

begin_class
DECL|class|TestStorageInfo
specifier|public
class|class
name|TestStorageInfo
extends|extends
name|TestCase
block|{
comment|/**    * Test write() / readFieds() of StroageInfo.  Write StorageInfo into a buffer    * then read it back and the result should be the same with the original one.    * @throws IOException     */
DECL|method|testStorageInfo ()
specifier|public
name|void
name|testStorageInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|nsID
init|=
literal|123
decl_stmt|;
name|String
name|cid
init|=
literal|"cid-test"
decl_stmt|;
name|int
name|layoutV
init|=
literal|234
decl_stmt|;
name|long
name|cT
init|=
literal|0L
decl_stmt|;
name|StorageInfo
name|sinfo
init|=
operator|new
name|StorageInfo
argument_list|(
name|layoutV
argument_list|,
name|nsID
argument_list|,
name|cid
argument_list|,
name|cT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sinfo
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|output
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
try|try
block|{
comment|// we need to first create an DataOutputStream for sinfo to write into
name|sinfo
operator|.
name|write
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|//remember to close the DataOutputStream
comment|//to make sure the data has been written
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// convert ByteArrayInputStream to ByteArrayOutputStream
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dataInputStream
init|=
operator|new
name|DataInputStream
argument_list|(
name|bis
argument_list|)
decl_stmt|;
name|StorageInfo
name|secondsinfo
init|=
operator|new
name|StorageInfo
argument_list|()
decl_stmt|;
name|secondsinfo
operator|.
name|readFields
argument_list|(
name|dataInputStream
argument_list|)
expr_stmt|;
comment|// compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sinfo
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|secondsinfo
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sinfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|secondsinfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sinfo
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|secondsinfo
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sinfo
operator|.
name|getCTime
argument_list|()
argument_list|,
name|secondsinfo
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

