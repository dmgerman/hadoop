begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestLazyPersistFiles
specifier|public
class|class
name|TestLazyPersistFiles
extends|extends
name|LazyPersistTestCase
block|{
DECL|field|THREADPOOL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|THREADPOOL_SIZE
init|=
literal|10
decl_stmt|;
comment|/**    * Append to lazy persist file is denied.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testAppendIsDenied ()
specifier|public
name|void
name|testAppendIsDenied
parameter_list|()
throws|throws
name|IOException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|append
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Append to LazyPersist file did not fail as expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Truncate to lazy persist file is denied.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testTruncateIsDenied ()
specifier|public
name|void
name|testTruncateIsDenied
parameter_list|()
throws|throws
name|IOException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|truncate
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Truncate to LazyPersist file did not fail as expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If one or more replicas of a lazyPersist file are lost, then the file    * must be discarded by the NN, instead of being kept around as a    * 'corrupt' file.    */
annotation|@
name|Test
DECL|method|testCorruptFilesAreDiscarded ()
specifier|public
name|void
name|testCorruptFilesAreDiscarded
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Stop the DataNode and sleep for the time it takes the NN to
comment|// detect the DN as being dead.
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getNumDeadDataNodes
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next, wait for the replication monitor to mark the file as corrupt
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait for the LazyPersistFileScrubber to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Ensure that path1 does not exist anymore, whereas path2 does.
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
operator|)
assert|;
comment|// We should have zero blocks that needs replication i.e. the one
comment|// belonging to path2.
name|assertThat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableLazyPersistFileScrubber ()
specifier|public
name|void
name|testDisableLazyPersistFileScrubber
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|2
argument_list|)
operator|.
name|disableScrubber
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Stop the DataNode and sleep for the time it takes the NN to
comment|// detect the DN as being dead.
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
comment|// Next, wait for the replication monitor to mark the file as corrupt
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait for the LazyPersistFileScrubber to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Ensure that path1 exist.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**   * If NN restarted then lazyPersist files should not deleted   */
annotation|@
name|Test
DECL|method|testFileShouldNotDiscardedIfNNRestarted ()
specifier|public
name|void
name|testFileShouldNotDiscardedIfNNRestarted
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// wait for the replication monitor to mark the file as corrupt
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Long
name|corruptBlkCount
init|=
operator|(
name|long
operator|)
name|Iterators
operator|.
name|size
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getCorruptReplicaBlockIterator
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check block detected as corrupted
name|assertThat
argument_list|(
name|corruptBlkCount
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure path1 exist.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent read from the same node and verify the contents.    */
annotation|@
name|Test
DECL|method|testConcurrentRead ()
specifier|public
name|void
name|testConcurrentRead
parameter_list|()
throws|throws
name|Exception
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|int
name|NUM_TASKS
init|=
literal|5
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|//Read from multiple clients
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_TASKS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Runnable
name|readerRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyReadRandomFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|SEED
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"readerRunnable error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|testFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|NUM_TASKS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TASKS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|readerRunnable
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TASKS
condition|;
name|i
operator|++
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent write with eviction    * RAM_DISK can hold 9 replicas    * 4 threads each write 5 replicas    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testConcurrentWrites ()
specifier|public
name|void
name|testConcurrentWrites
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getClusterBuilder
argument_list|()
operator|.
name|setRamDiskReplicaCapacity
argument_list|(
literal|9
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|int
name|NUM_WRITERS
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|NUM_WRITER_PATHS
init|=
literal|5
decl_stmt|;
name|Path
name|paths
index|[]
index|[]
init|=
operator|new
name|Path
index|[
name|NUM_WRITERS
index|]
index|[
name|NUM_WRITER_PATHS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_WRITERS
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
index|[
name|NUM_WRITER_PATHS
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_WRITER_PATHS
condition|;
name|j
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".Writer"
operator|+
name|i
operator|+
literal|".File."
operator|+
name|j
operator|+
literal|".dat"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_WRITERS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREADPOOL_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_WRITERS
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|writer
init|=
operator|new
name|WriterRunnable
argument_list|(
name|i
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|,
name|SEED
argument_list|,
name|latch
argument_list|,
name|testFailed
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
comment|// Stop executor from adding new tasks to finish existing threads in queue
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|WriterRunnable
class|class
name|WriterRunnable
implements|implements
name|Runnable
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|paths
specifier|private
specifier|final
name|Path
name|paths
index|[]
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|int
name|seed
decl_stmt|;
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|bFail
specifier|private
name|AtomicBoolean
name|bFail
decl_stmt|;
DECL|method|WriterRunnable (int threadIndex, Path[] paths, int seed, CountDownLatch latch, AtomicBoolean bFail)
specifier|public
name|WriterRunnable
parameter_list|(
name|int
name|threadIndex
parameter_list|,
name|Path
index|[]
name|paths
parameter_list|,
name|int
name|seed
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|AtomicBoolean
name|bFail
parameter_list|)
block|{
name|id
operator|=
name|threadIndex
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|bFail
operator|=
name|bFail
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating Writer: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writer "
operator|+
name|id
operator|+
literal|" starting... "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|makeRandomTestFile
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// eviction may faiL when all blocks are not persisted yet.
comment|// ensureFileReplicasOnStorageType(paths[i], RAM_DISK);
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|bFail
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Writer exception: writer id:"
operator|+
name|id
operator|+
literal|" testfile: "
operator|+
name|paths
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

