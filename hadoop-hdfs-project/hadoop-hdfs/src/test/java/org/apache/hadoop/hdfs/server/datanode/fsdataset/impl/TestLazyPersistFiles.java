begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|LAZY_PERSIST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
operator|.
name|RAM_DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestLazyPersistFiles
specifier|public
class|class
name|TestLazyPersistFiles
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLazyPersistFiles
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|blockStateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FsDatasetImpl
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|LAZY_PERSIST_POLICY_ID
specifier|private
specifier|static
specifier|final
name|byte
name|LAZY_PERSIST_POLICY_ID
init|=
operator|(
name|byte
operator|)
literal|15
decl_stmt|;
DECL|field|THREADPOOL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|THREADPOOL_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
specifier|final
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|int
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
init|=
literal|3
decl_stmt|;
DECL|field|HEARTBEAT_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|long
name|HEARTBEAT_INTERVAL_SEC
init|=
literal|1
decl_stmt|;
DECL|field|HEARTBEAT_RECHECK_INTERVAL_MSEC
specifier|private
specifier|static
specifier|final
name|int
name|HEARTBEAT_RECHECK_INTERVAL_MSEC
init|=
literal|500
decl_stmt|;
DECL|field|LAZY_WRITER_INTERVAL_SEC
specifier|private
specifier|static
specifier|final
name|int
name|LAZY_WRITER_INTERVAL_SEC
init|=
literal|1
decl_stmt|;
DECL|field|BUFFER_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_LENGTH
init|=
literal|4096
decl_stmt|;
DECL|field|EVICTION_LOW_WATERMARK
specifier|private
specifier|static
specifier|final
name|int
name|EVICTION_LOW_WATERMARK
init|=
literal|1
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPolicyNotSetByDefault ()
specifier|public
name|void
name|testPolicyNotSetByDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Stat the file and check that the LAZY_PERSIST policy is not
comment|// returned back.
name|HdfsFileStatus
name|status
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
operator|.
name|getStoragePolicy
argument_list|()
argument_list|,
name|not
argument_list|(
name|LAZY_PERSIST_POLICY_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPolicyPropagation ()
specifier|public
name|void
name|testPolicyPropagation
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Stat the file and check that the lazyPersist flag is returned back.
name|HdfsFileStatus
name|status
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
operator|.
name|getStoragePolicy
argument_list|()
argument_list|,
name|is
argument_list|(
name|LAZY_PERSIST_POLICY_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPolicyPersistenceInEditLog ()
specifier|public
name|void
name|testPolicyPersistenceInEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Stat the file and check that the lazyPersist flag is returned back.
name|HdfsFileStatus
name|status
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
operator|.
name|getStoragePolicy
argument_list|()
argument_list|,
name|is
argument_list|(
name|LAZY_PERSIST_POLICY_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPolicyPersistenceInFsImage ()
specifier|public
name|void
name|testPolicyPersistenceInFsImage
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// checkpoint
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Stat the file and check that the lazyPersist flag is returned back.
name|HdfsFileStatus
name|status
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
operator|.
name|getStoragePolicy
argument_list|()
argument_list|,
name|is
argument_list|(
name|LAZY_PERSIST_POLICY_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPlacementOnRamDisk ()
specifier|public
name|void
name|testPlacementOnRamDisk
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPlacementOnSizeLimitedRamDisk ()
specifier|public
name|void
name|testPlacementOnSizeLimitedRamDisk
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path2
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
comment|/**    * Client tries to write LAZY_PERSIST to same DN with no RamDisk configured    * Write should default to disk. No error.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFallbackToDisk ()
specifier|public
name|void
name|testFallbackToDisk
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * File can not fit in RamDisk even with eviction    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFallbackToDiskFull ()
specifier|public
name|void
name|testFallbackToDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * File partially fit in RamDisk after eviction.    * RamDisk can fit 2 blocks. Write a file with 5 blocks.    * Expect 2 or less blocks are on RamDisk and 3 or more on disk.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFallbackToDiskPartial ()
specifier|public
name|void
name|testFallbackToDiskPartial
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
operator|*
literal|5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
name|int
name|numBlocksOnRamDisk
init|=
literal|0
decl_stmt|;
name|int
name|numBlocksOnDisk
init|=
literal|0
decl_stmt|;
name|long
name|fileLength
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
if|if
condition|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|RAM_DISK
condition|)
block|{
name|numBlocksOnRamDisk
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|DEFAULT
condition|)
block|{
name|numBlocksOnDisk
operator|++
expr_stmt|;
block|}
block|}
comment|// Since eviction is asynchronous, depending on the timing of eviction
comment|// wrt writes, we may get 2 or less blocks on RAM disk.
assert|assert
operator|(
name|numBlocksOnRamDisk
operator|<=
literal|2
operator|)
assert|;
assert|assert
operator|(
name|numBlocksOnDisk
operator|>=
literal|3
operator|)
assert|;
block|}
comment|/**    * If the only available storage is RAM_DISK and the LAZY_PERSIST flag is not    * specified, then block placement should fail.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRamDiskNotChosenByDefault ()
specifier|public
name|void
name|testRamDiskNotChosenByDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
try|try
block|{
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block placement to RAM_DISK should have failed without lazyPersist flag"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append to lazy persist file is denied.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testAppendIsDenied ()
specifier|public
name|void
name|testAppendIsDenied
parameter_list|()
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|append
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|BUFFER_LENGTH
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Append to LazyPersist file did not fail as expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If one or more replicas of a lazyPersist file are lost, then the file    * must be discarded by the NN, instead of being kept around as a    * 'corrupt' file.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLazyPersistFilesAreDiscarded ()
specifier|public
name|void
name|testLazyPersistFilesAreDiscarded
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Stop the DataNode and sleep for the time it takes the NN to
comment|// detect the DN as being dead.
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getNumDeadDataNodes
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next, wait for the replication monitor to mark the file as corrupt
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait for the LazyPersistFileScrubber to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Ensure that path1 does not exist anymore, whereas path2 does.
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
operator|)
assert|;
comment|// We should have zero blocks that needs replication i.e. the one
comment|// belonging to path2.
name|assertThat
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testLazyPersistBlocksAreSaved ()
specifier|public
name|void
name|testLazyPersistBlocksAreSaved
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
comment|// Create a test file
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
operator|*
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
decl_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying copy was saved to lazyPersist/"
argument_list|)
expr_stmt|;
comment|// Make sure that there is a saved copy of the replica on persistent
comment|// storage.
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|persistedBlockIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Make sure at least one non-transient volume has a saved copy of
comment|// the replica.
for|for
control|(
name|FsVolumeSpi
name|v
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|v
operator|.
name|isTransientStorage
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|v
decl_stmt|;
name|File
name|lazyPersistDir
init|=
name|volume
operator|.
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getLazypersistDir
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|File
name|targetDir
init|=
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|lazyPersistDir
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Found a persisted copy for this block!
name|boolean
name|added
init|=
name|persistedBlockIds
operator|.
name|add
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|added
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|blockFile
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We should have found a persisted copy for each located block.
name|assertThat
argument_list|(
name|persistedBlockIds
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * RamDisk eviction after lazy persist to disk.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRamDiskEviction ()
specifier|public
name|void
name|testRamDiskEviction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|1
operator|+
name|EVICTION_LOW_WATERMARK
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Create another file with a replica on RAM_DISK.
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
comment|// Ensure the first file was evicted to disk, the second is still on
comment|// RAM_DISK.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path2
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * RamDisk eviction should not happen on blocks that are not yet    * persisted on disk.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRamDiskEvictionBeforePersist ()
specifier|public
name|void
name|testRamDiskEvictionBeforePersist
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".02.dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0XFADED
decl_stmt|;
comment|// Stop lazy writer to ensure block for path1 is not persisted to disk.
name|FsDatasetTestUtil
operator|.
name|stopLazyWriter
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Create second file with a replica on RAM_DISK.
name|makeTestFile
argument_list|(
name|path2
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Eviction should not happen for block of the first file that is not
comment|// persisted yet.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path2
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|path1
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|path2
argument_list|)
operator|)
assert|;
name|verifyReadRandomFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates lazy persisted blocks are evicted from RAM_DISK based on LRU.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRamDiskEvictionIsLru ()
specifier|public
name|void
name|testRamDiskEvictionIsLru
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|NUM_PATHS
init|=
literal|5
decl_stmt|;
name|startUpCluster
argument_list|(
literal|true
argument_list|,
name|NUM_PATHS
operator|+
name|EVICTION_LOW_WATERMARK
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|paths
index|[]
init|=
operator|new
name|Path
index|[
name|NUM_PATHS
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|"."
operator|+
name|i
operator|+
literal|".dat"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PATHS
condition|;
name|i
operator|++
control|)
block|{
name|makeTestFile
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Sleep for a short time to allow the lazy writer thread to do its job.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PATHS
condition|;
operator|++
name|i
control|)
block|{
name|ensureFileReplicasOnStorageType
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
comment|// Open the files for read in a random order.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|NUM_PATHS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PATHS
condition|;
operator|++
name|i
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PATHS
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Touching file "
operator|+
name|paths
index|[
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|paths
index|[
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Create an equal number of new files ensuring that the previous
comment|// files are evicted in the same order they were read.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PATHS
condition|;
operator|++
name|i
control|)
block|{
name|makeTestFile
argument_list|(
name|paths
index|[
name|i
operator|+
name|NUM_PATHS
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|paths
index|[
name|i
operator|+
name|NUM_PATHS
index|]
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|paths
index|[
name|indexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|NUM_PATHS
condition|;
operator|++
name|j
control|)
block|{
name|ensureFileReplicasOnStorageType
argument_list|(
name|paths
index|[
name|indexes
operator|.
name|get
argument_list|(
name|j
argument_list|)
index|]
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete lazy-persist file that has not been persisted to disk.    * Memory is freed up and file is gone.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteBeforePersist ()
specifier|public
name|void
name|testDeleteBeforePersist
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|FsDatasetTestUtil
operator|.
name|stopLazyWriter
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
decl_stmt|;
comment|// Delete before persist
name|client
operator|.
name|delete
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|verifyDeletedBlocks
argument_list|(
name|locatedBlocks
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete lazy-persist file that has been persisted to disk    * Both memory blocks and disk blocks are deleted.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDeleteAfterPersist ()
specifier|public
name|void
name|testDeleteAfterPersist
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|ensureFileReplicasOnStorageType
argument_list|(
name|path
argument_list|,
name|RAM_DISK
argument_list|)
decl_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Delete after persist
name|client
operator|.
name|delete
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|verifyDeletedBlocks
argument_list|(
name|locatedBlocks
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * RAM_DISK used/free space    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDfsUsageCreateDelete ()
specifier|public
name|void
name|testDfsUsageCreateDelete
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
comment|// Get the usage before write BLOCK_SIZE
name|long
name|usedBeforeCreate
init|=
name|fs
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|makeTestFile
argument_list|(
name|path
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|usedAfterCreate
init|=
name|fs
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|usedAfterCreate
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|long
name|usedAfterPersist
init|=
name|fs
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|usedAfterPersist
argument_list|,
name|is
argument_list|(
operator|(
name|long
operator|)
name|BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete after persist
name|client
operator|.
name|delete
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|usedAfterDelete
init|=
name|fs
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|usedBeforeCreate
argument_list|,
name|is
argument_list|(
name|usedAfterDelete
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent read from the same node and verify the contents.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConcurrentRead ()
specifier|public
name|void
name|testConcurrentRead
parameter_list|()
throws|throws
name|Exception
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|int
name|NUM_TASKS
init|=
literal|5
decl_stmt|;
name|makeRandomTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|//Read from multiple clients
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_TASKS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Runnable
name|readerRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyReadRandomFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|SEED
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"readerRunnable error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|testFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|NUM_TASKS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TASKS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|readerRunnable
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TASKS
condition|;
name|i
operator|++
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concurrent write with eviction    * RAM_DISK can hold 9 replicas    * 4 threads each write 5 replicas    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConcurrentWrites ()
specifier|public
name|void
name|testConcurrentWrites
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|9
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|int
name|NUM_WRITERS
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|NUM_WRITER_PATHS
init|=
literal|5
decl_stmt|;
name|Path
name|paths
index|[]
index|[]
init|=
operator|new
name|Path
index|[
name|NUM_WRITERS
index|]
index|[
name|NUM_WRITER_PATHS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_WRITERS
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
index|[
name|NUM_WRITER_PATHS
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_WRITER_PATHS
condition|;
name|j
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".Writer"
operator|+
name|i
operator|+
literal|".File."
operator|+
name|j
operator|+
literal|".dat"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_WRITERS
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREADPOOL_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_WRITERS
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|writer
init|=
operator|new
name|WriterRunnable
argument_list|(
name|i
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|,
name|SEED
argument_list|,
name|latch
argument_list|,
name|testFailed
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
comment|// Stop executor from adding new tasks to finish existing threads in queue
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDnRestartWithSavedReplicas ()
specifier|public
name|void
name|testDnRestartWithSavedReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
comment|// Sleep for a short time to allow the lazy writer thread to do its job.
comment|// However the block replica should not be evicted from RAM_DISK yet.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|LAZY_WRITER_INTERVAL_SEC
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting the DataNode"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Ensure that the replica is now on persistent storage.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDnRestartWithUnsavedReplicas ()
specifier|public
name|void
name|testDnRestartWithUnsavedReplicas
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startUpCluster
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FsDatasetTestUtil
operator|.
name|stopLazyWriter
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".01.dat"
argument_list|)
decl_stmt|;
name|makeTestFile
argument_list|(
name|path1
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting the DataNode"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Ensure that the replica is still on transient storage.
name|ensureFileReplicasOnStorageType
argument_list|(
name|path1
argument_list|,
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
comment|// ---- Utility functions for all test cases -------------------------------
comment|/**    * If ramDiskStorageLimit is>=0, then RAM_DISK capacity is artificially    * capped. If ramDiskStorageLimit< 0 then it is ignored.    */
DECL|method|startUpCluster (boolean hasTransientStorage, final int ramDiskReplicaCapacity, final boolean useSCR)
specifier|private
name|void
name|startUpCluster
parameter_list|(
name|boolean
name|hasTransientStorage
parameter_list|,
specifier|final
name|int
name|ramDiskReplicaCapacity
parameter_list|,
specifier|final
name|boolean
name|useSCR
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
argument_list|,
name|LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_INTERVAL_SEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY
argument_list|,
name|HEARTBEAT_RECHECK_INTERVAL_MSEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_LAZY_WRITER_INTERVAL_SEC
argument_list|,
name|LAZY_WRITER_INTERVAL_SEC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFS_DATANODE_RAM_DISK_LOW_WATERMARK_REPLICAS
argument_list|,
name|EVICTION_LOW_WATERMARK
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_READ_SHORTCIRCUIT_KEY
argument_list|,
name|useSCR
argument_list|)
expr_stmt|;
name|long
index|[]
name|capacities
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasTransientStorage
operator|&&
name|ramDiskReplicaCapacity
operator|>=
literal|0
condition|)
block|{
comment|// Convert replica count to byte count, add some delta for .meta and VERSION files.
name|long
name|ramDiskStorageLimit
init|=
operator|(
operator|(
name|long
operator|)
name|ramDiskReplicaCapacity
operator|*
name|BLOCK_SIZE
operator|)
operator|+
operator|(
name|BLOCK_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
name|capacities
operator|=
operator|new
name|long
index|[]
block|{
name|ramDiskStorageLimit
block|,
operator|-
literal|1
block|}
expr_stmt|;
block|}
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|hasTransientStorage
condition|?
operator|new
name|StorageType
index|[]
block|{
name|RAM_DISK
block|,
name|DEFAULT
block|}
else|:
literal|null
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|client
operator|=
name|fs
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster startup complete"
argument_list|)
expr_stmt|;
block|}
DECL|method|startUpCluster (boolean hasTransientStorage, final int ramDiskReplicaCapacity)
specifier|private
name|void
name|startUpCluster
parameter_list|(
name|boolean
name|hasTransientStorage
parameter_list|,
specifier|final
name|int
name|ramDiskReplicaCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|startUpCluster
argument_list|(
name|hasTransientStorage
argument_list|,
name|ramDiskReplicaCapacity
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestFile (Path path, long length, final boolean isLazyPersist)
specifier|private
name|void
name|makeTestFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|isLazyPersist
parameter_list|)
throws|throws
name|IOException
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLazyPersist
condition|)
block|{
name|createFlags
operator|.
name|add
argument_list|(
name|LAZY_PERSIST
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|createFlags
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|REPL_FACTOR
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Allocate a block.
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_LENGTH
index|]
decl_stmt|;
for|for
control|(
name|int
name|bytesWritten
init|=
literal|0
init|;
name|bytesWritten
operator|<
name|length
condition|;
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|bytesWritten
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureFileReplicasOnStorageType ( Path path, StorageType storageType)
specifier|private
name|LocatedBlocks
name|ensureFileReplicasOnStorageType
parameter_list|(
name|Path
name|path
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ensure that returned block locations returned are correct!
name|LOG
operator|.
name|info
argument_list|(
literal|"Ensure path: "
operator|+
name|path
operator|+
literal|" is on StorageType: "
operator|+
name|storageType
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|fileLength
init|=
name|client
operator|.
name|getFileInfo
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|is
argument_list|(
name|storageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|locatedBlocks
return|;
block|}
DECL|method|makeRandomTestFile (Path path, long length, final boolean isLazyPersist, long seed)
specifier|private
name|void
name|makeRandomTestFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|isLazyPersist
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|isLazyPersist
argument_list|,
name|BUFFER_LENGTH
argument_list|,
name|length
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|seed
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyReadRandomFile ( Path path, int fileLength, int seed)
specifier|private
name|boolean
name|verifyReadRandomFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|int
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|seed
argument_list|,
name|fileLength
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
return|;
block|}
DECL|method|verifyDeletedBlocks (LocatedBlocks locatedBlocks)
specifier|private
name|boolean
name|verifyDeletedBlocks
parameter_list|(
name|LocatedBlocks
name|locatedBlocks
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying replica has no saved copy after deletion."
argument_list|)
expr_stmt|;
name|triggerBlockReport
argument_list|()
expr_stmt|;
while|while
condition|(
name|DataNodeTestUtils
operator|.
name|getPendingAsyncDeletions
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|>
literal|0L
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
comment|// Make sure deleted replica does not have a copy on either finalized dir of
comment|// transient volume or finalized dir of non-transient volume
for|for
control|(
name|FsVolumeSpi
name|v
range|:
name|volumes
control|)
block|{
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|v
decl_stmt|;
name|File
name|targetDir
init|=
operator|(
name|v
operator|.
name|isTransientStorage
argument_list|()
operator|)
condition|?
name|volume
operator|.
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getFinalizedDir
argument_list|()
else|:
name|volume
operator|.
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getLazypersistDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|verifyBlockDeletedFromDir
argument_list|(
name|targetDir
argument_list|,
name|locatedBlocks
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|verifyBlockDeletedFromDir (File dir, LocatedBlocks locatedBlocks)
specifier|private
name|boolean
name|verifyBlockDeletedFromDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|LocatedBlocks
name|locatedBlocks
parameter_list|)
block|{
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|File
name|targetDir
init|=
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|dir
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"blockFile: "
operator|+
name|blockFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists after deletion."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|File
name|metaFile
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|DatanodeUtil
operator|.
name|getMetaName
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"metaFile: "
operator|+
name|metaFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists after deletion."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|triggerBlockReport ()
specifier|private
name|void
name|triggerBlockReport
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Trigger block report to NN
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|class|WriterRunnable
class|class
name|WriterRunnable
implements|implements
name|Runnable
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|paths
specifier|private
specifier|final
name|Path
name|paths
index|[]
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|int
name|seed
decl_stmt|;
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|bFail
specifier|private
name|AtomicBoolean
name|bFail
decl_stmt|;
DECL|method|WriterRunnable (int threadIndex, Path[] paths, int seed, CountDownLatch latch, AtomicBoolean bFail)
specifier|public
name|WriterRunnable
parameter_list|(
name|int
name|threadIndex
parameter_list|,
name|Path
index|[]
name|paths
parameter_list|,
name|int
name|seed
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|AtomicBoolean
name|bFail
parameter_list|)
block|{
name|id
operator|=
name|threadIndex
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|bFail
operator|=
name|bFail
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating Writer: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writer "
operator|+
name|id
operator|+
literal|" starting... "
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|makeRandomTestFile
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|true
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// eviction may faiL when all blocks are not persisted yet.
comment|// ensureFileReplicasOnStorageType(paths[i], RAM_DISK);
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|bFail
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Writer exception: writer id:"
operator|+
name|id
operator|+
literal|" testfile: "
operator|+
name|paths
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

