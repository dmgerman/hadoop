begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|ByteRangeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|StripedFileTestUtil
specifier|public
class|class
name|StripedFileTestUtil
block|{
DECL|field|dataBlocks
specifier|static
name|int
name|dataBlocks
init|=
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
decl_stmt|;
DECL|field|parityBlocks
specifier|static
name|int
name|parityBlocks
init|=
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
DECL|field|cellSize
specifier|static
specifier|final
name|int
name|cellSize
init|=
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CELL_SIZE
decl_stmt|;
DECL|field|stripesPerBlock
specifier|static
specifier|final
name|int
name|stripesPerBlock
init|=
literal|4
decl_stmt|;
DECL|field|blockSize
specifier|static
specifier|final
name|int
name|blockSize
init|=
name|cellSize
operator|*
name|stripesPerBlock
decl_stmt|;
DECL|field|numDNs
specifier|static
specifier|final
name|int
name|numDNs
init|=
name|dataBlocks
operator|+
name|parityBlocks
operator|+
literal|2
decl_stmt|;
DECL|field|random
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|generateBytes (int cnt)
specifier|static
name|byte
index|[]
name|generateBytes
parameter_list|(
name|int
name|cnt
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|cnt
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
name|getByte
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
DECL|method|readAll (FSDataInputStream in, byte[] buf)
specifier|static
name|int
name|readAll
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|readLen
argument_list|,
name|buf
operator|.
name|length
operator|-
name|readLen
argument_list|)
operator|)
operator|>=
literal|0
operator|&&
name|readLen
operator|<=
name|buf
operator|.
name|length
condition|)
block|{
name|readLen
operator|+=
name|ret
expr_stmt|;
block|}
return|return
name|readLen
return|;
block|}
DECL|method|getByte (long pos)
specifier|static
name|byte
name|getByte
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
specifier|final
name|int
name|mod
init|=
literal|29
decl_stmt|;
return|return
call|(
name|byte
call|)
argument_list|(
name|pos
operator|%
name|mod
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|verifyLength (FileSystem fs, Path srcPath, int fileLength)
specifier|static
name|void
name|verifyLength
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|fileLength
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"File length should be the same"
argument_list|,
name|fileLength
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPread (FileSystem fs, Path srcPath, int fileLength, byte[] expected, byte[] buf)
specifier|static
name|void
name|verifyPread
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcPath
argument_list|)
init|)
block|{
name|int
index|[]
name|startOffsets
init|=
block|{
literal|0
block|,
literal|1
block|,
name|cellSize
operator|-
literal|102
block|,
name|cellSize
block|,
name|cellSize
operator|+
literal|102
block|,
name|cellSize
operator|*
operator|(
name|dataBlocks
operator|-
literal|1
operator|)
block|,
name|cellSize
operator|*
operator|(
name|dataBlocks
operator|-
literal|1
operator|)
operator|+
literal|102
block|,
name|cellSize
operator|*
name|dataBlocks
block|,
name|fileLength
operator|-
literal|102
block|,
name|fileLength
operator|-
literal|1
block|}
decl_stmt|;
for|for
control|(
name|int
name|startOffset
range|:
name|startOffsets
control|)
block|{
name|startOffset
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|startOffset
argument_list|,
name|fileLength
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|fileLength
operator|-
name|startOffset
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|startOffset
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remaining
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Byte at "
operator|+
operator|(
name|startOffset
operator|+
name|i
operator|)
operator|+
literal|" should be the "
operator|+
literal|"same"
argument_list|,
name|expected
index|[
name|startOffset
operator|+
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verifyStatefulRead (FileSystem fs, Path srcPath, int fileLength, byte[] expected, byte[] buf)
specifier|static
name|void
name|verifyStatefulRead
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcPath
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|fileLength
index|]
decl_stmt|;
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|readLen
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|readLen
operator|+=
name|ret
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The length of file should be the same to write size"
argument_list|,
name|fileLength
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyStatefulRead (FileSystem fs, Path srcPath, int fileLength, byte[] expected, ByteBuffer buf)
specifier|static
name|void
name|verifyStatefulRead
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|fileLength
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcPath
argument_list|)
init|)
block|{
name|ByteBuffer
name|result
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|fileLength
argument_list|)
decl_stmt|;
name|int
name|readLen
init|=
literal|0
decl_stmt|;
name|int
name|ret
decl_stmt|;
while|while
condition|(
operator|(
name|ret
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|readLen
operator|+=
name|ret
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The length of file should be the same to write size"
argument_list|,
name|fileLength
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifySeek (FileSystem fs, Path srcPath, int fileLength)
specifier|static
name|void
name|verifySeek
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcPath
parameter_list|,
name|int
name|fileLength
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcPath
argument_list|)
init|)
block|{
comment|// seek to 1/2 of content
name|int
name|pos
init|=
name|fileLength
operator|/
literal|2
decl_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
comment|// seek to 1/3 of content
name|pos
operator|=
name|fileLength
operator|/
literal|3
expr_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
comment|// seek to 0 pos
name|pos
operator|=
literal|0
expr_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileLength
operator|>
name|cellSize
condition|)
block|{
comment|// seek to cellSize boundary
name|pos
operator|=
name|cellSize
operator|-
literal|1
expr_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileLength
operator|>
name|cellSize
operator|*
name|dataBlocks
condition|)
block|{
comment|// seek to striped cell group boundary
name|pos
operator|=
name|cellSize
operator|*
name|dataBlocks
operator|-
literal|1
expr_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileLength
operator|>
name|blockSize
operator|*
name|dataBlocks
condition|)
block|{
comment|// seek to striped block group boundary
name|pos
operator|=
name|blockSize
operator|*
name|dataBlocks
operator|-
literal|1
expr_stmt|;
name|assertSeekAndRead
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|fileLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|in
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|ByteRangeInputStream
operator|)
condition|)
block|{
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should be failed if seek to negative offset"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|fileLength
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should be failed if seek after EOF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
block|}
DECL|method|assertSeekAndRead (FSDataInputStream fsdis, int pos, int writeBytes)
specifier|static
name|void
name|assertSeekAndRead
parameter_list|(
name|FSDataInputStream
name|fsdis
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|writeBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|fsdis
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|writeBytes
index|]
decl_stmt|;
name|int
name|readLen
init|=
name|StripedFileTestUtil
operator|.
name|readAll
argument_list|(
name|fsdis
argument_list|,
name|buf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|readLen
argument_list|,
name|writeBytes
operator|-
name|pos
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readLen
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Byte at "
operator|+
name|i
operator|+
literal|" should be the same"
argument_list|,
name|StripedFileTestUtil
operator|.
name|getByte
argument_list|(
name|pos
operator|+
name|i
argument_list|)
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

