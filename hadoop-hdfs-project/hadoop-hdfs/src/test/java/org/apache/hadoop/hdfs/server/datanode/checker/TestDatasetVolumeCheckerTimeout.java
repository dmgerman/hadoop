begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|LogVerificationAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Test that timeout is triggered during Disk Volume Checker.  */
end_comment

begin_class
DECL|class|TestDatasetVolumeCheckerTimeout
specifier|public
class|class
name|TestDatasetVolumeCheckerTimeout
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDatasetVolumeCheckerTimeout
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|DISK_CHECK_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|DISK_CHECK_TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|DISK_CHECK_TIME
specifier|private
specifier|static
specifier|final
name|long
name|DISK_CHECK_TIME
init|=
literal|100
decl_stmt|;
DECL|field|lock
specifier|static
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
static|static
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
argument_list|,
name|DISK_CHECK_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|makeSlowVolume ()
specifier|static
name|FsVolumeSpi
name|makeSlowVolume
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FsVolumeSpi
name|volume
init|=
name|mock
argument_list|(
name|FsVolumeSpi
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|FsVolumeReference
name|reference
init|=
name|mock
argument_list|(
name|FsVolumeReference
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StorageLocation
name|location
init|=
name|mock
argument_list|(
name|StorageLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reference
operator|.
name|getVolume
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|obtainReference
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|getStorageLocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|volume
operator|.
name|check
argument_list|(
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|VolumeCheckResult
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Wait for the disk check to timeout and then release lock.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|VolumeCheckResult
operator|.
name|HEALTHY
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDiskCheckTimeout ()
specifier|public
name|void
name|testDiskCheckTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FsVolumeSpi
name|volume
init|=
name|makeSlowVolume
argument_list|()
decl_stmt|;
specifier|final
name|DatasetVolumeChecker
name|checker
init|=
operator|new
name|DatasetVolumeChecker
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeTimer
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|numCallbackInvocations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|/**      * Request a check and ensure it triggered {@link FsVolumeSpi#check}.      */
name|boolean
name|result
init|=
name|checker
operator|.
name|checkVolume
argument_list|(
name|volume
argument_list|,
operator|new
name|DatasetVolumeChecker
operator|.
name|Callback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|Set
argument_list|<
name|FsVolumeSpi
argument_list|>
name|healthyVolumes
parameter_list|,
name|Set
argument_list|<
name|FsVolumeSpi
argument_list|>
name|failedVolumes
parameter_list|)
block|{
name|numCallbackInvocations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Assert that the disk check registers a failed volume due to
comment|// timeout
name|assertThat
argument_list|(
name|healthyVolumes
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failedVolumes
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Wait for the callback
name|Thread
operator|.
name|sleep
argument_list|(
name|DISK_CHECK_TIME
argument_list|)
expr_stmt|;
comment|// Release lock
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// Ensure that the check was invoked only once.
name|verify
argument_list|(
name|volume
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|check
argument_list|(
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|numCallbackInvocations
operator|.
name|get
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

