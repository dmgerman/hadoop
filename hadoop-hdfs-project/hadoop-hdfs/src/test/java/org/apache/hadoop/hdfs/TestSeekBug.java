begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * This class tests the presence of seek bug as described  * in HADOOP-508   */
end_comment

begin_class
DECL|class|TestSeekBug
specifier|public
class|class
name|TestSeekBug
extends|extends
name|TestCase
block|{
DECL|field|seed
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0xDEADBEEFL
decl_stmt|;
DECL|field|ONEMB
specifier|static
specifier|final
name|int
name|ONEMB
init|=
literal|1
operator|<<
literal|20
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create and write a file that contains 1MB
name|DataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|ONEMB
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkAndEraseData (byte[] actual, int from, byte[] expected, String message)
specifier|private
name|void
name|checkAndEraseData
parameter_list|(
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|from
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|actual
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|message
operator|+
literal|" byte "
operator|+
operator|(
name|from
operator|+
name|idx
operator|)
operator|+
literal|" differs. expected "
operator|+
name|expected
index|[
name|from
operator|+
name|idx
index|]
operator|+
literal|" actual "
operator|+
name|actual
index|[
name|idx
index|]
argument_list|,
name|actual
index|[
name|idx
index|]
argument_list|,
name|expected
index|[
name|from
operator|+
name|idx
index|]
argument_list|)
expr_stmt|;
name|actual
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|seekReadFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|seekReadFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|ONEMB
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// First read 128 bytes to set count in BufferedInputStream
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|stm
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Now read a byte array that is bigger than the internal buffer
name|actual
operator|=
operator|new
name|byte
index|[
literal|100000
index|]
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stm
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|128
argument_list|,
name|expected
argument_list|,
literal|"First Read Test"
argument_list|)
expr_stmt|;
comment|// now do a small seek, within the range that is already read
name|stm
operator|.
name|seek
argument_list|(
literal|96036
argument_list|)
expr_stmt|;
comment|// 4 byte seek
name|actual
operator|=
operator|new
name|byte
index|[
literal|128
index|]
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stm
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|96036
argument_list|,
name|expected
argument_list|,
literal|"Seek Bug"
argument_list|)
expr_stmt|;
comment|// all done
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * Read some data, skip a few bytes and read more. HADOOP-922.    */
DECL|method|smallReadSeek (FileSystem fileSys, Path name)
specifier|private
name|void
name|smallReadSeek
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileSys
operator|instanceof
name|ChecksumFileSystem
condition|)
block|{
name|fileSys
operator|=
operator|(
operator|(
name|ChecksumFileSystem
operator|)
name|fileSys
operator|)
operator|.
name|getRawFileSystem
argument_list|()
expr_stmt|;
block|}
comment|// Make the buffer size small to trigger code for HADOOP-922
name|FSDataInputStream
name|stmRaw
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|ONEMB
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// Issue a simple read first.
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|stmRaw
operator|.
name|seek
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
name|stmRaw
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
literal|100000
argument_list|,
name|expected
argument_list|,
literal|"First Small Read Test"
argument_list|)
expr_stmt|;
comment|// now do a small seek of 4 bytes, within the same block.
name|int
name|newpos1
init|=
literal|100000
operator|+
literal|128
operator|+
literal|4
decl_stmt|;
name|stmRaw
operator|.
name|seek
argument_list|(
name|newpos1
argument_list|)
expr_stmt|;
name|stmRaw
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
name|newpos1
argument_list|,
name|expected
argument_list|,
literal|"Small Seek Bug 1"
argument_list|)
expr_stmt|;
comment|// seek another 256 bytes this time
name|int
name|newpos2
init|=
name|newpos1
operator|+
literal|256
decl_stmt|;
name|stmRaw
operator|.
name|seek
argument_list|(
name|newpos2
argument_list|)
expr_stmt|;
name|stmRaw
operator|.
name|read
argument_list|(
name|actual
argument_list|,
literal|0
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkAndEraseData
argument_list|(
name|actual
argument_list|,
name|newpos2
argument_list|,
name|expected
argument_list|,
literal|"Small Seek Bug 2"
argument_list|)
expr_stmt|;
comment|// all done
name|stmRaw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanupFile (FileSystem fileSys, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the seek bug exists in FSDataInputStream in DFS.    */
DECL|method|testSeekBugDFS ()
specifier|public
name|void
name|testSeekBugDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"seektest.dat"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|seekReadFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|smallReadSeek
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests if the seek bug exists in FSDataInputStream in LocalFS.    */
DECL|method|testSeekBugLocalFS ()
specifier|public
name|void
name|testSeekBugLocalFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"build/test/data"
argument_list|,
literal|"seektest.dat"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|seekReadFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

