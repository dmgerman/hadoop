begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ClientId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for ensuring the namenode retry cache works correctly for  * non-idempotent requests.  *   * Retry cache works based on tracking previously received request based on the  * ClientId and CallId received in RPC requests and storing the response. The  * response is replayed on retry when the same request is received again.  *   * The test works by manipulating the Rpc {@link Server} current RPC call. For  * testing retried requests, an Rpc callId is generated only once using  * {@link #newCall()} and reused for many method calls. For testing non-retried  * request, a new callId is generated using {@link #newCall()}.  */
end_comment

begin_class
DECL|class|TestNamenodeRetryCache
specifier|public
class|class
name|TestNamenodeRetryCache
block|{
DECL|field|CLIENT_ID
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CLIENT_ID
init|=
name|ClientId
operator|.
name|getClientId
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|static
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|perm
specifier|private
specifier|static
specifier|final
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"TestNamenodeRetryCache"
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|filesystem
specifier|private
specifier|static
name|DistributedFileSystem
name|filesystem
decl_stmt|;
DECL|field|callId
specifier|private
specifier|static
name|int
name|callId
init|=
literal|100
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|BlockSize
specifier|private
specifier|static
specifier|final
name|int
name|BlockSize
init|=
literal|512
decl_stmt|;
comment|/** Start a cluster */
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACLS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|filesystem
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/** Cleanup after the test     * @throws IOException     * @throws UnresolvedLinkException     * @throws SafeModeException     * @throws AccessControlException */
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|incrementCallId ()
specifier|public
specifier|static
name|void
name|incrementCallId
parameter_list|()
block|{
name|callId
operator|++
expr_stmt|;
block|}
comment|/** Set the current Server RPC call */
DECL|method|newCall ()
specifier|public
specifier|static
name|void
name|newCall
parameter_list|()
block|{
name|Server
operator|.
name|Call
name|call
init|=
operator|new
name|Server
operator|.
name|Call
argument_list|(
operator|++
name|callId
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|CLIENT_ID
argument_list|)
decl_stmt|;
name|Server
operator|.
name|getCurCall
argument_list|()
operator|.
name|set
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
DECL|method|resetCall ()
specifier|public
specifier|static
name|void
name|resetCall
parameter_list|()
block|{
name|Server
operator|.
name|Call
name|call
init|=
operator|new
name|Server
operator|.
name|Call
argument_list|(
name|RpcConstants
operator|.
name|INVALID_CALL_ID
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|RpcConstants
operator|.
name|DUMMY_CLIENT_ID
argument_list|)
decl_stmt|;
name|Server
operator|.
name|getCurCall
argument_list|()
operator|.
name|set
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
DECL|method|concatSetup (String file1, String file2)
specifier|private
name|void
name|concatSetup
parameter_list|(
name|String
name|file1
parameter_list|,
name|String
name|file2
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
name|BlockSize
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
argument_list|,
name|BlockSize
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests for concat call    */
annotation|@
name|Test
DECL|method|testConcat ()
specifier|public
name|void
name|testConcat
parameter_list|()
throws|throws
name|Exception
block|{
name|resetCall
argument_list|()
expr_stmt|;
name|String
name|file1
init|=
literal|"/testNamenodeRetryCache/testConcat/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"/testNamenodeRetryCache/testConcat/file2"
decl_stmt|;
comment|// Two retried concat calls succeed
name|concatSetup
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|concat
argument_list|(
name|file1
argument_list|,
operator|new
name|String
index|[]
block|{
name|file2
block|}
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|concat
argument_list|(
name|file1
argument_list|,
operator|new
name|String
index|[]
block|{
name|file2
block|}
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|concat
argument_list|(
name|file1
argument_list|,
operator|new
name|String
index|[]
block|{
name|file2
block|}
argument_list|)
expr_stmt|;
comment|// A non-retried concat request fails
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Second non-retry call should fail with an exception
name|namesystem
operator|.
name|concat
argument_list|(
name|file1
argument_list|,
operator|new
name|String
index|[]
block|{
name|file2
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testConcat - expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/**    * Tests for delete call    */
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
literal|"/testNamenodeRetryCache/testDelete"
decl_stmt|;
comment|// Two retried calls to create a non existent file
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newCall
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-retried call fails and gets false as return
name|newCall
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namesystem
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for createSymlink    */
annotation|@
name|Test
DECL|method|testCreateSymlink ()
specifier|public
name|void
name|testCreateSymlink
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|target
init|=
literal|"/testNamenodeRetryCache/testCreateSymlink/target"
decl_stmt|;
comment|// Two retried symlink calls succeed
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
literal|"/a/b"
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
literal|"/a/b"
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
literal|"/a/b"
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// non-retried call fails
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Second non-retry call should fail with an exception
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
literal|"/a/b"
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCreateSymlink - expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/**    * Test for create file    */
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/testNamenodeRetryCache/testCreate/file"
decl_stmt|;
comment|// Two retried calls succeed
name|newCall
argument_list|()
expr_stmt|;
name|HdfsFileStatus
name|status
init|=
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|"holder"
argument_list|,
literal|"clientmachine"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BlockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
argument_list|,
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|"holder"
argument_list|,
literal|"clientmachine"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BlockSize
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|status
argument_list|,
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|"holder"
argument_list|,
literal|"clientmachine"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BlockSize
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// A non-retried call fails
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|"holder"
argument_list|,
literal|"clientmachine"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BlockSize
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testCreate - expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Test for rename1    */
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/testNamenodeRetryCache/testAppend/src"
decl_stmt|;
name|resetCall
argument_list|()
expr_stmt|;
comment|// Create a file with partial block
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|filesystem
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
literal|128
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Retried append requests succeed
name|newCall
argument_list|()
expr_stmt|;
name|LocatedBlock
name|b
init|=
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
literal|"holder"
argument_list|,
literal|"clientMachine"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|b
argument_list|,
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
literal|"holder"
argument_list|,
literal|"clientMachine"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|b
argument_list|,
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
literal|"holder"
argument_list|,
literal|"clientMachine"
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-retried call fails
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
literal|"holder"
argument_list|,
literal|"clientMachine"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testAppend - expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/**    * Test for rename1    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testRename1 ()
specifier|public
name|void
name|testRename1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/testNamenodeRetryCache/testRename1/src"
decl_stmt|;
name|String
name|target
init|=
literal|"/testNamenodeRetryCache/testRename1/target"
decl_stmt|;
name|resetCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Retried renames succeed
name|newCall
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
comment|// A non-retried request fails
name|newCall
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for rename2    */
annotation|@
name|Test
DECL|method|testRename2 ()
specifier|public
name|void
name|testRename2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|src
init|=
literal|"/testNamenodeRetryCache/testRename2/src"
decl_stmt|;
name|String
name|target
init|=
literal|"/testNamenodeRetryCache/testRename2/target"
decl_stmt|;
name|resetCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Retried renames succeed
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// A non-retried request fails
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|target
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testRename 2 expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Make sure a retry call does not hang because of the exception thrown in the    * first call.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdatePipelineWithFailOver ()
specifier|public
name|void
name|testUpdatePipelineWithFailOver
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|namesystem
operator|=
literal|null
expr_stmt|;
name|filesystem
operator|=
literal|null
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FSNamesystem
name|ns0
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|oldBlock
init|=
operator|new
name|ExtendedBlock
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|newBlock
init|=
operator|new
name|ExtendedBlock
argument_list|()
decl_stmt|;
name|DatanodeID
index|[]
name|newNodes
init|=
operator|new
name|DatanodeID
index|[
literal|2
index|]
decl_stmt|;
name|String
index|[]
name|newStorages
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|ns0
operator|.
name|updatePipeline
argument_list|(
literal|"testClient"
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|,
name|newStorages
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect StandbyException from the updatePipeline call"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StandbyException
name|e
parameter_list|)
block|{
comment|// expected, since in the beginning both nn are in standby state
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|ns0
operator|.
name|updatePipeline
argument_list|(
literal|"testClient"
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|,
name|newStorages
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore call should not hang.
block|}
block|}
comment|/**    * Test for crateSnapshot    */
annotation|@
name|Test
DECL|method|testSnapshotMethods ()
specifier|public
name|void
name|testSnapshotMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dir
init|=
literal|"/testNamenodeRetryCache/testCreateSnapshot/src"
decl_stmt|;
name|resetCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Test retry of create snapshot
name|newCall
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name
argument_list|,
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name
argument_list|,
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name
argument_list|,
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non retried calls should fail
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testSnapshotMethods expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// exptected
block|}
comment|// Test retry of rename snapshot
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
comment|// Non retried calls should fail
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap1"
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testSnapshotMethods expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Test retry of delete snapshot
name|newCall
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
comment|// Non retried calls should fail
name|newCall
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
literal|"snap2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"testSnapshotMethods expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testRetryCacheConfig ()
specifier|public
name|void
name|testRetryCacheConfig
parameter_list|()
block|{
comment|// By default retry configuration should be enabled
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|FSNamesystem
operator|.
name|initRetryCache
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// If retry cache is disabled, it should not be created
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|FSNamesystem
operator|.
name|initRetryCache
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * After run a set of operations, restart NN and check if the retry cache has    * been rebuilt based on the editlog.    */
annotation|@
name|Test
DECL|method|testRetryCacheRebuild ()
specifier|public
name|void
name|testRetryCacheRebuild
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|runOperations
argument_list|(
name|cluster
argument_list|,
name|filesystem
argument_list|,
name|conf
argument_list|,
name|BlockSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|cacheSet
init|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|namesystem
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|oldEntries
init|=
operator|new
name|HashMap
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CacheEntry
argument_list|>
name|iter
init|=
name|cacheSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|oldEntries
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// restart NameNode
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
comment|// check retry cache
name|assertTrue
argument_list|(
name|namesystem
operator|.
name|hasRetryCache
argument_list|()
argument_list|)
expr_stmt|;
name|cacheSet
operator|=
operator|(
name|LightWeightCache
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
operator|)
name|namesystem
operator|.
name|getRetryCache
argument_list|()
operator|.
name|getCacheSet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|cacheSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|cacheSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|oldEntries
operator|.
name|containsKey
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

