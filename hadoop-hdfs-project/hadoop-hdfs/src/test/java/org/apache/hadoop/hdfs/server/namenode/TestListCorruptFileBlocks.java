begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|CorruptFileBlockIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * This class tests the listCorruptFileBlocks API.  * We create 3 files; intentionally delete their blocks  * Use listCorruptFileBlocks to validate that we get the list of corrupt  * files/blocks; also test the "paging" support by calling the API  * with a block # from a previous call and validate that the subsequent  * blocks/files are also returned.  */
end_comment

begin_class
DECL|class|TestListCorruptFileBlocks
specifier|public
class|class
name|TestListCorruptFileBlocks
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|NameNode
operator|.
name|stateChangeLog
decl_stmt|;
comment|/** check if nn.getCorruptFiles() returns a file that has corrupted blocks */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testListCorruptFilesCorruptedBlock ()
specifier|public
name|void
name|testListCorruptFilesCorruptedBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// datanode scans directories
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// datanode sends block reports
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Files are corrupted with 2 bytes before the end of the file,
comment|// so that's the minimum length.
specifier|final
name|int
name|corruptionLength
init|=
literal|2
decl_stmt|;
comment|// create two files with one block each
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testCorruptFilesCorruptedBlock"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|2
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMinSize
argument_list|(
name|corruptionLength
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|512
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
comment|// fetch bad file list from namenode. There should be none.
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|badFiles
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" corrupt files. Expecting None."
argument_list|,
literal|0
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now deliberately corrupt one block
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"data directory does not exist"
argument_list|,
name|data_dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metaFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Data directory does not contain any blocks or there was an "
operator|+
literal|"IO error"
argument_list|,
name|metaFiles
operator|!=
literal|null
operator|&&
operator|!
name|metaFiles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|metaFile
init|=
name|metaFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|metaFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|file
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|long
name|position
init|=
name|channel
operator|.
name|size
argument_list|()
operator|-
name|corruptionLength
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|corruptionLength
index|]
decl_stmt|;
operator|new
name|Random
argument_list|(
literal|13L
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately corrupting file "
operator|+
name|metaFile
operator|.
name|getName
argument_list|()
operator|+
literal|" at offset "
operator|+
name|position
operator|+
literal|" length "
operator|+
name|corruptionLength
argument_list|)
expr_stmt|;
comment|// read all files to trigger detection of corrupted replica
try|try
block|{
name|util
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received BlockMissingException as expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Corrupted replicas not handled properly. Expecting BlockMissingException "
operator|+
literal|" but received IOException "
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// fetch bad file list from namenode. There should be one file.
name|badFiles
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" bad files. Expecting 1."
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check that listCorruptFileBlocks works while the namenode is still in safemode.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testListCorruptFileBlocksInSafeMode ()
specifier|public
name|void
name|testListCorruptFileBlocksInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// datanode scans directories
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// datanode sends block reports
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// never leave safemode automatically
name|conf
operator|.
name|setFloat
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
comment|// start populating repl queues immediately
name|conf
operator|.
name|setFloat
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPL_QUEUE_THRESHOLD_PCT_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|conf
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Files are corrupted with 2 bytes before the end of the file,
comment|// so that's the minimum length.
specifier|final
name|int
name|corruptionLength
init|=
literal|2
decl_stmt|;
comment|// create two files with one block each
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testListCorruptFileBlocksInSafeMode"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|2
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMinSize
argument_list|(
name|corruptionLength
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|512
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
comment|// fetch bad file list from namenode. There should be none.
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|badFiles
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" corrupt files. Expecting None."
argument_list|,
literal|0
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now deliberately corrupt one block
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"data directory does not exist"
argument_list|,
name|data_dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metaFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Data directory does not contain any blocks or there was an "
operator|+
literal|"IO error"
argument_list|,
name|metaFiles
operator|!=
literal|null
operator|&&
operator|!
name|metaFiles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|metaFile
init|=
name|metaFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|metaFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|channel
init|=
name|file
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|long
name|position
init|=
name|channel
operator|.
name|size
argument_list|()
operator|-
name|corruptionLength
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|corruptionLength
index|]
decl_stmt|;
operator|new
name|Random
argument_list|(
literal|13L
argument_list|)
operator|.
name|nextBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately corrupting file "
operator|+
name|metaFile
operator|.
name|getName
argument_list|()
operator|+
literal|" at offset "
operator|+
name|position
operator|+
literal|" length "
operator|+
name|corruptionLength
argument_list|)
expr_stmt|;
comment|// read all files to trigger detection of corrupted replica
try|try
block|{
name|util
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received BlockMissingException as expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Corrupted replicas not handled properly. "
operator|+
literal|"Expecting BlockMissingException "
operator|+
literal|" but received IOException "
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// fetch bad file list from namenode. There should be one file.
name|badFiles
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" bad files. Expecting 1."
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// restart namenode
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
comment|// wait until replication queues have been initialized
while|while
condition|(
operator|!
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for replication queues"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
block|}
comment|// read all files to trigger detection of corrupted replica
try|try
block|{
name|util
operator|.
name|checkFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received BlockMissingException as expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Corrupted replicas not handled properly. "
operator|+
literal|"Expecting BlockMissingException "
operator|+
literal|" but received IOException "
operator|+
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// fetch bad file list from namenode. There should be one file.
name|badFiles
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" bad files. Expecting 1."
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// check that we are still in safe mode
name|assertTrue
argument_list|(
literal|"Namenode is not in safe mode"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// now leave safe mode so that we can clean up
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat10"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// deliberately remove blocks from a file and validate the list-corrupt-file-blocks API
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testlistCorruptFileBlocks ()
specifier|public
name|void
name|testlistCorruptFileBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// datanode scans
comment|// directories
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testGetCorruptFiles"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|3
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|corruptFileBlocks
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|numCorrupt
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// delete the blocks
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
continue|continue;
comment|// assertTrue("Blocks do not exist in data-dir", (blocks != null)&&
comment|// (blocks.length> 0));
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|metadataFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// break;
block|}
block|}
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
name|numCorrupt
operator|<
literal|3
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|30
condition|)
break|break;
block|}
comment|// Validate we get all the corrupt files
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|numCorrupt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
comment|// test the paging here
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
index|[]
name|cfb
init|=
name|corruptFileBlocks
operator|.
name|toArray
argument_list|(
operator|new
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// now get the 2nd and 3rd file that is corrupt
name|String
index|[]
name|cookie
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|nextCorruptFileBlocks
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
name|cookie
argument_list|)
decl_stmt|;
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
index|[]
name|ncfb
init|=
name|nextCorruptFileBlocks
operator|.
name|toArray
argument_list|(
operator|new
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|numCorrupt
operator|=
name|nextCorruptFileBlocks
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ncfb
index|[
literal|0
index|]
operator|.
name|block
operator|.
name|getBlockName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cfb
index|[
literal|1
index|]
operator|.
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/corruptData"
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
comment|// Do a listing on a dir which doesn't have any corrupt blocks and
comment|// validate
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/goodData"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|countPaths (RemoteIterator<Path> iter)
specifier|private
name|int
name|countPaths
parameter_list|(
name|RemoteIterator
argument_list|<
name|Path
argument_list|>
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"PATH: "
operator|+
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
comment|/**    * test listCorruptFileBlocks in DistributedFileSystem    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testlistCorruptFileBlocksDFS ()
specifier|public
name|void
name|testlistCorruptFileBlocksDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// datanode scans
comment|// directories
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testGetCorruptFiles"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|3
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|Path
argument_list|>
name|corruptFileBlocks
init|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/corruptData"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
comment|// delete the blocks
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
comment|// For loop through number of datadirectories per datanode (2)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
continue|continue;
comment|// assertTrue("Blocks do not exist in data-dir", (blocks != null)&&
comment|// (blocks.length> 0));
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|metadataFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// break;
block|}
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|corruptFileBlocks
operator|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/corruptData"
argument_list|)
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
expr_stmt|;
while|while
condition|(
name|numCorrupt
operator|<
literal|3
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/corruptData"
argument_list|)
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|30
condition|)
break|break;
block|}
comment|// Validate we get all the corrupt files
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|numCorrupt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/corruptData"
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/goodData"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test if NN.listCorruptFiles() returns the right number of results.    * The corrupt blocks are detected by the BlockPoolSliceScanner.    * Also, test that DFS.listCorruptFileBlocks can make multiple successive    * calls.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testMaxCorruptFiles ()
specifier|public
name|void
name|testMaxCorruptFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// datanode sends block reports
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxCorruptFileBlocks
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_CORRUPT_FILE_BLOCKS_RETURNED_KEY
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// create 110 files with one block each
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testMaxCorruptFiles"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
name|maxCorruptFileBlocks
operator|*
literal|3
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|512
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"/srcdat2"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
literal|"/srcdat2"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// verify that there are no bad blocks.
specifier|final
name|NameNode
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|badFiles
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/srcdat2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" corrupt files. Expecting none."
argument_list|,
literal|0
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now deliberately blocks from all files
specifier|final
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing files from "
operator|+
name|data_dir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Run the direcrtoryScanner to update the Datanodes volumeMap
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|runDirectoryScanner
argument_list|(
name|dn
argument_list|)
expr_stmt|;
comment|// Occasionally the BlockPoolSliceScanner can run before we have removed
comment|// the blocks. Restart the Datanode to trigger the scanner into running
comment|// once more.
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting Datanode to trigger BlockPoolSliceScanner"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|badFiles
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/srcdat2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|badFiles
operator|.
name|size
argument_list|()
operator|<
name|maxCorruptFileBlocks
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"# of corrupt files is: "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|badFiles
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/srcdat2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|badFiles
operator|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
literal|"/srcdat2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode has "
operator|+
name|badFiles
operator|.
name|size
argument_list|()
operator|+
literal|" bad files. Expecting "
operator|+
name|maxCorruptFileBlocks
operator|+
literal|"."
argument_list|,
name|badFiles
operator|.
name|size
argument_list|()
operator|==
name|maxCorruptFileBlocks
argument_list|)
expr_stmt|;
name|CorruptFileBlockIterator
name|iter
init|=
operator|(
name|CorruptFileBlockIterator
operator|)
name|fs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/srcdat2"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|corruptPaths
init|=
name|countPaths
argument_list|(
name|iter
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected more than "
operator|+
name|maxCorruptFileBlocks
operator|+
literal|" corrupt file blocks but got "
operator|+
name|corruptPaths
argument_list|,
name|corruptPaths
operator|>
name|maxCorruptFileBlocks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Iterator should have made more than 1 call but made "
operator|+
name|iter
operator|.
name|getCallsMade
argument_list|()
argument_list|,
name|iter
operator|.
name|getCallsMade
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"/srcdat2"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListCorruptFileBlocksOnRelativePath ()
specifier|public
name|void
name|testListCorruptFileBlocksOnRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
specifier|final
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
literal|"/somewhere/base"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
comment|// set working dir
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|DFSTestUtil
name|util
init|=
operator|new
name|DFSTestUtil
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"testGetCorruptFilesOnRelativePath"
argument_list|)
operator|.
name|setNumFiles
argument_list|(
literal|3
argument_list|)
operator|.
name|setMaxLevels
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|util
operator|.
name|createFiles
argument_list|(
name|fs
argument_list|,
literal|"corruptData"
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|Path
argument_list|>
name|corruptFileBlocks
init|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"corruptData"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numCorrupt
init|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
comment|// delete the blocks
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
comment|// For loop through number of data directories per datanode (2)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|File
name|storageDir
init|=
name|cluster
operator|.
name|getInstanceStorageDir
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|File
name|data_dir
init|=
name|MiniDFSCluster
operator|.
name|getFinalizedDir
argument_list|(
name|storageDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|metadataFiles
init|=
name|MiniDFSCluster
operator|.
name|getAllBlockMetadataFiles
argument_list|(
name|data_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataFiles
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|File
name|metadataFile
range|:
name|metadataFiles
control|)
block|{
name|File
name|blockFile
init|=
name|Block
operator|.
name|metaToBlockFile
argument_list|(
name|metadataFile
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|blockFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deliberately removing file "
operator|+
name|metadataFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cannot remove file."
argument_list|,
name|metadataFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
name|corruptFileBlocks
operator|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"corruptData"
argument_list|)
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
expr_stmt|;
while|while
condition|(
name|numCorrupt
operator|<
literal|3
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|corruptFileBlocks
operator|=
name|dfs
operator|.
name|listCorruptFileBlocks
argument_list|(
operator|new
name|Path
argument_list|(
literal|"corruptData"
argument_list|)
argument_list|)
expr_stmt|;
name|numCorrupt
operator|=
name|countPaths
argument_list|(
name|corruptFileBlocks
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|30
condition|)
break|break;
block|}
comment|// Validate we get all the corrupt files
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode has bad files. "
operator|+
name|numCorrupt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to get corrupt files!"
argument_list|,
literal|3
argument_list|,
name|numCorrupt
argument_list|)
expr_stmt|;
name|util
operator|.
name|cleanup
argument_list|(
name|fs
argument_list|,
literal|"corruptData"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

