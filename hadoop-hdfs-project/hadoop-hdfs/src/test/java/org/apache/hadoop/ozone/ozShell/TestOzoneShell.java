begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ozShell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ozShell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|ozShell
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * This test class specified for testing Ozone shell command.  */
end_comment

begin_class
DECL|class|TestOzoneShell
specifier|public
class|class
name|TestOzoneShell
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|url
specifier|private
specifier|static
name|String
name|url
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|static
name|File
name|baseDir
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneRestClient
name|client
init|=
literal|null
decl_stmt|;
DECL|field|shell
specifier|private
specifier|static
name|Shell
name|shell
init|=
literal|null
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing with using distributed Ozone    * handler type.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|OzoneException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestOzoneShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|Shell
argument_list|()
expr_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|dataNode
operator|.
name|getInfoPort
argument_list|()
decl_stmt|;
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|OzoneRestClient
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
block|}
comment|/**    * shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset stream after each unit test
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// restore system streams
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"bilbo"
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-createVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-user"
block|,
name|userName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volumeInfo
init|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|volumeInfo
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-deleteVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify if volume has been deleted
try|try
block|{
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get volume call should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInfoVolume ()
specifier|public
name|void
name|testInfoVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-infoVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
comment|// get info for non-exist volume
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateVolume ()
specifier|public
name|void
name|testUpdateVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"bilbo"
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|userName
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OzoneQuota
operator|.
name|Units
operator|.
name|TB
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-quota"
block|,
literal|"500MB"
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|vol
operator|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OzoneQuota
operator|.
name|Units
operator|.
name|MB
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newUser
init|=
literal|"new-user"
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-user"
block|,
name|newUser
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|vol
operator|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newUser
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test error conditions
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-user"
block|,
name|newUser
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Volume owner change failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-quota"
block|,
literal|"500MB"
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Volume quota change failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListVolumes ()
specifier|public
name|void
name|testListVolumes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|volCount
init|=
literal|20
decl_stmt|;
specifier|final
name|String
name|user1
init|=
literal|"test-user-a"
decl_stmt|;
specifier|final
name|String
name|user2
init|=
literal|"test-user-b"
decl_stmt|;
comment|// Create 20 volumes, 10 for user1 and another 10 for user2.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|volCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|volumeName
decl_stmt|;
name|String
name|userName
decl_stmt|;
if|if
condition|(
name|x
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// create volume [test-vol0, test-vol2, ..., test-vol18] for user1
name|userName
operator|=
name|user1
expr_stmt|;
name|volumeName
operator|=
literal|"test-vol"
operator|+
name|x
expr_stmt|;
block|}
else|else
block|{
comment|// create volume [test-vol1, test-vol3, ..., test-vol19] for user2
name|userName
operator|=
name|user2
expr_stmt|;
name|volumeName
operator|=
literal|"test-vol"
operator|+
name|x
expr_stmt|;
block|}
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|userName
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
comment|// test -length option
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"100"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|getValueLines
argument_list|(
literal|"name"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|volumes
init|=
name|getValueLines
argument_list|(
literal|"volumeName"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|names
control|)
block|{
name|assertTrue
argument_list|(
name|user
operator|.
name|contains
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"2"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|getValueLines
argument_list|(
literal|"volumeName"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test -prefix option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-prefix"
block|,
literal|"test-vol1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|getValueLines
argument_list|(
literal|"name"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|getValueLines
argument_list|(
literal|"volumeName"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return volume names should be [test-vol10, test-vol12, ..., test-vol18]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test-vol"
operator|+
operator|(
operator|(
name|i
operator|+
literal|5
operator|)
operator|*
literal|2
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test -start option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-start"
block|,
literal|"test-vol15"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|=
name|getValueLines
argument_list|(
literal|"name"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|getValueLines
argument_list|(
literal|"volumeName"
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test-vol17"
argument_list|)
operator|&&
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test-vol19"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|user2
argument_list|)
operator|&&
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test error conditions
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"-1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be a positive number"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"invalid-length"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be digital"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetKeyInfo ()
specifier|public
name|void
name|testGetKeyInfo
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a volume
name|String
name|volume
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-createVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volume
block|,
literal|"-user"
block|,
literal|"bilbo"
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a bucket
name|String
name|bucket
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-createBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volume
operator|+
literal|"/"
operator|+
name|bucket
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// write a new file that used for putting key
name|String
name|key
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"/testfile"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|randFile
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|char
name|c
init|=
call|(
name|char
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
decl_stmt|;
name|randFile
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|randFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create the key in above bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-putKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volume
operator|+
literal|"/"
operator|+
name|bucket
operator|+
literal|"/"
operator|+
name|key
block|,
literal|"-file"
block|,
name|tmpFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volume
operator|+
literal|"/"
operator|+
name|bucket
operator|+
literal|"/"
operator|+
name|key
block|}
expr_stmt|;
comment|// verify the response output
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset stream
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// get the info of a non-exist key
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volume
operator|+
literal|"/"
operator|+
name|bucket
operator|+
literal|"/invalid-key"
block|}
expr_stmt|;
comment|// verify the response output
comment|// get the non-exist key info should be failed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|Status
operator|.
name|KEY_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Extract lines from output string that contains specified key name.    * @param keyName Key name that line should contained.    * @param outputStr Response output content.    * @return List of string.    */
DECL|method|getValueLines (String keyName, String outputStr)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getValueLines
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|outputStr
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nameLines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|outputStr
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
condition|)
block|{
name|nameLines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nameLines
return|;
block|}
block|}
end_class

end_unit

