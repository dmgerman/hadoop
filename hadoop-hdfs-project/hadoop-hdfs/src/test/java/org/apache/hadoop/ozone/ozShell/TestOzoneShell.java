begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ozShell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ozShell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|OzoneACLRights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|OzoneACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|ozShell
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * This test class specified for testing Ozone shell command.  */
end_comment

begin_class
DECL|class|TestOzoneShell
specifier|public
class|class
name|TestOzoneShell
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|url
specifier|private
specifier|static
name|String
name|url
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|static
name|File
name|baseDir
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneRestClient
name|client
init|=
literal|null
decl_stmt|;
DECL|field|shell
specifier|private
specifier|static
name|Shell
name|shell
init|=
literal|null
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing with using distributed Ozone    * handler type.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|OzoneException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestOzoneShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|shell
operator|=
operator|new
name|Shell
argument_list|()
expr_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DataNode
name|dataNode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|dataNode
operator|.
name|getInfoPort
argument_list|()
decl_stmt|;
name|url
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|OzoneRestClient
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
expr_stmt|;
block|}
comment|/**    * shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset stream after each unit test
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// restore system streams
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"bilbo"
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-createVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-user"
block|,
name|userName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volumeInfo
init|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|volumeInfo
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-deleteVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify if volume has been deleted
try|try
block|{
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get volume call should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInfoVolume ()
specifier|public
name|void
name|testInfoVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-infoVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"createdOn"
argument_list|)
operator|&&
name|output
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// get info for non-exist volume
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateVolume ()
specifier|public
name|void
name|testUpdateVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"bilbo"
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|userName
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OzoneQuota
operator|.
name|Units
operator|.
name|TB
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-quota"
block|,
literal|"500MB"
block|,
literal|"-root"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|vol
operator|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OzoneQuota
operator|.
name|Units
operator|.
name|MB
argument_list|,
name|vol
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newUser
init|=
literal|"new-user"
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
block|,
literal|"-user"
block|,
name|newUser
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|vol
operator|=
name|client
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newUser
argument_list|,
name|vol
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test error conditions
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-user"
block|,
name|newUser
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Volume owner change failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateVolume"
block|,
name|url
operator|+
literal|"/invalid-volume"
block|,
literal|"-quota"
block|,
literal|"500MB"
block|,
literal|"-root"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Volume quota change failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListVolume ()
specifier|public
name|void
name|testListVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commandOutput
decl_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
decl_stmt|;
specifier|final
name|int
name|volCount
init|=
literal|20
decl_stmt|;
specifier|final
name|String
name|user1
init|=
literal|"test-user-a"
decl_stmt|;
specifier|final
name|String
name|user2
init|=
literal|"test-user-b"
decl_stmt|;
comment|// Create 20 volumes, 10 for user1 and another 10 for user2.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|volCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|volumeName
decl_stmt|;
name|String
name|userName
decl_stmt|;
if|if
condition|(
name|x
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// create volume [test-vol0, test-vol2, ..., test-vol18] for user1
name|userName
operator|=
name|user1
expr_stmt|;
name|volumeName
operator|=
literal|"test-vol"
operator|+
name|x
expr_stmt|;
block|}
else|else
block|{
comment|// create volume [test-vol1, test-vol3, ..., test-vol19] for user2
name|userName
operator|=
name|user2
expr_stmt|;
name|volumeName
operator|=
literal|"test-vol"
operator|+
name|x
expr_stmt|;
block|}
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|userName
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
comment|// test -length option
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"100"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumes
operator|=
operator|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|VolumeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|VolumeInfo
name|volume
range|:
name|volumes
control|)
block|{
name|assertEquals
argument_list|(
name|volume
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|volume
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"2"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumes
operator|=
operator|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|VolumeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test -prefix option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user1
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-prefix"
block|,
literal|"test-vol1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumes
operator|=
operator|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|VolumeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return volume names should be [test-vol10, test-vol12, ..., test-vol18]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"test-vol"
operator|+
operator|(
operator|(
name|i
operator|+
literal|5
operator|)
operator|*
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|user1
argument_list|)
expr_stmt|;
block|}
comment|// test -start option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-start"
block|,
literal|"test-vol15"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumes
operator|=
operator|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|VolumeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|volumes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"test-vol17"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"test-vol19"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|user2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|user2
argument_list|)
expr_stmt|;
comment|// test error conditions
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"-1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be a positive number"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listVolume"
block|,
name|url
operator|+
literal|"/"
block|,
literal|"-user"
block|,
name|user2
block|,
literal|"-length"
block|,
literal|"invalid-length"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be digital"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBucket ()
specifier|public
name|void
name|testCreateBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-createBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|bucketName
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucketInfo
init|=
name|vol
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|vol
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|bucketInfo
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test create a bucket in a non-exist volume
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-createBucket"
block|,
name|url
operator|+
literal|"/invalid-volume/"
operator|+
name|bucketName
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteBucket ()
specifier|public
name|void
name|testDeleteBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucketInfo
init|=
name|vol
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-deleteBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|bucketName
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify if bucket has been deleted in volume
try|try
block|{
name|vol
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get bucket should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Info Bucket failed, error: BUCKET_NOT_FOUND"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// test delete bucket in a non-exist volume
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-deleteBucket"
block|,
name|url
operator|+
literal|"/invalid-volume"
operator|+
literal|"/"
operator|+
name|bucketName
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test delete non-exist bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-deleteBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/invalid-bucket"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Delete Bucket failed, error:BUCKET_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoBucket ()
specifier|public
name|void
name|testInfoBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|vol
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-infoBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|bucketName
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"createdOn"
argument_list|)
operator|&&
name|output
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// test get info from a non-exist bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/invalid-bucket"
operator|+
name|bucketName
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Bucket failed, error: BUCKET_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateBucket ()
specifier|public
name|void
name|testUpdateBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|vol
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-updateBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-addAcl"
block|,
literal|"user:frodo:rw,group:samwise:r"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"createdOn"
argument_list|)
operator|&&
name|output
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|vol
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneAcl
name|acl
init|=
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"frodo"
argument_list|)
operator|&&
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|OzoneACLType
operator|.
name|USER
operator|&&
name|acl
operator|.
name|getRights
argument_list|()
operator|==
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-removeAcl"
block|,
literal|"user:frodo:rw"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|vol
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|acl
operator|=
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bucket
operator|.
name|getAcls
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"samwise"
argument_list|)
operator|&&
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|OzoneACLType
operator|.
name|GROUP
operator|&&
name|acl
operator|.
name|getRights
argument_list|()
operator|==
name|OzoneACLRights
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// test update bucket for a non-exist bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-updateBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/invalid-bucket"
block|,
literal|"-addAcl"
block|,
literal|"user:frodo:rw"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Setting bucket property failed, error: BUCKET_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListBucket ()
specifier|public
name|void
name|testListBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|BucketInfo
argument_list|>
name|buckets
decl_stmt|;
name|String
name|commandOutput
decl_stmt|;
name|int
name|bucketCount
init|=
literal|11
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create bucket from test-bucket0 to test-bucket10
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"test-bucket"
operator|+
name|i
decl_stmt|;
name|bucketNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|vol
operator|.
name|createBucket
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
comment|// test -length option
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-listBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
block|,
literal|"-length"
block|,
literal|"100"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|buckets
operator|=
operator|(
name|List
argument_list|<
name|BucketInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|BucketInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// sort bucket names since the return buckets isn't in created order
name|Collections
operator|.
name|sort
argument_list|(
name|bucketNames
argument_list|)
expr_stmt|;
comment|// return bucket names should be [test-bucket0, test-bucket1,
comment|// test-bucket10, test-bucket2, ,..., test-bucket9]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|bucketNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|vol
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
block|,
literal|"-length"
block|,
literal|"3"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|buckets
operator|=
operator|(
name|List
argument_list|<
name|BucketInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|BucketInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return bucket names should be [test-bucket0,
comment|// test-bucket1, test-bucket10]
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket10"
argument_list|)
expr_stmt|;
comment|// test -prefix option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-prefix"
block|,
literal|"test-bucket1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|buckets
operator|=
operator|(
name|List
argument_list|<
name|BucketInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|BucketInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return bucket names should be [test-bucket1, test-bucket10]
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket10"
argument_list|)
expr_stmt|;
comment|// test -start option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-start"
block|,
literal|"test-bucket7"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|buckets
operator|=
operator|(
name|List
argument_list|<
name|BucketInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|BucketInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"test-bucket9"
argument_list|)
expr_stmt|;
comment|// test error conditions
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listBucket"
block|,
name|url
operator|+
literal|"/"
operator|+
name|vol
operator|.
name|getVolumeName
argument_list|()
block|,
literal|"-length"
block|,
literal|"-1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be a positive number"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutKey ()
specifier|public
name|void
name|testPutKey
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneBucket
name|bucket
init|=
name|creatBucket
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucket
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucket
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-putKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/"
operator|+
name|keyName
block|,
literal|"-file"
block|,
name|createTmpFile
argument_list|()
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneKey
name|keyInfo
init|=
name|bucket
operator|.
name|getKeyInfo
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test put key in a non-exist bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-putKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/invalid-bucket/"
operator|+
name|keyName
block|,
literal|"-file"
block|,
name|createTmpFile
argument_list|()
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Create key failed, error:BUCKET_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetKey ()
specifier|public
name|void
name|testGetKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|creatBucket
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucket
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucket
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|dataStr
init|=
literal|"test-data"
decl_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
name|dataStr
argument_list|)
expr_stmt|;
name|String
name|tmpPath
init|=
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/testfile-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-getKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/"
operator|+
name|keyName
block|,
literal|"-file"
block|,
name|tmpPath
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dataBytes
init|=
operator|new
name|byte
index|[
name|dataStr
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|FileInputStream
name|randFile
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
init|)
block|{
name|randFile
operator|.
name|read
argument_list|(
name|dataBytes
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dataStr
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|dataBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|creatBucket
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucket
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucket
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
literal|"test-data"
argument_list|)
expr_stmt|;
name|OzoneKey
name|keyInfo
init|=
name|bucket
operator|.
name|getKeyInfo
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-deleteKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/"
operator|+
name|keyName
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify if key has been deleted in the bucket
try|try
block|{
name|bucket
operator|.
name|getKeyInfo
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get key should have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Lookup key failed, error:KEY_NOT_FOUND"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// test delete key in a non-exist bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-deleteKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/invalid-bucket/"
operator|+
name|keyName
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Info Bucket failed, error: BUCKET_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// test delete a non-exist key in bucket
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-deleteKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/invalid-key"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Delete key failed, error:KEY_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoKey ()
specifier|public
name|void
name|testInfoKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|creatBucket
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucket
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucket
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
literal|"test-data"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-infoKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/"
operator|+
name|keyName
block|}
decl_stmt|;
comment|// verify the response output
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"createdOn"
argument_list|)
operator|&&
name|output
operator|.
name|contains
argument_list|(
literal|"modifiedOn"
argument_list|)
operator|&&
name|output
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset stream
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// get the info of a non-exist key
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-infoKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
operator|+
literal|"/invalid-key"
block|}
expr_stmt|;
comment|// verify the response output
comment|// get the non-exist key info should be failed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Lookup key failed, error:KEY_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListKey ()
specifier|public
name|void
name|testListKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commandOutput
decl_stmt|;
name|List
argument_list|<
name|KeyInfo
argument_list|>
name|keys
decl_stmt|;
name|int
name|keyCount
init|=
literal|11
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|creatBucket
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucket
operator|.
name|getBucketInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucket
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCount
condition|;
name|i
operator|++
control|)
block|{
name|keyName
operator|=
literal|"test-key"
operator|+
name|i
expr_stmt|;
name|keyNames
operator|.
name|add
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
literal|"test-data"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// test -length option
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-listKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-length"
block|,
literal|"100"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|KeyInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|KeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// sort key names since the return keys isn't in created order
name|Collections
operator|.
name|sort
argument_list|(
name|keyNames
argument_list|)
expr_stmt|;
comment|// return key names should be [test-key0, test-key1,
comment|// test-key10, test-key2, ,..., test-key9]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|keyNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the creation/modification time of key
name|assertTrue
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCreatedOn
argument_list|()
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getModifiedOn
argument_list|()
operator|.
name|contains
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-length"
block|,
literal|"3"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|KeyInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|KeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return key names should be [test-key0, test-key1, test-key10]
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key10"
argument_list|)
expr_stmt|;
comment|// test -prefix option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-prefix"
block|,
literal|"test-key1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|KeyInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|KeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// return key names should be [test-key1, test-key10]
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key10"
argument_list|)
expr_stmt|;
comment|// test -start option
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-length"
block|,
literal|"100"
block|,
literal|"-start"
block|,
literal|"test-key7"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|commandOutput
operator|=
name|out
operator|.
name|toString
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|KeyInfo
argument_list|>
operator|)
name|JsonUtils
operator|.
name|toJsonList
argument_list|(
name|commandOutput
argument_list|,
name|KeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
literal|"test-key9"
argument_list|)
expr_stmt|;
comment|// test error conditions
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-listKey"
block|,
name|url
operator|+
literal|"/"
operator|+
name|volumeName
operator|+
literal|"/"
operator|+
name|bucketName
block|,
literal|"-length"
block|,
literal|"-1"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"the vaule should be a positive number"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|creatVolume ()
specifier|private
name|OzoneVolume
name|creatVolume
parameter_list|()
throws|throws
name|OzoneException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"volume"
decl_stmt|;
name|OzoneVolume
name|vol
init|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
decl_stmt|;
return|return
name|vol
return|;
block|}
DECL|method|creatBucket ()
specifier|private
name|OzoneBucket
name|creatBucket
parameter_list|()
throws|throws
name|OzoneException
block|{
name|OzoneVolume
name|vol
init|=
name|creatVolume
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"bucket"
decl_stmt|;
name|OzoneBucket
name|bucketInfo
init|=
name|vol
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
return|return
name|bucketInfo
return|;
block|}
comment|/**    * Create a temporary file used for putting key.    * @return the created file's path string    * @throws Exception    */
DECL|method|createTmpFile ()
specifier|private
name|String
name|createTmpFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write a new file that used for putting key
name|File
name|tmpFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"/testfile-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileOutputStream
name|randFile
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|char
name|c
init|=
call|(
name|char
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
decl_stmt|;
name|randFile
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|randFile
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tmpFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

