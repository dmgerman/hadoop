begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test WebHDFS files/directories creation to make sure it follows same rules  * from dfs CLI for specifying files/directories permissions.  */
end_comment

begin_class
DECL|class|TestWebHdfsCreatePermissions
specifier|public
class|class
name|TestWebHdfsCreatePermissions
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebHdfsCreatePermissions
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|DFSTestUtil
operator|.
name|setNameNodeLogLevel
parameter_list|(
name|Level
operator|.
name|ALL
parameter_list|)
constructor_decl|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|initializeMiniDFSCluster ()
specifier|public
name|void
name|initializeMiniDFSCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testPermissions (int expectedResponse, String expectedPermission, String path, String... params)
specifier|private
name|void
name|testPermissions
parameter_list|(
name|int
name|expectedResponse
parameter_list|,
name|String
name|expectedPermission
parameter_list|,
name|String
name|path
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|uri
init|=
operator|new
name|StringBuilder
argument_list|(
name|cluster
operator|.
name|getHttpUri
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|uri
operator|.
name|append
argument_list|(
literal|"/webhdfs/v1"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"?user.name="
argument_list|)
operator|.
name|append
argument_list|(
name|user
argument_list|)
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|param
range|:
name|params
control|)
block|{
name|uri
operator|.
name|append
argument_list|(
name|param
argument_list|)
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedResponse
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeProtocols
name|namenode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|FsPermission
name|resultingPermission
init|=
name|namenode
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPermission
argument_list|,
name|resultingPermission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateDirNoPermissions ()
specifier|public
name|void
name|testCreateDirNoPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|testPermissions
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
literal|"rwxr-xr-x"
argument_list|,
literal|"/path"
argument_list|,
literal|"op=MKDIRS"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDir777Permissions ()
specifier|public
name|void
name|testCreateDir777Permissions
parameter_list|()
throws|throws
name|Exception
block|{
name|testPermissions
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
literal|"rwxrwxrwx"
argument_list|,
literal|"/test777"
argument_list|,
literal|"op=MKDIRS&permission=777"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileNoPermissions ()
specifier|public
name|void
name|testCreateFileNoPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|testPermissions
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
literal|"rw-r--r--"
argument_list|,
literal|"/test-file"
argument_list|,
literal|"op=CREATE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFile666Permissions ()
specifier|public
name|void
name|testCreateFile666Permissions
parameter_list|()
throws|throws
name|Exception
block|{
name|testPermissions
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
literal|"rw-rw-rw-"
argument_list|,
literal|"/test-file"
argument_list|,
literal|"op=CREATE&permission=666"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

