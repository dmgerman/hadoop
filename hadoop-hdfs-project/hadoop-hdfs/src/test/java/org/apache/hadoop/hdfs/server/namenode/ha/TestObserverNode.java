begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|FailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_LOGROLL_PERIOD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|// Main unit tests for ObserverNode
end_comment

begin_class
DECL|class|TestObserverNode
specifier|public
class|class
name|TestObserverNode
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjmhaCluster
specifier|private
name|MiniQJMHACluster
name|qjmhaCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|namenodes
specifier|private
name|NameNode
index|[]
name|namenodes
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|testPath2
specifier|private
name|Path
name|testPath2
decl_stmt|;
DECL|field|testPath3
specifier|private
name|Path
name|testPath3
decl_stmt|;
comment|/** These are set in each individual test case */
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|provider
specifier|private
name|ObserverReadProxyProvider
argument_list|<
name|?
argument_list|>
name|provider
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|testPath
operator|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|testPath2
operator|=
operator|new
name|Path
argument_list|(
literal|"/test2"
argument_list|)
expr_stmt|;
name|testPath3
operator|=
operator|new
name|Path
argument_list|(
literal|"/test3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|qjmhaCluster
operator|!=
literal|null
condition|)
block|{
name|qjmhaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleRead ()
specifier|public
name|void
name|testSimpleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailover ()
specifier|public
name|void
name|testFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleFailover ()
specifier|public
name|void
name|testDoubleFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath2
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath3
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|testPath3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverFailover ()
specifier|public
name|void
name|testObserverFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentToAny
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Transition observer #2 to standby, request should go to the #3.
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Transition observer #3 to standby, request should go to active
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Transition #2 back to observer, request should go to #2
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Transition #3 back to observer, request should go to either #2 or #3
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentToAny
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverShutdown ()
specifier|public
name|void
name|testObserverShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Shutdown the observer - requests should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Start the observer again - requests should go to observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// The first request goes to the active because it has not refreshed yet;
comment|// the second will properly go to the observer
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverFailOverAndShutdown ()
specifier|public
name|void
name|testObserverFailOverAndShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Test the case when there is a failover before ONN shutdown
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Shutdown the observer - requests should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Start the observer again - requests should go to observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
comment|// The first request goes to the active because it has not refreshed yet;
comment|// the second will properly go to the observer
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiObserver ()
specifier|public
name|void
name|testMultiObserver
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentToAny
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Shutdown first observer, request should go to the second one
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath2
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Restart the first observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentToAny
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath3
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Now shutdown the second observer, request should go to the first one
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Shutdown both, request should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|listStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrap ()
specifier|public
name|void
name|testBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|u
range|:
name|dfsCluster
operator|.
name|getNameDirs
argument_list|(
literal|2
argument_list|)
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-nonInteractive"
block|}
argument_list|,
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|// TODO this does not currently work because fetching the service state from
comment|// e.g. the StandbyNameNode also waits for the transaction ID to catch up.
comment|// This is disabled pending HDFS-13872 and HDFS-13749.
annotation|@
name|Ignore
argument_list|(
literal|"Disabled until HDFS-13872 and HDFS-13749 are committed"
argument_list|)
annotation|@
name|Test
DECL|method|testMsyncSimple ()
specifier|public
name|void
name|testMsyncSimple
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable fast path here because this test's assertions are based on the
comment|// timing of explicitly called rollEditLogAndTail. Although this means this
comment|// test takes some time to run
comment|// TODO: revisit if there is a better way.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_HA_TAILEDITS_INPROGRESS_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFS_HA_LOGROLL_PERIOD_KEY
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|setUpCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 0 == not completed, 1 == succeeded, -1 == failed
name|AtomicInteger
name|readStatus
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
name|reader
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// this read will block until roll and tail edits happen.
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|readStatus
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|readStatus
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// the reader is still blocking, not succeeded yet.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readStatus
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// wait a while for all the change to be done
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|readStatus
operator|.
name|get
argument_list|()
operator|!=
literal|0
argument_list|,
literal|100
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// the reader should have succeed.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|readStatus
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpCluster (int numObservers)
specifier|private
name|void
name|setUpCluster
parameter_list|(
name|int
name|numObservers
parameter_list|)
throws|throws
name|Exception
block|{
name|qjmhaCluster
operator|=
operator|new
name|MiniQJMHACluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumNameNodes
argument_list|(
literal|2
operator|+
name|numObservers
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfsCluster
operator|=
name|qjmhaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
name|namenodes
operator|=
operator|new
name|NameNode
index|[
literal|2
operator|+
name|numObservers
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namenodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|namenodes
index|[
name|i
index|]
operator|=
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numObservers
condition|;
name|i
operator|++
control|)
block|{
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSentTo (int nnIdx)
specifier|private
name|void
name|assertSentTo
parameter_list|(
name|int
name|nnIdx
parameter_list|)
block|{
name|assertSentToAny
argument_list|(
name|nnIdx
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSentToAny (int... nnIndices)
specifier|private
name|void
name|assertSentToAny
parameter_list|(
name|int
modifier|...
name|nnIndices
parameter_list|)
block|{
name|FailoverProxyProvider
operator|.
name|ProxyInfo
argument_list|<
name|?
argument_list|>
name|pi
init|=
name|provider
operator|.
name|getLastProxy
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|nnIdx
range|:
name|nnIndices
control|)
block|{
if|if
condition|(
name|pi
operator|.
name|proxyInfo
operator|.
name|equals
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|nnIdx
argument_list|)
operator|.
name|getNameNodeAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Request was not sent to any of the expected namenodes"
argument_list|)
expr_stmt|;
block|}
DECL|method|setObserverRead (boolean flag)
specifier|private
name|void
name|setObserverRead
parameter_list|(
name|boolean
name|flag
parameter_list|)
throws|throws
name|Exception
block|{
name|dfs
operator|=
name|HATestUtil
operator|.
name|configureObserverReadFs
argument_list|(
name|dfsCluster
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
name|handler
init|=
operator|(
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
argument_list|)
decl_stmt|;
name|provider
operator|=
operator|(
name|ObserverReadProxyProvider
argument_list|<
name|?
argument_list|>
operator|)
name|handler
operator|.
name|getProxyProvider
argument_list|()
expr_stmt|;
name|provider
operator|.
name|setObserverReadEnabled
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
DECL|method|rollEditLogAndTail (int indexForActiveNN)
specifier|private
name|void
name|rollEditLogAndTail
parameter_list|(
name|int
name|indexForActiveNN
parameter_list|)
throws|throws
name|Exception
block|{
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|indexForActiveNN
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|namenodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

