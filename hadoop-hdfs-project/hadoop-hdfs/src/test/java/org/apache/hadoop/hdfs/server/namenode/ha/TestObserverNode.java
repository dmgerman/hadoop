begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
operator|.
name|getServiceState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|MiniQJMHACluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TestFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test main functionality of ObserverNode.  */
end_comment

begin_class
DECL|class|TestObserverNode
specifier|public
class|class
name|TestObserverNode
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestObserverNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|qjmhaCluster
specifier|private
specifier|static
name|MiniQJMHACluster
name|qjmhaCluster
decl_stmt|;
DECL|field|dfsCluster
specifier|private
specifier|static
name|MiniDFSCluster
name|dfsCluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|testPath
specifier|private
specifier|final
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/TestObserverNode"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUpCluster ()
specifier|public
specifier|static
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|qjmhaCluster
operator|=
name|HATestUtil
operator|.
name|setUpObserverCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
name|qjmhaCluster
operator|.
name|getDfsCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NN[0] should be active"
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|getServiceState
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NN[1] should be standby"
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|getServiceState
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NN[2] should be observer"
argument_list|,
name|HAServiceState
operator|.
name|OBSERVER
argument_list|,
name|getServiceState
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDownCluster ()
specifier|public
specifier|static
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|qjmhaCluster
operator|!=
literal|null
condition|)
block|{
name|qjmhaCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoActiveToObserver ()
specifier|public
name|void
name|testNoActiveToObserver
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceFailedException
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"active cannot be transitioned to observer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoObserverToActive ()
specifier|public
name|void
name|testNoObserverToActive
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceFailedException
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"observer cannot be transitioned to active"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleRead ()
specifier|public
name|void
name|testSimpleRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath2
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailover ()
specifier|public
name|void
name|testFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath2
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|setObserverRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleFailover ()
specifier|public
name|void
name|testDoubleFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath2
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|Path
name|testPath3
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"test3"
argument_list|)
decl_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath2
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath2
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath3
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath3
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|testPath3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverShutdown ()
specifier|public
name|void
name|testObserverShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Shutdown the observer - requests should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Start the observer again - requests should go to observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// The first request goes to the active because it has not refreshed yet;
comment|// the second will properly go to the observer
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverFailOverAndShutdown ()
specifier|public
name|void
name|testObserverFailOverAndShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|dfs
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Shutdown the observer - requests should go to active
name|dfsCluster
operator|.
name|shutdownNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Start the observer again - requests should go to observer
name|dfsCluster
operator|.
name|restartNameNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToObserver
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
comment|// The first request goes to the active because it has not refreshed yet;
comment|// the second will properly go to the observer
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|waitActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBootstrap ()
specifier|public
name|void
name|testBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|URI
name|u
range|:
name|dfsCluster
operator|.
name|getNameDirs
argument_list|(
literal|2
argument_list|)
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|rc
init|=
name|BootstrapStandby
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-nonInteractive"
block|}
argument_list|,
name|dfsCluster
operator|.
name|getConfiguration
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where Observer should throw RetriableException, just like    * active NN, for certain open() calls where block locations are not    * available. See HDFS-13898 for details.    */
annotation|@
name|Test
DECL|method|testObserverNodeSafeModeWithBlockLocations ()
specifier|public
name|void
name|testObserverNodeSafeModeWithBlockLocations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a new file - the request should go to active.
name|dfs
operator|.
name|create
argument_list|(
name|testPath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Set observer to safe mode.
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
literal|2
argument_list|)
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
comment|// Mock block manager for observer to generate some fake blocks which
comment|// will trigger the (retriable) safe mode exception.
name|BlockManager
name|bmSpy
init|=
name|NameNodeAdapter
operator|.
name|spyOnBlockManager
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
parameter_list|(
name|invocation
parameter_list|)
lambda|->
block|{
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"fake-pool"
argument_list|,
operator|new
name|Block
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|LocatedBlock
name|fakeBlock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
name|DatanodeInfo
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|fakeBlocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fakeBlocks
operator|.
name|add
argument_list|(
name|fakeBlock
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
name|fakeBlocks
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|bmSpy
argument_list|)
operator|.
name|createLocatedBlocks
argument_list|(
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open the file again - it should throw retriable exception and then
comment|// failover to active.
name|dfs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|bmSpy
argument_list|)
expr_stmt|;
comment|// Remove safe mode on observer, request should still go to it.
name|dfsCluster
operator|.
name|getFileSystem
argument_list|(
literal|2
argument_list|)
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserverNodeBlockMissingRetry ()
specifier|public
name|void
name|testObserverNodeBlockMissingRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|testPath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dfsCluster
operator|.
name|rollEditLogAndTail
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Mock block manager for observer to generate some fake blocks which
comment|// will trigger the block missing exception.
name|BlockManager
name|bmSpy
init|=
name|NameNodeAdapter
operator|.
name|spyOnBlockManager
argument_list|(
name|dfsCluster
operator|.
name|getNameNode
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
parameter_list|(
name|invocation
parameter_list|)
lambda|->
block|{
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|fakeBlocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Remove the datanode info for the only block so it will throw
comment|// BlockMissingException and retry.
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"fake-pool"
argument_list|,
operator|new
name|Block
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|LocatedBlock
name|fakeBlock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
name|DatanodeInfo
operator|.
name|EMPTY_ARRAY
argument_list|)
decl_stmt|;
name|fakeBlocks
operator|.
name|add
argument_list|(
name|fakeBlock
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
name|fakeBlocks
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|bmSpy
argument_list|)
operator|.
name|createLocatedBlocks
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|open
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|bmSpy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsckWithObserver ()
specifier|public
name|void
name|testFsckWithObserver
parameter_list|()
throws|throws
name|Exception
block|{
name|setObserverRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|testPath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertSentTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|TestFsck
operator|.
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"Status: HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSentTo (int nnIdx)
specifier|private
name|void
name|assertSentTo
parameter_list|(
name|int
name|nnIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Request was not sent to the expected namenode "
operator|+
name|nnIdx
argument_list|,
name|HATestUtil
operator|.
name|isSentToAnyOfNameNodes
argument_list|(
name|dfs
argument_list|,
name|dfsCluster
argument_list|,
name|nnIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setObserverRead (boolean flag)
specifier|private
specifier|static
name|void
name|setObserverRead
parameter_list|(
name|boolean
name|flag
parameter_list|)
throws|throws
name|Exception
block|{
name|dfs
operator|=
name|HATestUtil
operator|.
name|configureObserverReadFs
argument_list|(
name|dfsCluster
argument_list|,
name|conf
argument_list|,
name|ObserverReadProxyProvider
operator|.
name|class
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

