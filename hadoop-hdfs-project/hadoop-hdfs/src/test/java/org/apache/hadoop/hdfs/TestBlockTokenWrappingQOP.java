begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LastBlockWithStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|TestPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This tests enabling NN sending the established QOP back to client,  * in encrypted message, using block access token key.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestBlockTokenWrappingQOP
specifier|public
class|class
name|TestBlockTokenWrappingQOP
extends|extends
name|SaslDataTransferTestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPermission
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|HdfsConfiguration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|configKey
specifier|private
name|String
name|configKey
decl_stmt|;
DECL|field|qopValue
specifier|private
name|String
name|qopValue
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|qopSettings ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|qopSettings
parameter_list|()
block|{
comment|// if configured with privacy, the negotiated QOP should auth-conf
comment|// similarly for the other two
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"privacy"
block|,
literal|"auth-conf"
block|}
block|,
block|{
literal|"integrity"
block|,
literal|"auth-int"
block|}
block|,
block|{
literal|"authentication"
block|,
literal|"auth"
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestBlockTokenWrappingQOP (String configKey, String qopValue)
specifier|public
name|TestBlockTokenWrappingQOP
parameter_list|(
name|String
name|configKey
parameter_list|,
name|String
name|qopValue
parameter_list|)
block|{
name|this
operator|.
name|configKey
operator|=
name|configKey
expr_stmt|;
name|this
operator|.
name|qopValue
operator|=
name|qopValue
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|createSecureConfig
argument_list|(
name|this
operator|.
name|configKey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_SEND_QOP_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
name|this
operator|.
name|configKey
argument_list|)
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddBlockWrappingQOP ()
specifier|public
name|void
name|testAddBlockWrappingQOP
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|src
init|=
literal|"/testAddBlockWrappingQOP"
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|clientName
init|=
name|client
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|client
operator|.
name|namenode
operator|.
name|addBlock
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_INODE_ID
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|lb
operator|.
name|getBlockToken
argument_list|()
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getHandshakeMsg
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|qopValue
argument_list|,
operator|new
name|String
argument_list|(
name|secret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendWrappingQOP ()
specifier|public
name|void
name|testAppendWrappingQOP
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|src
init|=
literal|"/testAppendWrappingQOP"
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// NameNode append call returns a last block instance. If there is nothing
comment|// it returns as a null. So write something, so that lastBlock has
comment|// something
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|String
name|clientName
init|=
name|client
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|LastBlockWithStatus
name|lastBlock
init|=
name|client
operator|.
name|namenode
operator|.
name|append
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
operator|new
name|EnumSetWritable
argument_list|<>
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|lastBlock
operator|.
name|getLastBlock
argument_list|()
operator|.
name|getBlockToken
argument_list|()
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getHandshakeMsg
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|qopValue
argument_list|,
operator|new
name|String
argument_list|(
name|secret
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBlockLocationWrappingQOP ()
specifier|public
name|void
name|testGetBlockLocationWrappingQOP
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|src
init|=
literal|"/testGetBlockLocationWrappingQOP"
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// if the file is empty, there will be no blocks returned. Write something
comment|// so that getBlockLocations actually returns some block.
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|status
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
name|dfs
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|client
operator|.
name|namenode
operator|.
name|getBlockLocations
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|byte
index|[]
name|secret
init|=
name|lb
operator|.
name|getBlockToken
argument_list|()
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getHandshakeMsg
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|qopValue
argument_list|,
operator|new
name|String
argument_list|(
name|secret
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

