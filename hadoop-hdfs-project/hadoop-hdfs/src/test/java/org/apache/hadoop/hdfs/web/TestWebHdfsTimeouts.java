begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|ConnectionConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test suite checks that WebHdfsFileSystem sets connection timeouts and  * read timeouts on its sockets, thus preventing threads from hanging  * indefinitely on an undefined/infinite timeout.  The tests work by starting a  * bogus server on the namenode HTTP port, which is rigged to not accept new  * connections or to accept connections but not send responses.  */
end_comment

begin_class
DECL|class|TestWebHdfsTimeouts
specifier|public
class|class
name|TestWebHdfsTimeouts
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWebHdfsTimeouts
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLIENTS_TO_CONSUME_BACKLOG
specifier|private
specifier|static
specifier|final
name|int
name|CLIENTS_TO_CONSUME_BACKLOG
init|=
literal|100
decl_stmt|;
DECL|field|CONNECTION_BACKLOG
specifier|private
specifier|static
specifier|final
name|int
name|CONNECTION_BACKLOG
init|=
literal|1
decl_stmt|;
DECL|field|SHORT_SOCKET_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|SHORT_SOCKET_TIMEOUT
init|=
literal|5
decl_stmt|;
DECL|field|TEST_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TEST_TIMEOUT
init|=
literal|10000
decl_stmt|;
DECL|field|clients
specifier|private
name|List
argument_list|<
name|SocketChannel
argument_list|>
name|clients
decl_stmt|;
DECL|field|fs
specifier|private
name|WebHdfsFileSystem
name|fs
decl_stmt|;
DECL|field|nnHttpAddress
specifier|private
name|InetSocketAddress
name|nnHttpAddress
decl_stmt|;
DECL|field|serverSocket
specifier|private
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|field|serverThread
specifier|private
name|Thread
name|serverThread
decl_stmt|;
DECL|field|connectionFactory
specifier|private
specifier|final
name|URLConnectionFactory
name|connectionFactory
init|=
operator|new
name|URLConnectionFactory
argument_list|(
operator|new
name|ConnectionConfigurator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|configure
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|conn
operator|.
name|setReadTimeout
argument_list|(
name|SHORT_SOCKET_TIMEOUT
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setConnectTimeout
argument_list|(
name|SHORT_SOCKET_TIMEOUT
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|WebHdfsTestUtil
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
name|CONNECTION_BACKLOG
argument_list|)
expr_stmt|;
name|nnHttpAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"localhost:"
operator|+
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|WebHdfsTestUtil
operator|.
name|getWebHdfsFileSystem
argument_list|(
name|conf
argument_list|,
name|WebHdfsConstants
operator|.
name|WEBHDFS_SCHEME
argument_list|)
expr_stmt|;
name|fs
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
name|clients
operator|=
operator|new
name|ArrayList
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
expr_stmt|;
name|serverThread
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|clients
operator|.
name|toArray
argument_list|(
operator|new
name|SocketChannel
index|[
name|clients
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSocket
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in closing "
operator|+
name|serverSocket
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverThread
operator|!=
literal|null
condition|)
block|{
name|serverThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Expect connect timeout, because the connection backlog is consumed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testConnectTimeout ()
specifier|public
name|void
name|testConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|consumeConnectionBacklog
argument_list|()
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": connect timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expect read timeout, because the bogus server never sends a reply.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testReadTimeout ()
specifier|public
name|void
name|testReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|listFiles
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": Read timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expect connect timeout on a URL that requires auth, because the connection    * backlog is consumed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testAuthUrlConnectTimeout ()
specifier|public
name|void
name|testAuthUrlConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|consumeConnectionBacklog
argument_list|()
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|"renewer"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": connect timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expect read timeout on a URL that requires auth, because the bogus server    * never sends a reply.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testAuthUrlReadTimeout ()
specifier|public
name|void
name|testAuthUrlReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fs
operator|.
name|getDelegationToken
argument_list|(
literal|"renewer"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": Read timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * After a redirect, expect connect timeout accessing the redirect location,    * because the connection backlog is consumed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testRedirectConnectTimeout ()
specifier|public
name|void
name|testRedirectConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|startSingleTemporaryRedirectResponseThread
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileChecksum
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": connect timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * After a redirect, expect read timeout accessing the redirect location,    * because the bogus server never sends a reply.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testRedirectReadTimeout ()
specifier|public
name|void
name|testRedirectReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|startSingleTemporaryRedirectResponseThread
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileChecksum
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": Read timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * On the second step of two-step write, expect connect timeout accessing the    * redirect location, because the connection backlog is consumed.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testTwoStepWriteConnectTimeout ()
specifier|public
name|void
name|testTwoStepWriteConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|startSingleTemporaryRedirectResponseThread
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|+
literal|": connect timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * On the second step of two-step write, expect read timeout accessing the    * redirect location, because the bogus server never sends a reply.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
name|TEST_TIMEOUT
argument_list|)
DECL|method|testTwoStepWriteReadTimeout ()
specifier|public
name|void
name|testTwoStepWriteReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|startSingleTemporaryRedirectResponseThread
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/file"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// must close stream to force reading the HTTP response
name|os
operator|=
literal|null
expr_stmt|;
name|fail
argument_list|(
literal|"expected timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Read timed out"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts a background thread that accepts one and only one client connection    * on the server socket, sends an HTTP 307 Temporary Redirect response, and    * then exits.  This is useful for testing timeouts on the second step of    * methods that issue 2 HTTP requests (request 1, redirect, request 2).    *     * For handling the first request, this method sets socket timeout to use the    * initial values defined in URLUtils.  Afterwards, it guarantees that the    * second request will use a very short timeout.    *     * Optionally, the thread may consume the connection backlog immediately after    * receiving its one and only client connection.  This is useful for forcing a    * connection timeout on the second request.    *     * On tearDown, open client connections are closed, and the thread is joined.    *     * @param consumeConnectionBacklog boolean whether or not to consume connection    *   backlog and thus force a connection timeout on the second request    */
DECL|method|startSingleTemporaryRedirectResponseThread ( final boolean consumeConnectionBacklog)
specifier|private
name|void
name|startSingleTemporaryRedirectResponseThread
parameter_list|(
specifier|final
name|boolean
name|consumeConnectionBacklog
parameter_list|)
block|{
name|fs
operator|.
name|connectionFactory
operator|=
name|URLConnectionFactory
operator|.
name|DEFAULT_SYSTEM_CONNECTION_FACTORY
expr_stmt|;
name|serverThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Socket
name|clientSocket
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|InputStreamReader
name|isr
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Accept one and only one client connection.
name|clientSocket
operator|=
name|serverSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
comment|// Immediately setup conditions for subsequent connections.
name|fs
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
if|if
condition|(
name|consumeConnectionBacklog
condition|)
block|{
name|consumeConnectionBacklog
argument_list|()
expr_stmt|;
block|}
comment|// Consume client's HTTP request by reading until EOF or empty line.
name|in
operator|=
name|clientSocket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|isr
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
comment|// Write response.
name|out
operator|=
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|temporaryRedirect
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Fail the test on any I/O error in the server thread.
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected IOException in server thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected IOException in server thread: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clean it all up.
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|br
argument_list|,
name|isr
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|serverThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Consumes the test server's connection backlog by spamming non-blocking    * SocketChannel client connections.  We never do anything with these sockets    * beyond just initiaing the connections.  The method saves a reference to each    * new SocketChannel so that it can be closed during tearDown.  We define a    * very small connection backlog, but the OS may silently enforce a larger    * minimum backlog than requested.  To work around this, we create far more    * client connections than our defined backlog.    *     * @throws IOException thrown for any I/O error    */
DECL|method|consumeConnectionBacklog ()
specifier|private
name|void
name|consumeConnectionBacklog
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CLIENTS_TO_CONSUME_BACKLOG
condition|;
operator|++
name|i
control|)
block|{
name|SocketChannel
name|client
init|=
name|SocketChannel
operator|.
name|open
argument_list|()
decl_stmt|;
name|client
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
name|nnHttpAddress
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates an HTTP 307 response with the redirect location set back to the    * test server's address.  HTTP is supposed to terminate newlines with CRLF, so    * we hard-code that instead of using the line separator property.    *     * @return String HTTP 307 response    */
DECL|method|temporaryRedirect ()
specifier|private
name|String
name|temporaryRedirect
parameter_list|()
block|{
return|return
literal|"HTTP/1.1 307 Temporary Redirect\r\n"
operator|+
literal|"Location: http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|nnHttpAddress
argument_list|)
operator|+
literal|"\r\n"
operator|+
literal|"\r\n"
return|;
block|}
block|}
end_class

end_unit

