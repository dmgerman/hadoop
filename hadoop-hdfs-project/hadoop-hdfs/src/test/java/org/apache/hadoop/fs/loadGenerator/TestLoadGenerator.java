begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.loadGenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|loadGenerator
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests if a balancer schedules tasks correctly.  */
end_comment

begin_class
DECL|class|TestLoadGenerator
specifier|public
class|class
name|TestLoadGenerator
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|OUT_DIR
specifier|private
specifier|static
specifier|final
name|File
name|OUT_DIR
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestLoadGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DIR_STRUCTURE_FILE
specifier|private
specifier|static
specifier|final
name|File
name|DIR_STRUCTURE_FILE
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
name|StructureGenerator
operator|.
name|DIR_STRUCTURE_FILE_NAME
argument_list|)
decl_stmt|;
DECL|field|FILE_STRUCTURE_FILE
specifier|private
specifier|static
specifier|final
name|File
name|FILE_STRUCTURE_FILE
init|=
operator|new
name|File
argument_list|(
name|OUT_DIR
argument_list|,
name|StructureGenerator
operator|.
name|FILE_STRUCTURE_FILE_NAME
argument_list|)
decl_stmt|;
DECL|field|DIR_STRUCTURE_FIRST_LINE
specifier|private
specifier|static
specifier|final
name|String
name|DIR_STRUCTURE_FIRST_LINE
init|=
literal|"/dir0"
decl_stmt|;
DECL|field|DIR_STRUCTURE_SECOND_LINE
specifier|private
specifier|static
specifier|final
name|String
name|DIR_STRUCTURE_SECOND_LINE
init|=
literal|"/dir1"
decl_stmt|;
DECL|field|FILE_STRUCTURE_FIRST_LINE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_STRUCTURE_FIRST_LINE
init|=
literal|"/dir0/_file_0 0.3754598635933768"
decl_stmt|;
DECL|field|FILE_STRUCTURE_SECOND_LINE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_STRUCTURE_SECOND_LINE
init|=
literal|"/dir1/_file_1 1.4729310851145203"
decl_stmt|;
static|static
block|{
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/** Test if the structure generator works fine */
annotation|@
name|Test
DECL|method|testStructureGenerator ()
specifier|public
name|void
name|testStructureGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|StructureGenerator
name|sg
init|=
operator|new
name|StructureGenerator
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-maxDepth"
block|,
literal|"2"
block|,
literal|"-minWidth"
block|,
literal|"1"
block|,
literal|"-maxWidth"
block|,
literal|"2"
block|,
literal|"-numOfFiles"
block|,
literal|"2"
block|,
literal|"-avgFileSize"
block|,
literal|"1"
block|,
literal|"-outDir"
block|,
name|OUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-seed"
block|,
literal|"1"
block|}
decl_stmt|;
specifier|final
name|int
name|MAX_DEPTH
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|MIN_WIDTH
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|MAX_WIDTH
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|NUM_OF_FILES
init|=
literal|7
decl_stmt|;
specifier|final
name|int
name|AVG_FILE_SIZE
init|=
literal|9
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|13
decl_stmt|;
try|try
block|{
comment|// successful case
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|DIR_STRUCTURE_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DIR_STRUCTURE_FIRST_LINE
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DIR_STRUCTURE_SECOND_LINE
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|FILE_STRUCTURE_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_STRUCTURE_FIRST_LINE
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FILE_STRUCTURE_SECOND_LINE
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|oldArg
init|=
name|args
index|[
name|MAX_DEPTH
index|]
decl_stmt|;
name|args
index|[
name|MAX_DEPTH
index|]
operator|=
literal|"0"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|MAX_DEPTH
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|MIN_WIDTH
index|]
expr_stmt|;
name|args
index|[
name|MIN_WIDTH
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|MIN_WIDTH
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|MAX_WIDTH
index|]
expr_stmt|;
name|args
index|[
name|MAX_WIDTH
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|MAX_WIDTH
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|NUM_OF_FILES
index|]
expr_stmt|;
name|args
index|[
name|NUM_OF_FILES
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|NUM_OF_FILES
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|NUM_OF_FILES
index|]
expr_stmt|;
name|args
index|[
name|NUM_OF_FILES
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|NUM_OF_FILES
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|AVG_FILE_SIZE
index|]
expr_stmt|;
name|args
index|[
name|AVG_FILE_SIZE
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|AVG_FILE_SIZE
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|SEED
index|]
expr_stmt|;
name|args
index|[
name|SEED
index|]
operator|=
literal|"34.d4"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|sg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|SEED
index|]
operator|=
name|oldArg
expr_stmt|;
block|}
finally|finally
block|{
name|DIR_STRUCTURE_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FILE_STRUCTURE_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test if the load generator works fine */
annotation|@
name|Test
DECL|method|testLoadGenerator ()
specifier|public
name|void
name|testLoadGenerator
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_SPACE_ROOT
init|=
literal|"/test"
decl_stmt|;
specifier|final
name|String
name|SCRIPT_TEST_DIR
init|=
name|OUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|script
init|=
name|SCRIPT_TEST_DIR
operator|+
literal|"/"
operator|+
literal|"loadgenscript"
decl_stmt|;
name|String
name|script2
init|=
name|SCRIPT_TEST_DIR
operator|+
literal|"/"
operator|+
literal|"loadgenscript2"
decl_stmt|;
name|File
name|scriptFile1
init|=
operator|new
name|File
argument_list|(
name|script
argument_list|)
decl_stmt|;
name|File
name|scriptFile2
init|=
operator|new
name|File
argument_list|(
name|script2
argument_list|)
decl_stmt|;
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|DIR_STRUCTURE_FILE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|DIR_STRUCTURE_FIRST_LINE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|DIR_STRUCTURE_SECOND_LINE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|FILE_STRUCTURE_FILE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|FILE_STRUCTURE_FIRST_LINE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|FILE_STRUCTURE_SECOND_LINE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
name|DataGenerator
name|dg
init|=
operator|new
name|DataGenerator
argument_list|()
decl_stmt|;
name|dg
operator|.
name|setConf
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-inDir"
block|,
name|OUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-root"
block|,
name|TEST_SPACE_ROOT
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|READ_PROBABILITY
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|WRITE_PROBABILITY
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|MAX_DELAY_BETWEEN_OPS
init|=
literal|7
decl_stmt|;
specifier|final
name|int
name|NUM_OF_THREADS
init|=
literal|9
decl_stmt|;
specifier|final
name|int
name|START_TIME
init|=
literal|11
decl_stmt|;
specifier|final
name|int
name|ELAPSED_TIME
init|=
literal|13
decl_stmt|;
name|LoadGenerator
name|lg
init|=
operator|new
name|LoadGenerator
argument_list|()
decl_stmt|;
name|lg
operator|.
name|setConf
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-readProbability"
block|,
literal|"0.3"
block|,
literal|"-writeProbability"
block|,
literal|"0.3"
block|,
literal|"-root"
block|,
name|TEST_SPACE_ROOT
block|,
literal|"-maxDelayBetweenOps"
block|,
literal|"0"
block|,
literal|"-numOfThreads"
block|,
literal|"1"
block|,
literal|"-startTime"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
block|,
literal|"-elapsedTime"
block|,
literal|"10"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|oldArg
init|=
name|args
index|[
name|READ_PROBABILITY
index|]
decl_stmt|;
name|args
index|[
name|READ_PROBABILITY
index|]
operator|=
literal|"1.1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|READ_PROBABILITY
index|]
operator|=
literal|"-1.1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|READ_PROBABILITY
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|WRITE_PROBABILITY
index|]
expr_stmt|;
name|args
index|[
name|WRITE_PROBABILITY
index|]
operator|=
literal|"1.1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|WRITE_PROBABILITY
index|]
operator|=
literal|"-1.1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|WRITE_PROBABILITY
index|]
operator|=
literal|"0.9"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|READ_PROBABILITY
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
expr_stmt|;
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
operator|=
literal|"1.x1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
expr_stmt|;
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
operator|=
literal|"1.x1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|MAX_DELAY_BETWEEN_OPS
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|NUM_OF_THREADS
index|]
expr_stmt|;
name|args
index|[
name|NUM_OF_THREADS
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|NUM_OF_THREADS
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|START_TIME
index|]
expr_stmt|;
name|args
index|[
name|START_TIME
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|START_TIME
index|]
operator|=
name|oldArg
expr_stmt|;
name|oldArg
operator|=
name|args
index|[
name|ELAPSED_TIME
index|]
expr_stmt|;
name|args
index|[
name|ELAPSED_TIME
index|]
operator|=
literal|"-1"
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
index|[
name|ELAPSED_TIME
index|]
operator|=
name|oldArg
expr_stmt|;
comment|// test scripted operation
comment|// Test with good script
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|scriptFile1
argument_list|)
decl_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"2 .22 .33\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"3 .10 .6\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"6 0 .7\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|scriptArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"-root"
block|,
name|TEST_SPACE_ROOT
block|,
literal|"-maxDelayBetweenOps"
block|,
literal|"0"
block|,
literal|"-numOfThreads"
block|,
literal|"10"
block|,
literal|"-startTime"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
block|,
literal|"-scriptFile"
block|,
name|script
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|scriptArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test with bad script
name|fw
operator|=
operator|new
name|FileWriter
argument_list|(
name|scriptFile2
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"2 .22 .33\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"3 blah blah blah .6\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|write
argument_list|(
literal|"6 0 .7\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
name|scriptArgs
index|[
name|scriptArgs
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|script2
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|lg
operator|.
name|run
argument_list|(
name|scriptArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DIR_STRUCTURE_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FILE_STRUCTURE_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
name|scriptFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|scriptFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|TestLoadGenerator
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TestLoadGenerator
name|loadGeneratorTest
init|=
operator|new
name|TestLoadGenerator
argument_list|()
decl_stmt|;
name|loadGeneratorTest
operator|.
name|testStructureGenerator
argument_list|()
expr_stmt|;
name|loadGeneratorTest
operator|.
name|testLoadGenerator
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

