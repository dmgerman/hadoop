begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_DISABLE_INTERVAL_SECOND_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_DISABLE_INTERVAL_SECOND_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedByInterruptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DfsClientShmManager
operator|.
name|PerDatanodeVisitorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DfsClientShmManager
operator|.
name|Visitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DomainSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestBlockReaderFactory
specifier|public
class|class
name|TestBlockReaderFactory
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockReaderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
specifier|final
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
name|Assume
operator|.
name|assumeThat
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|false
expr_stmt|;
name|BlockReaderFactory
operator|.
name|createShortCircuitReplicaInfoCallback
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|createShortCircuitConf (String testName, TemporarySocketDirectory sockDir)
specifier|public
specifier|static
name|Configuration
name|createShortCircuitConf
parameter_list|(
name|String
name|testName
parameter_list|,
name|TemporarySocketDirectory
name|sockDir
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
name|testName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
name|testName
operator|+
literal|"._PORT"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|SKIP_CHECKSUM_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * If we have a UNIX domain socket configured,    * and we have dfs.client.domain.socket.data.traffic set to true,    * and short-circuit access fails, we should still be able to pass    * data traffic over the UNIX domain socket.  Test this.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFallbackFromShortCircuitToUnixDomainTraffic ()
specifier|public
name|void
name|testFallbackFromShortCircuitToUnixDomainTraffic
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
comment|// The server is NOT configured with short-circuit local reads;
comment|// the client is.  Both support UNIX domain reads.
name|Configuration
name|clientConf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testFallbackFromShortCircuitToUnixDomainTraffic"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testFallbackFromShortCircuitToUnixDomainTraffic_clientContext"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|serverConf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Read
operator|.
name|ShortCircuit
operator|.
name|KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|dfs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|8193
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the case where address passed to DomainSocketFactory#getPathInfo is    * unresolved. In such a case an exception should be thrown.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetPathInfoWithUnresolvedHost ()
specifier|public
name|void
name|testGetPathInfoWithUnresolvedHost
parameter_list|()
throws|throws
name|Exception
block|{
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testGetPathInfoWithUnresolvedHost"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testGetPathInfoWithUnresolvedHost_Context"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DfsClientConf
operator|.
name|ShortCircuitConf
name|shortCircuitConf
init|=
operator|new
name|DfsClientConf
operator|.
name|ShortCircuitConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DomainSocketFactory
name|domainSocketFactory
init|=
operator|new
name|DomainSocketFactory
argument_list|(
name|shortCircuitConf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|targetAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"random"
argument_list|,
literal|32456
argument_list|)
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Unresolved host: "
operator|+
name|targetAddr
argument_list|)
expr_stmt|;
name|domainSocketFactory
operator|.
name|getPathInfo
argument_list|(
name|targetAddr
argument_list|,
name|shortCircuitConf
argument_list|)
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the case where we have multiple threads waiting on the    * ShortCircuitCache delivering a certain ShortCircuitReplica.    *    * In this case, there should only be one call to    * createShortCircuitReplicaInfo.  This one replica should be shared    * by all threads.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMultipleWaitersOnShortCircuitCache ()
specifier|public
name|void
name|testMultipleWaitersOnShortCircuitCache
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|creationIsBlocked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|BlockReaderFactory
operator|.
name|createShortCircuitReplicaInfoCallback
operator|=
operator|new
name|ShortCircuitCache
operator|.
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|Uninterruptibles
operator|.
name|awaitUninterruptibly
argument_list|(
name|latch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|creationIsBlocked
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"there were multiple calls to "
operator|+
literal|"createShortCircuitReplicaInfo.  Only one was expected."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testMultipleWaitersOnShortCircuitCache"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|int
name|NUM_THREADS
init|=
literal|10
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|Runnable
name|readerRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|creationIsBlocked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"readerRunnable error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|testFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|readerRunnable
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where we have a failure to complete a short circuit read    * that occurs, and then later on, we have a success.    * Any thread waiting on a cache load should receive the failure (if it    * occurs);  however, the failure result should not be cached.  We want    * to be able to retry later and succeed.    */
annotation|@
name|Test
DECL|method|testShortCircuitCacheTemporaryFailure ()
specifier|public
name|void
name|testShortCircuitCacheTemporaryFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableBlockReaderFactoryTracing
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|replicaCreationShouldFail
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|BlockReaderFactory
operator|.
name|createShortCircuitReplicaInfoCallback
operator|=
operator|new
name|ShortCircuitCache
operator|.
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
if|if
condition|(
name|replicaCreationShouldFail
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Insert a short delay to increase the chance that one client
comment|// thread waits for the other client thread's failure via
comment|// a condition variable.
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
operator|new
name|ShortCircuitReplicaInfo
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testShortCircuitCacheTemporaryFailure"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|NUM_THREADS
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADED
decl_stmt|;
specifier|final
name|CountDownLatch
name|gotFailureLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|shouldRetryLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|Runnable
name|readerRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// First time should fail.
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|TEST_FILE
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lblock
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// first block
name|BlockReader
name|blockReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockReader
operator|=
name|BlockReaderTestUtil
operator|.
name|getBlockReader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|lblock
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected getBlockReader to fail the first time."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected to see 'TCP reads were disabled "
operator|+
literal|"for testing' in exception "
operator|+
name|t
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TCP reads were disabled for testing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|blockReader
operator|!=
literal|null
condition|)
name|blockReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// keep findbugs happy
block|}
name|gotFailureLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|shouldRetryLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Second time should succeed.
try|try
block|{
name|blockReader
operator|=
name|BlockReaderTestUtil
operator|.
name|getBlockReader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|lblock
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error trying to retrieve a block reader "
operator|+
literal|"the second time."
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|blockReader
operator|!=
literal|null
condition|)
name|blockReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"getBlockReader failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|testFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|readerRunnable
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|gotFailureLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|replicaCreationShouldFail
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|shouldRetryLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|threads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that by default, reads after a failure does not go through SCR.    */
annotation|@
name|Test
DECL|method|testShortCircuitCacheUnbufferDefault ()
specifier|public
name|void
name|testShortCircuitCacheUnbufferDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|testShortCircuitCacheUnbufferWithDisableInterval
argument_list|(
name|DFS_DOMAIN_SOCKET_DISABLE_INTERVAL_SECOND_DEFAULT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the case where if we disable the cache in    * {@link org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory}, reads    * after a failure still goes through SCR.    */
annotation|@
name|Test
DECL|method|testShortCircuitCacheUnbufferDisabled ()
specifier|public
name|void
name|testShortCircuitCacheUnbufferDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|testShortCircuitCacheUnbufferWithDisableInterval
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortCircuitCacheUnbufferWithDisableInterval ( final long interval, final boolean disabled)
specifier|private
name|void
name|testShortCircuitCacheUnbufferWithDisableInterval
parameter_list|(
specifier|final
name|long
name|interval
parameter_list|,
specifier|final
name|boolean
name|disabled
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testName
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|BlockReaderTestUtil
operator|.
name|enableBlockReaderFactoryTracing
argument_list|()
expr_stmt|;
try|try
init|(
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
init|)
block|{
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
name|testName
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
name|testName
operator|+
name|interval
operator|+
name|disabled
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFS_DOMAIN_SOCKET_DISABLE_INTERVAL_SECOND_KEY
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MiniDFSCluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|MiniDFSCluster
name|cluster
init|=
name|builder
operator|.
name|build
argument_list|()
init|;
name|DistributedFileSystem
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
literal|"/test_file"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|testFileLen
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|seed
init|=
literal|0xFADED
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|testFile
argument_list|,
name|testFileLen
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|expected
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|seed
argument_list|,
name|testFileLen
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
operator|.
name|getReplicaInfoMapSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|testFileLen
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|testFileLen
argument_list|)
expr_stmt|;
name|validateReadResult
argument_list|(
name|dfs
argument_list|,
name|expected
argument_list|,
name|buf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Set cache size to 0 so the replica marked evictable by unbuffer
comment|// will be purged immediately.
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
operator|.
name|setMaxTotalSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unbuffering"
argument_list|)
expr_stmt|;
name|in
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
operator|.
name|getReplicaInfoMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|dfs
argument_list|,
name|testFile
argument_list|,
literal|"append more data"
argument_list|)
expr_stmt|;
comment|// This read will force a new replica read via TCP.
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|testFileLen
argument_list|)
expr_stmt|;
name|validateReadResult
argument_list|(
name|dfs
argument_list|,
name|expected
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading {} again."
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|testFile
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|testFileLen
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|testFileLen
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedMapSize
init|=
name|disabled
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|validateReadResult
argument_list|(
name|dfs
argument_list|,
name|expected
argument_list|,
name|buf
argument_list|,
name|expectedMapSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|validateReadResult (final DistributedFileSystem dfs, final byte[] expected, final byte[] actual, final int expectedScrRepMapSize)
specifier|private
name|void
name|validateReadResult
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
specifier|final
name|byte
index|[]
name|expected
parameter_list|,
specifier|final
name|byte
index|[]
name|actual
parameter_list|,
specifier|final
name|int
name|expectedScrRepMapSize
parameter_list|)
block|{
name|Assert
operator|.
name|assertThat
argument_list|(
name|expected
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedScrRepMapSize
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
operator|.
name|getReplicaInfoMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a client which supports short-circuit reads using    * shared memory can fall back to not using shared memory when    * the server doesn't support it.    */
annotation|@
name|Test
DECL|method|testShortCircuitReadFromServerWithoutShm ()
specifier|public
name|void
name|testShortCircuitReadFromServerWithoutShm
parameter_list|()
throws|throws
name|Exception
block|{
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|clientConf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testShortCircuitReadFromServerWithoutShm"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|serverConf
operator|.
name|setInt
argument_list|(
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testShortCircuitReadFromServerWithoutShm_clientContext"
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADEC
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeInfo
name|datanode
init|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|PerDatanodeVisitorInfo
argument_list|>
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PerDatanodeVisitorInfo
name|vinfo
init|=
name|info
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vinfo
operator|.
name|disabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|vinfo
operator|.
name|full
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|vinfo
operator|.
name|notFull
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that a client which does not support short-circuit reads using    * shared memory can talk with a server which supports it.    */
annotation|@
name|Test
DECL|method|testShortCircuitReadFromClientWithoutShm ()
specifier|public
name|void
name|testShortCircuitReadFromClientWithoutShm
parameter_list|()
throws|throws
name|Exception
block|{
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|clientConf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testShortCircuitReadWithoutShm"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|clientConf
operator|.
name|setInt
argument_list|(
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testShortCircuitReadFromClientWithoutShm_clientContext"
argument_list|)
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADEC
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test shutting down the ShortCircuitCache while there are things in it.    */
annotation|@
name|Test
DECL|method|testShortCircuitCacheShutdown ()
specifier|public
name|void
name|testShortCircuitCacheShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testShortCircuitCacheShutdown"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
literal|"testShortCircuitCacheShutdown"
argument_list|)
expr_stmt|;
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4000
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADEC
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|byte
name|contents
index|[]
init|=
name|DFSTestUtil
operator|.
name|readFileBuffer
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientContext
argument_list|()
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|getDfsClientShmManager
argument_list|()
operator|.
name|getDomainSocketWatcher
argument_list|()
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When an InterruptedException is sent to a thread calling    * FileChannel#read, the FileChannel is immediately closed and the    * thread gets an exception.  This effectively means that we might have    * someone asynchronously calling close() on the file descriptors we use    * in BlockReaderLocal.  So when unreferencing a ShortCircuitReplica in    * ShortCircuitCache#unref, we should check if the FileChannel objects    * are still open.  If not, we should purge the replica to avoid giving    * it out to any future readers.    *    * This is a regression test for HDFS-6227: Short circuit read failed    * due to ClosedChannelException.    *    * Note that you may still get ClosedChannelException errors if two threads    * are reading from the same replica and an InterruptedException is delivered    * to one of them.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testPurgingClosedReplicas ()
specifier|public
name|void
name|testPurgingClosedReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockReaderTestUtil
operator|.
name|enableBlockReaderFactoryTracing
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|replicasCreated
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|testFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DFSInputStream
operator|.
name|tcpReadsDisabledForTesting
operator|=
literal|true
expr_stmt|;
name|BlockReaderFactory
operator|.
name|createShortCircuitReplicaInfoCallback
operator|=
operator|new
name|ShortCircuitCache
operator|.
name|ShortCircuitReplicaCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ShortCircuitReplicaInfo
name|createShortCircuitReplicaInfo
parameter_list|()
block|{
name|replicasCreated
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|TemporarySocketDirectory
name|sockDir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createShortCircuitConf
argument_list|(
literal|"testPurgingClosedReplicas"
argument_list|,
name|sockDir
argument_list|)
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TEST_FILE
init|=
literal|"/test_file"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LEN
init|=
literal|4095
decl_stmt|;
specifier|final
name|int
name|SEED
init|=
literal|0xFADE0
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_FILE
argument_list|)
argument_list|,
name|TEST_FILE_LEN
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
specifier|final
name|Semaphore
name|sem
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|TEST_FILE
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlock
name|lblock
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// first block
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LEN
index|]
decl_stmt|;
name|Runnable
name|readerRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|BlockReader
name|blockReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockReader
operator|=
name|BlockReaderTestUtil
operator|.
name|getBlockReader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|lblock
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
name|blockReader
operator|.
name|readAll
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sem
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClosedByInterruptException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"got the expected ClosedByInterruptException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
break|break;
block|}
finally|finally
block|{
if|if
condition|(
name|blockReader
operator|!=
literal|null
condition|)
name|blockReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"read another "
operator|+
name|TEST_FILE_LEN
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"getBlockReader failure"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|testFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|readerRunnable
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// While the thread is reading, send it interrupts.
comment|// These should trigger a ClosedChannelException.
while|while
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|sem
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|sem
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|testFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should be able to read from the file without
comment|// getting a ClosedChannelException.
name|BlockReader
name|blockReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockReader
operator|=
name|BlockReaderTestUtil
operator|.
name|getBlockReader
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|lblock
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
name|blockReader
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|blockReader
operator|!=
literal|null
condition|)
name|blockReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|byte
name|expected
index|[]
init|=
name|DFSTestUtil
operator|.
name|calculateFileContentsFromSeed
argument_list|(
name|SEED
argument_list|,
name|TEST_FILE_LEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|buf
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another ShortCircuitReplica object should have been created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replicasCreated
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

