begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicyDefault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicyRackFaultTolerant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test erasure coding block placement with skewed # nodes per rack.  */
end_comment

begin_class
DECL|class|TestErasureCodingMultipleRacks
specifier|public
class|class
name|TestErasureCodingMultipleRacks
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestErasureCodingMultipleRacks
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockPlacementPolicy
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockPlacementPolicyDefault
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|BlockPlacementPolicyRackFaultTolerant
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|NetworkTopology
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|method|getPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getPolicy
parameter_list|()
block|{
return|return
name|StripedFileTestUtil
operator|.
name|getDefaultECPolicy
argument_list|()
return|;
block|}
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|ecPolicy
specifier|private
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|ecPolicy
operator|=
name|getPolicy
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// disable load consideration to test placement only.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_NAMENODE_REDUNDANCY_CONSIDERLOAD_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup cluster with desired number of DN, racks, and specified number of    * rack that only has 1 DN. Other racks will be evenly setup with the number    * of DNs.    *<p>    * This is not done as a {@link Before}, so test cases can setup differently.    *    * @param numDatanodes number of total Datanodes.    * @param numRacks number of total racks    * @param numSingleDnRacks number of racks that only has 1 DN    * @throws Exception    */
DECL|method|setupCluster (final int numDatanodes, final int numRacks, final int numSingleDnRacks)
specifier|public
name|void
name|setupCluster
parameter_list|(
specifier|final
name|int
name|numDatanodes
parameter_list|,
specifier|final
name|int
name|numRacks
parameter_list|,
specifier|final
name|int
name|numSingleDnRacks
parameter_list|)
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|DFSTestUtil
operator|.
name|setupCluster
argument_list|(
name|conf
argument_list|,
name|numDatanodes
argument_list|,
name|numRacks
argument_list|,
name|numSingleDnRacks
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setErasureCodingPolicy
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Extreme case.
annotation|@
name|Test
DECL|method|testSkewedRack1 ()
specifier|public
name|void
name|testSkewedRack1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dataUnits
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parityUnits
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|setupCluster
argument_list|(
name|dataUnits
operator|+
name|parityUnits
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|filesize
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
name|filesize
index|]
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|blocks
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|,
name|blocks
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// 1 rack has many nodes, other racks have single node. Extreme case.
annotation|@
name|Test
DECL|method|testSkewedRack2 ()
specifier|public
name|void
name|testSkewedRack2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dataUnits
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parityUnits
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|setupCluster
argument_list|(
name|dataUnits
operator|+
name|parityUnits
operator|*
literal|2
argument_list|,
name|dataUnits
argument_list|,
name|dataUnits
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|filesize
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
name|filesize
index|]
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|blocks
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|,
name|blocks
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// 2 racks have sufficient nodes, other racks has 1. Should be able to
comment|// tolerate 1 rack failure.
annotation|@
name|Test
DECL|method|testSkewedRack3 ()
specifier|public
name|void
name|testSkewedRack3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|dataUnits
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|parityUnits
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
comment|// Create enough extra DNs on the 2 racks to test even placement.
comment|// Desired placement is parityUnits replicas on the 2 racks, and 1 replica
comment|// on the rest of the racks (which only have 1 DN)
name|int
name|numRacks
init|=
name|dataUnits
operator|-
name|parityUnits
operator|+
literal|2
decl_stmt|;
name|setupCluster
argument_list|(
name|dataUnits
operator|+
name|parityUnits
operator|*
literal|4
argument_list|,
name|numRacks
argument_list|,
name|dataUnits
operator|-
name|parityUnits
argument_list|)
expr_stmt|;
specifier|final
name|int
name|filesize
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contents
init|=
operator|new
name|byte
index|[
name|filesize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
operator|+
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|extendedBlock
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
decl_stmt|;
comment|// Wait for replication to finish before testing
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
name|cluster
argument_list|,
name|extendedBlock
argument_list|,
name|numRacks
argument_list|,
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|blocks
init|=
name|dfs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|,
name|blocks
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertRackFailureTolerated
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|getTopologyPaths
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verifies that no more than numParityUnits is placed on a rack.
DECL|method|assertRackFailureTolerated (final String[] topologies)
specifier|private
name|void
name|assertRackFailureTolerated
parameter_list|(
specifier|final
name|String
index|[]
name|topologies
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|racksCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|topologies
control|)
block|{
specifier|final
name|Integer
name|count
init|=
name|racksCount
operator|.
name|get
argument_list|(
name|getRackName
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|racksCount
operator|.
name|put
argument_list|(
name|getRackName
argument_list|(
name|t
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|racksCount
operator|.
name|put
argument_list|(
name|getRackName
argument_list|(
name|t
argument_list|)
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Rack count map is: {}"
argument_list|,
name|racksCount
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|count
range|:
name|racksCount
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|count
operator|<=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRackName (final String topology)
specifier|private
name|String
name|getRackName
parameter_list|(
specifier|final
name|String
name|topology
parameter_list|)
block|{
assert|assert
name|topology
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
assert|;
return|return
name|topology
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|topology
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

