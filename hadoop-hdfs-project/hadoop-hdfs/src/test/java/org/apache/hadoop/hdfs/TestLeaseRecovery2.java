begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AlreadyBeingCreatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_class
DECL|class|TestLeaseRecovery2
specifier|public
class|class
name|TestLeaseRecovery2
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLeaseRecovery2
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|DataNode
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|LeaseManager
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|FSNamesystem
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
block|}
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
specifier|private
name|long
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|FILE_SIZE
specifier|static
specifier|final
specifier|private
name|int
name|FILE_SIZE
init|=
operator|(
name|int
operator|)
name|BLOCK_SIZE
operator|*
literal|2
decl_stmt|;
DECL|field|REPLICATION_NUM
specifier|static
specifier|final
name|short
name|REPLICATION_NUM
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
DECL|field|buffer
specifier|static
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
DECL|field|fakeUsername
specifier|static
specifier|private
specifier|final
name|String
name|fakeUsername
init|=
literal|"fakeUser1"
decl_stmt|;
DECL|field|fakeGroup
specifier|static
specifier|private
specifier|final
name|String
name|fakeGroup
init|=
literal|"supergroup"
decl_stmt|;
DECL|field|cluster
specifier|static
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|static
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|conf
specifier|final
specifier|static
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|BUF_SIZE
specifier|final
specifier|static
specifier|private
name|int
name|BUF_SIZE
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
DECL|field|SHORT_LEASE_PERIOD
specifier|final
specifier|static
specifier|private
name|long
name|SHORT_LEASE_PERIOD
init|=
literal|1000L
decl_stmt|;
DECL|field|LONG_LEASE_PERIOD
specifier|final
specifier|static
specifier|private
name|long
name|LONG_LEASE_PERIOD
init|=
literal|60
operator|*
literal|60
operator|*
name|SHORT_LEASE_PERIOD
decl_stmt|;
comment|/** start a dfs cluster    *     * @throws IOException    */
annotation|@
name|Before
DECL|method|startUp ()
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|5
argument_list|)
operator|.
name|checkExitOnShutdown
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * stop the cluster    * @throws IOException    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the NameNode's revoke lease on current lease holder function.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testImmediateRecoveryOfLease ()
specifier|public
name|void
name|testImmediateRecoveryOfLease
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create a file
comment|// write bytes into the file.
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|int
name|size
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
decl_stmt|;
name|Path
name|filepath
init|=
name|createFile
argument_list|(
literal|"/immediateRecoverLease-shortlease"
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// set the soft limit to be 1 second so that the
comment|// namenode triggers lease recovery on next attempt to write-for-open.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|SHORT_LEASE_PERIOD
argument_list|,
name|LONG_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|recoverLeaseUsingCreate
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
name|verifyFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|actual
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|//test recoverLease
comment|// set the soft limit to be 1 hour but recoverLease should
comment|// close the file immediately
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LONG_LEASE_PERIOD
argument_list|,
name|LONG_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|size
operator|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|filepath
operator|=
name|createFile
argument_list|(
literal|"/immediateRecoverLease-longlease"
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test recoverLease from a different client
name|recoverLease
argument_list|(
name|filepath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|actual
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// test recoverlease from the same client
name|size
operator|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
expr_stmt|;
name|filepath
operator|=
name|createFile
argument_list|(
literal|"/immediateRecoverLease-sameclient"
argument_list|,
name|size
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// create another file using the same client
name|Path
name|filepath1
init|=
operator|new
name|Path
argument_list|(
name|filepath
operator|.
name|toString
argument_list|()
operator|+
name|AppendTestUtil
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepath1
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
comment|// recover the first file
name|recoverLease
argument_list|(
name|filepath
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
name|verifyFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|actual
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// continue to write to the second file
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyFile
argument_list|(
name|dfs
argument_list|,
name|filepath1
argument_list|,
name|actual
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWhileRecoverLease ()
specifier|public
name|void
name|testCloseWhileRecoverLease
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test recoverLease
comment|// set the soft limit to be 1 hour but recoverLease should
comment|// close the file immediately
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LONG_LEASE_PERIOD
argument_list|,
name|LONG_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|String
name|filestr
init|=
literal|"/testCloseWhileRecoverLease"
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"filestr="
operator|+
name|filestr
argument_list|)
expr_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Pause DN block report.
comment|// Let client recover lease, and then close the file, and then let DN
comment|// report blocks.
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dataNodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"pause IBR"
argument_list|)
expr_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|pauseIBR
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"recover lease"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|recoverLease
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
try|try
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"close() should fail because the file is under recovery."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"whereas it is under recovery"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"trigger heartbeats"
argument_list|)
expr_stmt|;
comment|// resume DN block report
for|for
control|(
name|DataNode
name|dn
range|:
name|dataNodes
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeaseRecoverByAnotherUser ()
specifier|public
name|void
name|testLeaseRecoverByAnotherUser
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|FILE_SIZE
index|]
decl_stmt|;
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|SHORT_LEASE_PERIOD
argument_list|,
name|LONG_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|Path
name|filepath
init|=
name|createFile
argument_list|(
literal|"/immediateRecoverLease-x"
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|recoverLeaseUsingCreate2
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
name|verifyFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (final String filestr, final int size, final boolean triggerLeaseRenewerInterrupt)
specifier|private
name|Path
name|createFile
parameter_list|(
specifier|final
name|String
name|filestr
parameter_list|,
specifier|final
name|int
name|size
parameter_list|,
specifier|final
name|boolean
name|triggerLeaseRenewerInterrupt
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"filestr="
operator|+
name|filestr
argument_list|)
expr_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
if|if
condition|(
name|triggerLeaseRenewerInterrupt
condition|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"leasechecker.interruptAndJoin()"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|interruptAndJoin
argument_list|()
expr_stmt|;
block|}
return|return
name|filepath
return|;
block|}
DECL|method|recoverLease (Path filepath, DistributedFileSystem dfs)
specifier|private
name|void
name|recoverLease
parameter_list|(
name|Path
name|filepath
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dfs
operator|==
literal|null
condition|)
block|{
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|getFSAsAnotherUser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|dfs
operator|.
name|recoverLease
argument_list|(
name|filepath
argument_list|)
condition|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep "
operator|+
literal|5000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFSAsAnotherUser (final Configuration c)
specifier|private
name|FileSystem
name|getFSAsAnotherUser
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|c
argument_list|)
argument_list|,
name|c
argument_list|,
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|fakeUsername
argument_list|,
operator|new
name|String
index|[]
block|{
name|fakeGroup
block|}
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|recoverLeaseUsingCreate (Path filepath)
specifier|private
name|void
name|recoverLeaseUsingCreate
parameter_list|(
name|Path
name|filepath
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|FileSystem
name|dfs2
init|=
name|getFSAsAnotherUser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"i="
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs2
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|false
argument_list|,
name|BUF_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creation of an existing file should never succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
return|return;
comment|// expected
block|}
catch|catch
parameter_list|(
name|AlreadyBeingCreatedException
name|e
parameter_list|)
block|{
return|return;
comment|// expected
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"UNEXPECTED "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep "
operator|+
literal|5000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
name|fail
argument_list|(
literal|"recoverLeaseUsingCreate failed"
argument_list|)
expr_stmt|;
block|}
DECL|method|recoverLeaseUsingCreate2 (Path filepath)
specifier|private
name|void
name|recoverLeaseUsingCreate2
parameter_list|(
name|Path
name|filepath
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|dfs2
init|=
name|getFSAsAnotherUser
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfsx
init|=
operator|(
name|DistributedFileSystem
operator|)
name|dfs2
decl_stmt|;
comment|//create file using dfsx
name|Path
name|filepath2
init|=
operator|new
name|Path
argument_list|(
literal|"/immediateRecoverLease-x2"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfsx
operator|.
name|create
argument_list|(
name|filepath2
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfsx
operator|.
name|dfs
operator|.
name|exists
argument_list|(
literal|"/immediateRecoverLease-x2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|dfsx
operator|.
name|append
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFile (FileSystem dfs, Path filepath, byte[] actual, int size)
specifier|private
name|void
name|verifyFile
parameter_list|(
name|FileSystem
name|dfs
parameter_list|,
name|Path
name|filepath
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Lease for file "
operator|+
name|filepath
operator|+
literal|" is recovered. "
operator|+
literal|"Validating its contents now..."
argument_list|)
expr_stmt|;
comment|// verify that file-size matches
name|assertTrue
argument_list|(
literal|"File should be "
operator|+
name|size
operator|+
literal|" bytes, but is actually "
operator|+
literal|" found to be "
operator|+
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|filepath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|" bytes"
argument_list|,
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|filepath
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
name|size
argument_list|)
expr_stmt|;
comment|// verify that there is enough data to read.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File size is good. Now validating sizes from datanodes..."
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|stmin
init|=
name|dfs
operator|.
name|open
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
name|stmin
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|stmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test makes the client does not renew its lease and also    * set the hard lease expiration period to be short 1s. Thus triggering    * lease expiration to happen while the client is still alive.    *     * The test makes sure that the lease recovery completes and the client    * fails if it continues to write to the file.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testHardLeaseRecovery ()
specifier|public
name|void
name|testHardLeaseRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create a file
name|String
name|filestr
init|=
literal|"/hardLeaseRecovery"
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"filestr="
operator|+
name|filestr
argument_list|)
expr_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
comment|// write bytes into the file.
name|int
name|size
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// kill the lease renewal thread
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"leasechecker.interruptAndJoin()"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|interruptAndJoin
argument_list|()
expr_stmt|;
comment|// set the hard limit to be 1 second
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LONG_LEASE_PERIOD
argument_list|,
name|SHORT_LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// wait for lease recovery to complete
name|LocatedBlocks
name|locatedBlocks
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SHORT_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|locatedBlocks
operator|=
name|dfs
operator|.
name|dfs
operator|.
name|getLocatedBlocks
argument_list|(
name|filestr
argument_list|,
literal|0L
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|locatedBlocks
operator|.
name|isUnderConstruction
argument_list|()
condition|)
do|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|locatedBlocks
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure that the writer thread gets killed
try|try
block|{
name|stm
operator|.
name|write
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Writer thread should have been killed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// verify data
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"File size is good. Now validating sizes from datanodes..."
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|size
argument_list|,
name|buffer
argument_list|,
name|filestr
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test makes the client does not renew its lease and also    * set the soft lease expiration period to be short 1s. Thus triggering    * soft lease expiration to happen immediately by having another client    * trying to create the same file.    *     * The test makes sure that the lease recovery completes.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testSoftLeaseRecovery ()
specifier|public
name|void
name|testSoftLeaseRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|u2g_map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|u2g_map
operator|.
name|put
argument_list|(
name|fakeUsername
argument_list|,
operator|new
name|String
index|[]
block|{
name|fakeGroup
block|}
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|updateConfWithFakeGroupMapping
argument_list|(
name|conf
argument_list|,
name|u2g_map
argument_list|)
expr_stmt|;
comment|// Reset default lease periods
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|HdfsConstants
operator|.
name|LEASE_SOFTLIMIT_PERIOD
argument_list|,
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
argument_list|)
expr_stmt|;
comment|//create a file
comment|// create a random file name
name|String
name|filestr
init|=
literal|"/foo"
operator|+
name|AppendTestUtil
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"filestr="
operator|+
name|filestr
argument_list|)
expr_stmt|;
name|Path
name|filepath
init|=
operator|new
name|Path
argument_list|(
name|filestr
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|filestr
argument_list|)
argument_list|)
expr_stmt|;
comment|// write random number of bytes into it.
name|int
name|size
init|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
argument_list|)
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"leasechecker.interruptAndJoin()"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|interruptAndJoin
argument_list|()
expr_stmt|;
comment|// set the soft limit to be 1 second so that the
comment|// namenode triggers lease recovery on next attempt to write-for-open.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|SHORT_LEASE_PERIOD
argument_list|,
name|LONG_LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// try to re-open the file before closing the previous handle. This
comment|// should fail but will trigger lease recovery.
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|fakeUsername
argument_list|,
operator|new
name|String
index|[]
block|{
name|fakeGroup
block|}
argument_list|)
decl_stmt|;
name|FileSystem
name|dfs2
init|=
name|DFSTestUtil
operator|.
name|getFileSystemAs
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
operator|!
name|done
condition|;
name|i
operator|++
control|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"i="
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|dfs2
operator|.
name|create
argument_list|(
name|filepath
argument_list|,
literal|false
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creation of an existing file should never succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|ex
parameter_list|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyBeingCreatedException
name|ex
parameter_list|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"GOOD! got "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"UNEXPECTED IOException"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep "
operator|+
literal|5000
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
name|assertTrue
argument_list|(
name|done
argument_list|)
expr_stmt|;
block|}
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Lease for file "
operator|+
name|filepath
operator|+
literal|" is recovered. "
operator|+
literal|"Validating its contents now..."
argument_list|)
expr_stmt|;
comment|// verify that file-size matches
name|long
name|fileSize
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|filepath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File should be "
operator|+
name|size
operator|+
literal|" bytes, but is actually "
operator|+
literal|" found to be "
operator|+
name|fileSize
operator|+
literal|" bytes"
argument_list|,
name|fileSize
operator|==
name|size
argument_list|)
expr_stmt|;
comment|// verify data
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"File size is good. "
operator|+
literal|"Now validating data and sizes from datanodes..."
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|dfs
argument_list|,
name|filepath
argument_list|,
name|size
argument_list|,
name|buffer
argument_list|,
name|filestr
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test makes it so the client does not renew its lease and also    * set the hard lease expiration period to be short, thus triggering    * lease expiration to happen while the client is still alive. The test    * also causes the NN to restart after lease recovery has begun, but before    * the DNs have completed the blocks. This test verifies that when the NN    * comes back up, the client no longer holds the lease.    *     * The test makes sure that the lease recovery completes and the client    * fails if it continues to write to the file, even after NN restart.    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHardLeaseRecoveryAfterNameNodeRestart ()
specifier|public
name|void
name|testHardLeaseRecoveryAfterNameNodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|hardLeaseRecoveryRestartHelper
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHardLeaseRecoveryAfterNameNodeRestart2 ()
specifier|public
name|void
name|testHardLeaseRecoveryAfterNameNodeRestart2
parameter_list|()
throws|throws
name|Exception
block|{
name|hardLeaseRecoveryRestartHelper
argument_list|(
literal|false
argument_list|,
literal|1535
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHardLeaseRecoveryWithRenameAfterNameNodeRestart ()
specifier|public
name|void
name|testHardLeaseRecoveryWithRenameAfterNameNodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|hardLeaseRecoveryRestartHelper
argument_list|(
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|hardLeaseRecoveryRestartHelper (boolean doRename, int size)
specifier|public
name|void
name|hardLeaseRecoveryRestartHelper
parameter_list|(
name|boolean
name|doRename
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|size
operator|=
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|FILE_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//create a file
name|String
name|fileStr
init|=
literal|"/hardLeaseRecovery"
decl_stmt|;
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"filestr="
operator|+
name|fileStr
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileStr
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|dfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|,
name|BUF_SIZE
argument_list|,
name|REPLICATION_NUM
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|dfs
operator|.
name|exists
argument_list|(
name|fileStr
argument_list|)
argument_list|)
expr_stmt|;
comment|// write bytes into the file.
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"size="
operator|+
name|size
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|String
name|originalLeaseHolder
init|=
name|NameNodeAdapter
operator|.
name|getLeaseHolderForPath
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|fileStr
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"original lease holder should not be the NN"
argument_list|,
name|originalLeaseHolder
operator|.
name|startsWith
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LEASE_HOLDER
argument_list|)
argument_list|)
expr_stmt|;
comment|// hflush file
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"hflush"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// check visible length
specifier|final
name|HdfsDataInputStream
name|in
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|dfs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|size
argument_list|,
name|in
operator|.
name|getVisibleLength
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|doRename
condition|)
block|{
name|fileStr
operator|+=
literal|".renamed"
expr_stmt|;
name|Path
name|renamedPath
init|=
operator|new
name|Path
argument_list|(
name|fileStr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|rename
argument_list|(
name|filePath
argument_list|,
name|renamedPath
argument_list|)
argument_list|)
expr_stmt|;
name|filePath
operator|=
name|renamedPath
expr_stmt|;
block|}
comment|// kill the lease renewal thread
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"leasechecker.interruptAndJoin()"
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
operator|.
name|interruptAndJoin
argument_list|()
expr_stmt|;
comment|// Make sure the DNs don't send a heartbeat for a while, so the blocks
comment|// won't actually get completed during lease recovery.
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// set the hard limit to be 1 second
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LONG_LEASE_PERIOD
argument_list|,
name|SHORT_LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// Normally, the in-progress edit log would be finalized by
comment|// FSEditLog#endCurrentLogSegment.  For testing purposes, we
comment|// disable that here.
name|FSEditLog
name|spyLog
init|=
name|spy
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyLog
argument_list|)
operator|.
name|endCurrentLogSegment
argument_list|(
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|setEditLogForTesting
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|spyLog
argument_list|)
expr_stmt|;
comment|// Make sure lease recovery begins.
specifier|final
name|String
name|path
init|=
name|fileStr
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|String
name|holder
init|=
name|NameNodeAdapter
operator|.
name|getLeaseHolderForPath
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|holder
operator|!=
literal|null
operator|&&
name|holder
operator|.
name|startsWith
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LEASE_HOLDER
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|(
name|int
operator|)
name|SHORT_LEASE_PERIOD
argument_list|,
operator|(
name|int
operator|)
name|SHORT_LEASE_PERIOD
operator|*
literal|20
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkLease
argument_list|(
name|fileStr
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// Let the DNs send heartbeats again.
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// set the hard limit to be 1 second, to initiate lease recovery.
name|cluster
operator|.
name|setLeasePeriod
argument_list|(
name|LONG_LEASE_PERIOD
argument_list|,
name|SHORT_LEASE_PERIOD
argument_list|)
expr_stmt|;
comment|// wait for lease recovery to complete
name|LocatedBlocks
name|locatedBlocks
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SHORT_LEASE_PERIOD
argument_list|)
expr_stmt|;
name|locatedBlocks
operator|=
name|dfs
operator|.
name|dfs
operator|.
name|getLocatedBlocks
argument_list|(
name|fileStr
argument_list|,
literal|0L
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|locatedBlocks
operator|.
name|isUnderConstruction
argument_list|()
condition|)
do|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|locatedBlocks
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure that the client can't write data anymore.
try|try
block|{
name|stm
operator|.
name|write
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
name|stm
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to flush after we've lost the lease"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expceted exception on write/hflush"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to close after we've lost the lease"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception on close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// verify data
name|AppendTestUtil
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"File size is good. Now validating sizes from datanodes..."
argument_list|)
expr_stmt|;
name|AppendTestUtil
operator|.
name|checkFullFile
argument_list|(
name|dfs
argument_list|,
name|filePath
argument_list|,
name|size
argument_list|,
name|buffer
argument_list|,
name|fileStr
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLease (String f, int size)
specifier|static
name|void
name|checkLease
parameter_list|(
name|String
name|f
parameter_list|,
name|int
name|size
parameter_list|)
block|{
specifier|final
name|String
name|holder
init|=
name|NameNodeAdapter
operator|.
name|getLeaseHolderForPath
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"lease holder should null, file is closed"
argument_list|,
literal|null
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"lease holder should now be the NN"
argument_list|,
name|holder
operator|.
name|startsWith
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LEASE_HOLDER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

