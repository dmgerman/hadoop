begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|MD5FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFSImage
specifier|public
class|class
name|TestFSImage
block|{
DECL|field|HADOOP_2_7_ZER0_BLOCK_SIZE_TGZ
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_2_7_ZER0_BLOCK_SIZE_TGZ
init|=
literal|"image-with-zero-block-size.tar.gz"
decl_stmt|;
annotation|@
name|Test
DECL|method|testPersist ()
specifier|public
name|void
name|testPersist
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|testPersistHelper
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompression ()
specifier|public
name|void
name|testCompression
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_COMPRESSION_CODEC_KEY
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|testPersistHelper
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testPersistHelper (Configuration conf)
specifier|private
name|void
name|testPersistHelper
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/abc/def"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
comment|// create an empty file f1
name|fs
operator|.
name|create
argument_list|(
name|file1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create an under-construction file f2
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
comment|// checkpoint
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|isDirectory
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check internals of file2
name|INodeFile
name|file2Node
init|=
name|fsn
operator|.
name|dir
operator|.
name|getINode4Write
argument_list|(
name|file2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
operator|.
name|length
argument_list|()
argument_list|,
name|file2Node
operator|.
name|computeFileSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file2Node
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|BlockInfo
index|[]
name|blks
init|=
name|file2Node
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getBlockUCState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check lease manager
name|Lease
name|lease
init|=
name|fsn
operator|.
name|leaseManager
operator|.
name|getLease
argument_list|(
name|file2Node
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lease
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSaveAndLoadStripedINodeFile (FSNamesystem fsn, Configuration conf, boolean isUC)
specifier|private
name|void
name|testSaveAndLoadStripedINodeFile
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isUC
parameter_list|)
throws|throws
name|IOException
block|{
comment|// contruct a INode with StripedBlock for saving and loading
name|fsn
operator|.
name|createErasureCodingZone
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|id
init|=
literal|123456789
decl_stmt|;
name|byte
index|[]
name|name
init|=
literal|"testSaveAndLoadInodeFile_testfile"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|PermissionStatus
name|permissionStatus
init|=
operator|new
name|PermissionStatus
argument_list|(
literal|"testuser_a"
argument_list|,
literal|"testuser_groups"
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0x755
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mtime
init|=
literal|1426222916
operator|-
literal|3600
decl_stmt|;
name|long
name|atime
init|=
literal|1426222916
decl_stmt|;
name|BlockInfoContiguous
index|[]
name|blks
init|=
operator|new
name|BlockInfoContiguous
index|[
literal|0
index|]
decl_stmt|;
name|short
name|replication
init|=
literal|3
decl_stmt|;
name|long
name|preferredBlockSize
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|INodeFile
name|file
init|=
operator|new
name|INodeFile
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|permissionStatus
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|blks
argument_list|,
name|replication
argument_list|,
name|preferredBlockSize
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|file
operator|.
name|addStripedBlocksFeature
argument_list|()
expr_stmt|;
comment|//construct StripedBlocks for the INode
name|BlockInfoStriped
index|[]
name|stripedBlks
init|=
operator|new
name|BlockInfoStriped
index|[
literal|3
index|]
decl_stmt|;
name|long
name|stripedBlkId
init|=
literal|10000001
decl_stmt|;
name|long
name|timestamp
init|=
name|mtime
operator|+
literal|3600
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripedBlks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stripedBlks
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfoStriped
argument_list|(
operator|new
name|Block
argument_list|(
name|stripedBlkId
operator|+
name|i
argument_list|,
name|preferredBlockSize
argument_list|,
name|timestamp
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|file
operator|.
name|getStripedBlocksFeature
argument_list|()
operator|.
name|addBlock
argument_list|(
name|stripedBlks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|client
init|=
literal|"testClient"
decl_stmt|;
specifier|final
name|String
name|clientMachine
init|=
literal|"testClientMachine"
decl_stmt|;
specifier|final
name|String
name|path
init|=
literal|"testUnderConstructionPath"
decl_stmt|;
comment|//save the INode to byte array
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bs
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUC
condition|)
block|{
name|file
operator|.
name|toUnderConstruction
argument_list|(
name|client
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeUnderConstruction
argument_list|(
operator|(
name|DataOutputStream
operator|)
name|out
argument_list|,
name|file
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSImageSerialization
operator|.
name|writeINodeFile
argument_list|(
name|file
argument_list|,
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// load the INode from the byte array
name|INodeFile
name|fileByLoaded
decl_stmt|;
if|if
condition|(
name|isUC
condition|)
block|{
name|fileByLoaded
operator|=
name|FSImageSerialization
operator|.
name|readINodeUnderConstruction
argument_list|(
name|in
argument_list|,
name|fsn
argument_list|,
name|fsn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileByLoaded
operator|=
operator|(
name|INodeFile
operator|)
operator|new
name|FSImageFormat
operator|.
name|Loader
argument_list|(
name|conf
argument_list|,
name|fsn
argument_list|)
operator|.
name|loadINodeWithLocalName
argument_list|(
literal|false
argument_list|,
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|id
argument_list|,
name|fileByLoaded
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|isUC
condition|?
name|path
operator|.
name|getBytes
argument_list|()
else|:
name|name
argument_list|,
name|fileByLoaded
operator|.
name|getLocalName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|permissionStatus
operator|.
name|getUserName
argument_list|()
argument_list|,
name|fileByLoaded
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|permissionStatus
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|fileByLoaded
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|permissionStatus
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fileByLoaded
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtime
argument_list|,
name|fileByLoaded
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isUC
condition|?
name|mtime
else|:
name|atime
argument_list|,
name|fileByLoaded
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileByLoaded
operator|.
name|getContiguousBlocks
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileByLoaded
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|preferredBlockSize
argument_list|,
name|fileByLoaded
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//check the BlockInfoStriped
name|BlockInfoStriped
index|[]
name|stripedBlksByLoaded
init|=
name|fileByLoaded
operator|.
name|getStripedBlocksFeature
argument_list|()
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stripedBlksByLoaded
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|stripedBlks
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|stripedBlksByLoaded
index|[
name|i
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stripedBlks
index|[
name|i
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|stripedBlksByLoaded
index|[
name|i
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stripedBlks
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|stripedBlksByLoaded
index|[
name|i
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stripedBlks
index|[
name|i
index|]
operator|.
name|getDataBlockNum
argument_list|()
argument_list|,
name|stripedBlksByLoaded
index|[
name|i
index|]
operator|.
name|getDataBlockNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stripedBlks
index|[
name|i
index|]
operator|.
name|getParityBlockNum
argument_list|()
argument_list|,
name|stripedBlksByLoaded
index|[
name|i
index|]
operator|.
name|getParityBlockNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUC
condition|)
block|{
name|assertEquals
argument_list|(
name|client
argument_list|,
name|fileByLoaded
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clientMachine
argument_list|,
name|fileByLoaded
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientMachine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test if a INodeFile with BlockInfoStriped can be saved by    * FSImageSerialization and loaded by FSImageFormat#Loader.    */
annotation|@
name|Test
DECL|method|testSaveAndLoadStripedINodeFile ()
specifier|public
name|void
name|testSaveAndLoadStripedINodeFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|testSaveAndLoadStripedINodeFile
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test if a INodeFileUnderConstruction with BlockInfoStriped can be    * saved and loaded by FSImageSerialization    */
annotation|@
name|Test
DECL|method|testSaveAndLoadStripedINodeFileUC ()
specifier|public
name|void
name|testSaveAndLoadStripedINodeFileUC
parameter_list|()
throws|throws
name|IOException
block|{
comment|// construct a INode with StripedBlock for saving and loading
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|testSaveAndLoadStripedINodeFile
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Ensure that the digest written by the saver equals to the digest of the    * file.    */
annotation|@
name|Test
DECL|method|testDigest ()
specifier|public
name|void
name|testDigest
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|File
name|currentDir
init|=
name|FSImageTestUtil
operator|.
name|getNameNodeCurrentDirs
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|fsimage
init|=
name|FSImageTestUtil
operator|.
name|findNewestImageFile
argument_list|(
name|currentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MD5FileUtils
operator|.
name|readStoredMd5ForFile
argument_list|(
name|fsimage
argument_list|)
argument_list|,
name|MD5FileUtils
operator|.
name|computeMd5ForFile
argument_list|(
name|fsimage
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Ensure mtime and atime can be loaded from fsimage.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testLoadMtimeAtime ()
specifier|public
name|void
name|testLoadMtimeAtime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|hdfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|userDir
init|=
name|hdfs
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
literal|"/dir"
argument_list|)
decl_stmt|;
name|Path
name|link
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
literal|"/link"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|createNewFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSymlink
argument_list|(
name|file
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|mtimeFile
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|long
name|atimeFile
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|mtimeDir
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|long
name|mtimeLink
init|=
name|hdfs
operator|.
name|getFileLinkStatus
argument_list|(
name|link
argument_list|)
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|long
name|atimeLink
init|=
name|hdfs
operator|.
name|getFileLinkStatus
argument_list|(
name|link
argument_list|)
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
comment|// save namespace and restart cluster
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mtimeFile
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atimeFile
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtimeDir
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mtimeLink
argument_list|,
name|hdfs
operator|.
name|getFileLinkStatus
argument_list|(
name|link
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|atimeLink
argument_list|,
name|hdfs
operator|.
name|getFileLinkStatus
argument_list|(
name|link
argument_list|)
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * In this test case, I have created an image with a file having    * preferredblockSize = 0. We are trying to read this image (since file with    * preferredblockSize = 0 was allowed pre 2.1.0-beta version. The namenode     * after 2.6 version will not be able to read this particular file.    * See HDFS-7788 for more information.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testZeroBlockSize ()
specifier|public
name|void
name|testZeroBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|tarFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.cache.data"
argument_list|,
literal|"build/test/cache"
argument_list|)
operator|+
literal|"/"
operator|+
name|HADOOP_2_7_ZER0_BLOCK_SIZE_TGZ
decl_stmt|;
name|String
name|testDir
init|=
name|PathUtils
operator|.
name|getTestDirName
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dfsDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"image-with-zero-block-size"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete dfs directory '"
operator|+
name|dfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|unTar
argument_list|(
operator|new
name|File
argument_list|(
name|tarFile
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|dfsDir
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExists
argument_list|(
name|nameDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageDataDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|false
argument_list|)
operator|.
name|startupOption
argument_list|(
name|StartupOption
operator|.
name|UPGRADE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/zeroBlockFile"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File /tmp/zeroBlockFile doesn't exist "
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Name node didn't come up"
argument_list|,
name|cluster
operator|.
name|isNameNodeUp
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//Clean up
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dfsDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that FSImage supports BlockGroup.    */
annotation|@
name|Test
DECL|method|testSupportBlockGroup ()
specifier|public
name|void
name|testSupportBlockGroup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|short
name|GROUP_SIZE
init|=
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
operator|+
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
decl_stmt|;
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|8
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|GROUP_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|getClient
argument_list|()
operator|.
name|getNamenode
argument_list|()
operator|.
name|createErasureCodingZone
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/striped"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|DFSTestUtil
operator|.
name|generateSequentialBytes
argument_list|(
literal|0
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|fs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|fs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the information of striped blocks
name|FSNamesystem
name|fsn
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|INodeFile
name|inode
init|=
name|fsn
operator|.
name|dir
operator|.
name|getINode
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|FileWithStripedBlocksFeature
name|sb
init|=
name|inode
operator|.
name|getStripedBlocksFeature
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|BlockInfoStriped
index|[]
name|blks
init|=
name|sb
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blks
index|[
literal|0
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getDataBlockNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
argument_list|,
name|blks
index|[
literal|0
index|]
operator|.
name|getParityBlockNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

