begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * To test {@link org.apache.hadoop.hdfs.ErasureCodeBenchmarkThroughput}.  */
end_comment

begin_class
DECL|class|TestErasureCodeBenchmarkThroughput
specifier|public
class|class
name|TestErasureCodeBenchmarkThroughput
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|int
name|numDN
init|=
name|ErasureCodeBenchmarkThroughput
operator|.
name|getEcPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ErasureCodeBenchmarkThroughput
operator|.
name|getEcPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runBenchmark (String[] args)
specifier|private
specifier|static
name|void
name|runBenchmark
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|ErasureCodeBenchmarkThroughput
argument_list|(
name|fs
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNumFile (final int dataSize, final boolean isEc, int numFile)
specifier|private
specifier|static
name|void
name|verifyNumFile
parameter_list|(
specifier|final
name|int
name|dataSize
parameter_list|,
specifier|final
name|boolean
name|isEc
parameter_list|,
name|int
name|numFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|isEc
condition|?
operator|new
name|Path
argument_list|(
name|ErasureCodeBenchmarkThroughput
operator|.
name|EC_DIR
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|ErasureCodeBenchmarkThroughput
operator|.
name|REP_DIR
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|ErasureCodeBenchmarkThroughput
operator|.
name|getFilePath
argument_list|(
name|dataSize
argument_list|,
name|isEc
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numFile
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicaReadWrite ()
specifier|public
name|void
name|testReplicaReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|dataSize
init|=
literal|10
decl_stmt|;
name|Integer
name|numClient
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"write"
block|,
name|dataSize
operator|.
name|toString
argument_list|()
block|,
literal|"rep"
block|,
name|numClient
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"gen"
expr_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"read"
expr_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testECReadWrite ()
specifier|public
name|void
name|testECReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|dataSize
init|=
literal|5
decl_stmt|;
name|Integer
name|numClient
init|=
literal|5
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"write"
block|,
name|dataSize
operator|.
name|toString
argument_list|()
block|,
literal|"ec"
block|,
name|numClient
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"gen"
expr_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"read"
expr_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCleanUp ()
specifier|public
name|void
name|testCleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|dataSize
init|=
literal|5
decl_stmt|;
name|Integer
name|numClient
init|=
literal|5
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"gen"
block|,
name|dataSize
operator|.
name|toString
argument_list|()
block|,
literal|"ec"
block|,
name|numClient
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"clean"
expr_stmt|;
name|runBenchmark
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|verifyNumFile
argument_list|(
name|dataSize
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

