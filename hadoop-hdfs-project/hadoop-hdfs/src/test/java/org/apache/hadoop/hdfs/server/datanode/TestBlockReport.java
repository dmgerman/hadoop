begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AppendTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|DelayAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_comment
comment|/**  * This test simulates a variety of situations when blocks are being  * intentionally corrupted, unexpectedly modified, and so on before a block  * report is happening  */
end_comment

begin_class
DECL|class|TestBlockReport
specifier|public
class|class
name|TestBlockReport
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockReport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REPL_FACTOR
specifier|private
specifier|static
name|short
name|REPL_FACTOR
init|=
literal|1
decl_stmt|;
DECL|field|RAND_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|RAND_LIMIT
init|=
literal|2000
decl_stmt|;
DECL|field|DN_RESCAN_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|DN_RESCAN_INTERVAL
init|=
literal|5000
decl_stmt|;
DECL|field|DN_RESCAN_EXTRA_WAIT
specifier|private
specifier|static
specifier|final
name|long
name|DN_RESCAN_EXTRA_WAIT
init|=
literal|2
operator|*
name|DN_RESCAN_INTERVAL
decl_stmt|;
DECL|field|DN_N0
specifier|private
specifier|static
specifier|final
name|int
name|DN_N0
init|=
literal|0
decl_stmt|;
DECL|field|FILE_START
specifier|private
specifier|static
specifier|final
name|int
name|FILE_START
init|=
literal|0
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|NUM_BLOCKS
specifier|static
specifier|final
name|int
name|NUM_BLOCKS
init|=
literal|10
decl_stmt|;
DECL|field|FILE_SIZE
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
name|NUM_BLOCKS
operator|*
name|BLOCK_SIZE
operator|+
literal|1
decl_stmt|;
DECL|field|bpid
specifier|static
name|String
name|bpid
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|RAND_LIMIT
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
static|static
block|{
name|initLoggers
argument_list|()
expr_stmt|;
name|resetConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|startUpCluster ()
specifier|public
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|REPL_FACTOR
operator|=
literal|1
expr_stmt|;
comment|//Reset if case a test has modified the value
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPL_FACTOR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Generate a block report, optionally corrupting the generation
comment|// stamp and/or length of one block.
DECL|method|getBlockReports ( DataNode dn, String bpid, boolean corruptOneBlockGs, boolean corruptOneBlockLen)
specifier|private
specifier|static
name|StorageBlockReport
index|[]
name|getBlockReports
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|String
name|bpid
parameter_list|,
name|boolean
name|corruptOneBlockGs
parameter_list|,
name|boolean
name|corruptOneBlockLen
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BlockListAsLongs
argument_list|>
name|perVolumeBlockLists
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getBlockReports
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
comment|// Send block report
name|StorageBlockReport
index|[]
name|reports
init|=
operator|new
name|StorageBlockReport
index|[
name|perVolumeBlockLists
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|boolean
name|corruptedGs
init|=
literal|false
decl_stmt|;
name|boolean
name|corruptedLen
init|=
literal|false
decl_stmt|;
name|int
name|reportIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockListAsLongs
argument_list|>
name|kvPair
range|:
name|perVolumeBlockLists
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|storageID
init|=
name|kvPair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|BlockListAsLongs
name|blockList
init|=
name|kvPair
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Walk the list of blocks until we find one each to corrupt the
comment|// generation stamp and length, if so requested.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockList
operator|.
name|getNumberOfBlocks
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|corruptOneBlockGs
operator|&&
operator|!
name|corruptedGs
condition|)
block|{
name|blockList
operator|.
name|corruptBlockGSForTesting
argument_list|(
name|i
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupted the GS for block ID "
operator|+
name|i
argument_list|)
expr_stmt|;
name|corruptedGs
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corruptOneBlockLen
operator|&&
operator|!
name|corruptedLen
condition|)
block|{
name|blockList
operator|.
name|corruptBlockLengthForTesting
argument_list|(
name|i
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupted the length for block ID "
operator|+
name|i
argument_list|)
expr_stmt|;
name|corruptedLen
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Dummy DatanodeStorage object just for sending the block report.
name|DatanodeStorage
name|dnStorage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|storageID
argument_list|)
decl_stmt|;
name|reports
index|[
name|reportIndex
operator|++
index|]
operator|=
operator|new
name|StorageBlockReport
argument_list|(
name|dnStorage
argument_list|,
name|blockList
operator|.
name|getBlockListAsLongs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reports
return|;
block|}
comment|/**    * Test write a file, verifies and closes it. Then the length of the blocks    * are messed up and BlockReport is forced.    * The modification of blocks' length has to be ignored    *    * @throws java.io.IOException on an error    */
annotation|@
name|Test
DECL|method|blockReport_01 ()
specifier|public
name|void
name|blockReport_01
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
name|prepareForRide
argument_list|(
name|filePath
argument_list|,
name|METHOD_NAME
argument_list|,
name|FILE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of blocks allocated "
operator|+
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|oldLengths
init|=
operator|new
name|long
index|[
name|blocks
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|tempLen
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Block
name|b
init|=
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block "
operator|+
name|b
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" before\t"
operator|+
literal|"Size "
operator|+
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oldLengths
index|[
name|i
index|]
operator|=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting new length"
argument_list|)
expr_stmt|;
block|}
name|tempLen
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|tempLen
argument_list|,
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block "
operator|+
name|b
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" after\t "
operator|+
literal|"Size "
operator|+
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N0
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocksAfterReport
init|=
name|DFSTestUtil
operator|.
name|getAllBlocks
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"After mods: Number of blocks allocated "
operator|+
name|blocksAfterReport
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksAfterReport
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|b
init|=
name|blocksAfterReport
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Length of "
operator|+
name|i
operator|+
literal|"th block is incorrect"
argument_list|,
name|oldLengths
index|[
name|i
index|]
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test write a file, verifies and closes it. Then a couple of random blocks    * is removed and BlockReport is forced; the FSNamesystem is pushed to    * recalculate required DN's activities such as replications and so on.    * The number of missing and under-replicated blocks should be the same in    * case of a single-DN cluster.    *    * @throws IOException in case of errors    */
annotation|@
name|Test
DECL|method|blockReport_02 ()
specifier|public
name|void
name|blockReport_02
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test "
operator|+
name|METHOD_NAME
argument_list|)
expr_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock around with newly created blocks and delete some
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|cluster
operator|.
name|getDataDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dataDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExtendedBlock
argument_list|>
name|blocks2Remove
init|=
operator|new
name|ArrayList
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|removedIndex
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lBlocks
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|FILE_START
argument_list|,
name|FILE_SIZE
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
while|while
condition|(
name|removedIndex
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|int
name|newRemoveIndex
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|lBlocks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removedIndex
operator|.
name|contains
argument_list|(
name|newRemoveIndex
argument_list|)
condition|)
name|removedIndex
operator|.
name|add
argument_list|(
name|newRemoveIndex
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|aRemovedIndex
range|:
name|removedIndex
control|)
block|{
name|blocks2Remove
operator|.
name|add
argument_list|(
name|lBlocks
operator|.
name|get
argument_list|(
name|aRemovedIndex
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of blocks allocated "
operator|+
name|lBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DataNode
name|dn0
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N0
argument_list|)
decl_stmt|;
for|for
control|(
name|ExtendedBlock
name|b
range|:
name|blocks2Remove
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing the block "
operator|+
name|b
operator|.
name|getBlockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|f
range|:
name|findAllFiles
argument_list|(
name|dataDir
argument_list|,
operator|new
name|MyFileFilter
argument_list|(
name|b
operator|.
name|getBlockName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
control|)
block|{
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn0
argument_list|)
operator|.
name|unfinalizeBlock
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't delete "
operator|+
name|b
operator|.
name|getBlockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted file "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|waitTil
argument_list|(
name|DN_RESCAN_EXTRA_WAIT
argument_list|)
expr_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn0
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn0
argument_list|,
name|poolId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|getComputedDatanodeWork
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of MissingBlocks is found"
argument_list|,
name|blocks2Remove
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of UnderReplicatedBlocks is found"
argument_list|,
name|blocks2Remove
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test writes a file and closes it.    * Block reported is generated with a bad GS for a single block.    * Block report is forced and the check for # of corrupted blocks is performed.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|blockReport_03 ()
specifier|public
name|void
name|blockReport_03
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
name|writeFile
argument_list|(
name|METHOD_NAME
argument_list|,
name|FILE_SIZE
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N0
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DatanodeCommand
name|dnCmd
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the command: "
operator|+
name|dnCmd
argument_list|)
expr_stmt|;
block|}
name|printStats
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of corrupt blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingDeletion blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test writes a file and closes it.    * Block reported is generated with an extra block.    * Block report is forced and the check for # of pendingdeletion    * blocks is performed.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|blockReport_04 ()
specifier|public
name|void
name|blockReport_04
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|FILE_SIZE
argument_list|,
name|REPL_FACTOR
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N0
argument_list|)
decl_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
comment|// Create a bogus new block which will not be present on the namenode.
name|ExtendedBlock
name|b
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|poolId
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|1024L
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|createRbw
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DatanodeCommand
name|dnCmd
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the command: "
operator|+
name|dnCmd
argument_list|)
expr_stmt|;
block|}
name|printStats
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of corrupt blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingDeletion blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creates a file and closes it.    * The second datanode is started in the cluster.    * As soon as the replication process is completed test runs    * Block report and checks that no underreplicated blocks are left    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|blockReport_06 ()
specifier|public
name|void
name|blockReport_06
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|DN_N1
init|=
name|DN_N0
operator|+
literal|1
decl_stmt|;
name|writeFile
argument_list|(
name|METHOD_NAME
argument_list|,
name|FILE_SIZE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|startDNandWait
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N1
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of PendingReplication Blocks"
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Similar to BlockReport_03() but works with two DNs    * Test writes a file and closes it.    * The second datanode is started in the cluster.    * As soon as the replication process is completed test finds a block from    * the second DN and sets its GS to be< of original one.    * Block report is forced and the check for # of currupted blocks is performed.    * Another block is chosen and its length is set to a lesser than original.    * A check for another corrupted block is performed after yet another    * BlockReport    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|blockReport_07 ()
specifier|public
name|void
name|blockReport_07
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|DN_N1
init|=
name|DN_N0
operator|+
literal|1
decl_stmt|;
comment|// write file and start second node to be "older" than the original
name|writeFile
argument_list|(
name|METHOD_NAME
argument_list|,
name|FILE_SIZE
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|startDNandWait
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N1
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of corrupt blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingDeletion blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingReplication blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|reports
operator|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of corrupt blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingDeletion blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Wrong number of PendingReplication blocks"
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
comment|/**    * The test set the configuration parameters for a large block size and    * restarts initiated single-node cluster.    * Then it writes a file> block_size and closes it.    * The second datanode is started in the cluster.    * As soon as the replication process is started and at least one TEMPORARY    * replica is found test forces BlockReport process and checks    * if the TEMPORARY replica isn't reported on it.    * Eventually, the configuration is being restored into the original state.    *    * @throws IOException in case of an error    */
annotation|@
name|Test
DECL|method|blockReport_08 ()
specifier|public
name|void
name|blockReport_08
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|DN_N1
init|=
name|DN_N0
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|bytesChkSum
init|=
literal|1024
operator|*
literal|1000
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|bytesChkSum
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|6
operator|*
name|bytesChkSum
argument_list|)
expr_stmt|;
name|shutDownCluster
argument_list|()
expr_stmt|;
name|startUpCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
name|writeFile
argument_list|(
name|METHOD_NAME
argument_list|,
literal|12
operator|*
name|bytesChkSum
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|Block
name|bl
init|=
name|findBlock
argument_list|(
name|filePath
argument_list|,
literal|12
operator|*
name|bytesChkSum
argument_list|)
decl_stmt|;
name|BlockChecker
name|bc
init|=
operator|new
name|BlockChecker
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|bc
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForTempReplica
argument_list|(
name|bl
argument_list|,
name|DN_N1
argument_list|)
expr_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N1
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|report
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of PendingReplication blocks"
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bc
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{ }
block|}
finally|finally
block|{
name|resetConfiguration
argument_list|()
expr_stmt|;
comment|// return the initial state of the configuration
block|}
block|}
comment|// Similar to BlockReport_08 but corrupts GS and len of the TEMPORARY's
comment|// replica block. Expect the same behaviour: NN should simply ignore this
comment|// block
annotation|@
name|Test
DECL|method|blockReport_09 ()
specifier|public
name|void
name|blockReport_09
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|DN_N1
init|=
name|DN_N0
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|bytesChkSum
init|=
literal|1024
operator|*
literal|1000
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|bytesChkSum
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|6
operator|*
name|bytesChkSum
argument_list|)
expr_stmt|;
name|shutDownCluster
argument_list|()
expr_stmt|;
name|startUpCluster
argument_list|()
expr_stmt|;
comment|// write file and start second node to be "older" than the original
try|try
block|{
name|writeFile
argument_list|(
name|METHOD_NAME
argument_list|,
literal|12
operator|*
name|bytesChkSum
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|Block
name|bl
init|=
name|findBlock
argument_list|(
name|filePath
argument_list|,
literal|12
operator|*
name|bytesChkSum
argument_list|)
decl_stmt|;
name|BlockChecker
name|bc
init|=
operator|new
name|BlockChecker
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|bc
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForTempReplica
argument_list|(
name|bl
argument_list|,
name|DN_N1
argument_list|)
expr_stmt|;
comment|// all blocks belong to the same file, hence same BP
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N1
argument_list|)
decl_stmt|;
name|String
name|poolId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|report
init|=
name|getBlockReports
argument_list|(
name|dn
argument_list|,
name|poolId
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnR
argument_list|,
name|poolId
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of PendingReplication blocks"
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bc
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
finally|finally
block|{
name|resetConfiguration
argument_list|()
expr_stmt|;
comment|// return the initial state of the configuration
block|}
block|}
comment|/**    * Test for the case where one of the DNs in the pipeline is in the    * process of doing a block report exactly when the block is closed.    * In this case, the block report becomes delayed until after the    * block is marked completed on the NN, and hence it reports an RBW    * replica for a COMPLETE block. Such a report should not be marked    * corrupt.    * This is a regression test for HDFS-2791.    */
annotation|@
name|Test
DECL|method|testOneReplicaRbwReportArrivesAfterBlockCompleted ()
specifier|public
name|void
name|testOneReplicaRbwReportArrivesAfterBlockCompleted
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CountDownLatch
name|brFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DelayAnswer
name|delayer
init|=
operator|new
name|GenericTestUtils
operator|.
name|DelayAnswer
argument_list|(
name|LOG
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|passThrough
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|super
operator|.
name|passThrough
argument_list|(
name|invocation
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// inform the test that our block report went through.
name|brFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|String
name|METHOD_NAME
init|=
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|METHOD_NAME
operator|+
literal|".dat"
argument_list|)
decl_stmt|;
comment|// Start a second DN for this test -- we're checking
comment|// what happens when one of the DNs is slowed for some reason.
name|REPL_FACTOR
operator|=
literal|2
expr_stmt|;
name|startDNandWait
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|,
name|REPL_FACTOR
argument_list|)
decl_stmt|;
try|try
block|{
name|AppendTestUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// Set up a spy so that we can delay the block report coming
comment|// from this node.
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeProtocolClientSideTranslatorPB
name|spy
init|=
name|DataNodeTestUtils
operator|.
name|spyOnBposToNN
argument_list|(
name|dn
argument_list|,
name|nn
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|delayer
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|blockReport
argument_list|(
name|Mockito
operator|.
expr|<
name|DatanodeRegistration
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|StorageBlockReport
index|[]
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force a block report to be generated. The block report will have
comment|// an RBW replica in it. Wait for the RPC to be sent, but block
comment|// it before it gets to the NN.
name|dn
operator|.
name|scheduleAllBlockReport
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|delayer
operator|.
name|waitForCall
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// Now that the stream is closed, the NN will have the block in COMPLETE
comment|// state.
name|delayer
operator|.
name|proceed
argument_list|()
expr_stmt|;
name|brFinished
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Verify that no replicas are marked corrupt, and that the
comment|// file is still readable.
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
comment|// Ensure that the file is readable even from the DN that we futzed with.
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForTempReplica (Block bl, int DN_N1)
specifier|private
name|void
name|waitForTempReplica
parameter_list|(
name|Block
name|bl
parameter_list|,
name|int
name|DN_N1
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|tooLongWait
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|TIMEOUT
init|=
literal|40000
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wait for datanode "
operator|+
name|DN_N1
operator|+
literal|" to appear"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|DN_N1
condition|)
block|{
name|waitTil
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Total number of DNs "
operator|+
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// Look about specified DN for the replica of the block from 1st DN
specifier|final
name|DataNode
name|dn1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N1
argument_list|)
decl_stmt|;
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|Replica
name|r
init|=
name|DataNodeTestUtils
operator|.
name|fetchReplicaInfo
argument_list|(
name|dn1
argument_list|,
name|bpid
argument_list|,
name|bl
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|waitTil
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|r
operator|=
name|DataNodeTestUtils
operator|.
name|fetchReplicaInfo
argument_list|(
name|dn1
argument_list|,
name|bpid
argument_list|,
name|bl
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|waiting_period
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|%
literal|100
operator|==
literal|0
condition|)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Has been waiting for "
operator|+
name|waiting_period
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waiting_period
operator|>
name|TIMEOUT
condition|)
name|assertTrue
argument_list|(
literal|"Was waiting too long to get ReplicaInfo from a datanode"
argument_list|,
name|tooLongWait
argument_list|)
expr_stmt|;
block|}
name|HdfsServerConstants
operator|.
name|ReplicaState
name|state
init|=
name|r
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replica state before the loop "
operator|+
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
while|while
condition|(
name|state
operator|!=
name|HdfsServerConstants
operator|.
name|ReplicaState
operator|.
name|TEMPORARY
condition|)
block|{
name|waitTil
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|state
operator|=
name|r
operator|.
name|getState
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Keep waiting for "
operator|+
name|bl
operator|.
name|getBlockName
argument_list|()
operator|+
literal|" is in state "
operator|+
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
operator|>
name|TIMEOUT
condition|)
name|assertTrue
argument_list|(
literal|"Was waiting too long for a replica to become TEMPORARY"
argument_list|,
name|tooLongWait
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replica state after the loop "
operator|+
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Helper methods from here below...
comment|// Write file and start second data node.
DECL|method|writeFile (final String METHOD_NAME, final long fileSize, Path filePath)
specifier|private
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|writeFile
parameter_list|(
specifier|final
name|String
name|METHOD_NAME
parameter_list|,
specifier|final
name|long
name|fileSize
parameter_list|,
name|Path
name|filePath
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
literal|null
decl_stmt|;
try|try
block|{
name|REPL_FACTOR
operator|=
literal|2
expr_stmt|;
name|blocks
operator|=
name|prepareForRide
argument_list|(
name|filePath
argument_list|,
name|METHOD_NAME
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|blocks
return|;
block|}
DECL|method|startDNandWait (Path filePath, boolean waitReplicas)
specifier|private
name|void
name|startDNandWait
parameter_list|(
name|Path
name|filePath
parameter_list|,
name|boolean
name|waitReplicas
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Before next DN start: "
operator|+
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|datanodes
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|lastDn
init|=
name|datanodes
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New datanode "
operator|+
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|lastDn
argument_list|)
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" has been started"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitReplicas
condition|)
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|REPL_FACTOR
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareForRide (final Path filePath, final String METHOD_NAME, long fileSize)
specifier|private
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|prepareForRide
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|,
specifier|final
name|String
name|METHOD_NAME
parameter_list|,
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test "
operator|+
name|METHOD_NAME
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|fileSize
argument_list|,
name|REPL_FACTOR
argument_list|,
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|locatedToBlocks
argument_list|(
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
name|FILE_START
argument_list|,
name|fileSize
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|printStats ()
specifier|private
name|void
name|printStats
parameter_list|()
block|{
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Missing "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Corrupted "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Under-replicated "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pending delete "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingDeletionBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Pending replications "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getPendingReplicationBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Excess "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getExcessBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Total "
operator|+
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlocksTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|locatedToBlocks (final List<LocatedBlock> locatedBlks, List<Integer> positionsToRemove)
specifier|private
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|locatedToBlocks
parameter_list|(
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlks
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|positionsToRemove
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Block
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locatedBlks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|positionsToRemove
operator|!=
literal|null
operator|&&
name|positionsToRemove
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|i
operator|+
literal|" block to be omitted"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|newList
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|locatedBlks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newList
return|;
block|}
DECL|method|waitTil (long waitPeriod)
specifier|private
name|void
name|waitTil
parameter_list|(
name|long
name|waitPeriod
parameter_list|)
block|{
try|try
block|{
comment|//Wait til next re-scan
name|Thread
operator|.
name|sleep
argument_list|(
name|waitPeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findAllFiles (File top, FilenameFilter mask)
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|findAllFiles
parameter_list|(
name|File
name|top
parameter_list|,
name|FilenameFilter
name|mask
parameter_list|)
block|{
if|if
condition|(
name|top
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|top
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
name|ret
operator|.
name|addAll
argument_list|(
name|findAllFiles
argument_list|(
name|f
argument_list|,
name|mask
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|mask
operator|.
name|accept
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|class|MyFileFilter
specifier|private
class|class
name|MyFileFilter
implements|implements
name|FilenameFilter
block|{
DECL|field|nameToAccept
specifier|private
name|String
name|nameToAccept
init|=
literal|""
decl_stmt|;
DECL|field|all
specifier|private
name|boolean
name|all
init|=
literal|false
decl_stmt|;
DECL|method|MyFileFilter (String nameToAccept, boolean all)
specifier|public
name|MyFileFilter
parameter_list|(
name|String
name|nameToAccept
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|nameToAccept
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Argument isn't suppose to be null"
argument_list|)
throw|;
name|this
operator|.
name|nameToAccept
operator|=
name|nameToAccept
expr_stmt|;
name|this
operator|.
name|all
operator|=
name|all
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (File file, String s)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|all
condition|)
return|return
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|startsWith
argument_list|(
name|nameToAccept
argument_list|)
return|;
else|else
return|return
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|equals
argument_list|(
name|nameToAccept
argument_list|)
return|;
block|}
block|}
DECL|method|initLoggers ()
specifier|private
specifier|static
name|void
name|initLoggers
parameter_list|()
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|NameNode
operator|.
name|stateChangeLog
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|TestBlockReport
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|method|findBlock (Path path, long size)
specifier|private
name|Block
name|findBlock
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|Block
name|ret
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|FILE_START
argument_list|,
name|size
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|lbs
operator|.
name|get
argument_list|(
name|lbs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Get block from the first DN
name|ret
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|DN_N0
argument_list|)
operator|.
name|data
operator|.
name|getStoredBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|class|BlockChecker
specifier|private
class|class
name|BlockChecker
extends|extends
name|Thread
block|{
DECL|field|filePath
name|Path
name|filePath
decl_stmt|;
DECL|method|BlockChecker (final Path filePath)
specifier|public
name|BlockChecker
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|)
block|{
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startDNandWait
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to start BlockChecker: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|resetConfiguration ()
specifier|private
specifier|static
name|void
name|resetConfiguration
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|int
name|customPerChecksumSize
init|=
literal|512
decl_stmt|;
name|int
name|customBlockSize
init|=
name|customPerChecksumSize
operator|*
literal|3
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|customPerChecksumSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|customBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
name|DN_RESCAN_INTERVAL
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

