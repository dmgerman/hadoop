begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|MockResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|RouterConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * The the safe mode for the {@link Router} controlled by  * {@link SafeModeTimer}.  */
end_comment

begin_class
DECL|class|TestRouter
specifier|public
class|class
name|TestRouter
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|create ()
specifier|public
specifier|static
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Basic configuration without the state store
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// 1 sec cache refresh
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_CACHE_TIME_TO_LIVE_MS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Mock resolver classes
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_NAMENODE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MockResolver
operator|.
name|class
argument_list|,
name|ActiveNamenodeResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_FILE_RESOLVER_CLIENT_CLASS
argument_list|,
name|MockResolver
operator|.
name|class
argument_list|,
name|FileSubclusterResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Bind to any available port
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTPS_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_HTTP_BIND_HOST_KEY
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
comment|// Simulate a co-located NN
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|,
literal|"ns0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://"
operator|+
literal|"ns0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|"."
operator|+
literal|"ns0"
argument_list|,
literal|"127.0.0.1:0"
operator|+
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
operator|+
literal|"."
operator|+
literal|"ns0"
argument_list|,
literal|"127.0.0.1:"
operator|+
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_BIND_HOST_KEY
operator|+
literal|"."
operator|+
literal|"ns0"
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{   }
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{   }
DECL|method|testRouterStartup (Configuration routerConfig)
specifier|private
specifier|static
name|void
name|testRouterStartup
parameter_list|(
name|Configuration
name|routerConfig
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Router
name|router
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|NOTINITED
argument_list|,
name|router
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|init
argument_list|(
name|routerConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|INITED
argument_list|,
name|router
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|router
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|router
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouterService ()
specifier|public
name|void
name|testRouterService
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Admin only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Http only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|http
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Rpc only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Metrics only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|metrics
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Statestore only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|stateStore
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat only
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|heartbeat
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run with all services
name|testRouterStartup
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|all
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouterRestartRpcService ()
specifier|public
name|void
name|testRouterRestartRpcService
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Start
name|Router
name|router
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
name|router
operator|.
name|init
argument_list|(
operator|new
name|RouterConfigBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|rpc
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Verify RPC server is running
name|assertNotNull
argument_list|(
name|router
operator|.
name|getRpcServerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|RouterRpcServer
name|rpcServer
init|=
name|router
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rpcServer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|rpcServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop router and RPC server
name|router
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STOPPED
argument_list|,
name|rpcServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|router
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

