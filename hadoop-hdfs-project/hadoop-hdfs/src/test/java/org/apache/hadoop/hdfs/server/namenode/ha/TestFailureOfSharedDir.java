begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
DECL|class|TestFailureOfSharedDir
specifier|public
class|class
name|TestFailureOfSharedDir
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFailureOfSharedDir
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test that the shared edits dir is automatically added to the list of edits    * dirs that are marked required.    */
annotation|@
name|Test
DECL|method|testSharedDirIsAutomaticallyMarkedRequired ()
specifier|public
name|void
name|testSharedDirIsAutomaticallyMarkedRequired
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|foo
init|=
operator|new
name|URI
argument_list|(
literal|"file:/foo"
argument_list|)
decl_stmt|;
name|URI
name|bar
init|=
operator|new
name|URI
argument_list|(
literal|"file:/bar"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
argument_list|,
name|foo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|FSNamesystem
operator|.
name|getRequiredNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
operator|.
name|contains
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|,
name|bar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|requiredEditsDirs
init|=
name|FSNamesystem
operator|.
name|getRequiredNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|requiredEditsDirs
argument_list|)
operator|+
literal|" does not contain "
operator|+
name|bar
argument_list|,
name|requiredEditsDirs
operator|.
name|contains
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that the shared edits dirs are listed before non-shared dirs    * when the configuration is parsed. This ensures that the shared journals    * are synced before the local ones.    */
annotation|@
name|Test
DECL|method|testSharedDirsComeFirstInEditsList ()
specifier|public
name|void
name|testSharedDirsComeFirstInEditsList
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|sharedA
init|=
operator|new
name|URI
argument_list|(
literal|"file:///shared-A"
argument_list|)
decl_stmt|;
name|URI
name|sharedB
init|=
operator|new
name|URI
argument_list|(
literal|"file:///shared-B"
argument_list|)
decl_stmt|;
name|URI
name|localA
init|=
operator|new
name|URI
argument_list|(
literal|"file:///local-A"
argument_list|)
decl_stmt|;
name|URI
name|localB
init|=
operator|new
name|URI
argument_list|(
literal|"file:///local-B"
argument_list|)
decl_stmt|;
name|URI
name|localC
init|=
operator|new
name|URI
argument_list|(
literal|"file:///local-C"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|sharedA
argument_list|,
name|sharedB
argument_list|)
argument_list|)
expr_stmt|;
comment|// List them in reverse order, to make sure they show up in
comment|// the order listed, regardless of lexical sort order.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|localC
argument_list|,
name|localB
argument_list|,
name|localA
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|dirs
init|=
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Shared dirs should come first, then local dirs, in the order "
operator|+
literal|"they were listed in the configuration."
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|sharedA
argument_list|,
name|sharedB
argument_list|,
name|localC
argument_list|,
name|localB
argument_list|,
name|localA
argument_list|)
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|dirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that marking the shared edits dir as being "required" causes the NN to    * fail if that dir can't be accessed.    */
annotation|@
name|Test
DECL|method|testFailureOfSharedDir ()
specifier|public
name|void
name|testFailureOfSharedDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// The shared edits dir will automatically be marked required.
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Blow away the shared edits dir.
name|URI
name|sharedEditsUri
init|=
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|sharedEditsUri
argument_list|)
argument_list|)
expr_stmt|;
name|NameNode
name|nn0
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure that subsequent operations on the NN fail.
name|nn0
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Succeeded in rolling edit log despite shared dir being deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Unable to start log segment 4: too few journals successfully started"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Check that none of the edits dirs rolled, since the shared edits
comment|// dir didn't roll. Regression test for HDFS-2874.
for|for
control|(
name|URI
name|editsUri
range|:
name|cluster
operator|.
name|getNameEditsDirs
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|editsUri
operator|.
name|equals
argument_list|(
name|sharedEditsUri
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|editsDir
init|=
operator|new
name|File
argument_list|(
name|editsUri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|curDir
init|=
operator|new
name|File
argument_list|(
name|editsDir
argument_list|,
literal|"current"
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertGlobEquals
argument_list|(
name|curDir
argument_list|,
literal|"edits_.*"
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

