begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestJspHelper
specifier|public
class|class
name|TestJspHelper
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|jspWriterOutput
specifier|private
name|String
name|jspWriterOutput
init|=
literal|""
decl_stmt|;
DECL|class|DummySecretManager
specifier|public
specifier|static
class|class
name|DummySecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|method|DummySecretManager (long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval)
specifier|public
name|DummySecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|DelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createPassword (DelegationTokenIdentifier dtId)
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|DelegationTokenIdentifier
name|dtId
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[
literal|1
index|]
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetUgi ()
specifier|public
name|void
name|testGetUgi
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:4321/"
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"TheDoctor"
decl_stmt|;
name|Text
name|userText
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText
argument_list|,
name|userText
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
operator|new
name|DummySecretManager
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tokenString
init|=
name|token
operator|.
name|encodeToUrlString
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|//Test attribute in the url to be used as service in the token.
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|NAMENODE_ADDRESS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"1.1.1.1:1111"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifyServiceInToken
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
literal|"1.1.1.1:1111"
argument_list|)
expr_stmt|;
comment|//Test attribute name.node.address
comment|//Set the nnaddr url parameter to null.
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|NAMENODE_ADDRESS
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|2222
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|NameNodeHttpServer
operator|.
name|NAMENODE_ADDRESS_ATTRIBUTE_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|verifyServiceInToken
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":2222"
argument_list|)
expr_stmt|;
comment|//Test service already set in the token
name|token
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"3.3.3.3:3333"
argument_list|)
argument_list|)
expr_stmt|;
name|tokenString
operator|=
name|token
operator|.
name|encodeToUrlString
argument_list|()
expr_stmt|;
comment|//Set the name.node.address attribute in Servlet context to null
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|NameNodeHttpServer
operator|.
name|NAMENODE_ADDRESS_ATTRIBUTE_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|verifyServiceInToken
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
literal|"3.3.3.3:3333"
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyServiceInToken (ServletContext context, HttpServletRequest request, String expected)
specifier|private
name|void
name|verifyServiceInToken
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenInUgi
init|=
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|tokenInUgi
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenUrlParam ()
specifier|public
name|void
name|testDelegationTokenUrlParam
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|tokenString
init|=
literal|"xyzabc"
decl_stmt|;
name|String
name|delegationTokenParam
init|=
name|JspHelper
operator|.
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
decl_stmt|;
comment|//Security is enabled
name|Assert
operator|.
name|assertEquals
argument_list|(
name|JspHelper
operator|.
name|SET_DELEGATION
operator|+
literal|"xyzabc"
argument_list|,
name|delegationTokenParam
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delegationTokenParam
operator|=
name|JspHelper
operator|.
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
comment|//Empty string must be returned because security is disabled.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|delegationTokenParam
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetUgiFromToken ()
specifier|public
name|void
name|testGetUgiFromToken
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:4321/"
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|realUser
init|=
literal|"TheDoctor"
decl_stmt|;
name|String
name|user
init|=
literal|"TheNurse"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
name|HttpServletRequest
name|request
decl_stmt|;
name|Text
name|ownerText
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|ownerText
argument_list|,
name|ownerText
argument_list|,
operator|new
name|Text
argument_list|(
name|realUser
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
operator|new
name|DummySecretManager
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tokenString
init|=
name|token
operator|.
name|encodeToUrlString
argument_list|()
decl_stmt|;
comment|// token with no auth-ed user
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// token with auth-ed user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// completely different user, token trumps auth
name|request
operator|=
name|getMockRequest
argument_list|(
literal|"rogue"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// expected case
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromToken
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// can't proxy with a token!
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"rogue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Usernames not matched: name=rogue != expected="
operator|+
name|user
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// can't proxy with a token!
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
name|user
argument_list|,
literal|"rogue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|JspHelper
operator|.
name|DELEGATION_PARAMETER_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Usernames not matched: name=rogue != expected="
operator|+
name|user
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetNonProxyUgi ()
specifier|public
name|void
name|testGetNonProxyUgi
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:4321/"
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|realUser
init|=
literal|"TheDoctor"
decl_stmt|;
name|String
name|user
init|=
literal|"TheNurse"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
name|HttpServletRequest
name|request
decl_stmt|;
comment|// have to be auth-ed with remote user
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
name|realUser
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ugi for remote user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|checkUgiFromAuth
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// ugi for remote user = real user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
name|realUser
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|checkUgiFromAuth
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// ugi for remote user != real user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Usernames not matched: name="
operator|+
name|user
operator|+
literal|" != expected="
operator|+
name|realUser
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetProxyUgi ()
specifier|public
name|void
name|testGetProxyUgi
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://localhost:4321/"
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|realUser
init|=
literal|"TheDoctor"
decl_stmt|;
name|String
name|user
init|=
literal|"TheNurse"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|CONF_HADOOP_PROXYUSER
operator|+
name|realUser
operator|+
literal|".groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|CONF_HADOOP_PROXYUSER
operator|+
name|realUser
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
name|HttpServletRequest
name|request
decl_stmt|;
comment|// have to be auth-ed with remote user
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
name|getMockRequest
argument_list|(
literal|null
argument_list|,
name|realUser
argument_list|,
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// proxy ugi for user via remote user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromAuth
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// proxy ugi for user vi a remote user = real user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
name|realUser
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|checkUgiFromAuth
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
comment|// proxy ugi for user via remote user != real user
name|request
operator|=
name|getMockRequest
argument_list|(
name|realUser
argument_list|,
name|user
argument_list|,
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Usernames not matched: name="
operator|+
name|user
operator|+
literal|" != expected="
operator|+
name|realUser
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try to get get a proxy user with unauthorized user
try|try
block|{
name|request
operator|=
name|getMockRequest
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad proxy request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ae
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"User: "
operator|+
name|user
operator|+
literal|" is not allowed to impersonate "
operator|+
name|realUser
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|request
operator|=
name|getMockRequest
argument_list|(
name|user
argument_list|,
name|user
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"bad proxy request allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ae
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"User: "
operator|+
name|user
operator|+
literal|" is not allowed to impersonate "
operator|+
name|realUser
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPrintGotoFormWritesValidXML ()
specifier|public
name|void
name|testPrintGotoFormWritesValidXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|JspWriter
name|mockJspWriter
init|=
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invok
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invok
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|jspWriterOutput
operator|+=
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockJspWriter
argument_list|)
operator|.
name|print
argument_list|(
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|jspWriterOutput
operator|=
literal|""
expr_stmt|;
name|JspHelper
operator|.
name|printGotoForm
argument_list|(
name|mockJspWriter
argument_list|,
literal|424242
argument_list|,
literal|"a token string"
argument_list|,
literal|"foobar/file"
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|parser
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|jspWriterOutput
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockRequest (String remoteUser, String user, String doAs)
specifier|private
name|HttpServletRequest
name|getMockRequest
parameter_list|(
name|String
name|remoteUser
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|doAs
parameter_list|)
block|{
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAs
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|doAs
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|checkUgiFromAuth (UserGroupInformation ugi)
specifier|private
name|void
name|checkUgiFromAuth
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkUgiFromToken (UserGroupInformation ugi)
specifier|private
name|void
name|checkUgiFromToken
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|,
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortNodeByFields ()
specifier|public
name|void
name|testSortNodeByFields
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeID
name|dnId1
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost1"
argument_list|,
literal|"datanode1"
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
literal|3456
argument_list|,
literal|4567
argument_list|)
decl_stmt|;
name|DatanodeID
name|dnId2
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|"localhost2"
argument_list|,
literal|"datanode2"
argument_list|,
literal|1235
argument_list|,
literal|2346
argument_list|,
literal|3457
argument_list|,
literal|4568
argument_list|)
decl_stmt|;
comment|// Setup DatanodeDescriptors with one storage each.
name|DatanodeDescriptor
name|dnDesc1
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
name|dnId1
argument_list|,
literal|"rack1"
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dnDesc2
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
name|dnId2
argument_list|,
literal|"rack2"
argument_list|)
decl_stmt|;
comment|// Update the DatanodeDescriptors with their attached storages.
name|dnDesc1
operator|.
name|updateStorage
argument_list|(
operator|new
name|DatanodeStorage
argument_list|(
literal|"dnStorage1"
argument_list|)
argument_list|)
expr_stmt|;
name|dnDesc2
operator|.
name|updateStorage
argument_list|(
operator|new
name|DatanodeStorage
argument_list|(
literal|"dnStorage2"
argument_list|)
argument_list|)
expr_stmt|;
name|StorageReport
index|[]
name|report1
init|=
operator|new
name|StorageReport
index|[]
block|{
operator|new
name|StorageReport
argument_list|(
literal|"dnStorage1"
argument_list|,
literal|false
argument_list|,
literal|1024
argument_list|,
literal|100
argument_list|,
literal|924
argument_list|,
literal|100
argument_list|)
block|}
decl_stmt|;
name|StorageReport
index|[]
name|report2
init|=
operator|new
name|StorageReport
index|[]
block|{
operator|new
name|StorageReport
argument_list|(
literal|"dnStorage2"
argument_list|,
literal|false
argument_list|,
literal|2500
argument_list|,
literal|200
argument_list|,
literal|1848
argument_list|,
literal|200
argument_list|)
block|}
decl_stmt|;
name|dnDesc1
operator|.
name|updateHeartbeat
argument_list|(
name|report1
argument_list|,
literal|5l
argument_list|,
literal|3l
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dnDesc2
operator|.
name|updateHeartbeat
argument_list|(
name|report2
argument_list|,
literal|10l
argument_list|,
literal|2l
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|live
operator|.
name|add
argument_list|(
name|dnDesc1
argument_list|)
expr_stmt|;
name|live
operator|.
name|add
argument_list|(
name|dnDesc2
argument_list|)
expr_stmt|;
comment|// Test sorting by failed volumes
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"volfails"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"volfails"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test sorting by Blockpool used
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"bpused"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"bpused"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test sorting by Percentage Blockpool used
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"pcbpused"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"pcbpused"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//unexisted field comparition is d1.getHostName().compareTo(d2.getHostName());
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"unexists"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"unexists"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sorting by capacity
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"capacity"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"capacity"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sorting by used
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"used"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"used"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sorting by nondfsused
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"nondfsused"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"nondfsused"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test sorting by remaining
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"remaining"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
literal|"remaining"
argument_list|,
literal|"DSC"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc2
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnDesc1
argument_list|,
name|live
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrintMethods ()
specifier|public
name|void
name|testPrintMethods
parameter_list|()
throws|throws
name|IOException
block|{
name|JspWriter
name|out
init|=
name|mock
argument_list|(
name|JspWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|arg
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invok
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invok
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
name|arg
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|createTitle
argument_list|(
name|out
argument_list|,
name|req
argument_list|,
literal|"testfile.txt"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|addTableHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
operator|+
literal|2
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|addTableRow
argument_list|(
name|out
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" row11"
block|,
literal|"row12 "
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
operator|+
literal|2
operator|+
literal|4
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|addTableRow
argument_list|(
name|out
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" row11"
block|,
literal|"row12 "
block|}
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
operator|+
literal|2
operator|+
literal|4
operator|+
literal|4
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|addTableRow
argument_list|(
name|out
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" row21"
block|,
literal|"row22"
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
operator|+
literal|2
operator|+
literal|4
operator|+
literal|4
operator|+
literal|4
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|addTableFooter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|out
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
operator|+
literal|2
operator|+
literal|4
operator|+
literal|4
operator|+
literal|4
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWriteReplicaState ()
specifier|public
name|void
name|testReadWriteReplicaState
parameter_list|()
block|{
try|try
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|HdfsServerConstants
operator|.
name|ReplicaState
name|repState
range|:
name|HdfsServerConstants
operator|.
name|ReplicaState
operator|.
name|values
argument_list|()
control|)
block|{
name|repState
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsServerConstants
operator|.
name|ReplicaState
name|result
init|=
name|HdfsServerConstants
operator|.
name|ReplicaState
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testReadWrite error !!!"
argument_list|,
name|repState
operator|==
name|result
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testReadWrite ex error ReplicaState"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpgradeStatusReport ()
specifier|public
name|void
name|testUpgradeStatusReport
parameter_list|()
block|{
name|short
name|status
init|=
literal|6
decl_stmt|;
name|int
name|version
init|=
literal|15
decl_stmt|;
name|String
name|EXPECTED__NOTF_PATTERN
init|=
literal|"Upgrade for version {0} has been completed.\nUpgrade is not finalized."
decl_stmt|;
name|String
name|EXPECTED_PATTERN
init|=
literal|"Upgrade for version {0} is in progress. Status = {1}%"
decl_stmt|;
name|UpgradeStatusReport
name|upgradeStatusReport
init|=
operator|new
name|UpgradeStatusReport
argument_list|(
name|version
argument_list|,
name|status
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|getVersion
argument_list|()
operator|==
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|getUpgradeStatus
argument_list|()
operator|==
name|status
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|isFinalized
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPECTED_PATTERN
argument_list|,
name|version
argument_list|,
name|status
argument_list|)
argument_list|,
name|upgradeStatusReport
operator|.
name|getStatusText
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|+=
literal|100
expr_stmt|;
name|upgradeStatusReport
operator|=
operator|new
name|UpgradeStatusReport
argument_list|(
name|version
argument_list|,
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|upgradeStatusReport
operator|.
name|isFinalized
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPECTED__NOTF_PATTERN
argument_list|,
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|getStatusText
argument_list|(
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPECTED__NOTF_PATTERN
argument_list|,
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|upgradeStatusReport
operator|.
name|getStatusText
argument_list|(
literal|true
argument_list|)
operator|.
name|equals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|EXPECTED__NOTF_PATTERN
argument_list|,
name|version
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

