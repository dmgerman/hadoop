begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|// TODO : We need this when we enable these tests back.
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|LocatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test class that exercises the StorageContainerManager.  */
end_comment

begin_class
DECL|class|TestStorageContainerManager
specifier|public
class|class
name|TestStorageContainerManager
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRpcPermission ()
specifier|public
name|void
name|testRpcPermission
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test with default configuration
name|OzoneConfiguration
name|defaultConf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|testRpcPermissionWithConf
argument_list|(
name|defaultConf
argument_list|,
literal|"unknownUser"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test with ozone.administrators defined in configuration
name|OzoneConfiguration
name|ozoneConf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ozoneConf
operator|.
name|setStrings
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
argument_list|,
literal|"adminUser1, adminUser2"
argument_list|)
expr_stmt|;
comment|// Non-admin user will get permission denied.
name|testRpcPermissionWithConf
argument_list|(
name|ozoneConf
argument_list|,
literal|"unknownUser"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Admin user will pass the permission check.
name|testRpcPermissionWithConf
argument_list|(
name|ozoneConf
argument_list|,
literal|"adminUser2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRpcPermissionWithConf ( OzoneConfiguration ozoneConf, String fakeRemoteUsername, boolean expectPermissionDenied)
specifier|private
name|void
name|testRpcPermissionWithConf
parameter_list|(
name|OzoneConfiguration
name|ozoneConf
parameter_list|,
name|String
name|fakeRemoteUsername
parameter_list|,
name|boolean
name|expectPermissionDenied
parameter_list|)
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|ozoneConf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|fakeUser
init|=
name|fakeRemoteUsername
decl_stmt|;
name|StorageContainerManager
name|mockScm
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockScm
operator|.
name|getPpcRemoteUsername
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fakeUser
argument_list|)
expr_stmt|;
try|try
block|{
name|mockScm
operator|.
name|deleteContainer
argument_list|(
literal|"container1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Operation should fail, expecting an IOException here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectPermissionDenied
condition|)
block|{
name|verifyPermissionDeniedException
argument_list|(
name|e
argument_list|,
name|fakeUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If passes permission check, it should fail with
comment|// container not exist exception.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"container doesn't exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Pipeline
name|pipeLine2
init|=
name|mockScm
operator|.
name|allocateContainer
argument_list|(
literal|"container2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectPermissionDenied
condition|)
block|{
name|fail
argument_list|(
literal|"Operation should fail, expecting an IOException here."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"container2"
argument_list|,
name|pipeLine2
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|verifyPermissionDeniedException
argument_list|(
name|e
argument_list|,
name|fakeUser
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Pipeline
name|pipeLine3
init|=
name|mockScm
operator|.
name|allocateContainer
argument_list|(
literal|"container3"
argument_list|,
name|ScmClient
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectPermissionDenied
condition|)
block|{
name|fail
argument_list|(
literal|"Operation should fail, expecting an IOException here."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"container3"
argument_list|,
name|pipeLine3
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pipeLine3
operator|.
name|getMachines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|verifyPermissionDeniedException
argument_list|(
name|e
argument_list|,
name|fakeUser
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mockScm
operator|.
name|getContainer
argument_list|(
literal|"container4"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Operation should fail, expecting an IOException here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectPermissionDenied
condition|)
block|{
name|verifyPermissionDeniedException
argument_list|(
name|e
argument_list|,
name|fakeUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If passes permission check, it should fail with
comment|// key not exist exception.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specified key does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyPermissionDeniedException (Exception e, String userName)
specifier|private
name|void
name|verifyPermissionDeniedException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|String
name|expectedErrorMessage
init|=
literal|"Access denied for user "
operator|+
name|userName
operator|+
literal|". "
operator|+
literal|"Superuser privilege is required."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedErrorMessage
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

