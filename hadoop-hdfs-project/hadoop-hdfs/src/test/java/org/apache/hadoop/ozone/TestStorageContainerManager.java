begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_comment
comment|// TODO : We need this when we enable these tests back.
end_comment

begin_comment
comment|//import org.junit.Test;
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|LocatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * Test class that exercises the StorageContainerManager.  */
end_comment

begin_class
DECL|class|TestStorageContainerManager
specifier|public
class|class
name|TestStorageContainerManager
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
comment|// TODO : Disabling this test after verifying that failure is due
comment|// Not Implemented exception. Will turn on this test in next patch
comment|//@Test
DECL|method|testLocationsForSingleKey ()
specifier|public
name|void
name|testLocationsForSingleKey
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|containers
init|=
name|storageContainerLocationClient
operator|.
name|getStorageContainerLocations
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/key1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocatedContainer
argument_list|(
name|containers
argument_list|,
literal|"/key1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// TODO : Disabling this test after verifying that failure is due
comment|// Not Implemented exception. Will turn on this test in next patch
comment|//@Test
DECL|method|testLocationsForMultipleKeys ()
specifier|public
name|void
name|testLocationsForMultipleKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|containers
init|=
name|storageContainerLocationClient
operator|.
name|getStorageContainerLocations
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/key1"
argument_list|,
literal|"/key2"
argument_list|,
literal|"/key3"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocatedContainer
argument_list|(
name|containers
argument_list|,
literal|"/key1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocatedContainer
argument_list|(
name|containers
argument_list|,
literal|"/key2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocatedContainer
argument_list|(
name|containers
argument_list|,
literal|"/key3"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// TODO : Disabling this test after verifying that failure is due
comment|// Not Implemented exception. Will turn on this test in next patch
comment|//@Test
DECL|method|testNoDataNodes ()
specifier|public
name|void
name|testNoDataNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|doNotwaitTobeOutofChillMode
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"locations not found"
argument_list|)
expr_stmt|;
name|storageContainerLocationClient
operator|.
name|getStorageContainerLocations
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/key1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO : Disabling this test after verifying that failure is due
comment|// Not Implemented exception. Will turn on this test in next patch
comment|//@Test
DECL|method|testMultipleDataNodes ()
specifier|public
name|void
name|testMultipleDataNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniOzoneCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|setHandlerType
argument_list|(
literal|"distributed"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|createStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|containers
init|=
name|storageContainerLocationClient
operator|.
name|getStorageContainerLocations
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/key1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocatedContainer
argument_list|(
name|containers
argument_list|,
literal|"/key1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLocatedContainer (Set<LocatedContainer> containers, String key, int expectedNumLocations)
specifier|private
specifier|static
name|void
name|assertLocatedContainer
parameter_list|(
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|containers
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|expectedNumLocations
parameter_list|)
block|{
name|LocatedContainer
name|container
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LocatedContainer
name|curContainer
range|:
name|containers
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|curContainer
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|container
operator|=
name|curContainer
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Container for key "
operator|+
name|key
operator|+
literal|" not found."
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|container
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|container
operator|.
name|getMatchedKeyPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|container
operator|.
name|getMatchedKeyPrefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|container
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|container
operator|.
name|getContainerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|container
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumLocations
argument_list|,
name|container
operator|.
name|getLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|container
operator|.
name|getLeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

