begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|BlockReportOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests if block replacement request to data nodes work correctly.  */
end_comment

begin_class
DECL|class|TestBlockReplacement
specifier|public
class|class
name|TestBlockReplacement
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.TestBlockReplacement"
argument_list|)
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Test
DECL|method|testThrottler ()
specifier|public
name|void
name|testThrottler
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|long
name|bandwidthPerSec
init|=
literal|1024
operator|*
literal|1024L
decl_stmt|;
specifier|final
name|long
name|TOTAL_BYTES
init|=
literal|6
operator|*
name|bandwidthPerSec
decl_stmt|;
name|long
name|bytesToSend
init|=
name|TOTAL_BYTES
decl_stmt|;
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|DataTransferThrottler
name|throttler
init|=
operator|new
name|DataTransferThrottler
argument_list|(
name|bandwidthPerSec
argument_list|)
decl_stmt|;
name|long
name|bytesSent
init|=
literal|1024
operator|*
literal|512L
decl_stmt|;
comment|// 0.5MB
name|throttler
operator|.
name|throttle
argument_list|(
name|bytesSent
argument_list|)
expr_stmt|;
name|bytesToSend
operator|-=
name|bytesSent
expr_stmt|;
name|bytesSent
operator|=
literal|1024
operator|*
literal|768L
expr_stmt|;
comment|// 0.75MB
name|throttler
operator|.
name|throttle
argument_list|(
name|bytesSent
argument_list|)
expr_stmt|;
name|bytesToSend
operator|-=
name|bytesSent
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
name|throttler
operator|.
name|throttle
argument_list|(
name|bytesToSend
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|TOTAL_BYTES
operator|*
literal|1000
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|<=
name|bandwidthPerSec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockReplacement ()
specifier|public
name|void
name|testBlockReplacement
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|INITIAL_RACKS
init|=
block|{
literal|"/RACK0"
block|,
literal|"/RACK1"
block|,
literal|"/RACK2"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|NEW_RACKS
init|=
block|{
literal|"/RACK2"
block|}
decl_stmt|;
specifier|final
name|short
name|REPLICATION_FACTOR
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DEFAULT_BLOCK_SIZE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
operator|.
name|racks
argument_list|(
name|INITIAL_RACKS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|fileName
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp.txt"
argument_list|)
decl_stmt|;
comment|// create a file with one block
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
name|REPLICATION_FACTOR
argument_list|)
expr_stmt|;
comment|// get all datanodes
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
name|addr
argument_list|,
name|CONF
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp.txt"
argument_list|,
literal|0
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locatedBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|block
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|oldNodes
init|=
name|block
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|oldNodes
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ExtendedBlock
name|b
init|=
name|block
operator|.
name|getBlock
argument_list|()
decl_stmt|;
comment|// add a fourth datanode to the cluster
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|CONF
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|NEW_RACKS
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|client
operator|.
name|datanodeReport
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
decl_stmt|;
comment|// find out the new node
name|DatanodeInfo
name|newNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|datanodes
control|)
block|{
name|Boolean
name|isNewNode
init|=
literal|true
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|oldNode
range|:
name|oldNodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|oldNode
argument_list|)
condition|)
block|{
name|isNewNode
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isNewNode
condition|)
block|{
name|newNode
operator|=
name|node
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|newNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|source
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
name|proxies
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|datanodes
control|)
block|{
if|if
condition|(
name|node
operator|!=
name|newNode
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNetworkLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|newNode
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
condition|)
block|{
name|source
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
name|proxies
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//current state: the newNode is on RACK2, and "source" is the other dn on RACK2.
comment|//the two datanodes on RACK0 and RACK1 are in "proxies".
comment|//"source" and both "proxies" all contain the block, while newNode doesn't yet.
name|assertTrue
argument_list|(
name|source
operator|!=
literal|null
operator|&&
name|proxies
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// start to replace the block
comment|// case 1: proxySource does not contain the block
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase 1: Proxy "
operator|+
name|newNode
operator|+
literal|" does not contain the block "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replaceBlock
argument_list|(
name|b
argument_list|,
name|source
argument_list|,
name|newNode
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 2: destination already contains the block
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase 2: Destination "
operator|+
name|proxies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|+
literal|" contains the block "
operator|+
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|replaceBlock
argument_list|(
name|b
argument_list|,
name|source
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// case 3: correct case
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase 3: Source="
operator|+
name|source
operator|+
literal|" Proxy="
operator|+
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" Destination="
operator|+
name|newNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|replaceBlock
argument_list|(
name|b
argument_list|,
name|source
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// after cluster has time to resolve the over-replication,
comment|// block locations should contain two proxies and newNode
comment|// but not source
name|checkBlocks
argument_list|(
operator|new
name|DatanodeInfo
index|[]
block|{
name|newNode
block|,
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
block|,
name|proxies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
block|}
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|client
argument_list|)
expr_stmt|;
comment|// case 4: proxies.get(0) is not a valid del hint
comment|// expect either source or newNode replica to be deleted instead
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase 4: invalid del hint "
operator|+
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|replaceBlock
argument_list|(
name|b
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|proxies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
comment|// after cluster has time to resolve the over-replication,
comment|// block locations should contain any 3 of the blocks, since after the
comment|// deletion the number of racks is still>=2 for sure.
comment|// See HDFS-9314 for details, espacially the comment on 18/Nov/15 14:09.
name|checkBlocks
argument_list|(
operator|new
name|DatanodeInfo
index|[]
block|{}
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|REPLICATION_FACTOR
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockMoveAcrossStorageInSameNode ()
specifier|public
name|void
name|testBlockMoveAcrossStorageInSameNode
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|// create only one datanode in the cluster to verify movement within
comment|// datanode.
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|storageTypes
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/testBlockMoveAcrossStorageInSameNode/file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
literal|1024
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// get the current
name|LocatedBlock
name|locatedBlock
init|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|locatedBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locations
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
comment|// current block should be written to DISK
name|assertTrue
argument_list|(
name|storageTypes
index|[
literal|0
index|]
operator|==
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|source
init|=
name|locations
index|[
literal|0
index|]
decl_stmt|;
comment|// move block to ARCHIVE by using same DataNodeInfo for source, proxy and
comment|// destination so that movement happens within datanode
name|assertTrue
argument_list|(
name|replaceBlock
argument_list|(
name|block
argument_list|,
name|source
argument_list|,
name|source
argument_list|,
name|source
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait till namenode notified
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|locatedBlocks
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// get the current
name|locatedBlock
operator|=
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Storage should be only one"
argument_list|,
literal|1
argument_list|,
name|locatedBlock
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Block should be moved to ARCHIVE"
argument_list|,
name|locatedBlock
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* check if file's blocks have expected number of replicas,    * and exist at all of includeNodes    */
DECL|method|checkBlocks (DatanodeInfo[] includeNodes, String fileName, long fileLen, short replFactor, DFSClient client)
specifier|private
name|void
name|checkBlocks
parameter_list|(
name|DatanodeInfo
index|[]
name|includeNodes
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|short
name|replFactor
parameter_list|,
name|DFSClient
name|client
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|boolean
name|notDone
decl_stmt|;
specifier|final
name|long
name|TIMEOUT
init|=
literal|20000L
decl_stmt|;
name|long
name|starttime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|failtime
init|=
name|starttime
operator|+
name|TIMEOUT
decl_stmt|;
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|notDone
operator|=
operator|(
name|nodes
operator|.
name|length
operator|!=
name|replFactor
operator|)
expr_stmt|;
if|if
condition|(
name|notDone
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected replication factor is "
operator|+
name|replFactor
operator|+
literal|" but the real replication factor is "
operator|+
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|nodeLocations
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|includeNodes
control|)
block|{
if|if
condition|(
operator|!
name|nodeLocations
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|notDone
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Block is not located at "
operator|+
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|>
name|failtime
condition|)
block|{
name|String
name|expectedNodesList
init|=
literal|""
decl_stmt|;
name|String
name|currentNodesList
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|includeNodes
control|)
name|expectedNodesList
operator|+=
name|dn
operator|+
literal|", "
expr_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|nodes
control|)
name|currentNodesList
operator|+=
name|dn
operator|+
literal|", "
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected replica nodes are: "
operator|+
name|expectedNodesList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current actual replica nodes are: "
operator|+
name|currentNodesList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Did not achieve expected replication to expected nodes "
operator|+
literal|"after more than "
operator|+
name|TIMEOUT
operator|+
literal|" msec.  See logs for details."
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
name|notDone
condition|)
do|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Achieved expected replication values in "
operator|+
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|starttime
operator|)
operator|+
literal|" msec."
argument_list|)
expr_stmt|;
block|}
comment|/* Copy a block from sourceProxy to destination. If the block becomes    * over-replicated, preferably remove it from source.    *     * Return true if a block is successfully copied; otherwise false.    */
DECL|method|replaceBlock ( ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination)
specifier|private
name|boolean
name|replaceBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|DatanodeInfo
name|sourceProxy
parameter_list|,
name|DatanodeInfo
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replaceBlock
argument_list|(
name|block
argument_list|,
name|source
argument_list|,
name|sourceProxy
argument_list|,
name|destination
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
comment|/*    * Replace block    */
DECL|method|replaceBlock ( ExtendedBlock block, DatanodeInfo source, DatanodeInfo sourceProxy, DatanodeInfo destination, StorageType targetStorageType)
specifier|private
name|boolean
name|replaceBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|source
parameter_list|,
name|DatanodeInfo
name|sourceProxy
parameter_list|,
name|DatanodeInfo
name|destination
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|)
throws|throws
name|IOException
throws|,
name|SocketException
block|{
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|sock
operator|.
name|connect
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|destination
operator|.
name|getXferAddr
argument_list|()
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setKeepAlive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// sendRequest
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|sock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|replaceBlock
argument_list|(
name|block
argument_list|,
name|targetStorageType
argument_list|,
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
argument_list|,
name|source
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|sourceProxy
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// receiveResponse
name|DataInputStream
name|reply
init|=
operator|new
name|DataInputStream
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|BlockOpResponseProto
name|proto
init|=
name|BlockOpResponseProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|reply
argument_list|)
decl_stmt|;
while|while
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|IN_PROGRESS
condition|)
block|{
name|proto
operator|=
name|BlockOpResponseProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
return|return
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|SUCCESS
return|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Standby namenode doesn't queue Delete block request when the add block    * request is in the edit log which are yet to be read.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeletedBlockWhenAddBlockIsInEdit ()
specifier|public
name|void
name|testDeletedBlockWhenAddBlockIsInEdit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DFSClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of namenodes is not 2"
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|getNumNameNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Transitioning the namenode 0 to active.
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode 0 should be in active state"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|isActiveState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode 1 should be in standby state"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trigger heartbeat to mark DatanodeStorageInfo#heartbeatedSinceFailover
comment|// to true.
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Trigger blockReport to mark DatanodeStorageInfo#blockContentsStale
comment|// to false.
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|triggerBlockReport
argument_list|(
operator|new
name|BlockReportOptions
operator|.
name|Factory
argument_list|()
operator|.
name|setIncremental
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|fileName
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp.txt"
argument_list|)
decl_stmt|;
comment|// create a file with one block
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
literal|10L
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1234L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp.txt"
argument_list|,
literal|0
argument_list|,
literal|10L
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|locatedBlocks
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// add a second datanode to the cluster
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of datanodes should be 2"
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataNode
name|dn0
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNode
name|dn1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|activeNNBPId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|DatanodeDescriptor
name|sourceDnDesc
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn0
operator|.
name|getDNRegistrationForBP
argument_list|(
name|activeNNBPId
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|destDnDesc
init|=
name|NameNodeAdapter
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn1
operator|.
name|getDNRegistrationForBP
argument_list|(
name|activeNNBPId
argument_list|)
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"replaceBlock:  "
operator|+
name|replaceBlock
argument_list|(
name|block
argument_list|,
operator|(
name|DatanodeInfo
operator|)
name|sourceDnDesc
argument_list|,
operator|(
name|DatanodeInfo
operator|)
name|sourceDnDesc
argument_list|,
operator|(
name|DatanodeInfo
operator|)
name|destDnDesc
argument_list|)
argument_list|)
expr_stmt|;
comment|// Waiting for the FsDatasetAsyncDsikService to delete the block
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
literal|20
condition|;
name|tries
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Triggering the deletion block report to report the deleted block
comment|// to namnemode
name|DataNodeTestUtils
operator|.
name|triggerDeletionReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|locatedBlocks
operator|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp.txt"
argument_list|,
literal|0
argument_list|,
literal|10L
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
comment|// If block was deleted and only on 1 datanode then break out
if|if
condition|(
name|locatedBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode 1 should be in active state"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|isActiveState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Namenode 0 should be in standby state"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Opening a new client for new active  namenode
name|client
operator|=
operator|new
name|DFSClient
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks1
init|=
name|client
operator|.
name|getNamenode
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
literal|"/tmp.txt"
argument_list|,
literal|0
argument_list|,
literal|10L
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locatedBlocks1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The block should be only on 1 datanode "
argument_list|,
literal|1
argument_list|,
name|locatedBlocks1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|new
name|TestBlockReplacement
argument_list|()
operator|)
operator|.
name|testBlockReplacement
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

