begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Tests DiskBalancer Data models.  */
end_comment

begin_class
DECL|class|TestDataModels
specifier|public
class|class
name|TestDataModels
block|{
annotation|@
name|Test
DECL|method|testCreateRandomVolume ()
specifier|public
name|void
name|testCreateRandomVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|vol
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|vol
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|vol
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|vol
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vol
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vol
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vol
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|vol
operator|.
name|getCapacity
argument_list|()
operator|-
name|vol
operator|.
name|getReserved
argument_list|()
operator|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|vol
operator|.
name|getReserved
argument_list|()
operator|+
name|vol
operator|.
name|getUsed
argument_list|()
operator|)
operator|<
name|vol
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateRandomVolumeSet ()
specifier|public
name|void
name|testCreateRandomVolumeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolumeSet
name|vSet
init|=
name|util
operator|.
name|createRandomVolumeSet
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|vSet
operator|.
name|getVolumeCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|SSD
operator|.
name|toString
argument_list|()
argument_list|,
name|vSet
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateRandomDataNode ()
specifier|public
name|void
name|testCreateRandomDataNode
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
name|util
operator|.
name|createRandomDataNode
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|}
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|node
operator|.
name|getNodeDataDensity
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiskQueues ()
specifier|public
name|void
name|testDiskQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
name|util
operator|.
name|createRandomDataNode
argument_list|(
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|}
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|sortedQueue
init|=
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|DISK
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getSortedQueue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|reverseList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|highList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|queueSize
init|=
name|sortedQueue
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|queueSize
condition|;
name|x
operator|++
control|)
block|{
name|reverseList
operator|.
name|add
argument_list|(
name|sortedQueue
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|highList
operator|.
name|add
argument_list|(
name|sortedQueue
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|reverseList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|queueSize
condition|;
name|x
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reverseList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|highList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reverseList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getReserved
argument_list|()
argument_list|,
name|highList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getReserved
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reverseList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getUsed
argument_list|()
argument_list|,
name|highList
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBalancingNeededEvenDataSpread ()
specifier|public
name|void
name|testNoBalancingNeededEvenDataSpread
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// create two disks which have exactly same data and isBalancing should
comment|// say we don't need to balance.
name|DiskBalancerVolume
name|v1
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setUsed
argument_list|(
literal|500
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|DiskBalancerVolume
name|v2
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v2
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setUsed
argument_list|(
literal|500
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v2
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskBalancerVolumeSet
name|vsets
range|:
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vsets
operator|.
name|isBalancingNeeded
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBalancingNeededTransientDisks ()
specifier|public
name|void
name|testNoBalancingNeededTransientDisks
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// create two disks which have different data sizes, but
comment|// transient. isBalancing should say no balancing needed.
name|DiskBalancerVolume
name|v1
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setUsed
argument_list|(
literal|1
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|DiskBalancerVolume
name|v2
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
decl_stmt|;
name|v2
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setUsed
argument_list|(
literal|500
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v2
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskBalancerVolumeSet
name|vsets
range|:
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vsets
operator|.
name|isBalancingNeeded
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBalancingNeededFailedDisks ()
specifier|public
name|void
name|testNoBalancingNeededFailedDisks
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// create two disks which have which are normal disks, but fail
comment|// one of them. VolumeSet should say no balancing needed.
name|DiskBalancerVolume
name|v1
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setUsed
argument_list|(
literal|1
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setFailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DiskBalancerVolume
name|v2
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v2
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setUsed
argument_list|(
literal|500
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v2
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskBalancerVolumeSet
name|vsets
range|:
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vsets
operator|.
name|isBalancingNeeded
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNeedBalancingUnevenDataSpread ()
specifier|public
name|void
name|testNeedBalancingUnevenDataSpread
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerDataNode
name|node
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DiskBalancerVolume
name|v1
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setUsed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DiskBalancerVolume
name|v2
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
decl_stmt|;
name|v2
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|TB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setReserved
argument_list|(
literal|100
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setUsed
argument_list|(
literal|500
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|node
operator|.
name|addVolume
argument_list|(
name|v2
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskBalancerVolumeSet
name|vsets
range|:
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vsets
operator|.
name|isBalancingNeeded
argument_list|(
literal|10.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testVolumeSerialize ()
specifier|public
name|void
name|testVolumeSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|volume
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|String
name|originalString
init|=
name|volume
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|parsedVolume
init|=
name|DiskBalancerVolume
operator|.
name|parseJson
argument_list|(
name|originalString
argument_list|)
decl_stmt|;
name|String
name|parsedString
init|=
name|parsedVolume
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalString
argument_list|,
name|parsedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSerialize ()
specifier|public
name|void
name|testClusterSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
comment|// Create a Cluster with 3 datanodes, 3 disk types and 3 disks in each type
comment|// that is 9 disks in each machine.
name|DiskBalancerCluster
name|cluster
init|=
name|util
operator|.
name|createRandCluster
argument_list|(
literal|3
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|SSD
block|}
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|DiskBalancerCluster
name|newCluster
init|=
name|DiskBalancerCluster
operator|.
name|parseJson
argument_list|(
name|cluster
operator|.
name|toJson
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
argument_list|,
name|newCluster
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|newCluster
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsageLimitedToCapacity ()
specifier|public
name|void
name|testUsageLimitedToCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|DiskBalancerTestUtil
name|util
init|=
operator|new
name|DiskBalancerTestUtil
argument_list|()
decl_stmt|;
comment|// If usage is greater than capacity, then it should be set to capacity
name|DiskBalancerVolume
name|v1
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|v1
operator|.
name|setCapacity
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v1
operator|.
name|setUsed
argument_list|(
literal|2
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v1
operator|.
name|getUsed
argument_list|()
argument_list|,
name|v1
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// If usage is less than capacity, usage should be set to the real usage
name|DiskBalancerVolume
name|v2
init|=
name|util
operator|.
name|createRandomVolume
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|v2
operator|.
name|setCapacity
argument_list|(
literal|2
operator|*
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|v2
operator|.
name|setUsed
argument_list|(
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v1
operator|.
name|getUsed
argument_list|()
argument_list|,
name|DiskBalancerTestUtil
operator|.
name|GB
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

