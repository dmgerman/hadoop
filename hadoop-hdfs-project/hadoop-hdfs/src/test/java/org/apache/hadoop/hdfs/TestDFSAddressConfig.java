begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * Test the MiniDFSCluster functionality that allows "dfs.datanode.address",  * "dfs.datanode.http.address", and "dfs.datanode.ipc.address" to be  * configurable. The MiniDFSCluster.startDataNodes() API now has a parameter  * that will check these properties if told to do so.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
import|;
end_import

begin_class
DECL|class|TestDFSAddressConfig
specifier|public
class|class
name|TestDFSAddressConfig
extends|extends
name|TestCase
block|{
DECL|method|testDFSAddressConfig ()
specifier|public
name|void
name|testDFSAddressConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
comment|/*-------------------------------------------------------------------------      * By default, the DataNode socket address should be localhost (127.0.0.1).      *------------------------------------------------------------------------*/
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|dns
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|DataNode
name|dn
init|=
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|selfSocketAddr
init|=
name|dn
operator|.
name|getSelfAddr
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DN Self Socket Addr == "
operator|+
name|selfSocketAddr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|selfSocketAddr
operator|.
name|startsWith
argument_list|(
literal|"/127.0.0.1:"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*-------------------------------------------------------------------------      * Shut down the datanodes, reconfigure, and bring them back up.      * Even if told to use the configuration properties for dfs.datanode,      * MiniDFSCluster.startDataNodes() should use localhost as the default if      * the dfs.datanode properties are not set.      *------------------------------------------------------------------------*/
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNodeProperties
name|dnp
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have been able to stop simulated datanode"
argument_list|,
name|dnp
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|unset
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dns
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
expr_stmt|;
name|dn
operator|=
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|selfSocketAddr
operator|=
name|dn
operator|.
name|getSelfAddr
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DN Self Socket Addr == "
operator|+
name|selfSocketAddr
argument_list|)
expr_stmt|;
comment|// assert that default self socket address is 127.0.0.1
name|assertTrue
argument_list|(
name|selfSocketAddr
operator|.
name|startsWith
argument_list|(
literal|"/127.0.0.1:"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*-------------------------------------------------------------------------      * Shut down the datanodes, reconfigure, and bring them back up.      * This time, modify the dfs.datanode properties and make sure that they      * are used to configure sockets by MiniDFSCluster.startDataNodes().      *------------------------------------------------------------------------*/
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DataNodeProperties
name|dnp
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have been able to stop simulated datanode"
argument_list|,
name|dnp
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|StartupOption
operator|.
name|REGULAR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dns
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
expr_stmt|;
name|dn
operator|=
name|dns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|selfSocketAddr
operator|=
name|dn
operator|.
name|getSelfAddr
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DN Self Socket Addr == "
operator|+
name|selfSocketAddr
argument_list|)
expr_stmt|;
comment|// assert that default self socket address is 0.0.0.0
name|assertTrue
argument_list|(
name|selfSocketAddr
operator|.
name|startsWith
argument_list|(
literal|"/0.0.0.0:"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

