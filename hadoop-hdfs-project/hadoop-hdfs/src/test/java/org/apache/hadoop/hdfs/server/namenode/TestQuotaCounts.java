begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_comment
comment|/**  * Test QuotaCounts.  */
end_comment

begin_class
DECL|class|TestQuotaCounts
specifier|public
class|class
name|TestQuotaCounts
block|{
annotation|@
name|Test
DECL|method|testBuildConstEnumCounters ()
specifier|public
name|void
name|testBuildConstEnumCounters
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|storageSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// compare the references
name|assertSame
argument_list|(
name|QuotaCounts
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|nsSsCounts
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|QuotaCounts
operator|.
name|STORAGE_TYPE_DEFAULT
argument_list|,
name|qc
operator|.
name|tsCounts
argument_list|)
expr_stmt|;
comment|// compare the values
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|st
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|st
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddSpace ()
specifier|public
name|void
name|testAddSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc
operator|.
name|addNameSpace
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qc
operator|.
name|addStorageSpace
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qc
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|qc
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdd ()
specifier|public
name|void
name|testAdd
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc1
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaCounts
name|qc2
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
literal|1
argument_list|)
operator|.
name|storageSpace
argument_list|(
literal|512
argument_list|)
operator|.
name|typeSpaces
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc1
operator|.
name|add
argument_list|(
name|qc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qc1
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|qc1
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|type
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|qc1
operator|.
name|getTypeSpace
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddTypeSpaces ()
specifier|public
name|void
name|testAddTypeSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|qc
operator|.
name|addTypeSpace
argument_list|(
name|t
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StorageType
name|type
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubtract ()
specifier|public
name|void
name|testSubtract
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc1
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaCounts
name|qc2
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
literal|1
argument_list|)
operator|.
name|storageSpace
argument_list|(
literal|512
argument_list|)
operator|.
name|typeSpaces
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc1
operator|.
name|subtract
argument_list|(
name|qc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|qc1
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|512
argument_list|,
name|qc1
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|type
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|qc1
operator|.
name|getTypeSpace
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetTypeSpaces ()
specifier|public
name|void
name|testSetTypeSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc1
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaCounts
name|qc2
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
literal|1
argument_list|)
operator|.
name|storageSpace
argument_list|(
literal|512
argument_list|)
operator|.
name|typeSpaces
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc1
operator|.
name|setTypeSpaces
argument_list|(
name|qc2
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|qc2
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|,
name|qc1
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test ConstEnumCounters
name|qc1
operator|.
name|setTypeSpaces
argument_list|(
name|QuotaCounts
operator|.
name|STORAGE_TYPE_RESET
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|QuotaCounts
operator|.
name|STORAGE_TYPE_RESET
argument_list|,
name|qc1
operator|.
name|tsCounts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSpaces ()
specifier|public
name|void
name|testSetSpaces
parameter_list|()
block|{
name|QuotaCounts
name|qc
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc
operator|.
name|setNameSpace
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setStorageSpace
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|qc
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|qc
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
comment|// test ConstEnumCounters
name|qc
operator|.
name|setNameSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setStorageSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|QuotaCounts
operator|.
name|QUOTA_RESET
argument_list|,
name|qc
operator|.
name|nsSsCounts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegation ()
specifier|public
name|void
name|testNegation
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaCounts
name|qc
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|storageSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|typeSpaces
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|qc
operator|=
name|qc
operator|.
name|negation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qc
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qc
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qc
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

