begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|LogVerificationAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
operator|.
name|StatefulBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|TestReplicationPolicy
specifier|public
class|class
name|TestReplicationPolicy
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|BlockPlacementPolicy
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|NUM_OF_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_DATANODES
init|=
literal|6
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|NetworkTopology
name|cluster
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|static
name|NameNode
name|namenode
decl_stmt|;
DECL|field|replicator
specifier|private
specifier|static
name|BlockPlacementPolicy
name|replicator
decl_stmt|;
DECL|field|filename
specifier|private
specifier|static
specifier|final
name|String
name|filename
init|=
literal|"/dummyfile.txt"
decl_stmt|;
DECL|field|dataNodes
specifier|private
specifier|static
name|DatanodeDescriptor
index|[]
name|dataNodes
decl_stmt|;
DECL|field|storages
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|storages
decl_stmt|;
comment|// The interval for marking a datanode as stale,
DECL|field|staleInterval
specifier|private
specifier|static
specifier|final
name|long
name|staleInterval
init|=
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|updateHeartbeatWithUsage (DatanodeDescriptor dn, long capacity, long dfsUsed, long remaining, long blockPoolUsed, long dnCacheCapacity, long dnCacheUsed, int xceiverCount, int volFailures)
specifier|private
specifier|static
name|void
name|updateHeartbeatWithUsage
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|dfsUsed
parameter_list|,
name|long
name|remaining
parameter_list|,
name|long
name|blockPoolUsed
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|volFailures
parameter_list|)
block|{
name|dn
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setUtilizationForTesting
argument_list|(
name|capacity
argument_list|,
name|dfsUsed
argument_list|,
name|remaining
argument_list|,
name|blockPoolUsed
argument_list|)
expr_stmt|;
name|dn
operator|.
name|updateHeartbeat
argument_list|(
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dn
argument_list|)
argument_list|,
name|dnCacheCapacity
argument_list|,
name|dnCacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|volFailures
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|racks
init|=
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r2"
block|,
literal|"/d2/r3"
block|,
literal|"/d2/r3"
block|}
decl_stmt|;
name|storages
operator|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfos
argument_list|(
name|racks
argument_list|)
expr_stmt|;
name|dataNodes
operator|=
name|DFSTestUtil
operator|.
name|toDatanodeDescriptor
argument_list|(
name|storages
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|namenode
operator|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|replicator
operator|=
name|bm
operator|.
name|getBlockPlacementPolicy
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
expr_stmt|;
comment|// construct network topology
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|addDatanode
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OF_DATANODES
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOnSameRack (DatanodeStorageInfo left, DatanodeStorageInfo right)
specifier|private
specifier|static
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|isOnSameRack
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isOnSameRack (DatanodeStorageInfo left, DatanodeDescriptor right)
specifier|private
specifier|static
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeDescriptor
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameRack
argument_list|(
name|left
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
comment|/**    * In this testcase, client is dataNodes[0]. So the 1st replica should be    * placed on dataNodes[0], the 2nd replica should be placed on     * different rack and third should be placed on different node    * of rack chosen for 2nd node.    * The only excpetion is when the<i>numOfReplicas</i> is 2,     * the 1st is on dataNodes[0] and the 2nd is on a different rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget1 ()
specifier|public
name|void
name|testChooseTarget1
parameter_list|()
throws|throws
name|Exception
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// overloaded
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|chooseTarget (int numOfReplicas)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, List<DatanodeStorageInfo> chosenNodes)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, List<DatanodeStorageInfo> chosenNodes, Set<Node> excludedNodes)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
return|;
block|}
DECL|method|chooseTarget ( int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes, Set<Node> excludedNodes)
specifier|private
specifier|static
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
return|return
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|false
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
return|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but the dataNodes[1] is    * not allowed to be chosen. So the 1st replica should be    * placed on dataNodes[0], the 2nd replica should be placed on a different    * rack, the 3rd should be on same rack as the 2nd replica, and the rest    * should be placed on a third rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget2 ()
specifier|public
name|void
name|testChooseTarget2
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|1
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
literal|true
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"targets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//make sure that the chosen node is in the target.
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|targets
operator|.
name|length
operator|&&
operator|!
name|storages
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
empty_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but dataNodes[0] is not qualified    * to be chosen. So the 1st replica should be placed on dataNodes[1],     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 2nd replica,    * and the rest should be placed on the third rack.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget3 ()
specifier|public
name|void
name|testChooseTarget3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make data node 0 to be not qualified to choose
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// no space
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, client is dataNodes[0], but none of the nodes on rack 1    * is qualified to be chosen. So the 1st replica should be placed on either    * rack 2 or rack 3.     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 1st replica,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChoooseTarget4 ()
specifier|public
name|void
name|testChoooseTarget4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make data node 0& 1 to be not qualified to choose: not enough disk space
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
operator|||
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * In this testcase, client is is a node outside of file system.    * So the 1st replica can be placed on any node.     * the 2nd replica should be placed on a different rack,    * the 3rd replica should be placed on the same rack as the 2nd replica,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget5 ()
specifier|public
name|void
name|testChooseTarget5
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeDescriptor
name|writerDesc
init|=
name|DFSTestUtil
operator|.
name|getDatanodeDescriptor
argument_list|(
literal|"7.7.7.7"
argument_list|,
literal|"/d2/r4"
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|writerDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|writerDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|writerDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|writerDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * In this testcase, there are enough total number of nodes, but only    * one rack is actually available.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTarget6 ()
specifier|public
name|void
name|testChooseTarget6
parameter_list|()
throws|throws
name|Exception
block|{
name|DatanodeStorageInfo
name|storage
init|=
name|DFSTestUtil
operator|.
name|createDatanodeStorageInfo
argument_list|(
literal|"DS-xxxx"
argument_list|,
literal|"7.7.7.7"
argument_list|,
literal|"/d2/r3"
argument_list|,
literal|"host7"
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|newDn
init|=
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
comment|// Only two nodes available in a rack. Try picking two nodes. Only one
comment|// should return.
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Make three nodes available in a rack.
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|add
argument_list|(
name|newDn
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|addDatanode
argument_list|(
name|newDn
argument_list|)
expr_stmt|;
name|updateHeartbeatWithUsage
argument_list|(
name|newDn
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Try picking three nodes. Only two should return.
name|excludedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targets
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|remove
argument_list|(
name|newDn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * In this testcase, it tries to choose more targets than available nodes and    * check the result, with stale node avoidance on the write path enabled.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTargetWithMoreThanAvailableNodesWithStaleness ()
specifier|public
name|void
name|testChooseTargetWithMoreThanAvailableNodesWithStaleness
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|setNumStaleNodes
argument_list|(
name|NUM_OF_DATANODES
argument_list|)
expr_stmt|;
name|testChooseTargetWithMoreThanAvailableNodes
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|setNumStaleNodes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * In this testcase, it tries to choose more targets than available nodes and    * check the result.     * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTargetWithMoreThanAvailableNodes ()
specifier|public
name|void
name|testChooseTargetWithMoreThanAvailableNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make data node 0& 1 to be not qualified to choose: not enough disk space
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
operator|(
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|-
literal|1
operator|)
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LogVerificationAppender
name|appender
init|=
operator|new
name|LogVerificationAppender
argument_list|()
decl_stmt|;
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
comment|// try to choose NUM_OF_DATANODES which is more than actually available
comment|// nodes.
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|chooseTarget
argument_list|(
name|NUM_OF_DATANODES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
name|NUM_OF_DATANODES
operator|-
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|log
init|=
name|appender
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|log
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|LoggingEvent
name|lastLogEntry
init|=
name|log
operator|.
name|get
argument_list|(
name|log
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Level
operator|.
name|WARN
operator|.
name|isGreaterOrEqual
argument_list|(
name|lastLogEntry
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Suppose to place replicas on each node but two data nodes are not
comment|// available for placing replica, so here we expect a short of 2
name|assertTrue
argument_list|(
operator|(
operator|(
name|String
operator|)
name|lastLogEntry
operator|.
name|getMessage
argument_list|()
operator|)
operator|.
name|contains
argument_list|(
literal|"in need of 2"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|containsWithinRange (DatanodeStorageInfo target, DatanodeDescriptor[] nodes, int startIndex, int endIndex)
specifier|private
name|boolean
name|containsWithinRange
parameter_list|(
name|DatanodeStorageInfo
name|target
parameter_list|,
name|DatanodeDescriptor
index|[]
name|nodes
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
assert|assert
name|startIndex
operator|>=
literal|0
operator|&&
name|startIndex
operator|<
name|nodes
operator|.
name|length
assert|;
assert|assert
name|endIndex
operator|>=
name|startIndex
operator|&&
name|endIndex
operator|<
name|nodes
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<=
name|endIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|containsWithinRange (DatanodeDescriptor target, DatanodeStorageInfo[] nodes, int startIndex, int endIndex)
specifier|private
name|boolean
name|containsWithinRange
parameter_list|(
name|DatanodeDescriptor
name|target
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|nodes
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
assert|assert
name|startIndex
operator|>=
literal|0
operator|&&
name|startIndex
operator|<
name|nodes
operator|.
name|length
assert|;
assert|assert
name|endIndex
operator|>=
name|startIndex
operator|&&
name|endIndex
operator|<
name|nodes
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<=
name|endIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testChooseTargetWithStaleNodes ()
specifier|public
name|void
name|testChooseTargetWithStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set dataNodes[0] as stale
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
operator|-
operator|(
name|staleInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|shouldAvoidStaleDataNodesForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
comment|// We set the datanode[0] as stale, thus should choose datanode[1] since
comment|// datanode[1] is on the same rack with datanode[0] (writer)
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|dataNodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * In this testcase, we set 3 nodes (dataNodes[0] ~ dataNodes[2]) as stale,    * and when the number of replicas is less or equal to 3, all the healthy    * datanodes should be returned by the chooseTarget method. When the number     * of replicas is 4, a stale node should be included.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testChooseTargetWithHalfStaleNodes ()
specifier|public
name|void
name|testChooseTargetWithHalfStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set dataNodes[0], dataNodes[1], and dataNodes[2] as stale
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
operator|-
operator|(
name|staleInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|chooseTarget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Since we have 6 datanodes total, stale nodes should
comment|// not be returned until we ask for more than 3 targets
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|targets
index|[
literal|2
index|]
argument_list|,
name|dataNodes
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|dataNodes
index|[
literal|3
index|]
argument_list|,
name|targets
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|dataNodes
index|[
literal|4
index|]
argument_list|,
name|targets
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containsWithinRange
argument_list|(
name|dataNodes
index|[
literal|5
index|]
argument_list|,
name|targets
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChooseTargetWithMoreThanHalfStaleNodes ()
specifier|public
name|void
name|testChooseTargetWithMoreThanHalfStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|,
literal|"host4"
block|,
literal|"host5"
block|,
literal|"host6"
block|}
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[]
block|{
literal|"/d1/r1"
block|,
literal|"/d1/r1"
block|,
literal|"/d1/r2"
block|,
literal|"/d1/r2"
block|,
literal|"/d2/r3"
block|,
literal|"/d2/r3"
block|}
decl_stmt|;
name|MiniDFSCluster
name|miniCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
operator|.
name|hosts
argument_list|(
name|hosts
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|hosts
operator|.
name|length
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|miniCluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Step 1. Make two datanodes as stale, check whether the
comment|// avoidStaleDataNodesForWrite calculation is correct.
comment|// First stop the heartbeat of host1 and host2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dnDes
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDes
argument_list|,
operator|-
operator|(
name|staleInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Instead of waiting, explicitly call heartbeatCheck to
comment|// let heartbeat manager to detect stale nodes
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
name|int
name|numStaleNodes
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumStaleNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numStaleNodes
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|shouldAvoidStaleDataNodesForWrite
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call chooseTarget
name|DatanodeDescriptor
name|staleNodeInfo
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|BlockPlacementPolicy
name|replicator
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockPlacementPolicy
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|3
argument_list|,
name|staleNodeInfo
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|staleNodeInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// Step 2. Set more than half of the datanodes as stale
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDesc
argument_list|,
operator|-
operator|(
name|staleInterval
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Explicitly call heartbeatCheck
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
name|numStaleNodes
operator|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumStaleNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numStaleNodes
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// According to our strategy, stale datanodes will be included for writing
comment|// to avoid hotspots
name|assertFalse
argument_list|(
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|shouldAvoidStaleDataNodesForWrite
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call chooseTarget
name|targets
operator|=
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
literal|3
argument_list|,
name|staleNodeInfo
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|staleNodeInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// Step 3. Set 2 stale datanodes back to healthy nodes,
comment|// still have 2 stale nodes
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|miniCluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DataNodeTestUtils
operator|.
name|setHeartbeatsDisabledForTests
argument_list|(
name|dn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dnDesc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Explicitly call heartbeatCheck
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|heartbeatCheck
argument_list|()
expr_stmt|;
name|numStaleNodes
operator|=
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumStaleNodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numStaleNodes
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|miniCluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|shouldAvoidStaleDataNodesForWrite
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call chooseTarget
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|staleNodeInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|staleNodeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|miniCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This testcase tests re-replication, when dataNodes[0] is already chosen.    * So the 1st replica can be placed on random rack.     * the 2nd replica should be placed on different node by same rack as     * the 1st replica. The 3rd replica can be placed randomly.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate1 ()
specifier|public
name|void
name|testRereplicate1
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|3
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|targets
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests re-replication,     * when dataNodes[0] and dataNodes[1] are already chosen.    * So the 1st replica should be placed on a different rack than rack 1.     * the rest replicas can be placed randomly,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate2 ()
specifier|public
name|void
name|testRereplicate2
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|1
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests re-replication,     * when dataNodes[0] and dataNodes[2] are already chosen.    * So the 1st replica should be placed on the rack that the writer resides.     * the rest replicas can be placed randomly,    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRereplicate3 ()
specifier|public
name|void
name|testRereplicate3
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|targets
decl_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|0
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|1
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|targets
operator|=
name|chooseTarget
argument_list|(
literal|2
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targets
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isOnSameRack
argument_list|(
name|targets
index|[
literal|0
index|]
argument_list|,
name|dataNodes
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the high priority blocks are processed before the low priority    * blocks.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReplicationWithPriority ()
specifier|public
name|void
name|testReplicationWithPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|DFS_NAMENODE_REPLICATION_INTERVAL
init|=
literal|1000
decl_stmt|;
name|int
name|HIGH_PRIORITY
init|=
literal|0
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|UnderReplicatedBlocks
name|neededReplications
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|neededReplications
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// Adding the blocks directly to normal priority
name|neededReplications
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// Lets wait for the replication interval, to start process normal
comment|// priority blocks
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_NAMENODE_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
comment|// Adding the block directly to high priority list
name|neededReplications
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Lets wait for the replication interval
name|Thread
operator|.
name|sleep
argument_list|(
name|DFS_NAMENODE_REPLICATION_INTERVAL
argument_list|)
expr_stmt|;
comment|// Check replication completed successfully. Need not wait till it process
comment|// all the 100 normal blocks.
name|assertFalse
argument_list|(
literal|"Not able to clear the element from high priority list"
argument_list|,
name|neededReplications
operator|.
name|iterator
argument_list|(
name|HIGH_PRIORITY
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test for the ChooseUnderReplicatedBlocks are processed based on priority    */
annotation|@
name|Test
DECL|method|testChooseUnderReplicatedBlocks ()
specifier|public
name|void
name|testChooseUnderReplicatedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|UnderReplicatedBlocks
name|underReplicatedBlocks
init|=
operator|new
name|UnderReplicatedBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Adding QUEUE_HIGHEST_PRIORITY block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_VERY_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_REPLICAS_BADLY_DISTRIBUTED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_WITH_CORRUPT_BLOCKS block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// Choose 6 blocks from UnderReplicatedBlocks. Then it should pick 5 blocks
comment|// from
comment|// QUEUE_HIGHEST_PRIORITY and 1 block from QUEUE_VERY_UNDER_REPLICATED.
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
init|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Choose 10 blocks from UnderReplicatedBlocks. Then it should pick 4 blocks from
comment|// QUEUE_VERY_UNDER_REPLICATED, 5 blocks from QUEUE_UNDER_REPLICATED and 1
comment|// block from QUEUE_REPLICAS_BADLY_DISTRIBUTED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_HIGHEST_PRIORITY
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Choose 10 blocks from UnderReplicatedBlocks. Then it should pick 1 block from
comment|// QUEUE_HIGHEST_PRIORITY, 4 blocks from QUEUE_REPLICAS_BADLY_DISTRIBUTED
comment|// and 5 blocks from QUEUE_WITH_CORRUPT_BLOCKS.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Since it is reached to end of all lists,
comment|// should start picking the blocks from start.
comment|// Choose 7 blocks from UnderReplicatedBlocks. Then it should pick 6 blocks from
comment|// QUEUE_HIGHEST_PRIORITY, 1 block from QUEUE_VERY_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** asserts the chosen blocks with expected priority blocks */
DECL|method|assertTheChosenBlocks ( List<List<Block>> chosenBlocks, int firstPrioritySize, int secondPrioritySize, int thirdPrioritySize, int fourthPrioritySize, int fifthPrioritySize)
specifier|private
name|void
name|assertTheChosenBlocks
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
parameter_list|,
name|int
name|firstPrioritySize
parameter_list|,
name|int
name|secondPrioritySize
parameter_list|,
name|int
name|thirdPrioritySize
parameter_list|,
name|int
name|fourthPrioritySize
parameter_list|,
name|int
name|fifthPrioritySize
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Not returned the expected number of QUEUE_HIGHEST_PRIORITY blocks"
argument_list|,
name|firstPrioritySize
argument_list|,
name|chosenBlocks
operator|.
name|get
argument_list|(
name|UnderReplicatedBlocks
operator|.
name|QUEUE_HIGHEST_PRIORITY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returned the expected number of QUEUE_VERY_UNDER_REPLICATED blocks"
argument_list|,
name|secondPrioritySize
argument_list|,
name|chosenBlocks
operator|.
name|get
argument_list|(
name|UnderReplicatedBlocks
operator|.
name|QUEUE_VERY_UNDER_REPLICATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returned the expected number of QUEUE_UNDER_REPLICATED blocks"
argument_list|,
name|thirdPrioritySize
argument_list|,
name|chosenBlocks
operator|.
name|get
argument_list|(
name|UnderReplicatedBlocks
operator|.
name|QUEUE_UNDER_REPLICATED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returned the expected number of QUEUE_REPLICAS_BADLY_DISTRIBUTED blocks"
argument_list|,
name|fourthPrioritySize
argument_list|,
name|chosenBlocks
operator|.
name|get
argument_list|(
name|UnderReplicatedBlocks
operator|.
name|QUEUE_REPLICAS_BADLY_DISTRIBUTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not returned the expected number of QUEUE_WITH_CORRUPT_BLOCKS blocks"
argument_list|,
name|fifthPrioritySize
argument_list|,
name|chosenBlocks
operator|.
name|get
argument_list|(
name|UnderReplicatedBlocks
operator|.
name|QUEUE_WITH_CORRUPT_BLOCKS
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for the chooseReplicaToDelete are processed based on     * block locality and free space    */
annotation|@
name|Test
DECL|method|testChooseReplicaToDelete ()
specifier|public
name|void
name|testChooseReplicaToDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|replicaList
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|>
name|rackMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dataNodes
index|[
literal|0
index|]
operator|.
name|setRemaining
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaList
operator|.
name|add
argument_list|(
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|1
index|]
operator|.
name|setRemaining
argument_list|(
literal|3
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaList
operator|.
name|add
argument_list|(
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|2
index|]
operator|.
name|setRemaining
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaList
operator|.
name|add
argument_list|(
name|storages
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|dataNodes
index|[
literal|5
index|]
operator|.
name|setRemaining
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|replicaList
operator|.
name|add
argument_list|(
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Refresh the last update time for all the datanodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DFSTestUtil
operator|.
name|resetLastUpdatesWithOffset
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|first
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|second
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|replicator
operator|.
name|splitNodesWithRack
argument_list|(
name|replicaList
argument_list|,
name|rackMap
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
comment|// storages[0] and storages[1] are in first set as their rack has two
comment|// replica nodes, while storages[2] and dataNodes[5] are in second set.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|excessTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageType
argument_list|>
argument_list|()
decl_stmt|;
block|{
comment|// test returning null
name|excessTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|excessTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|excessTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
name|chosen
init|=
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|excessTypes
argument_list|)
decl_stmt|;
comment|// Within first set, storages[1] with less free space
name|assertEquals
argument_list|(
name|chosen
argument_list|,
name|storages
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|replicator
operator|.
name|adjustSetsWithChosenReplica
argument_list|(
name|rackMap
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Within second set, storages[5] with less free space
name|excessTypes
operator|.
name|add
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|chosen
operator|=
name|replicator
operator|.
name|chooseReplicaToDelete
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
name|first
argument_list|,
name|second
argument_list|,
name|excessTypes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|chosen
argument_list|,
name|storages
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests whether the default value returned by    * DFSUtil.getInvalidateWorkPctPerIteration() is positive,     * and whether an IllegalArgumentException will be thrown     * when 0.0f is retrieved    */
annotation|@
name|Test
DECL|method|testGetInvalidateWorkPctPerIteration ()
specifier|public
name|void
name|testGetInvalidateWorkPctPerIteration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|blocksInvalidateWorkPct
init|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blocksInvalidateWorkPct
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
literal|"0.5f"
argument_list|)
expr_stmt|;
name|blocksInvalidateWorkPct
operator|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blocksInvalidateWorkPct
argument_list|,
literal|0.5f
argument_list|,
name|blocksInvalidateWorkPct
operator|*
literal|1e-7
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
literal|"1.0f"
argument_list|)
expr_stmt|;
name|blocksInvalidateWorkPct
operator|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blocksInvalidateWorkPct
argument_list|,
literal|1.0f
argument_list|,
name|blocksInvalidateWorkPct
operator|*
literal|1e-7
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|blocksInvalidateWorkPct
operator|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests whether an IllegalArgumentException     * will be thrown when a negative value is retrieved by     * DFSUtil#getInvalidateWorkPctPerIteration    */
annotation|@
name|Test
DECL|method|testGetInvalidateWorkPctPerIteration_NegativeValue ()
specifier|public
name|void
name|testGetInvalidateWorkPctPerIteration_NegativeValue
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|blocksInvalidateWorkPct
init|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blocksInvalidateWorkPct
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
literal|"-0.5f"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|blocksInvalidateWorkPct
operator|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests whether an IllegalArgumentException     * will be thrown when a value greater than 1 is retrieved by     * DFSUtil#getInvalidateWorkPctPerIteration    */
annotation|@
name|Test
DECL|method|testGetInvalidateWorkPctPerIteration_GreaterThanOne ()
specifier|public
name|void
name|testGetInvalidateWorkPctPerIteration_GreaterThanOne
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|blocksInvalidateWorkPct
init|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blocksInvalidateWorkPct
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
literal|"1.5f"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|blocksInvalidateWorkPct
operator|=
name|DFSUtil
operator|.
name|getInvalidateWorkPctPerIteration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * This testcase tests whether the value returned by    * DFSUtil.getReplWorkMultiplier() is positive,    * and whether an IllegalArgumentException will be thrown     * when a non-positive value is retrieved    */
annotation|@
name|Test
DECL|method|testGetReplWorkMultiplier ()
specifier|public
name|void
name|testGetReplWorkMultiplier
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|blocksReplWorkMultiplier
init|=
name|DFSUtil
operator|.
name|getReplWorkMultiplier
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blocksReplWorkMultiplier
operator|>
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|blocksReplWorkMultiplier
operator|=
name|DFSUtil
operator|.
name|getReplWorkMultiplier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blocksReplWorkMultiplier
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|blocksReplWorkMultiplier
operator|=
name|DFSUtil
operator|.
name|getReplWorkMultiplier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateDoesNotCauseSkippedReplication ()
specifier|public
name|void
name|testUpdateDoesNotCauseSkippedReplication
parameter_list|()
block|{
name|UnderReplicatedBlocks
name|underReplicatedBlocks
init|=
operator|new
name|UnderReplicatedBlocks
argument_list|()
decl_stmt|;
name|Block
name|block1
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|block2
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|block3
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adding QUEUE_VERY_UNDER_REPLICATED block
specifier|final
name|int
name|block1CurReplicas
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|block1ExpectedReplicas
init|=
literal|7
decl_stmt|;
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block1
argument_list|,
name|block1CurReplicas
argument_list|,
literal|0
argument_list|,
name|block1ExpectedReplicas
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_VERY_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
decl_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Increasing the replications will move the block down a
comment|// priority.  This simulates a replica being completed in between checks.
name|underReplicatedBlocks
operator|.
name|update
argument_list|(
name|block1
argument_list|,
name|block1CurReplicas
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|block1ExpectedReplicas
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
comment|// This block was moved up a priority and should not be skipped over.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddStoredBlockDoesNotCauseSkippedReplication ()
specifier|public
name|void
name|testAddStoredBlockDoesNotCauseSkippedReplication
parameter_list|()
throws|throws
name|IOException
block|{
name|Namesystem
name|mockNS
init|=
name|mock
argument_list|(
name|Namesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNS
operator|.
name|isPopulatingReplQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNS
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockManager
name|bm
init|=
operator|new
name|BlockManager
argument_list|(
name|mockNS
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|UnderReplicatedBlocks
name|underReplicatedBlocks
init|=
name|bm
operator|.
name|neededReplications
decl_stmt|;
name|Block
name|block1
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|block2
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
decl_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Adding this block collection to the BlockManager, so that when we add the
comment|// block under construction, the BlockManager will realize the expected
comment|// replication has been achieved and remove it from the under-replicated
comment|// queue.
name|BlockInfoContiguousUnderConstruction
name|info
init|=
operator|new
name|BlockInfoContiguousUnderConstruction
argument_list|(
name|block1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|BlockCollection
name|bc
init|=
name|mock
argument_list|(
name|BlockCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|bc
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bm
operator|.
name|addBlockCollection
argument_list|(
name|info
argument_list|,
name|bc
argument_list|)
expr_stmt|;
comment|// Adding this block will increase its current replication, and that will
comment|// remove it from the queue.
name|bm
operator|.
name|addStoredBlockUnderConstruction
argument_list|(
operator|new
name|StatefulBlockInfo
argument_list|(
name|info
argument_list|,
name|info
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
argument_list|,
name|TestReplicationPolicy
operator|.
name|storages
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
comment|// This block remains and should not be skipped over.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
DECL|method|testConvertLastBlockToUnderConstructionDoesNotCauseSkippedReplication ()
name|testConvertLastBlockToUnderConstructionDoesNotCauseSkippedReplication
parameter_list|()
throws|throws
name|IOException
block|{
name|Namesystem
name|mockNS
init|=
name|mock
argument_list|(
name|Namesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNS
operator|.
name|isPopulatingReplQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockManager
name|bm
init|=
operator|new
name|BlockManager
argument_list|(
name|mockNS
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|UnderReplicatedBlocks
name|underReplicatedBlocks
init|=
name|bm
operator|.
name|neededReplications
decl_stmt|;
name|Block
name|block1
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|block2
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
decl_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|BlockInfoContiguous
name|info
init|=
operator|new
name|BlockInfoContiguous
argument_list|(
name|block1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|BlockCollection
name|mbc
init|=
name|mock
argument_list|(
name|BlockCollection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|getLastBlock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|block1
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ContentSummary
name|cs
init|=
name|mock
argument_list|(
name|ContentSummary
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|computeContentSummary
argument_list|(
name|bm
operator|.
name|getStoragePolicySuite
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|info
operator|.
name|setBlockCollection
argument_list|(
name|mbc
argument_list|)
expr_stmt|;
name|bm
operator|.
name|addBlockCollection
argument_list|(
name|info
argument_list|,
name|mbc
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|storageAry
init|=
block|{
operator|new
name|DatanodeStorageInfo
argument_list|(
name|dataNodes
index|[
literal|0
index|]
argument_list|,
operator|new
name|DatanodeStorage
argument_list|(
literal|"s1"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|final
name|BlockInfoContiguousUnderConstruction
name|ucBlock
init|=
name|info
operator|.
name|convertToBlockUnderConstruction
argument_list|(
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|storageAry
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
name|storage
init|=
name|mock
argument_list|(
name|DatanodeStorageInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|dn
init|=
name|mock
argument_list|(
name|DatanodeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dn
operator|.
name|isDecommissioned
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|removeBlock
argument_list|(
name|any
argument_list|(
name|BlockInfoContiguous
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storage
operator|.
name|addBlock
argument_list|(
name|any
argument_list|(
name|BlockInfoContiguous
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DatanodeStorageInfo
operator|.
name|AddBlockResult
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|ucBlock
operator|.
name|addStorage
argument_list|(
name|storage
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mbc
operator|.
name|setLastBlock
argument_list|(
operator|(
name|BlockInfoContiguous
operator|)
name|any
argument_list|()
argument_list|,
operator|(
name|DatanodeStorageInfo
index|[]
operator|)
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ucBlock
argument_list|)
expr_stmt|;
name|bm
operator|.
name|convertLastBlockToUnderConstruction
argument_list|(
name|mbc
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
comment|// This block remains and should not be skipped over.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testupdateNeededReplicationsDoesNotCauseSkippedReplication ()
specifier|public
name|void
name|testupdateNeededReplicationsDoesNotCauseSkippedReplication
parameter_list|()
throws|throws
name|IOException
block|{
name|Namesystem
name|mockNS
init|=
name|mock
argument_list|(
name|Namesystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNS
operator|.
name|isPopulatingReplQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockManager
name|bm
init|=
operator|new
name|BlockManager
argument_list|(
name|mockNS
argument_list|,
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|UnderReplicatedBlocks
name|underReplicatedBlocks
init|=
name|bm
operator|.
name|neededReplications
decl_stmt|;
name|Block
name|block1
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|block2
init|=
operator|new
name|Block
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Adding QUEUE_UNDER_REPLICATED block
name|underReplicatedBlocks
operator|.
name|add
argument_list|(
name|block2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Block
argument_list|>
argument_list|>
name|chosenBlocks
decl_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bm
operator|.
name|setReplication
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|""
argument_list|,
name|block1
argument_list|)
expr_stmt|;
comment|// Choose 1 block from UnderReplicatedBlocks. Then it should pick 1 block
comment|// from QUEUE_VERY_UNDER_REPLICATED.
comment|// This block remains and should not be skipped over.
name|chosenBlocks
operator|=
name|underReplicatedBlocks
operator|.
name|chooseUnderReplicatedBlocks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTheChosenBlocks
argument_list|(
name|chosenBlocks
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

