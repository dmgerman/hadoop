begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|ExitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClusterId
specifier|public
class|class
name|TestClusterId
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClusterId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hdfsDir
name|File
name|hdfsDir
decl_stmt|;
DECL|field|config
name|Configuration
name|config
decl_stmt|;
DECL|method|getClusterId (Configuration config)
specifier|private
name|String
name|getClusterId
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
comment|// see if cluster id not empty.
name|Collection
argument_list|<
name|URI
argument_list|>
name|dirsToFormat
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|editsToFormat
init|=
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|FSImage
name|fsImage
init|=
operator|new
name|FSImage
argument_list|(
name|config
argument_list|,
name|dirsToFormat
argument_list|,
name|editsToFormat
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|sdit
init|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NNStorage
operator|.
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|sdit
operator|.
name|next
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|Storage
operator|.
name|readPropertiesFile
argument_list|(
name|sd
operator|.
name|getVersionFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cid
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"clusterID"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"successfully formated : sd="
operator|+
name|sd
operator|.
name|getCurrentDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|cid
argument_list|)
expr_stmt|;
return|return
name|cid
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
name|String
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDirName
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hdfsDir
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"dfs/name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete test directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"hdfsdir is "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// as some tests might change these values we reset them to defaults before
comment|// every test
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setForceFormat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setInteractiveFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|hdfsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not tearDown test directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFormatClusterIdOption ()
specifier|public
name|void
name|testFormatClusterIdOption
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 1. should format without cluster id
comment|//StartupOption.FORMAT.setClusterId("");
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// see if cluster id not empty.
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// 2. successful format with given clusterid
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
literal|"mycluster"
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// see if cluster id matches with given clusterid.
name|cid
operator|=
name|getClusterId
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ClusterId didn't match"
argument_list|,
name|cid
operator|.
name|equals
argument_list|(
literal|"mycluster"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. format without any clusterid again. It should generate new
comment|//clusterid.
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|newCid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"ClusterId should not be the same"
argument_list|,
name|newCid
operator|.
name|equals
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format option. Format should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format option when an empty name directory    * exists. Format should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithEmptyDir ()
specifier|public
name|void
name|testFormatWithEmptyDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hdfsDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|hdfsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -force options when name directory    * exists. Format should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithForce ()
specifier|public
name|void
name|testFormatWithForce
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hdfsDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|hdfsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-force"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -force -clusterid option when name    * directory exists. Format should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithForceAndClusterId ()
specifier|public
name|void
name|testFormatWithForceAndClusterId
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hdfsDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|hdfsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|myId
init|=
literal|"testFormatWithForceAndClusterId"
decl_stmt|;
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-force"
block|,
literal|"-clusterid"
block|,
name|myId
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cId
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ClusterIds do not match"
argument_list|,
name|myId
argument_list|,
name|cId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -clusterid -force option. Format command should    * fail as no cluster id was provided.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithInvalidClusterIdOption ()
specifier|public
name|void
name|testFormatWithInvalidClusterIdOption
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-clusterid"
block|,
literal|"-force"
block|}
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|stdErr
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|stdErr
argument_list|)
expr_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Check if usage is printed
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Usage: hdfs namenode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
comment|// check if the version file does not exists.
name|File
name|version
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check version should not exist"
argument_list|,
name|version
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -clusterid options. Format should fail    * was no clusterid was sent.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithNoClusterIdOption ()
specifier|public
name|void
name|testFormatWithNoClusterIdOption
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-clusterid"
block|}
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|stdErr
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|stdErr
argument_list|)
expr_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Check if usage is printed
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Usage: hdfs namenode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
comment|// check if the version file does not exists.
name|File
name|version
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check version should not exist"
argument_list|,
name|version
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -clusterid and empty clusterid. Format    * should fail as no valid if was provided.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithEmptyClusterIdOption ()
specifier|public
name|void
name|testFormatWithEmptyClusterIdOption
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-clusterid"
block|,
literal|""
block|}
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|stdErr
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|stdErr
argument_list|)
expr_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// Check if usage is printed
name|assertTrue
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Usage: hdfs namenode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
comment|// check if the version file does not exists.
name|File
name|version
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check version should not exist"
argument_list|,
name|version
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -nonInteractive options when a non empty    * name directory exists. Format should not succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithNonInteractive ()
specifier|public
name|void
name|testFormatWithNonInteractive
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we check for a non empty dir, so create a child path
name|File
name|data
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|data
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-nonInteractive"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have been aborted with exit code 1"
argument_list|,
literal|1
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
comment|// check if the version file does not exists.
name|File
name|version
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check version should not exist"
argument_list|,
name|version
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format -nonInteractive options when name    * directory does not exist. Format should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithNonInteractiveNameDirDoesNotExit ()
specifier|public
name|void
name|testFormatWithNonInteractiveNameDirDoesNotExit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-nonInteractive"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -force -nonInteractive -force option. Format    * should succeed.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testFormatWithNonInteractiveAndForce ()
specifier|public
name|void
name|testFormatWithNonInteractiveAndForce
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hdfsDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|hdfsDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|,
literal|"-nonInteractive"
block|,
literal|"-force"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format option when a non empty name directory    * exists. Enter Y when prompted and the format should succeed.    *     * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testFormatWithoutForceEnterYes ()
specifier|public
name|void
name|testFormatWithoutForceEnterYes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// we check for a non empty dir, so create a child path
name|File
name|data
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|data
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// capture the input stream
name|InputStream
name|origIn
init|=
name|System
operator|.
name|in
decl_stmt|;
name|ByteArrayInputStream
name|bins
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Y\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|bins
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should have succeeded"
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setIn
argument_list|(
name|origIn
argument_list|)
expr_stmt|;
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test namenode format with -format option when a non empty name directory    * exists. Enter N when prompted and format should be aborted.    *     * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testFormatWithoutForceEnterNo ()
specifier|public
name|void
name|testFormatWithoutForceEnterNo
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// we check for a non empty dir, so create a child path
name|File
name|data
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to create dir "
operator|+
name|data
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// capture the input stream
name|InputStream
name|origIn
init|=
name|System
operator|.
name|in
decl_stmt|;
name|ByteArrayInputStream
name|bins
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"N\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|bins
argument_list|)
expr_stmt|;
name|String
index|[]
name|argv
init|=
block|{
literal|"-format"
block|}
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|createNameNode
argument_list|(
name|argv
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createNameNode() did not call System.exit()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Format should not have succeeded"
argument_list|,
literal|1
argument_list|,
name|e
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setIn
argument_list|(
name|origIn
argument_list|)
expr_stmt|;
comment|// check if the version file does not exists.
name|File
name|version
init|=
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"current/VERSION"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Check version should not exist"
argument_list|,
name|version
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test NameNode format failure when reformat is disabled and metadata    * directories exist.    */
annotation|@
name|Test
DECL|method|testNNFormatFailure ()
specifier|public
name|void
name|testNNFormatFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|config
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REFORMAT_DISABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Call to NameNode format will fail as name dir is not empty
try|try
block|{
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NN format should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NameNodeFormatException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"NameNode format aborted as "
operator|+
literal|"reformat is disabled for this cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test NameNode format when reformat is disabled and metadata directories do    * not exist.    */
annotation|@
name|Test
DECL|method|testNNFormatSuccess ()
specifier|public
name|void
name|testNNFormatSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|config
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REFORMAT_DISABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

