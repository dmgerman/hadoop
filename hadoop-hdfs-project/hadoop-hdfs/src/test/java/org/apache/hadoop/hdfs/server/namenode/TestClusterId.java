begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClusterId
specifier|public
class|class
name|TestClusterId
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClusterId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hdfsDir
name|File
name|hdfsDir
decl_stmt|;
DECL|method|getClusterId (Configuration config)
specifier|private
name|String
name|getClusterId
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
comment|// see if cluster id not empty.
name|Collection
argument_list|<
name|URI
argument_list|>
name|dirsToFormat
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|editsToFormat
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSImage
name|fsImage
init|=
operator|new
name|FSImage
argument_list|(
name|config
argument_list|,
name|dirsToFormat
argument_list|,
name|editsToFormat
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|sdit
init|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|(
name|NNStorage
operator|.
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|)
decl_stmt|;
name|StorageDirectory
name|sd
init|=
name|sdit
operator|.
name|next
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|Storage
operator|.
name|readPropertiesFile
argument_list|(
name|sd
operator|.
name|getVersionFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cid
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"clusterID"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"successfully formated : sd="
operator|+
name|sd
operator|.
name|getCurrentDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|cid
argument_list|)
expr_stmt|;
return|return
name|cid
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|baseDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
decl_stmt|;
name|hdfsDir
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"dfs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not delete test directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"hdfsdir is "
operator|+
name|hdfsDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hdfsDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|hdfsDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not tearDown test directory '"
operator|+
name|hdfsDir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFormatClusterIdOption ()
specifier|public
name|void
name|testFormatClusterIdOption
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|hdfsDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1. should format without cluster id
comment|//StartupOption.FORMAT.setClusterId("");
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// see if cluster id not empty.
name|String
name|cid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Didn't get new ClusterId"
argument_list|,
operator|(
name|cid
operator|!=
literal|null
operator|&&
operator|!
name|cid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// 2. successful format with given clusterid
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
literal|"mycluster"
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// see if cluster id matches with given clusterid.
name|cid
operator|=
name|getClusterId
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ClusterId didn't match"
argument_list|,
name|cid
operator|.
name|equals
argument_list|(
literal|"mycluster"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. format without any clusterid again. It should generate new
comment|//clusterid.
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|format
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|newCid
init|=
name|getClusterId
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"ClusterId should not be the same"
argument_list|,
name|newCid
operator|.
name|equals
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

