begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|QJMTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|RequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestJournal
specifier|public
class|class
name|TestJournal
block|{
DECL|field|FAKE_NSINFO
specifier|private
specifier|static
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|12345
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|FAKE_NSINFO_2
specifier|private
specifier|static
specifier|final
name|NamespaceInfo
name|FAKE_NSINFO_2
init|=
operator|new
name|NamespaceInfo
argument_list|(
literal|6789
argument_list|,
literal|"mycluster"
argument_list|,
literal|"my-bp"
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|JID
specifier|private
specifier|static
specifier|final
name|String
name|JID
init|=
literal|"test-journal"
decl_stmt|;
DECL|field|TEST_LOG_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_LOG_DIR
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
argument_list|,
literal|"TestJournal"
argument_list|)
decl_stmt|;
DECL|field|mockErrorReporter
specifier|private
name|StorageErrorReporter
name|mockErrorReporter
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StorageErrorReporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|journal
specifier|private
name|Journal
name|journal
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_LOG_DIR
argument_list|)
expr_stmt|;
name|journal
operator|=
operator|new
name|Journal
argument_list|(
name|TEST_LOG_DIR
argument_list|,
name|mockErrorReporter
argument_list|)
expr_stmt|;
name|journal
operator|.
name|format
argument_list|(
name|FAKE_NSINFO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|verifyNoStorageErrors ()
specifier|public
name|void
name|verifyNoStorageErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockErrorReporter
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|reportErrorOnFile
argument_list|(
name|Mockito
operator|.
expr|<
name|File
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEpochHandling ()
specifier|public
name|void
name|testEpochHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|journal
operator|.
name|getLastPromisedEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|NewEpochResponseProto
name|newEpoch
init|=
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|newEpoch
operator|.
name|hasLastSegmentTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|journal
operator|.
name|getLastPromisedEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|newEpoch
operator|.
name|hasLastSegmentTxId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|journal
operator|.
name|getLastPromisedEpoch
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to promise same epoch twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Proposed epoch 3<= last promise 3"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|journal
operator|.
name|startLogSegment
argument_list|(
operator|new
name|RequestInfo
argument_list|(
name|JID
argument_list|,
literal|1L
argument_list|,
literal|1L
argument_list|)
argument_list|,
literal|12345L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected call from prior epoch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"epoch 1 is less than the last promised epoch 3"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|journal
operator|.
name|journal
argument_list|(
operator|new
name|RequestInfo
argument_list|(
name|JID
argument_list|,
literal|1L
argument_list|,
literal|1L
argument_list|)
argument_list|,
literal|100L
argument_list|,
literal|0
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have rejected call from prior epoch"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"epoch 1 is less than the last promised epoch 3"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRestartJournal ()
specifier|public
name|void
name|testRestartJournal
parameter_list|()
throws|throws
name|Exception
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|journal
operator|.
name|startLogSegment
argument_list|(
operator|new
name|RequestInfo
argument_list|(
literal|"j"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|journal
operator|.
name|journal
argument_list|(
operator|new
name|RequestInfo
argument_list|(
literal|"j"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|QJMTestUtil
operator|.
name|createTxnData
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Don't finalize.
name|String
name|storageString
init|=
name|journal
operator|.
name|getStorage
argument_list|()
operator|.
name|toColonSeparatedString
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"storage string: "
operator|+
name|storageString
argument_list|)
expr_stmt|;
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close to unlock the storage dir
comment|// Now re-instantiate, make sure history is still there
name|journal
operator|=
operator|new
name|Journal
argument_list|(
name|TEST_LOG_DIR
argument_list|,
name|mockErrorReporter
argument_list|)
expr_stmt|;
comment|// The storage info should be read, even if no writer has taken over.
name|assertEquals
argument_list|(
name|storageString
argument_list|,
name|journal
operator|.
name|getStorage
argument_list|()
operator|.
name|toColonSeparatedString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|journal
operator|.
name|getLastPromisedEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|NewEpochResponseProtoOrBuilder
name|newEpoch
init|=
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newEpoch
operator|.
name|getLastSegmentTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJournalLocking ()
specifier|public
name|void
name|testJournalLocking
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|journal
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
operator|.
name|isLockSupported
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDirectory
name|sd
init|=
name|journal
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageDir
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|File
name|lockFile
init|=
operator|new
name|File
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|,
name|Storage
operator|.
name|STORAGE_FILE_LOCK
argument_list|)
decl_stmt|;
comment|// Journal should be locked, since the format() call locks it.
name|GenericTestUtils
operator|.
name|assertExists
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|Journal
argument_list|(
name|TEST_LOG_DIR
argument_list|,
name|mockErrorReporter
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail to create another journal in same dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot lock storage"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Journal should no longer be locked after the close() call.
comment|// Hence, should be able to create a new Journal in the same dir.
name|Journal
name|journal2
init|=
operator|new
name|Journal
argument_list|(
name|TEST_LOG_DIR
argument_list|,
name|mockErrorReporter
argument_list|)
decl_stmt|;
name|journal2
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test finalizing a segment after some batch of edits were missed.    * This should fail, since we validate the log before finalization.    */
annotation|@
name|Test
DECL|method|testFinalizeWhenEditsAreMissed ()
specifier|public
name|void
name|testFinalizeWhenEditsAreMissed
parameter_list|()
throws|throws
name|Exception
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|journal
operator|.
name|startLogSegment
argument_list|(
name|makeRI
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|journal
operator|.
name|journal
argument_list|(
name|makeRI
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|QJMTestUtil
operator|.
name|createTxnData
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to finalize up to txn 6, even though we only wrote up to txn 3.
try|try
block|{
name|journal
operator|.
name|finalizeLogSegment
argument_list|(
name|makeRI
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not fail to finalize"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"but current state of log is"
argument_list|,
name|ise
argument_list|)
expr_stmt|;
block|}
comment|// Check that, even if we re-construct the journal by scanning the
comment|// disk, we don't allow finalizing incorrectly.
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
name|journal
operator|=
operator|new
name|Journal
argument_list|(
name|TEST_LOG_DIR
argument_list|,
name|mockErrorReporter
argument_list|)
expr_stmt|;
try|try
block|{
name|journal
operator|.
name|finalizeLogSegment
argument_list|(
name|makeRI
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not fail to finalize"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"but current state of log is"
argument_list|,
name|ise
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that finalizing a segment which doesn't exist throws the    * appropriate exception.    */
annotation|@
name|Test
DECL|method|testFinalizeMissingSegment ()
specifier|public
name|void
name|testFinalizeMissingSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|journal
operator|.
name|finalizeLogSegment
argument_list|(
name|makeRI
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|1001
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not fail to finalize"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No log file to finalize at transaction ID 1000"
argument_list|,
name|ise
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeRI (int serial)
specifier|private
specifier|static
name|RequestInfo
name|makeRI
parameter_list|(
name|int
name|serial
parameter_list|)
block|{
return|return
operator|new
name|RequestInfo
argument_list|(
name|JID
argument_list|,
literal|1
argument_list|,
name|serial
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testNamespaceVerification ()
specifier|public
name|void
name|testNamespaceVerification
parameter_list|()
throws|throws
name|Exception
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|journal
operator|.
name|newEpoch
argument_list|(
name|FAKE_NSINFO_2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail newEpoch() when namespaces mismatched"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Incompatible namespaceID"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

