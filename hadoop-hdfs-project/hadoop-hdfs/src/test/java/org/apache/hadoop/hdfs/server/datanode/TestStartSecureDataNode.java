begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtilTestHelper
operator|.
name|isExternalKdcRunning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_comment
comment|/**  * This test starts a 1 NameNode 1 DataNode MiniDFSCluster with  * kerberos authentication enabled using user-specified KDC,  * principals, and keytabs.  *  * A secure DataNode has to be started by root, so this test needs to  * be run by root.  *  * To run, users must specify the following system properties:  *   externalKdc=true  *   java.security.krb5.conf  *   dfs.namenode.kerberos.principal  *   dfs.namenode.kerberos.internal.spnego.principal  *   dfs.namenode.keytab.file  *   dfs.datanode.kerberos.principal  *   dfs.datanode.keytab.file  */
end_comment

begin_class
DECL|class|TestStartSecureDataNode
specifier|public
class|class
name|TestStartSecureDataNode
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|NUM_OF_DATANODES
specifier|final
specifier|static
specifier|private
name|int
name|NUM_OF_DATANODES
init|=
literal|1
decl_stmt|;
DECL|method|testExternalKdcRunning ()
specifier|private
name|void
name|testExternalKdcRunning
parameter_list|()
block|{
comment|// Tests are skipped if external KDC is not running.
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isExternalKdcRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureNameNode ()
specifier|public
name|void
name|testSecureNameNode
parameter_list|()
throws|throws
name|Exception
block|{
name|testExternalKdcRunning
argument_list|()
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|nnPrincipal
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dfs.namenode.kerberos.principal"
argument_list|)
decl_stmt|;
name|String
name|nnSpnegoPrincipal
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dfs.namenode.kerberos.internal.spnego.principal"
argument_list|)
decl_stmt|;
name|String
name|nnKeyTab
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dfs.namenode.keytab.file"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"NameNode principal was not specified"
argument_list|,
name|nnPrincipal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"NameNode SPNEGO principal was not specified"
argument_list|,
name|nnSpnegoPrincipal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"NameNode keytab was not specified"
argument_list|,
name|nnKeyTab
argument_list|)
expr_stmt|;
name|String
name|dnPrincipal
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dfs.datanode.kerberos.principal"
argument_list|)
decl_stmt|;
name|String
name|dnKeyTab
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"dfs.datanode.keytab.file"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"DataNode principal was not specified"
argument_list|,
name|dnPrincipal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"DataNode keytab was not specified"
argument_list|,
name|dnKeyTab
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|nnPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY
argument_list|,
name|nnSpnegoPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|nnKeyTab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|dnPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|dnKeyTab
argument_list|)
expr_stmt|;
comment|// Secure DataNode requires using ports lower than 1024.
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:1004"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:1006"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_OF_DATANODES
argument_list|)
operator|.
name|checkDataNodeAddrConfig
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This test doesn't require KDC or other security settings as it expects    * {@link java.net.BindException}. Testing is done with unprivileged port    * for {@code dfs.datanode.address}.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStreamingAddrBindException ()
specifier|public
name|void
name|testStreamingAddrBindException
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerSocket
name|ss
init|=
operator|new
name|ServerSocket
argument_list|()
decl_stmt|;
try|try
block|{
name|ss
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|BindException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"localhost/127.0.0.1:"
operator|+
name|ss
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"localhost:"
operator|+
name|ss
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|SecureDataNodeStarter
operator|.
name|getSecureResources
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test doesn't require KDC or other security settings as it expects    * {@link java.net.BindException}. Testing is done with unprivileged port    * for {@code dfs.datanode.http.address}.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWebServerAddrBindException ()
specifier|public
name|void
name|testWebServerAddrBindException
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerSocket
name|ss
init|=
operator|new
name|ServerSocket
argument_list|()
decl_stmt|;
try|try
block|{
name|ss
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|BindException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"localhost/127.0.0.1:"
operator|+
name|ss
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"localhost:"
operator|+
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"localhost:"
operator|+
name|ss
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|SecureDataNodeStarter
operator|.
name|getSecureResources
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

