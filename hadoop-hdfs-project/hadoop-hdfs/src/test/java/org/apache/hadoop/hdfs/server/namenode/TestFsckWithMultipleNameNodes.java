begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ViewFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|TestBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test fsck with multiple NameNodes  */
end_comment

begin_class
DECL|class|TestFsckWithMultipleNameNodes
specifier|public
class|class
name|TestFsckWithMultipleNameNodes
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFsckWithMultipleNameNodes
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|DFSTestUtil
operator|.
name|setNameNodeLogLevel
parameter_list|(
name|Level
operator|.
name|ALL
parameter_list|)
constructor_decl|;
block|}
DECL|field|FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"/tmp.txt"
decl_stmt|;
DECL|field|FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|FILE_PATH
init|=
operator|new
name|Path
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
static|static
block|{
name|TestBalancer
operator|.
name|initTestSetup
argument_list|()
expr_stmt|;
block|}
comment|/** Common objects used in various methods. */
DECL|class|Suite
specifier|private
specifier|static
class|class
name|Suite
block|{
DECL|field|cluster
specifier|final
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|clients
specifier|final
name|ClientProtocol
index|[]
name|clients
decl_stmt|;
DECL|field|replication
specifier|final
name|short
name|replication
decl_stmt|;
DECL|method|Suite (MiniDFSCluster cluster, final int nNameNodes, final int nDataNodes)
name|Suite
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
specifier|final
name|int
name|nNameNodes
parameter_list|,
specifier|final
name|int
name|nDataNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|clients
operator|=
operator|new
name|ClientProtocol
index|[
name|nNameNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nNameNodes
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|(
name|i
argument_list|)
operator|.
name|getRpcServer
argument_list|()
expr_stmt|;
block|}
name|replication
operator|=
operator|(
name|short
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|nDataNodes
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/** create a file with a length of<code>fileLen</code> */
DECL|method|createFile (int index, long len )
specifier|private
name|void
name|createFile
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|FILE_PATH
argument_list|,
name|len
argument_list|,
name|replication
argument_list|,
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|FILE_PATH
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createConf ()
specifier|private
specifier|static
name|Configuration
name|createConf
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|10000L
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|runTest (final int nNameNodes, final int nDataNodes, Configuration conf)
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|int
name|nNameNodes
parameter_list|,
specifier|final
name|int
name|nDataNodes
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"nNameNodes="
operator|+
name|nNameNodes
operator|+
literal|", nDataNodes="
operator|+
name|nDataNodes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST -1"
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|nNameNodes
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|nDataNodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST 0"
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|setFederatedConfiguration
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST 1"
argument_list|)
expr_stmt|;
specifier|final
name|Suite
name|s
init|=
operator|new
name|Suite
argument_list|(
name|cluster
argument_list|,
name|nNameNodes
argument_list|,
name|nDataNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nNameNodes
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|createFile
argument_list|(
name|i
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST 2"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|urls
init|=
operator|new
name|String
index|[
name|nNameNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|urls
index|[
name|i
index|]
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|i
argument_list|)
operator|.
name|getUri
argument_list|()
operator|+
name|FILE_NAME
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"urls["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|urls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|TestFsck
operator|.
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|urls
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"Status: HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test viewfs
comment|//
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST 3"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|vurls
init|=
operator|new
name|String
index|[
name|nNameNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vurls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|link
init|=
literal|"/mount/nn_"
operator|+
name|i
operator|+
name|FILE_NAME
decl_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
name|link
argument_list|,
operator|new
name|URI
argument_list|(
name|urls
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|vurls
index|[
name|i
index|]
operator|=
literal|"viewfs:"
operator|+
name|link
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vurls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"vurls["
operator|+
name|i
operator|+
literal|"]="
operator|+
name|vurls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|TestFsck
operator|.
name|runFsck
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|vurls
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"result="
operator|+
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"Status: HEALTHY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RUN_TEST 6"
argument_list|)
expr_stmt|;
block|}
comment|/** Test a cluster with even distribution,     * then a new empty node is added to the cluster    */
annotation|@
name|Test
DECL|method|testFsck ()
specifier|public
name|void
name|testFsck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|runTest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

