begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestDFSPermission
operator|.
name|PermissionGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AsyncCallLimitExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAsyncDFSRename
specifier|public
class|class
name|TestAsyncDFSRename
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAsyncDFSRename
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|seed
specifier|private
specifier|final
name|long
name|seed
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
DECL|field|permGenerator
specifier|private
specifier|final
name|PermissionGenerator
name|permGenerator
init|=
operator|new
name|PermissionGenerator
argument_list|(
name|r
argument_list|)
decl_stmt|;
DECL|field|replFactor
specifier|private
specifier|final
name|short
name|replFactor
init|=
literal|2
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
DECL|field|fileLen
specifier|private
name|long
name|fileLen
init|=
name|blockSize
operator|*
literal|3
decl_stmt|;
comment|/**    * Check the blocks of dst file are cleaned after rename with overwrite    * Restart NN to check the rename successfully    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAsyncRenameWithOverwrite ()
specifier|public
name|void
name|testAsyncRenameWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|replFactor
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|dfs
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|src
init|=
literal|"/foo/src"
decl_stmt|;
name|String
name|dst
init|=
literal|"/foo/dst"
decl_stmt|;
name|String
name|src2
init|=
literal|"/foo/src2"
decl_stmt|;
name|String
name|dst2
init|=
literal|"/foo/dst2"
decl_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|Path
name|srcPath2
init|=
operator|new
name|Path
argument_list|(
name|src2
argument_list|)
decl_stmt|;
name|Path
name|dstPath2
init|=
operator|new
name|Path
argument_list|(
name|dst2
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|srcPath
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|dstPath
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|srcPath2
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|dstPath2
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|lbs
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dst
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|lbs2
init|=
name|NameNodeAdapter
operator|.
name|getBlockLocations
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dst2
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
name|BlockManager
name|bm
init|=
name|NameNodeAdapter
operator|.
name|getNamesystem
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|lbs2
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|retVal1
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|retVal2
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|srcPath2
argument_list|,
name|dstPath2
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|retVal1
operator|.
name|get
argument_list|()
expr_stmt|;
name|retVal2
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|lbs2
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Restart NN and check the rename successfully
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|srcPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|dstPath2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCallGetReturnValueMultipleTimes ()
specifier|public
name|void
name|testCallGetReturnValueMultipleTimes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|renameDir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testCallGetReturnValueMultipleTimes/"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_ASYNC_CALLS_MAX_KEY
argument_list|,
literal|200
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|AsyncDistributedFileSystem
name|adfs
init|=
name|dfs
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|100
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|returnFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|renameDir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// concurrently invoking many rename
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|src
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|dst
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|returnFuture
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|returnFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|returnFuture
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|verifyCallGetReturnValueMultipleTimes
argument_list|(
name|returnFutures
argument_list|,
name|count
argument_list|,
name|cluster
argument_list|,
name|renameDir
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyCallGetReturnValueMultipleTimes ( Map<Integer, Future<Void>> returnFutures, int count, MiniDFSCluster cluster, Path renameDir, DistributedFileSystem dfs)
specifier|private
name|void
name|verifyCallGetReturnValueMultipleTimes
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|returnFutures
parameter_list|,
name|int
name|count
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|renameDir
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
comment|// wait for completing the calls
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|returnFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Restart NN and check the rename successfully
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// very the src dir should not exist, dst should
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConservativeConcurrentAsyncRenameWithOverwrite ()
specifier|public
name|void
name|testConservativeConcurrentAsyncRenameWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestConcurrentAsyncRenameWithOverwrite
argument_list|(
literal|100
argument_list|,
literal|"testAggressiveConcurrentAsyncRenameWithOverwrite"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAggressiveConcurrentAsyncRenameWithOverwrite ()
specifier|public
name|void
name|testAggressiveConcurrentAsyncRenameWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestConcurrentAsyncRenameWithOverwrite
argument_list|(
literal|10000
argument_list|,
literal|"testConservativeConcurrentAsyncRenameWithOverwrite"
argument_list|)
expr_stmt|;
block|}
DECL|method|internalTestConcurrentAsyncRenameWithOverwrite ( final int asyncCallLimit, final String basePath)
specifier|private
name|void
name|internalTestConcurrentAsyncRenameWithOverwrite
parameter_list|(
specifier|final
name|int
name|asyncCallLimit
parameter_list|,
specifier|final
name|String
name|basePath
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|renameDir
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/test/%s/"
argument_list|,
name|basePath
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_ASYNC_CALLS_MAX_KEY
argument_list|,
name|asyncCallLimit
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|dfs
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|1000
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|,
name|end
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|returnFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|renameDir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// concurrently invoking many rename
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|src
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|dst
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"rename #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|returnFuture
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|returnFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|returnFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
comment|/**              * reached limit of async calls, fetch results of finished async              * calls to let follow-on calls go              */
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"start=%d, end=%d, i=%d"
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|waitForReturnValues
argument_list|(
name|returnFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for completing the calls
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|returnFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Restart NN and check the rename successfully
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// very the src dir should not exist, dst should
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForReturnValues ( final Map<Integer, Future<Void>> returnFutures, final int start, final int end)
specifier|private
name|void
name|waitForReturnValues
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|returnFutures
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"calling waitForReturnValues [%d, %d)"
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"calling Future#get #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|returnFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConservativeConcurrentAsyncAPI ()
specifier|public
name|void
name|testConservativeConcurrentAsyncAPI
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestConcurrentAsyncAPI
argument_list|(
literal|100
argument_list|,
literal|"testConservativeConcurrentAsyncAPI"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAggressiveConcurrentAsyncAPI ()
specifier|public
name|void
name|testAggressiveConcurrentAsyncAPI
parameter_list|()
throws|throws
name|Exception
block|{
name|internalTestConcurrentAsyncAPI
argument_list|(
literal|10000
argument_list|,
literal|"testAggressiveConcurrentAsyncAPI"
argument_list|)
expr_stmt|;
block|}
DECL|method|internalTestConcurrentAsyncAPI (final int asyncCallLimit, final String basePath)
specifier|private
name|void
name|internalTestConcurrentAsyncAPI
parameter_list|(
specifier|final
name|int
name|asyncCallLimit
parameter_list|,
specifier|final
name|String
name|basePath
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|group1
init|=
literal|"group1"
decl_stmt|;
name|String
name|group2
init|=
literal|"group2"
decl_stmt|;
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
name|int
name|count
init|=
literal|500
decl_stmt|;
comment|// explicitly turn on permission checking
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the limit of max async calls
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_ASYNC_CALLS_MAX_KEY
argument_list|,
name|asyncCallLimit
argument_list|)
expr_stmt|;
comment|// create fake mapping for the groups
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|u2gMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|u2gMap
operator|.
name|put
argument_list|(
name|user1
argument_list|,
operator|new
name|String
index|[]
block|{
name|group1
block|,
name|group2
block|}
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|updateConfWithFakeGroupMapping
argument_list|(
name|conf
argument_list|,
name|u2gMap
argument_list|)
expr_stmt|;
comment|// start mini cluster
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
decl_stmt|;
comment|// prepare for test
name|FileSystem
name|rootFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/test/%s/"
argument_list|,
name|basePath
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|count
index|]
decl_stmt|;
specifier|final
name|Path
index|[]
name|dsts
init|=
operator|new
name|Path
index|[
name|count
index|]
decl_stmt|;
name|short
index|[]
name|permissions
init|=
operator|new
name|short
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dsts
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|rootFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|rootFs
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|getFileStatus
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|getFileStatus
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|permissions
index|[
name|i
index|]
operator|=
name|permGenerator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|renameRetFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|permRetFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|ownerRetFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|,
name|end
init|=
literal|0
decl_stmt|;
comment|// test rename
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|returnFuture
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|renameRetFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|returnFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|waitForReturnValues
argument_list|(
name|renameRetFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for completing the calls
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|renameRetFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Restart NN and check the rename successfully
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// very the src should not exist, dst should
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test permissions
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|setPermission
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|permissions
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|permRetFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|waitForReturnValues
argument_list|(
name|permRetFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for completing the calls
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|permRetFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Restart NN and check permission then
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// verify the permission
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|fsPerm
init|=
operator|new
name|FsPermission
argument_list|(
name|permissions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|checkAccessPermissions
argument_list|(
name|rootFs
operator|.
name|getFileStatus
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fsPerm
operator|.
name|getUserAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test setOwner
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|setOwner
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|,
literal|"user1"
argument_list|,
literal|"group2"
argument_list|)
decl_stmt|;
name|ownerRetFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|waitForReturnValues
argument_list|(
name|ownerRetFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for completing the calls
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ownerRetFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Restart NN and check owner then
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
comment|// verify the owner
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|rootFs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"user1"
operator|.
name|equals
argument_list|(
name|rootFs
operator|.
name|getFileStatus
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"group2"
operator|.
name|equals
argument_list|(
name|rootFs
operator|.
name|getFileStatus
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rootFs
operator|!=
literal|null
condition|)
block|{
name|rootFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAccessPermissions (FileStatus stat, FsAction mode)
specifier|static
name|void
name|checkAccessPermissions
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAccessPermissions
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|stat
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccessPermissions (final UserGroupInformation ugi, FileStatus stat, FsAction mode)
specifier|static
name|void
name|checkAccessPermissions
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
name|FileStatus
name|stat
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|perm
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|perm
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|groups
operator|.
name|contains
argument_list|(
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|perm
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|perm
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Permission denied: user=%s, path=\"%s\":%s:%s:%s%s"
argument_list|,
name|user
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|,
name|stat
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
argument_list|,
name|perm
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAsyncAPIWithException ()
specifier|public
name|void
name|testAsyncAPIWithException
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
name|group1
init|=
literal|"group1"
decl_stmt|;
name|String
name|group2
init|=
literal|"group2"
decl_stmt|;
name|String
name|user1
init|=
literal|"user1"
decl_stmt|;
name|UserGroupInformation
name|ugi1
decl_stmt|;
comment|// explicitly turn on permission checking
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create fake mapping for the groups
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|u2gMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|u2gMap
operator|.
name|put
argument_list|(
name|user1
argument_list|,
operator|new
name|String
index|[]
block|{
name|group1
block|,
name|group2
block|}
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|updateConfWithFakeGroupMapping
argument_list|(
name|conf
argument_list|,
name|u2gMap
argument_list|)
expr_stmt|;
comment|// Initiate all four users
name|ugi1
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user1
argument_list|,
operator|new
name|String
index|[]
block|{
name|group1
block|,
name|group2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|FileSystem
name|rootFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|renameDir
init|=
operator|new
name|Path
argument_list|(
literal|"/test/async_api_exception/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"src"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|renameDir
argument_list|,
literal|"dst"
argument_list|)
decl_stmt|;
name|rootFs
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|AsyncDistributedFileSystem
name|adfs
init|=
name|ugi1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|AsyncDistributedFileSystem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncDistributedFileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
decl_stmt|;
try|try
block|{
name|retFuture
operator|=
name|adfs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|retFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|checkPermissionDenied
argument_list|(
name|e
argument_list|,
name|src
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the path parent"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|src
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FsPermission
name|fsPerm
init|=
operator|new
name|FsPermission
argument_list|(
name|permGenerator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|retFuture
operator|=
name|adfs
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
name|fsPerm
argument_list|)
expr_stmt|;
name|retFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|checkPermissionDenied
argument_list|(
name|e
argument_list|,
name|src
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the name of the path"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|retFuture
operator|=
name|adfs
operator|.
name|setOwner
argument_list|(
name|src
argument_list|,
literal|"user1"
argument_list|,
literal|"group2"
argument_list|)
expr_stmt|;
name|retFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|checkPermissionDenied
argument_list|(
name|e
argument_list|,
name|src
argument_list|,
name|user1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the name of the path"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rootFs
operator|!=
literal|null
condition|)
block|{
name|rootFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkPermissionDenied (final Exception e, final Path dir, final String user)
specifier|private
name|void
name|checkPermissionDenied
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|String
name|user
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ExecutionException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry AccessControlException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AccessControlException"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission denied messages must carry the username"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

