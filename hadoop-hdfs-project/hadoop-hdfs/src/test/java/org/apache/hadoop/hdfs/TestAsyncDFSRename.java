begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AsyncCallLimitExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAsyncDFSRename
specifier|public
class|class
name|TestAsyncDFSRename
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAsyncDFSRename
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|replFactor
specifier|private
specifier|final
name|short
name|replFactor
init|=
literal|1
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
init|=
literal|512
decl_stmt|;
DECL|field|fileLen
specifier|private
name|long
name|fileLen
init|=
name|blockSize
operator|*
literal|3
decl_stmt|;
DECL|field|NUM_TESTS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_TESTS
init|=
literal|50
decl_stmt|;
DECL|field|NUM_NN_HANDLER
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NN_HANDLER
init|=
literal|10
decl_stmt|;
DECL|field|ASYNC_CALL_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|ASYNC_CALL_LIMIT
init|=
literal|1000
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|adfs
specifier|private
name|AsyncDistributedFileSystem
name|adfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
comment|// set the limit of max async calls
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_ASYNC_CALLS_MAX_KEY
argument_list|,
name|ASYNC_CALL_LIMIT
argument_list|)
expr_stmt|;
comment|// set server handlers
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
name|NUM_NN_HANDLER
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|adfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getAsyncDistributedFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCallGetReturnValueMultipleTimes ()
specifier|public
name|void
name|testCallGetReturnValueMultipleTimes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/test/testCallGetReturnValueMultipleTimes/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// prepare test
specifier|final
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|NUM_TESTS
index|]
decl_stmt|;
specifier|final
name|Path
index|[]
name|dsts
init|=
operator|new
name|Path
index|[
name|NUM_TESTS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dsts
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// concurrently invoking many rename
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|reFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|reFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_TESTS
argument_list|,
name|reFutures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|verifyCallGetReturnValueMultipleTimes
argument_list|(
name|reFutures
argument_list|,
name|srcs
argument_list|,
name|dsts
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyCallGetReturnValueMultipleTimes ( final Map<Integer, Future<Void>> reFutures, final Path[] srcs, final Path[] dsts)
specifier|private
name|void
name|verifyCallGetReturnValueMultipleTimes
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|reFutures
parameter_list|,
specifier|final
name|Path
index|[]
name|srcs
parameter_list|,
specifier|final
name|Path
index|[]
name|dsts
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
comment|// wait for completing the calls
name|waitForReturnValues
argument_list|(
name|reFutures
argument_list|,
literal|0
argument_list|,
name|NUM_TESTS
argument_list|)
expr_stmt|;
comment|// verify the src dir should not exist, dst should
name|verifyRenames
argument_list|(
name|srcs
argument_list|,
name|dsts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testConcurrentAsyncRename ()
specifier|public
name|void
name|testConcurrentAsyncRename
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/test/%s/"
argument_list|,
literal|"testConcurrentAsyncRename"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// prepare test
specifier|final
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|NUM_TESTS
index|]
decl_stmt|;
specifier|final
name|Path
index|[]
name|dsts
init|=
operator|new
name|Path
index|[
name|NUM_TESTS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"src"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dsts
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dst"
operator|+
name|i
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|fileLen
argument_list|,
name|replFactor
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// concurrently invoking many rename
name|int
name|start
init|=
literal|0
decl_stmt|,
name|end
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|retFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TESTS
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"rename #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|retFuture
init|=
name|adfs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dsts
index|[
name|i
index|]
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
name|retFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|retFuture
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AsyncCallLimitExceededException
name|e
parameter_list|)
block|{
comment|/**            * reached limit of async calls, fetch results of finished async calls            * to let follow-on calls go            */
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|i
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"start=%d, end=%d, i=%d"
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|waitForReturnValues
argument_list|(
name|retFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// wait for completing the calls
name|waitForReturnValues
argument_list|(
name|retFutures
argument_list|,
name|end
argument_list|,
name|NUM_TESTS
argument_list|)
expr_stmt|;
comment|// verify the src dir should not exist, dst should
name|verifyRenames
argument_list|(
name|srcs
argument_list|,
name|dsts
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRenames (final Path[] srcs, final Path[] dsts)
specifier|private
name|void
name|verifyRenames
parameter_list|(
specifier|final
name|Path
index|[]
name|srcs
parameter_list|,
specifier|final
name|Path
index|[]
name|dsts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|dsts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForReturnValues (final Map<Integer, Future<Void>> retFutures, final int start, final int end)
name|void
name|waitForReturnValues
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|retFutures
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|TestAsyncDFS
operator|.
name|waitForReturnValues
argument_list|(
name|retFutures
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

