begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HostRestrictingAuthorizationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestHostRestrictingAuthorizationFilterHandler
specifier|public
class|class
name|TestHostRestrictingAuthorizationFilterHandler
block|{
DECL|field|CONFNAME
specifier|final
specifier|static
name|String
name|CONFNAME
init|=
name|HostRestrictingAuthorizationFilter
operator|.
name|HDFS_CONFIG_PREFIX
operator|+
name|HostRestrictingAuthorizationFilter
operator|.
name|RESTRICTION_CONFIG
decl_stmt|;
comment|/*    * Test running in with no ACL rules (restrict all)    */
annotation|@
name|Test
DECL|method|testRejectAll ()
specifier|public
name|void
name|testRejectAll
parameter_list|()
throws|throws
name|Exception
block|{
name|EmbeddedChannel
name|channel
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|()
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|httpRequest
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/user/myName/fooFile?op=OPEN"
argument_list|)
decl_stmt|;
comment|// we will send back an error so ensure our write returns false
name|assertFalse
argument_list|(
literal|"Should get error back from handler for rejected request"
argument_list|,
name|channel
operator|.
name|writeInbound
argument_list|(
name|httpRequest
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultHttpResponse
name|channelResponse
init|=
operator|(
name|DefaultHttpResponse
operator|)
name|channel
operator|.
name|outboundMessages
argument_list|()
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected response to exist."
argument_list|,
name|channelResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpResponseStatus
operator|.
name|FORBIDDEN
argument_list|,
name|channelResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|channel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test accepting multiple allowed GET requests to ensure channel can be    * reused    */
annotation|@
name|Test
DECL|method|testMultipleAcceptedGETsOneChannel ()
specifier|public
name|void
name|testMultipleAcceptedGETsOneChannel
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONFNAME
argument_list|,
literal|"*,*,/allowed"
argument_list|)
expr_stmt|;
name|HostRestrictingAuthorizationFilter
name|filter
init|=
name|HostRestrictingAuthorizationFilterHandler
operator|.
name|initializeState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_one?op=OPEN"
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest2
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_two?op=OPEN"
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest3
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_three?op=OPEN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request"
argument_list|,
name|channel
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request, second time"
argument_list|,
name|channel
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request, third time"
argument_list|,
name|channel
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test accepting multiple allowed GET requests in different channels to a    * single filter instance    */
annotation|@
name|Test
DECL|method|testMultipleChannels ()
specifier|public
name|void
name|testMultipleChannels
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CONFNAME
argument_list|,
literal|"*,*,/allowed"
argument_list|)
expr_stmt|;
name|HostRestrictingAuthorizationFilter
name|filter
init|=
name|HostRestrictingAuthorizationFilterHandler
operator|.
name|initializeState
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel1
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel2
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel3
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.3"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|(
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_one?op=OPEN"
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest2
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_two?op=OPEN"
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|allowedHttpRequest3
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/allowed/file_three?op=OPEN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request"
argument_list|,
name|channel1
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request, second time"
argument_list|,
name|channel2
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest2
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify closing one channel does not affect remaining channels
name|channel1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request, third time"
argument_list|,
name|channel3
operator|.
name|writeInbound
argument_list|(
name|allowedHttpRequest3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test accepting a GET request for the file checksum    */
annotation|@
name|Test
DECL|method|testAcceptGETFILECHECKSUM ()
specifier|public
name|void
name|testAcceptGETFILECHECKSUM
parameter_list|()
throws|throws
name|Exception
block|{
name|EmbeddedChannel
name|channel
init|=
operator|new
name|CustomEmbeddedChannel
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1006
argument_list|,
operator|new
name|HostRestrictingAuthorizationFilterHandler
argument_list|()
argument_list|)
decl_stmt|;
name|FullHttpRequest
name|httpRequest
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|GET
argument_list|,
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
literal|"/user/myName/fooFile?op"
operator|+
literal|"=GETFILECHECKSUM"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should successfully accept request"
argument_list|,
name|channel
operator|.
name|writeInbound
argument_list|(
name|httpRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Custom channel implementation which allows for mocking a client's remote    * address    */
DECL|class|CustomEmbeddedChannel
specifier|protected
specifier|static
class|class
name|CustomEmbeddedChannel
extends|extends
name|EmbeddedChannel
block|{
DECL|field|socketAddress
specifier|private
name|InetSocketAddress
name|socketAddress
decl_stmt|;
comment|/*      * A normal @{EmbeddedChannel} constructor which takes the remote client      * host and port to mock      */
DECL|method|CustomEmbeddedChannel (String host, int port, final ChannelHandler... handlers)
specifier|public
name|CustomEmbeddedChannel
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|final
name|ChannelHandler
modifier|...
name|handlers
parameter_list|)
block|{
name|super
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remoteAddress0 ()
specifier|protected
name|SocketAddress
name|remoteAddress0
parameter_list|()
block|{
return|return
name|this
operator|.
name|socketAddress
return|;
block|}
block|}
block|}
end_class

end_unit

