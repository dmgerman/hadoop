begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|BlockMovementListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|FileIdCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|IntraSPSNameNodeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|SPSService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|StoragePolicySatisfier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|TestStoragePolicySatisfier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Tests the external sps service plugins.  */
end_comment

begin_class
DECL|class|TestExternalStoragePolicySatisfier
specifier|public
class|class
name|TestExternalStoragePolicySatisfier
extends|extends
name|TestStoragePolicySatisfier
block|{
DECL|field|allDiskTypes
specifier|private
name|StorageType
index|[]
index|[]
name|allDiskTypes
init|=
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
block|}
decl_stmt|;
DECL|field|nnc
specifier|private
name|NameNodeConnector
name|nnc
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MODE_KEY
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|EXTERNAL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCluster ()
specifier|public
name|void
name|createCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|setCluster
argument_list|(
name|startCluster
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|allDiskTypes
argument_list|,
name|NUM_OF_DATANODES
argument_list|,
name|STORAGES_PER_DATANODE
argument_list|,
name|CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|getFS
argument_list|()
expr_stmt|;
name|writeContent
argument_list|(
name|FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startCluster (final Configuration conf, StorageType[][] storageTypes, int numberOfDatanodes, int storagesPerDn, long nodeCapacity)
specifier|public
name|MiniDFSCluster
name|startCluster
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypes
parameter_list|,
name|int
name|numberOfDatanodes
parameter_list|,
name|int
name|storagesPerDn
parameter_list|,
name|long
name|nodeCapacity
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
index|[]
name|capacities
init|=
operator|new
name|long
index|[
name|numberOfDatanodes
index|]
index|[
name|storagesPerDn
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDatanodes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storagesPerDn
condition|;
name|j
operator|++
control|)
block|{
name|capacities
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nodeCapacity
expr_stmt|;
block|}
block|}
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numberOfDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storagesPerDn
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|capacities
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|nnc
operator|=
name|getNameNodeConnector
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|BlockManager
name|blkMgr
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|SPSService
name|spsService
init|=
name|blkMgr
operator|.
name|getSPSService
argument_list|()
decl_stmt|;
name|spsService
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
comment|// TODO: Since External is not fully implemented, just used INTERNAL now.
comment|// Need to set External context here.
name|IntraSPSNameNodeContext
name|context
init|=
operator|new
name|IntraSPSNameNodeContext
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|blkMgr
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
block|{
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|ExternalBlockMovementListener
name|blkMoveListener
init|=
operator|new
name|ExternalBlockMovementListener
argument_list|()
decl_stmt|;
name|ExternalSPSBlockMoveTaskHandler
name|externalHandler
init|=
operator|new
name|ExternalSPSBlockMoveTaskHandler
argument_list|(
name|conf
argument_list|,
name|nnc
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
decl_stmt|;
name|externalHandler
operator|.
name|init
argument_list|()
expr_stmt|;
name|spsService
operator|.
name|init
argument_list|(
name|context
argument_list|,
operator|new
name|ExternalSPSFileIDCollector
argument_list|(
name|context
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
argument_list|,
name|externalHandler
argument_list|,
name|blkMoveListener
argument_list|)
expr_stmt|;
name|spsService
operator|.
name|start
argument_list|(
literal|true
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
return|return
name|cluster
return|;
block|}
DECL|method|restartNamenode ()
specifier|public
name|void
name|restartNamenode
parameter_list|()
throws|throws
name|IOException
block|{
name|BlockManager
name|blkMgr
init|=
name|getCluster
argument_list|()
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|SPSService
name|spsService
init|=
name|blkMgr
operator|.
name|getSPSService
argument_list|()
decl_stmt|;
name|spsService
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|blkMgr
operator|=
name|getCluster
argument_list|()
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|spsService
operator|=
name|blkMgr
operator|.
name|getSPSService
argument_list|()
expr_stmt|;
name|spsService
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
comment|// TODO: Since External is not fully implemented, just used INTERNAL now.
comment|// Need to set External context here.
name|IntraSPSNameNodeContext
name|context
init|=
operator|new
name|IntraSPSNameNodeContext
argument_list|(
name|getCluster
argument_list|()
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|blkMgr
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
block|{
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|ExternalBlockMovementListener
name|blkMoveListener
init|=
operator|new
name|ExternalBlockMovementListener
argument_list|()
decl_stmt|;
name|ExternalSPSBlockMoveTaskHandler
name|externalHandler
init|=
operator|new
name|ExternalSPSBlockMoveTaskHandler
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|nnc
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
decl_stmt|;
name|externalHandler
operator|.
name|init
argument_list|()
expr_stmt|;
name|spsService
operator|.
name|init
argument_list|(
name|context
argument_list|,
operator|new
name|ExternalSPSFileIDCollector
argument_list|(
name|context
argument_list|,
name|blkMgr
operator|.
name|getSPSService
argument_list|()
argument_list|)
argument_list|,
name|externalHandler
argument_list|,
name|blkMoveListener
argument_list|)
expr_stmt|;
name|spsService
operator|.
name|start
argument_list|(
literal|true
argument_list|,
name|StoragePolicySatisfierMode
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFileIdCollector (StoragePolicySatisfier sps, Context ctxt)
specifier|public
name|FileIdCollector
name|createFileIdCollector
parameter_list|(
name|StoragePolicySatisfier
name|sps
parameter_list|,
name|Context
name|ctxt
parameter_list|)
block|{
return|return
operator|new
name|ExternalSPSFileIDCollector
argument_list|(
name|ctxt
argument_list|,
name|sps
argument_list|)
return|;
block|}
DECL|class|ExternalBlockMovementListener
specifier|private
class|class
name|ExternalBlockMovementListener
implements|implements
name|BlockMovementListener
block|{
DECL|field|actualBlockMovements
specifier|private
name|List
argument_list|<
name|Block
argument_list|>
name|actualBlockMovements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|notifyMovementTriedBlocks (Block[] moveAttemptFinishedBlks)
specifier|public
name|void
name|notifyMovementTriedBlocks
parameter_list|(
name|Block
index|[]
name|moveAttemptFinishedBlks
parameter_list|)
block|{
for|for
control|(
name|Block
name|block
range|:
name|moveAttemptFinishedBlks
control|)
block|{
name|actualBlockMovements
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Movement attempted blocks"
argument_list|,
name|actualBlockMovements
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNameNodeConnector (Configuration conf)
specifier|private
name|NameNodeConnector
name|getNameNodeConnector
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|nnMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|nn
range|:
name|namenodes
control|)
block|{
name|nnMap
operator|.
name|put
argument_list|(
name|nn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|externalSPSPathId
init|=
operator|new
name|Path
argument_list|(
literal|"/system/externalSPS.id"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|nncs
init|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|nnMap
argument_list|,
name|StoragePolicySatisfier
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|externalSPSPathId
argument_list|,
name|conf
argument_list|,
name|NameNodeConnector
operator|.
name|DEFAULT_MAX_IDLE_ITERATIONS
argument_list|)
decl_stmt|;
return|return
name|nncs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * This test need not run as external scan is not a batch based scanning right    * now.    */
annotation|@
name|Ignore
argument_list|(
literal|"ExternalFileIdCollector is not batch based right now."
operator|+
literal|" So, ignoring it."
argument_list|)
DECL|method|testBatchProcessingForSPSDirectory ()
specifier|public
name|void
name|testBatchProcessingForSPSDirectory
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * Status won't be supported for external SPS, now. So, ignoring it.    */
annotation|@
name|Ignore
argument_list|(
literal|"Status is not supported for external SPS. So, ignoring it."
argument_list|)
DECL|method|testStoragePolicySatisfyPathStatus ()
specifier|public
name|void
name|testStoragePolicySatisfyPathStatus
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * Status won't be supported for external SPS, now. So, ignoring it.    */
annotation|@
name|Ignore
argument_list|(
literal|"Status is not supported for external SPS. So, ignoring it."
argument_list|)
DECL|method|testMaxRetryForFailedBlock ()
specifier|public
name|void
name|testMaxRetryForFailedBlock
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

