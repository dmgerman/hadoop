begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_NAMESERVICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test NN auxiliary port with HA.  */
end_comment

begin_class
DECL|class|TestHAAuxiliaryPort
specifier|public
class|class
name|TestHAAuxiliaryPort
block|{
annotation|@
name|Test
DECL|method|testHAAuxiliaryPort ()
specifier|public
name|void
name|testHAAuxiliaryPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
argument_list|,
literal|"0,0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
operator|+
literal|".ha-nn-uri-0.nn1"
argument_list|,
literal|"9000,9001"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_AUXILIARY_KEY
operator|+
literal|".ha-nn-uri-0.nn2"
argument_list|,
literal|"9000,9001"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ha-nn-uri-0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|".ha-nn-uri-0"
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSNNTopology
name|topology
init|=
operator|new
name|MiniDFSNNTopology
argument_list|()
operator|.
name|addNameservice
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NSConf
argument_list|(
literal|"ha-nn-uri-0"
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn1"
argument_list|)
argument_list|)
operator|.
name|addNN
argument_list|(
operator|new
name|MiniDFSNNTopology
operator|.
name|NNConf
argument_list|(
literal|"nn2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|topology
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|NameNode
name|nn0
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// all the addresses below are valid nn0 addresses
name|NameNodeRpcServer
name|rpcServer0
init|=
operator|(
name|NameNodeRpcServer
operator|)
name|nn0
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|server0RpcAddress
init|=
name|rpcServer0
operator|.
name|getRpcAddress
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InetSocketAddress
argument_list|>
name|auxAddrServer0
init|=
name|rpcServer0
operator|.
name|getAuxiliaryRpcAddresses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|auxAddrServer0
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// all the addresses below are valid nn1 addresses
name|NameNodeRpcServer
name|rpcServer1
init|=
operator|(
name|NameNodeRpcServer
operator|)
name|nn1
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|server1RpcAddress
init|=
name|rpcServer1
operator|.
name|getRpcAddress
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InetSocketAddress
argument_list|>
name|auxAddrServer1
init|=
name|rpcServer1
operator|.
name|getAuxiliaryRpcAddresses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|auxAddrServer1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// mkdir on nn0 uri 0
name|URI
name|nn0URI
init|=
operator|new
name|URI
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|server0RpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|DFSClient
name|client0
init|=
operator|new
name|DFSClient
argument_list|(
name|nn0URI
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|client0
operator|.
name|mkdirs
argument_list|(
literal|"/test"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// should be available on other ports also
for|for
control|(
name|InetSocketAddress
name|auxAddr
range|:
name|auxAddrServer0
control|)
block|{
name|nn0URI
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|auxAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|DFSClient
name|clientTmp
init|=
operator|new
name|DFSClient
argument_list|(
name|nn0URI
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|clientTmp
operator|.
name|exists
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now perform a failover
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// then try to read the file from the nn1
name|URI
name|nn1URI
init|=
operator|new
name|URI
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|server1RpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|DFSClient
name|client1
init|=
operator|new
name|DFSClient
argument_list|(
name|nn1URI
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|client1
operator|.
name|exists
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be available on other ports also
for|for
control|(
name|InetSocketAddress
name|auxAddr
range|:
name|auxAddrServer1
control|)
block|{
name|nn1URI
operator|=
operator|new
name|URI
argument_list|(
literal|"hdfs://localhost:"
operator|+
name|auxAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|DFSClient
name|clientTmp
init|=
operator|new
name|DFSClient
argument_list|(
name|nn1URI
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|client1
operator|.
name|exists
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

