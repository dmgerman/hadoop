begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FsDatasetTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaBeingWritten
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test if FSDataset#append, writeToRbw, and writeToTmp */
end_comment

begin_class
DECL|class|TestWriteToReplica
specifier|public
class|class
name|TestWriteToReplica
block|{
DECL|field|FINALIZED
specifier|final
specifier|private
specifier|static
name|int
name|FINALIZED
init|=
literal|0
decl_stmt|;
DECL|field|TEMPORARY
specifier|final
specifier|private
specifier|static
name|int
name|TEMPORARY
init|=
literal|1
decl_stmt|;
DECL|field|RBW
specifier|final
specifier|private
specifier|static
name|int
name|RBW
init|=
literal|2
decl_stmt|;
DECL|field|RWR
specifier|final
specifier|private
specifier|static
name|int
name|RWR
init|=
literal|3
decl_stmt|;
DECL|field|RUR
specifier|final
specifier|private
specifier|static
name|int
name|RUR
init|=
literal|4
decl_stmt|;
DECL|field|NON_EXISTENT
specifier|final
specifier|private
specifier|static
name|int
name|NON_EXISTENT
init|=
literal|5
decl_stmt|;
comment|// test close
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// set up replicasMap
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
name|setup
argument_list|(
name|bpid
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
decl_stmt|;
comment|// test close
name|testClose
argument_list|(
name|dataSet
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test append
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
init|=
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// set up replicasMap
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
name|setup
argument_list|(
name|bpid
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
decl_stmt|;
comment|// test append
name|testAppend
argument_list|(
name|bpid
argument_list|,
name|dataSet
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test writeToRbw
annotation|@
name|Test
DECL|method|testWriteToRbw ()
specifier|public
name|void
name|testWriteToRbw
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|dataSet
init|=
operator|(
name|FsDatasetImpl
operator|)
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// set up replicasMap
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
name|setup
argument_list|(
name|bpid
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
decl_stmt|;
comment|// test writeToRbw
name|testWriteToRbw
argument_list|(
name|dataSet
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// test writeToTemporary
annotation|@
name|Test
DECL|method|testWriteToTemporary ()
specifier|public
name|void
name|testWriteToTemporary
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|dataSet
init|=
operator|(
name|FsDatasetImpl
operator|)
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// set up replicasMap
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
name|setup
argument_list|(
name|bpid
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
decl_stmt|;
comment|// test writeToTemporary
name|testWriteToTemporary
argument_list|(
name|dataSet
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generate testing environment and return a collection of blocks    * on which to run the tests.    *     * @param bpid Block pool ID to generate blocks for    * @param testUtils FsDatasetTestUtils provides white box access to FsDataset.    * @return Contrived blocks for further testing.    * @throws IOException    */
DECL|method|setup (String bpid, FsDatasetTestUtils testUtils)
specifier|private
name|ExtendedBlock
index|[]
name|setup
parameter_list|(
name|String
name|bpid
parameter_list|,
name|FsDatasetTestUtils
name|testUtils
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup replicas map
name|ExtendedBlock
index|[]
name|blocks
init|=
operator|new
name|ExtendedBlock
index|[]
block|{
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2001
argument_list|)
block|,
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2002
argument_list|)
block|,
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|2003
argument_list|)
block|,
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|2004
argument_list|)
block|,
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|2005
argument_list|)
block|,
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|2006
argument_list|)
block|}
decl_stmt|;
name|testUtils
operator|.
name|createFinalizedReplica
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createReplicaInPipeline
argument_list|(
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createRBW
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createReplicaWaitingToBeRecovered
argument_list|(
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createReplicaUnderRecovery
argument_list|(
name|blocks
index|[
name|RUR
index|]
argument_list|,
literal|2007
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|method|testAppend (String bpid, FsDatasetSpi<?> dataSet, ExtendedBlock[] blocks)
specifier|private
name|void
name|testAppend
parameter_list|(
name|String
name|bpid
parameter_list|,
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
parameter_list|,
name|ExtendedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|newGS
init|=
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
decl_stmt|;
specifier|final
name|FsVolumeSpi
name|v
init|=
name|dataSet
operator|.
name|getVolume
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|FsVolumeImpl
condition|)
block|{
name|FsVolumeImpl
name|fvi
init|=
operator|(
name|FsVolumeImpl
operator|)
name|v
decl_stmt|;
name|long
name|available
init|=
name|fvi
operator|.
name|getCapacity
argument_list|()
operator|-
name|fvi
operator|.
name|getDfsUsed
argument_list|()
decl_stmt|;
name|long
name|expectedLen
init|=
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|fvi
operator|.
name|onBlockFileDeletion
argument_list|(
name|bpid
argument_list|,
operator|-
name|available
argument_list|)
expr_stmt|;
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|setNumBytes
argument_list|(
name|expectedLen
operator|+
literal|100
argument_list|)
expr_stmt|;
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
name|newGS
argument_list|,
name|expectedLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have space to append to an RWR replica"
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskOutOfSpaceException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Insufficient space for appending to "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fvi
operator|.
name|onBlockFileDeletion
argument_list|(
name|bpid
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|setNumBytes
argument_list|(
name|expectedLen
argument_list|)
expr_stmt|;
block|}
name|newGS
operator|=
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
name|newGS
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// successful
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to a temporary replica "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_REPLICA
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to an RBW replica"
operator|+
name|blocks
index|[
name|RBW
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_REPLICA
operator|+
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|RWR
index|]
argument_list|,
name|blocks
index|[
name|RWR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to an RWR replica"
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_REPLICA
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|RUR
index|]
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to an RUR replica"
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_REPLICA
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|append
argument_list|(
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to a non-existent replica "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_EXISTENT_REPLICA
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newGS
operator|=
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
name|newGS
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// successful
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to a temporary replica "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newGS
operator|=
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|newGS
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|blocks
index|[
name|RBW
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|RWR
index|]
argument_list|,
name|blocks
index|[
name|RWR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to an RWR replica"
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|RUR
index|]
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to an RUR replica"
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|recoverAppend
argument_list|(
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have appended to a non-existent replica "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_EXISTENT_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testClose (FsDatasetSpi<?> dataSet, ExtendedBlock [] blocks)
specifier|private
name|void
name|testClose
parameter_list|(
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataSet
parameter_list|,
name|ExtendedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|newGS
init|=
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
decl_stmt|;
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
name|newGS
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// successful
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered close a temporary replica "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newGS
operator|=
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
expr_stmt|;
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|newGS
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|blocks
index|[
name|RBW
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|RWR
index|]
argument_list|,
name|blocks
index|[
name|RWR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered close an RWR replica"
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|RUR
index|]
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered close an RUR replica"
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|UNFINALIZED_AND_NONRBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|recoverClose
argument_list|(
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered close a non-existent replica "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_EXISTENT_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWriteToRbw (FsDatasetImpl dataSet, ExtendedBlock[] blocks)
specifier|private
name|void
name|testWriteToRbw
parameter_list|(
name|FsDatasetImpl
name|dataSet
parameter_list|,
name|ExtendedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered a finalized replica "
operator|+
name|blocks
index|[
name|FINALIZED
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_RBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that's already "
operator|+
literal|"finalized "
operator|+
name|blocks
index|[
name|FINALIZED
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered a temporary replica "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_RBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that had created as "
operator|+
literal|"temporary "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// expect to be successful
try|try
block|{
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RBW
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that had created as RBW "
operator|+
name|blocks
index|[
name|RBW
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|RWR
index|]
argument_list|,
name|blocks
index|[
name|RWR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|RWR
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered a RWR replica "
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_RBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RWR
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that was waiting to be "
operator|+
literal|"recovered "
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|RUR
index|]
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|RUR
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have recovered a RUR replica "
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_RBW_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RUR
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that was under recovery "
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|1
argument_list|,
literal|0L
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot recover a non-existent replica "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|ReplicaNotFoundException
operator|.
name|NON_EXISTENT_REPLICA
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataSet
operator|.
name|createRbw
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testWriteToTemporary (FsDatasetImpl dataSet, ExtendedBlock[] blocks)
specifier|private
name|void
name|testWriteToTemporary
parameter_list|(
name|FsDatasetImpl
name|dataSet
parameter_list|,
name|ExtendedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|FINALIZED
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a temporary replica that was "
operator|+
literal|"finalized "
operator|+
name|blocks
index|[
name|FINALIZED
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that had created as"
operator|+
literal|"temporary "
operator|+
name|blocks
index|[
name|TEMPORARY
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RBW
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that had created as RBW "
operator|+
name|blocks
index|[
name|RBW
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RWR
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that was waiting to be "
operator|+
literal|"recovered "
operator|+
name|blocks
index|[
name|RWR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|RUR
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that was under recovery "
operator|+
name|blocks
index|[
name|RUR
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{     }
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created a replica that had already been "
operator|+
literal|"created "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getBlockName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|ReplicaAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
name|long
name|newGenStamp
init|=
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getGenerationStamp
argument_list|()
operator|*
literal|10
decl_stmt|;
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|newGenStamp
argument_list|)
expr_stmt|;
try|try
block|{
name|ReplicaInPipeline
name|replicaInfo
init|=
name|dataSet
operator|.
name|createTemporary
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|,
literal|false
argument_list|)
operator|.
name|getReplica
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replicaInfo
operator|.
name|getGenerationStamp
argument_list|()
operator|==
name|newGenStamp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replicaInfo
operator|.
name|getBlockId
argument_list|()
operator|==
name|blocks
index|[
name|NON_EXISTENT
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaAlreadyExistsException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"createTemporary should have allowed the block with newer "
operator|+
literal|" generation stamp to be created "
operator|+
name|blocks
index|[
name|NON_EXISTENT
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is a test to check the replica map before and after the datanode     * quick restart (less than 5 minutes)    * @throws Exception    */
annotation|@
name|Test
DECL|method|testReplicaMapAfterDatanodeRestart ()
specifier|public
name|void
name|testReplicaMapAfterDatanodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|NameNode
name|nn1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn2
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"cannot create nn1"
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"cannot create nn2"
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
comment|// check number of volumes in fsdataset
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|dataSet
init|=
operator|(
name|FsDatasetImpl
operator|)
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|referredVols
init|=
name|dataSet
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
comment|// number of volumes should be 2 - [data1, data2]
name|assertEquals
argument_list|(
literal|"number of volumes is wrong"
argument_list|,
literal|2
argument_list|,
name|referredVols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|volumes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|referredVols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FsVolumeSpi
name|vol
range|:
name|referredVols
control|)
block|{
name|volumes
operator|.
name|add
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bpList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNamesystem
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cluster should have 2 block pools"
argument_list|,
name|bpList
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|createReplicas
argument_list|(
name|bpList
argument_list|,
name|volumes
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicaMap
name|oldReplicaMap
init|=
operator|new
name|ReplicaMap
argument_list|(
operator|new
name|AutoCloseableLock
argument_list|()
argument_list|)
decl_stmt|;
name|oldReplicaMap
operator|.
name|addAll
argument_list|(
name|dataSet
operator|.
name|volumeMap
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dn
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dataSet
operator|=
operator|(
name|FsDatasetImpl
operator|)
name|dn
operator|.
name|getFSDataset
argument_list|()
expr_stmt|;
name|testEqualityOfReplicaMap
argument_list|(
name|oldReplicaMap
argument_list|,
name|dataSet
operator|.
name|volumeMap
argument_list|,
name|bpList
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that we can successfully recover a {@link ReplicaBeingWritten}    * which has inconsistent metadata (bytes were written to disk but bytesOnDisk    * was not updated) but that recovery fails when the block is actually    * corrupt (bytes are not present on disk).    */
annotation|@
name|Test
DECL|method|testRecoverInconsistentRbw ()
specifier|public
name|void
name|testRecoverInconsistentRbw
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FsDatasetImpl
name|fsDataset
init|=
operator|(
name|FsDatasetImpl
operator|)
name|DataNodeTestUtils
operator|.
name|getFSDataset
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// set up replicasMap
name|String
name|bpid
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|ExtendedBlock
index|[]
name|blocks
init|=
name|setup
argument_list|(
name|bpid
argument_list|,
name|cluster
operator|.
name|getFsDatasetTestUtils
argument_list|(
name|dn
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicaBeingWritten
name|rbw
init|=
operator|(
name|ReplicaBeingWritten
operator|)
name|fsDataset
operator|.
name|getReplicaInfo
argument_list|(
name|bpid
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|bytesOnDisk
init|=
name|rbw
operator|.
name|getBytesOnDisk
argument_list|()
decl_stmt|;
comment|// simulate an inconsistent replica length update by reducing in-memory
comment|// value of on disk length
name|rbw
operator|.
name|setLastChecksumAndDataLen
argument_list|(
name|bytesOnDisk
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fsDataset
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|rbw
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the recovery, on disk length should equal acknowledged length.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rbw
operator|.
name|getBytesOnDisk
argument_list|()
operator|==
name|rbw
operator|.
name|getBytesAcked
argument_list|()
argument_list|)
expr_stmt|;
comment|// reduce on disk length again; this time actually truncate the file to
comment|// simulate the data not being present
name|rbw
operator|.
name|setLastChecksumAndDataLen
argument_list|(
name|bytesOnDisk
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
init|(
name|RandomAccessFile
name|blockRAF
init|=
name|rbw
operator|.
name|getFileIoProvider
argument_list|()
operator|.
name|getRandomAccessFile
argument_list|(
name|rbw
operator|.
name|getVolume
argument_list|()
argument_list|,
name|rbw
operator|.
name|getBlockFile
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
init|)
block|{
comment|// truncate blockFile
name|blockRAF
operator|.
name|setLength
argument_list|(
name|bytesOnDisk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fsDataset
operator|.
name|recoverRbw
argument_list|(
name|blocks
index|[
name|RBW
index|]
argument_list|,
name|blocks
index|[
name|RBW
index|]
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|rbw
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"recovery should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicaNotFoundException
name|rnfe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Found fewer bytesOnDisk than "
operator|+
literal|"bytesAcked for replica"
argument_list|,
name|rnfe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compare the replica map before and after the restart    **/
DECL|method|testEqualityOfReplicaMap (ReplicaMap oldReplicaMap, ReplicaMap newReplicaMap, List<String> bpidList)
specifier|private
name|void
name|testEqualityOfReplicaMap
parameter_list|(
name|ReplicaMap
name|oldReplicaMap
parameter_list|,
name|ReplicaMap
name|newReplicaMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bpidList
parameter_list|)
block|{
comment|// Traversing through newReplica map and remove the corresponding
comment|// replicaInfo from oldReplicaMap.
for|for
control|(
name|String
name|bpid
range|:
name|bpidList
control|)
block|{
for|for
control|(
name|ReplicaInfo
name|info
range|:
name|newReplicaMap
operator|.
name|replicas
argument_list|(
name|bpid
argument_list|)
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Volume map before restart didn't contain the "
operator|+
literal|"blockpool: "
operator|+
name|bpid
argument_list|,
name|oldReplicaMap
operator|.
name|replicas
argument_list|(
name|bpid
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicaInfo
name|oldReplicaInfo
init|=
name|oldReplicaMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|,
name|info
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Volume map after restart contains a blockpool id which
name|assertNotNull
argument_list|(
literal|"Old Replica Map didnt't contain block with blockId: "
operator|+
name|info
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|oldReplicaInfo
argument_list|)
expr_stmt|;
name|ReplicaState
name|oldState
init|=
name|oldReplicaInfo
operator|.
name|getState
argument_list|()
decl_stmt|;
comment|// Since after restart, all the RWR, RBW and RUR blocks gets
comment|// converted to RWR
if|if
condition|(
name|info
operator|.
name|getState
argument_list|()
operator|==
name|ReplicaState
operator|.
name|RWR
condition|)
block|{
if|if
condition|(
name|oldState
operator|==
name|ReplicaState
operator|.
name|RWR
operator|||
name|oldState
operator|==
name|ReplicaState
operator|.
name|RBW
operator|||
name|oldState
operator|==
name|ReplicaState
operator|.
name|RUR
condition|)
block|{
name|oldReplicaMap
operator|.
name|remove
argument_list|(
name|bpid
argument_list|,
name|oldReplicaInfo
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getState
argument_list|()
operator|==
name|ReplicaState
operator|.
name|FINALIZED
operator|&&
name|oldState
operator|==
name|ReplicaState
operator|.
name|FINALIZED
condition|)
block|{
name|oldReplicaMap
operator|.
name|remove
argument_list|(
name|bpid
argument_list|,
name|oldReplicaInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We don't persist the ReplicaInPipeline replica
comment|// and if the old replica map contains any replica except ReplicaInPipeline
comment|// then we didn't persist that replica
for|for
control|(
name|String
name|bpid
range|:
name|bpidList
control|)
block|{
for|for
control|(
name|ReplicaInfo
name|replicaInfo
range|:
name|oldReplicaMap
operator|.
name|replicas
argument_list|(
name|bpid
argument_list|)
control|)
block|{
if|if
condition|(
name|replicaInfo
operator|.
name|getState
argument_list|()
operator|!=
name|ReplicaState
operator|.
name|TEMPORARY
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"After datanode restart we lost the block with blockId: "
operator|+
name|replicaInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createReplicas (List<String> bpList, List<FsVolumeSpi> volumes, FsDatasetTestUtils testUtils)
specifier|private
name|void
name|createReplicas
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bpList
parameter_list|,
name|List
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumes
parameter_list|,
name|FsDatasetTestUtils
name|testUtils
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Here we create all different type of replicas and add it
comment|// to volume map.
comment|// Created all type of ReplicaInfo, each under Blkpool corresponding volume
name|long
name|id
init|=
literal|1
decl_stmt|;
comment|// This variable is used as both blockId and genStamp
for|for
control|(
name|String
name|bpId
range|:
name|bpList
control|)
block|{
for|for
control|(
name|FsVolumeSpi
name|volume
range|:
name|volumes
control|)
block|{
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpId
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|testUtils
operator|.
name|createFinalizedReplica
argument_list|(
name|volume
argument_list|,
name|eb
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
name|eb
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpId
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createRBW
argument_list|(
name|volume
argument_list|,
name|eb
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
name|eb
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpId
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createReplicaWaitingToBeRecovered
argument_list|(
name|volume
argument_list|,
name|eb
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
name|eb
operator|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpId
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|testUtils
operator|.
name|createReplicaInPipeline
argument_list|(
name|volume
argument_list|,
name|eb
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

