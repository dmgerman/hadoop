begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSStripedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaBeingWritten
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
operator|.
name|BLOCK_STRIPED_CELL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestAddStripedBlocks
specifier|public
class|class
name|TestAddStripedBlocks
block|{
DECL|field|GROUP_SIZE
specifier|private
specifier|final
name|short
name|GROUP_SIZE
init|=
call|(
name|short
call|)
argument_list|(
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
operator|+
name|StripedFileTestUtil
operator|.
name|NUM_PARITY_BLOCKS
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|GROUP_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|setErasureCodingPolicy
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Make sure the IDs of striped blocks do not conflict    */
annotation|@
name|Test
DECL|method|testAllocateBlockId ()
specifier|public
name|void
name|testAllocateBlockId
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testfile"
argument_list|)
decl_stmt|;
comment|// create a file while allocates a new block
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
literal|"hello, world!"
argument_list|)
expr_stmt|;
name|LocatedBlocks
name|lb
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|long
name|firstId
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
comment|// delete the file
name|dfs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// allocate a new block, and make sure the new block's id does not conflict
comment|// with the previous one
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
name|testPath
argument_list|,
literal|"hello again"
argument_list|)
expr_stmt|;
name|lb
operator|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|testPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|long
name|secondId
init|=
name|lb
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstId
operator|+
name|HdfsServerConstants
operator|.
name|MAX_BLOCKS_IN_GROUP
argument_list|,
name|secondId
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAndFlushStripedOutputStream ( DFSStripedOutputStream out, int chunkSize)
specifier|private
specifier|static
name|void
name|writeAndFlushStripedOutputStream
parameter_list|(
name|DFSStripedOutputStream
name|out
parameter_list|,
name|int
name|chunkSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// FSOutputSummer.BUFFER_NUM_CHUNKS == 9
name|byte
index|[]
name|toWrite
init|=
operator|new
name|byte
index|[
name|chunkSize
operator|*
literal|9
operator|+
literal|1
index|]
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|flushInternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAddStripedBlock ()
specifier|public
name|void
name|testAddStripedBlock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
comment|// create an empty file
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|writeAndFlushStripedOutputStream
argument_list|(
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|checkStripedBlockUC
argument_list|(
operator|(
name|BlockInfoStriped
operator|)
name|fileNode
operator|.
name|getLastBlock
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// restart NameNode to check editlog
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsdir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|fileNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|blocks
operator|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|checkStripedBlockUC
argument_list|(
operator|(
name|BlockInfoStriped
operator|)
name|fileNode
operator|.
name|getLastBlock
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// save namespace, restart namenode, and check
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsdir
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|fileNode
operator|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|blocks
operator|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blocks
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|checkStripedBlockUC
argument_list|(
operator|(
name|BlockInfoStriped
operator|)
name|fileNode
operator|.
name|getLastBlock
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkStripedBlockUC (BlockInfoStriped block, boolean checkReplica)
specifier|private
name|void
name|checkStripedBlockUC
parameter_list|(
name|BlockInfoStriped
name|block
parameter_list|,
name|boolean
name|checkReplica
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block
operator|.
name|numNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|block
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StripedFileTestUtil
operator|.
name|NUM_DATA_BLOCKS
argument_list|,
name|block
operator|.
name|getDataBlockNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StripedFileTestUtil
operator|.
name|NUM_PARITY_BLOCKS
argument_list|,
name|block
operator|.
name|getParityBlockNum
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
operator|&
name|HdfsServerConstants
operator|.
name|BLOCK_GROUP_INDEX_MASK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
name|block
operator|.
name|getBlockUCState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkReplica
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|block
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getNumExpectedLocations
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|block
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|includeDataNode
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|storages
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|includeDataNode (DatanodeID dn, DatanodeStorageInfo[] storages)
specifier|private
name|boolean
name|includeDataNode
parameter_list|(
name|DatanodeID
name|dn
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|storages
parameter_list|)
block|{
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|storages
control|)
block|{
if|if
condition|(
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|equals
argument_list|(
name|dn
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testGetLocatedStripedBlocks ()
specifier|public
name|void
name|testGetLocatedStripedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
comment|// create an empty file
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|writeAndFlushStripedOutputStream
argument_list|(
operator|(
name|DFSStripedOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|BlockInfoStriped
name|lastBlk
init|=
operator|(
name|BlockInfoStriped
operator|)
name|fileNode
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|expectedDNs
init|=
name|DatanodeStorageInfo
operator|.
name|toDatanodeInfos
argument_list|(
name|lastBlk
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|indices
init|=
name|lastBlk
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|blks
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|locatedBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|lblk
init|=
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lblk
operator|instanceof
name|LocatedStripedBlock
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|lblk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|int
index|[]
name|blockIndices
init|=
operator|(
operator|(
name|LocatedStripedBlock
operator|)
name|lblk
operator|)
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|datanodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|blockIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|indices
argument_list|,
name|blockIndices
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedDNs
argument_list|,
name|datanodes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test BlockInfoStripedUnderConstruction#addReplicaIfNotPresent in different    * scenarios.    */
annotation|@
name|Test
DECL|method|testAddUCReplica ()
specifier|public
name|void
name|testAddUCReplica
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
literal|"/file1"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|storageIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create an empty file
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|file
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// 1. create the UC striped block
name|FSDirectory
name|fsdir
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|fsdir
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getAdditionalBlock
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
name|fileNode
operator|.
name|getId
argument_list|()
argument_list|,
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fileNode
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|locs
init|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
decl_stmt|;
name|int
index|[]
name|indices
init|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|indices
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 2. mimic incremental block reports and make sure the uc-replica list in
comment|// the BlockInfoUCStriped is correct
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
operator|++
argument_list|,
literal|0
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|storageIDs
operator|.
name|add
argument_list|(
name|storage
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|block
argument_list|,
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageReceivedDeletedBlocks
name|report
range|:
name|reports
control|)
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|processIncrementalBlockReport
argument_list|(
name|dn
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure lastBlock is correct and the storages have been updated
name|locs
operator|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
expr_stmt|;
name|indices
operator|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockIndices
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|indices
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|newstorage
range|:
name|locs
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|storageIDs
operator|.
name|contains
argument_list|(
name|newstorage
operator|.
name|getStorageID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|// 3. restart the namenode. mimic the full block reports and check the
comment|// uc-replica list again
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|bpId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
name|INodeFile
name|fileNode
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode4Write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|BlockInfo
name|lastBlock
init|=
name|fileNode
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|GROUP_SIZE
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|String
name|storageID
init|=
name|storageIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
operator|--
argument_list|,
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|storageID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicaBeingWritten
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicaBeingWritten
name|replica
init|=
operator|new
name|ReplicaBeingWritten
argument_list|(
name|block
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|BlockListAsLongs
name|bll
init|=
name|BlockListAsLongs
operator|.
name|encode
argument_list|(
name|blocks
argument_list|)
decl_stmt|;
name|StorageBlockReport
index|[]
name|reports
init|=
block|{
operator|new
name|StorageBlockReport
argument_list|(
name|storage
argument_list|,
name|bll
argument_list|)
block|}
decl_stmt|;
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|bpId
argument_list|)
argument_list|,
name|bpId
argument_list|,
name|reports
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|locs
init|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getExpectedStorageLocations
argument_list|()
decl_stmt|;
name|int
index|[]
name|indices
init|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockIndices
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
argument_list|,
name|indices
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|GROUP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storageIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|locs
index|[
name|GROUP_SIZE
operator|-
literal|1
operator|-
name|i
index|]
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GROUP_SIZE
operator|-
name|i
operator|-
literal|1
argument_list|,
name|indices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCheckStripedReplicaCorrupt ()
specifier|public
name|void
name|testCheckStripedReplicaCorrupt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numBlocks
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|numStripes
init|=
literal|4
decl_stmt|;
specifier|final
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/corrupt"
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|createStripedFile
argument_list|(
name|cluster
argument_list|,
name|filePath
argument_list|,
literal|null
argument_list|,
name|numBlocks
argument_list|,
name|numStripes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|INodeFile
name|fileNode
init|=
name|ns
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileNode
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
name|BlockInfo
name|stored
init|=
name|fileNode
operator|.
name|getBlocks
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send a block report with correct size
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Block
name|reported
init|=
operator|new
name|Block
argument_list|(
name|stored
argument_list|)
decl_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|StorageReceivedDeletedBlocks
index|[]
name|reports
init|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
decl_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send a block report with wrong size
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send a parity block report with correct size
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
name|NUM_DATA_BLOCKS
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send a parity block report with wrong size
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
name|NUM_DATA_BLOCKS
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
comment|// the total number of corrupted block info is still 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 internal blocks corrupted
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|stored
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now change the size of stored block, and test verifying the last
comment|// block size
name|stored
operator|.
name|setNumBytes
argument_list|(
name|stored
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
name|NUM_DATA_BLOCKS
operator|+
literal|2
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|stored
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send a parity block report with correct size based on adjusted
comment|// size of stored block
comment|/** Now stored block has {@link numStripes} full stripes + a cell + 10 */
name|stored
operator|.
name|setNumBytes
argument_list|(
name|stored
operator|.
name|getNumBytes
argument_list|()
operator|+
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
operator|(
name|numStripes
operator|+
literal|1
operator|)
operator|*
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|stored
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
name|numStripes
operator|*
name|BLOCK_STRIPED_CELL_SIZE
operator|+
literal|10
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|stored
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setBlockId
argument_list|(
name|stored
operator|.
name|getBlockId
argument_list|()
operator|+
name|NUM_DATA_BLOCKS
argument_list|)
expr_stmt|;
name|reported
operator|.
name|setNumBytes
argument_list|(
operator|(
name|numStripes
operator|+
literal|1
operator|)
operator|*
name|BLOCK_STRIPED_CELL_SIZE
argument_list|)
expr_stmt|;
name|reports
operator|=
name|DFSTestUtil
operator|.
name|makeReportForReceivedBlock
argument_list|(
name|reported
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|ns
operator|.
name|processIncrementalBlockReport
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|,
name|reports
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BlockManagerTestUtil
operator|.
name|updateState
argument_list|(
name|ns
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ns
operator|.
name|getCorruptReplicaBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bm
operator|.
name|getCorruptReplicas
argument_list|(
name|stored
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

