begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * This test verifies NameNode behavior when it gets unexpected block reports  * from DataNodes. The same block is reported by two different storages on  * the same DataNode. Excess replicas on the same DN should be ignored by the NN.  */
end_comment

begin_class
DECL|class|TestBlockHasMultipleReplicasOnSameDN
specifier|public
class|class
name|TestBlockHasMultipleReplicasOnSameDN
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockHasMultipleReplicasOnSameDN
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|short
name|NUM_DATANODES
init|=
literal|2
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|NUM_BLOCKS
specifier|private
specifier|static
specifier|final
name|long
name|NUM_BLOCKS
init|=
literal|5
decl_stmt|;
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
literal|0x1BADF00DL
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|fs
specifier|private
name|DistributedFileSystem
name|fs
decl_stmt|;
DECL|field|client
specifier|private
name|DFSClient
name|client
decl_stmt|;
DECL|field|bpid
specifier|private
name|String
name|bpid
decl_stmt|;
annotation|@
name|Before
DECL|method|startUpCluster ()
specifier|public
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|client
operator|=
name|fs
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutDownCluster ()
specifier|public
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|makeFileName (String prefix)
specifier|private
name|String
name|makeFileName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
literal|"/"
operator|+
name|prefix
operator|+
literal|".dat"
return|;
block|}
comment|/**    * Verify NameNode behavior when a given DN reports multiple replicas    * of a given block.    */
annotation|@
name|Test
DECL|method|testBlockHasMultipleReplicasOnSameDN ()
specifier|public
name|void
name|testBlockHasMultipleReplicasOnSameDN
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|makeFileName
argument_list|(
name|GenericTestUtils
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
comment|// Write out a file with a few blocks.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|BLOCK_SIZE
operator|*
name|NUM_BLOCKS
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|NUM_DATANODES
argument_list|,
name|seed
argument_list|)
expr_stmt|;
comment|// Get the block list for the file with the block locations.
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
operator|*
name|NUM_BLOCKS
argument_list|)
decl_stmt|;
comment|// Generate a fake block report from one of the DataNodes, such
comment|// that it reports one copy of each block on either storage.
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeRegistration
name|dnReg
init|=
name|dn
operator|.
name|getDNRegistrationForBP
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|StorageBlockReport
name|reports
index|[]
init|=
operator|new
name|StorageBlockReport
index|[
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|Replica
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Replica
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|Block
name|localBlock
init|=
name|locatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
operator|new
name|FinalizedReplica
argument_list|(
name|localBlock
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
name|BlockListAsLongs
name|bll
init|=
name|BlockListAsLongs
operator|.
name|encode
argument_list|(
name|blocks
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getStoragesPerDatanode
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DatanodeStorage
name|dns
init|=
operator|new
name|DatanodeStorage
argument_list|(
name|volumes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStorageID
argument_list|()
argument_list|)
decl_stmt|;
name|reports
index|[
name|i
index|]
operator|=
operator|new
name|StorageBlockReport
argument_list|(
name|dns
argument_list|,
name|bll
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Should not assert!
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
operator|.
name|blockReport
argument_list|(
name|dnReg
argument_list|,
name|bpid
argument_list|,
name|reports
argument_list|,
operator|new
name|BlockReportContext
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the block locations once again.
name|locatedBlocks
operator|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
operator|*
name|NUM_BLOCKS
argument_list|)
expr_stmt|;
comment|// Make sure that each block has two replicas, one on each DataNode.
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|DatanodeInfo
index|[]
name|locations
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|locations
operator|.
name|length
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|NUM_DATANODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|locations
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|not
argument_list|(
name|locations
index|[
literal|1
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

