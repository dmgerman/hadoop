begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.mover
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|TestBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Test the data migration tool (for Archival Storage)  */
end_comment

begin_class
DECL|class|TestStorageMover
specifier|public
class|class
name|TestStorageMover
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStorageMover
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataTransferProtocol
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|REPL
specifier|private
specifier|static
specifier|final
name|short
name|REPL
init|=
literal|3
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DATANODES
init|=
literal|6
decl_stmt|;
DECL|field|DEFAULT_CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|DEFAULT_CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_POLICIES
specifier|private
specifier|static
specifier|final
name|BlockStoragePolicySuite
name|DEFAULT_POLICIES
decl_stmt|;
DECL|field|HOT
specifier|private
specifier|static
specifier|final
name|BlockStoragePolicy
name|HOT
decl_stmt|;
DECL|field|WARM
specifier|private
specifier|static
specifier|final
name|BlockStoragePolicy
name|WARM
decl_stmt|;
DECL|field|COLD
specifier|private
specifier|static
specifier|final
name|BlockStoragePolicy
name|COLD
decl_stmt|;
static|static
block|{
name|DEFAULT_CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|DEFAULT_CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|DEFAULT_CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_INTERVAL_KEY
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|DEFAULT_CONF
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVEDWINWIDTH_KEY
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|DEFAULT_POLICIES
operator|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
expr_stmt|;
name|HOT
operator|=
name|DEFAULT_POLICIES
operator|.
name|getPolicy
argument_list|(
name|HdfsServerConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|WARM
operator|=
name|DEFAULT_POLICIES
operator|.
name|getPolicy
argument_list|(
name|HdfsServerConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|COLD
operator|=
name|DEFAULT_POLICIES
operator|.
name|getPolicy
argument_list|(
name|HdfsServerConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|)
expr_stmt|;
name|TestBalancer
operator|.
name|initTestSetup
argument_list|()
expr_stmt|;
name|Dispatcher
operator|.
name|setDelayAfterErrors
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
block|}
comment|/**    * This scheme defines files/directories and their block storage policies. It    * also defines snapshots.    */
DECL|class|NamespaceScheme
specifier|static
class|class
name|NamespaceScheme
block|{
DECL|field|dirs
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
decl_stmt|;
DECL|field|files
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
decl_stmt|;
DECL|field|fileSize
specifier|final
name|long
name|fileSize
decl_stmt|;
DECL|field|snapshotMap
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|snapshotMap
decl_stmt|;
DECL|field|policyMap
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|policyMap
decl_stmt|;
DECL|method|NamespaceScheme (List<Path> dirs, List<Path> files, long fileSize, Map<Path,List<String>> snapshotMap, Map<Path, BlockStoragePolicy> policyMap)
name|NamespaceScheme
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|,
name|long
name|fileSize
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|snapshotMap
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|policyMap
parameter_list|)
block|{
name|this
operator|.
name|dirs
operator|=
name|dirs
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|Path
operator|>
name|emptyList
argument_list|()
else|:
name|dirs
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|Path
operator|>
name|emptyList
argument_list|()
else|:
name|files
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
name|this
operator|.
name|snapshotMap
operator|=
name|snapshotMap
operator|==
literal|null
condition|?
name|Collections
operator|.
expr|<
name|Path
operator|,
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|emptyMap
argument_list|()
operator|:
name|snapshotMap
expr_stmt|;
name|this
operator|.
name|policyMap
operator|=
name|policyMap
expr_stmt|;
block|}
comment|/**      * Create files/directories/snapshots.      */
DECL|method|prepare (DistributedFileSystem dfs, short repl)
name|void
name|prepare
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|short
name|repl
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|d
range|:
name|dirs
control|)
block|{
name|dfs
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|dfs
argument_list|,
name|file
argument_list|,
name|fileSize
argument_list|,
name|repl
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|snapshotMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|snapshot
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|dfs
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Set storage policies according to the corresponding scheme.      */
DECL|method|setStoragePolicy (DistributedFileSystem dfs)
name|void
name|setStoragePolicy
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|entry
range|:
name|policyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This scheme defines DataNodes and their storage, including storage types    * and remaining capacities.    */
DECL|class|ClusterScheme
specifier|static
class|class
name|ClusterScheme
block|{
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numDataNodes
specifier|final
name|int
name|numDataNodes
decl_stmt|;
DECL|field|repl
specifier|final
name|short
name|repl
decl_stmt|;
DECL|field|storageTypes
specifier|final
name|StorageType
index|[]
index|[]
name|storageTypes
decl_stmt|;
DECL|field|storageCapacities
specifier|final
name|long
index|[]
index|[]
name|storageCapacities
decl_stmt|;
DECL|method|ClusterScheme ()
name|ClusterScheme
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_CONF
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ClusterScheme (Configuration conf, int numDataNodes, short repl, StorageType[][] types, long[][] capacities)
name|ClusterScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|short
name|repl
parameter_list|,
name|StorageType
index|[]
index|[]
name|types
parameter_list|,
name|long
index|[]
index|[]
name|capacities
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
name|numDataNodes
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|capacities
operator|==
literal|null
operator|||
name|capacities
operator|.
name|length
operator|==
name|numDataNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|numDataNodes
operator|=
name|numDataNodes
expr_stmt|;
name|this
operator|.
name|repl
operator|=
name|repl
expr_stmt|;
name|this
operator|.
name|storageTypes
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|storageCapacities
operator|=
name|capacities
expr_stmt|;
block|}
block|}
DECL|class|MigrationTest
class|class
name|MigrationTest
block|{
DECL|field|clusterScheme
specifier|private
specifier|final
name|ClusterScheme
name|clusterScheme
decl_stmt|;
DECL|field|nsScheme
specifier|private
specifier|final
name|NamespaceScheme
name|nsScheme
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|policies
specifier|private
specifier|final
name|BlockStoragePolicySuite
name|policies
decl_stmt|;
DECL|method|MigrationTest (ClusterScheme cScheme, NamespaceScheme nsScheme)
name|MigrationTest
parameter_list|(
name|ClusterScheme
name|cScheme
parameter_list|,
name|NamespaceScheme
name|nsScheme
parameter_list|)
block|{
name|this
operator|.
name|clusterScheme
operator|=
name|cScheme
expr_stmt|;
name|this
operator|.
name|nsScheme
operator|=
name|nsScheme
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|clusterScheme
operator|.
name|conf
expr_stmt|;
name|this
operator|.
name|policies
operator|=
name|DEFAULT_POLICIES
expr_stmt|;
block|}
comment|/**      * Set up the cluster and start NameNode and DataNodes according to the      * corresponding scheme.      */
DECL|method|setupCluster ()
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|clusterScheme
operator|.
name|numDataNodes
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|clusterScheme
operator|.
name|storageTypes
argument_list|)
operator|.
name|storageCapacities
argument_list|(
name|clusterScheme
operator|.
name|storageCapacities
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
DECL|method|runBasicTest (boolean shutdown)
specifier|private
name|void
name|runBasicTest
parameter_list|(
name|boolean
name|shutdown
parameter_list|)
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|prepareNamespace
argument_list|()
expr_stmt|;
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStoragePolicy
argument_list|()
expr_stmt|;
name|migrate
argument_list|()
expr_stmt|;
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|shutdownCluster ()
name|void
name|shutdownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|dfs
argument_list|)
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Create files/directories and set their storage policies according to the      * corresponding scheme.      */
DECL|method|prepareNamespace ()
name|void
name|prepareNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|nsScheme
operator|.
name|prepare
argument_list|(
name|dfs
argument_list|,
name|clusterScheme
operator|.
name|repl
argument_list|)
expr_stmt|;
block|}
DECL|method|setStoragePolicy ()
name|void
name|setStoragePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|nsScheme
operator|.
name|setStoragePolicy
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run the migration tool.      */
DECL|method|migrate ()
name|void
name|migrate
parameter_list|()
throws|throws
name|Exception
block|{
name|runMover
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// let the NN finish deletion
block|}
comment|/**      * Verify block locations after running the migration tool.      */
DECL|method|verify (boolean verifyAll)
name|void
name|verify
parameter_list|(
name|boolean
name|verifyAll
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|DataNodeTestUtils
operator|.
name|triggerBlockReport
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verifyAll
condition|)
block|{
name|verifyNamespace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runMover ()
specifier|private
name|void
name|runMover
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getNsServiceRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|nnMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|nn
range|:
name|namenodes
control|)
block|{
name|nnMap
operator|.
name|put
argument_list|(
name|nn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|Mover
operator|.
name|run
argument_list|(
name|nnMap
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNamespace ()
specifier|private
name|void
name|verifyNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsFileStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|verifyRecursively
argument_list|(
literal|null
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRecursively (final Path parent, final HdfsFileStatus status)
specifier|private
name|void
name|verifyRecursively
parameter_list|(
specifier|final
name|Path
name|parent
parameter_list|,
specifier|final
name|HdfsFileStatus
name|status
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|status
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|Path
name|fullPath
init|=
name|parent
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
else|:
name|status
operator|.
name|getFullPath
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|DirectoryListing
name|children
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|fullPath
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|HdfsFileStatus
name|child
range|:
name|children
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
name|verifyRecursively
argument_list|(
name|fullPath
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|status
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
comment|// is file
name|verifyFile
argument_list|(
name|parent
argument_list|,
name|status
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyFile (final Path file, final Byte expectedPolicyId)
name|void
name|verifyFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|Byte
name|expectedPolicyId
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|DirectoryListing
name|children
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|listPaths
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|HdfsFileStatus
name|child
range|:
name|children
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|verifyFile
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|expectedPolicyId
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFile (final Path parent, final HdfsFileStatus status, final Byte expectedPolicyId)
specifier|private
name|void
name|verifyFile
parameter_list|(
specifier|final
name|Path
name|parent
parameter_list|,
specifier|final
name|HdfsFileStatus
name|status
parameter_list|,
specifier|final
name|Byte
name|expectedPolicyId
parameter_list|)
throws|throws
name|Exception
block|{
name|HdfsLocatedFileStatus
name|fileStatus
init|=
operator|(
name|HdfsLocatedFileStatus
operator|)
name|status
decl_stmt|;
name|byte
name|policyId
init|=
name|fileStatus
operator|.
name|getStoragePolicy
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
name|policy
init|=
name|policies
operator|.
name|getPolicy
argument_list|(
name|policyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedPolicyId
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
name|expectedPolicyId
argument_list|,
name|policy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|policy
operator|.
name|chooseStorageTypes
argument_list|(
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|fileStatus
operator|.
name|getBlockLocations
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
specifier|final
name|Mover
operator|.
name|StorageTypeDiff
name|diff
init|=
operator|new
name|Mover
operator|.
name|StorageTypeDiff
argument_list|(
name|types
argument_list|,
name|lb
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileStatus
operator|.
name|getFullName
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|" with policy "
operator|+
name|policy
operator|+
literal|" has non-empty overlap: "
operator|+
name|diff
operator|+
literal|", the corresponding block is "
operator|+
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|diff
operator|.
name|removeOverlap
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReplication (Path file)
name|Replication
name|getReplication
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOrVerifyReplication
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|verifyReplication (Path file, int expectedDiskCount, int expectedArchiveCount)
name|Replication
name|verifyReplication
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|expectedDiskCount
parameter_list|,
name|int
name|expectedArchiveCount
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Replication
name|r
init|=
operator|new
name|Replication
argument_list|()
decl_stmt|;
name|r
operator|.
name|disk
operator|=
name|expectedDiskCount
expr_stmt|;
name|r
operator|.
name|archive
operator|=
name|expectedArchiveCount
expr_stmt|;
return|return
name|getOrVerifyReplication
argument_list|(
name|file
argument_list|,
name|r
argument_list|)
return|;
block|}
DECL|method|getOrVerifyReplication (Path file, Replication expected)
specifier|private
name|Replication
name|getOrVerifyReplication
parameter_list|(
name|Path
name|file
parameter_list|,
name|Replication
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedBlock
name|lb
init|=
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StringBuilder
name|types
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Replication
name|r
init|=
operator|new
name|Replication
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|lb
operator|.
name|getStorageTypes
argument_list|()
control|)
block|{
name|types
operator|.
name|append
argument_list|(
name|t
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|StorageType
operator|.
name|DISK
condition|)
block|{
name|r
operator|.
name|disk
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|==
name|StorageType
operator|.
name|ARCHIVE
condition|)
block|{
name|r
operator|.
name|archive
operator|++
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected storage type "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|s
init|=
literal|"file = "
operator|+
name|file
operator|+
literal|"\n  types = ["
operator|+
name|types
operator|+
literal|"]"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s
argument_list|,
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
DECL|class|Replication
specifier|static
class|class
name|Replication
block|{
DECL|field|disk
name|int
name|disk
decl_stmt|;
DECL|field|archive
name|int
name|archive
decl_stmt|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|disk
operator|^
name|archive
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|Replication
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Replication
name|that
init|=
operator|(
name|Replication
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|disk
operator|==
name|that
operator|.
name|disk
operator|&&
name|this
operator|.
name|archive
operator|==
name|that
operator|.
name|archive
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[disk="
operator|+
name|disk
operator|+
literal|", archive="
operator|+
name|archive
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|genStorageTypes (int numDataNodes)
specifier|private
specifier|static
name|StorageType
index|[]
index|[]
name|genStorageTypes
parameter_list|(
name|int
name|numDataNodes
parameter_list|)
block|{
return|return
name|genStorageTypes
argument_list|(
name|numDataNodes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|genStorageTypes (int numDataNodes, int numAllDisk, int numAllArchive, int numRamDisk)
specifier|private
specifier|static
name|StorageType
index|[]
index|[]
name|genStorageTypes
parameter_list|(
name|int
name|numDataNodes
parameter_list|,
name|int
name|numAllDisk
parameter_list|,
name|int
name|numAllArchive
parameter_list|,
name|int
name|numRamDisk
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|numAllDisk
operator|+
name|numAllArchive
operator|+
name|numRamDisk
operator|)
operator|<=
name|numDataNodes
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|types
init|=
operator|new
name|StorageType
index|[
name|numDataNodes
index|]
index|[]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|numRamDisk
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|numRamDisk
operator|+
name|numAllDisk
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|numRamDisk
operator|+
name|numAllDisk
operator|+
name|numAllArchive
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|ARCHIVE
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
DECL|class|PathPolicyMap
specifier|private
specifier|static
class|class
name|PathPolicyMap
block|{
DECL|field|map
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|hot
specifier|final
name|Path
name|hot
init|=
operator|new
name|Path
argument_list|(
literal|"/hot"
argument_list|)
decl_stmt|;
DECL|field|warm
specifier|final
name|Path
name|warm
init|=
operator|new
name|Path
argument_list|(
literal|"/warm"
argument_list|)
decl_stmt|;
DECL|field|cold
specifier|final
name|Path
name|cold
init|=
operator|new
name|Path
argument_list|(
literal|"/cold"
argument_list|)
decl_stmt|;
DECL|field|files
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
decl_stmt|;
DECL|method|PathPolicyMap (int filesPerDir)
name|PathPolicyMap
parameter_list|(
name|int
name|filesPerDir
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|hot
argument_list|,
name|HOT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|warm
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|cold
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|files
operator|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filesPerDir
condition|;
name|i
operator|++
control|)
block|{
name|files
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|newNamespaceScheme ()
name|NamespaceScheme
name|newNamespaceScheme
parameter_list|()
block|{
return|return
operator|new
name|NamespaceScheme
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hot
argument_list|,
name|warm
argument_list|,
name|cold
argument_list|)
argument_list|,
name|files
argument_list|,
name|BLOCK_SIZE
operator|/
literal|2
argument_list|,
literal|null
argument_list|,
name|map
argument_list|)
return|;
block|}
comment|/**      * Move hot files to warm and cold, warm files to hot and cold,      * and cold files to hot and warm.      */
DECL|method|moveAround (DistributedFileSystem dfs)
name|void
name|moveAround
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|srcDir
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|dstDir
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|srcDir
operator|.
name|equals
argument_list|(
name|dstDir
argument_list|)
condition|)
block|{
specifier|final
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|srcDir
argument_list|,
literal|"file"
operator|+
name|i
operator|++
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dstDir
argument_list|,
name|srcDir
operator|.
name|getName
argument_list|()
operator|+
literal|"2"
operator|+
name|dstDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * A normal case for Mover: move a file into archival storage    */
annotation|@
name|Test
DECL|method|testMigrateFileToArchival ()
specifier|public
name|void
name|testMigrateFileToArchival
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMigrateFileToArchival"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|policyMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|foo
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|NamespaceScheme
name|nsScheme
init|=
operator|new
name|NamespaceScheme
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|foo
argument_list|)
argument_list|,
literal|2
operator|*
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
name|policyMap
argument_list|)
decl_stmt|;
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|(
name|DEFAULT_CONF
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
operator|.
name|runBasicTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print a big banner in the test log to make debug easier.    */
DECL|method|banner (String string)
specifier|static
name|void
name|banner
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\n\n================================================\n"
operator|+
name|string
operator|+
literal|"\n"
operator|+
literal|"==================================================\n\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run Mover with arguments specifying files and directories    */
annotation|@
name|Test
DECL|method|testMoveSpecificPaths ()
specifier|public
name|void
name|testMoveSpecificPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMoveSpecificPaths"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|barFile
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
literal|"/foo2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar2File
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar2"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|policyMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|foo
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|foo2
argument_list|,
name|WARM
argument_list|)
expr_stmt|;
name|NamespaceScheme
name|nsScheme
init|=
operator|new
name|NamespaceScheme
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|barFile
argument_list|,
name|bar2File
argument_list|)
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
name|policyMap
argument_list|)
decl_stmt|;
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|(
name|DEFAULT_CONF
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MigrationTest
name|test
init|=
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
decl_stmt|;
name|test
operator|.
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|test
operator|.
name|prepareNamespace
argument_list|()
expr_stmt|;
name|test
operator|.
name|setStoragePolicy
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|Mover
operator|.
name|Cli
operator|.
name|getNameNodePathsToMove
argument_list|(
name|test
operator|.
name|conf
argument_list|,
literal|"-p"
argument_list|,
literal|"/foo/bar"
argument_list|,
literal|"/foo2"
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|Mover
operator|.
name|run
argument_list|(
name|map
argument_list|,
name|test
operator|.
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|test
operator|.
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|test
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Move an open file into archival storage    */
annotation|@
name|Test
DECL|method|testMigrateOpenFileToArchival ()
specifier|public
name|void
name|testMigrateOpenFileToArchival
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMigrateOpenFileToArchival"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fooDir
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|BlockStoragePolicy
argument_list|>
name|policyMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|fooDir
argument_list|,
name|COLD
argument_list|)
expr_stmt|;
name|NamespaceScheme
name|nsScheme
init|=
operator|new
name|NamespaceScheme
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fooDir
argument_list|)
argument_list|,
literal|null
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|null
argument_list|,
name|policyMap
argument_list|)
decl_stmt|;
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|(
name|DEFAULT_CONF
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MigrationTest
name|test
init|=
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
decl_stmt|;
name|test
operator|.
name|setupCluster
argument_list|()
expr_stmt|;
comment|// create an open file
name|banner
argument_list|(
literal|"writing to file /foo/bar"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|barFile
init|=
operator|new
name|Path
argument_list|(
name|fooDir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|test
operator|.
name|dfs
argument_list|,
name|barFile
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|test
operator|.
name|dfs
operator|.
name|append
argument_list|(
name|barFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"hello, "
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|()
expr_stmt|;
try|try
block|{
name|banner
argument_list|(
literal|"start data migration"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setStoragePolicy
argument_list|()
expr_stmt|;
comment|// set /foo to COLD
name|test
operator|.
name|migrate
argument_list|()
expr_stmt|;
comment|// make sure the under construction block has not been migrated
name|LocatedBlocks
name|lbs
init|=
name|test
operator|.
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|barFile
operator|.
name|toString
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Locations: "
operator|+
name|lbs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blks
init|=
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"finish the migration, continue writing"
argument_list|)
expr_stmt|;
comment|// make sure the writing can continue
name|out
operator|.
name|writeBytes
argument_list|(
literal|"world!"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFSOutputStream
operator|)
name|out
operator|.
name|getWrappedStream
argument_list|()
operator|)
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|lbs
operator|=
name|test
operator|.
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|barFile
operator|.
name|toString
argument_list|()
argument_list|,
name|BLOCK_SIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Locations: "
operator|+
name|lbs
argument_list|)
expr_stmt|;
name|blks
operator|=
name|lbs
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"finish writing, starting reading"
argument_list|)
expr_stmt|;
comment|// check the content of /foo/bar
name|FSDataInputStream
name|in
init|=
name|test
operator|.
name|dfs
operator|.
name|open
argument_list|(
name|barFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|13
index|]
decl_stmt|;
comment|// read from offset 1024
name|in
operator|.
name|readFully
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hello, world!"
argument_list|,
operator|new
name|String
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|test
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test directories with Hot, Warm and Cold polices.    */
annotation|@
name|Test
DECL|method|testHotWarmColdDirs ()
specifier|public
name|void
name|testHotWarmColdDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testHotWarmColdDirs"
argument_list|)
expr_stmt|;
name|PathPolicyMap
name|pathPolicyMap
init|=
operator|new
name|PathPolicyMap
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|NamespaceScheme
name|nsScheme
init|=
name|pathPolicyMap
operator|.
name|newNamespaceScheme
argument_list|()
decl_stmt|;
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|()
decl_stmt|;
name|MigrationTest
name|test
init|=
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
decl_stmt|;
try|try
block|{
name|test
operator|.
name|runBasicTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pathPolicyMap
operator|.
name|moveAround
argument_list|(
name|test
operator|.
name|dfs
argument_list|)
expr_stmt|;
name|test
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|test
operator|.
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|test
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForAllReplicas (int expectedReplicaNum, Path file, DistributedFileSystem dfs)
specifier|private
name|void
name|waitForAllReplicas
parameter_list|(
name|int
name|expectedReplicaNum
parameter_list|,
name|Path
name|file
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlocks
name|lbs
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedBlocks
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|lbs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|>=
name|expectedReplicaNum
condition|)
block|{
return|return;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setVolumeFull (DataNode dn, StorageType type)
specifier|private
name|void
name|setVolumeFull
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|StorageType
name|type
parameter_list|)
block|{
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|refs
init|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
name|FsVolumeSpi
name|fvs
range|:
name|refs
control|)
block|{
name|FsVolumeImpl
name|volume
init|=
operator|(
name|FsVolumeImpl
operator|)
name|fvs
decl_stmt|;
if|if
condition|(
name|volume
operator|.
name|getStorageType
argument_list|()
operator|==
name|type
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setCapacity to 0 for ["
operator|+
name|volume
operator|.
name|getStorageType
argument_list|()
operator|+
literal|"]"
operator|+
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setCapacityForTesting
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected exception by closing FsVolumeReference"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test DISK is running out of spaces.    */
annotation|@
name|Test
DECL|method|testNoSpaceDisk ()
specifier|public
name|void
name|testNoSpaceDisk
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testNoSpaceDisk"
argument_list|)
expr_stmt|;
specifier|final
name|PathPolicyMap
name|pathPolicyMap
init|=
operator|new
name|PathPolicyMap
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NamespaceScheme
name|nsScheme
init|=
name|pathPolicyMap
operator|.
name|newNamespaceScheme
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|DEFAULT_CONF
argument_list|)
decl_stmt|;
specifier|final
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|(
name|conf
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|MigrationTest
name|test
init|=
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
decl_stmt|;
try|try
block|{
name|test
operator|.
name|runBasicTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create 2 hot files with replication 3
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|hot
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|test
operator|.
name|dfs
argument_list|,
name|p
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|waitForAllReplicas
argument_list|(
name|replication
argument_list|,
name|p
argument_list|,
name|test
operator|.
name|dfs
argument_list|)
expr_stmt|;
block|}
comment|// set all the DISK volume to full
for|for
control|(
name|DataNode
name|dn
range|:
name|test
operator|.
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|setVolumeFull
argument_list|(
name|dn
argument_list|,
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// test increasing replication.  Since DISK is full,
comment|// new replicas should be stored in ARCHIVE as a fallback storage.
specifier|final
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|hot
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
specifier|final
name|Replication
name|r
init|=
name|test
operator|.
name|getReplication
argument_list|(
name|file0
argument_list|)
decl_stmt|;
specifier|final
name|short
name|newReplication
init|=
operator|(
name|short
operator|)
literal|5
decl_stmt|;
name|test
operator|.
name|dfs
operator|.
name|setReplication
argument_list|(
name|file0
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|test
operator|.
name|verifyReplication
argument_list|(
name|file0
argument_list|,
name|r
operator|.
name|disk
argument_list|,
name|newReplication
operator|-
name|r
operator|.
name|disk
argument_list|)
expr_stmt|;
comment|// test creating a cold file and then increase replication
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|cold
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|test
operator|.
name|dfs
argument_list|,
name|p
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|test
operator|.
name|verifyReplication
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|test
operator|.
name|dfs
operator|.
name|setReplication
argument_list|(
name|p
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|test
operator|.
name|verifyReplication
argument_list|(
name|p
argument_list|,
literal|0
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
comment|//test move a hot file to warm
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|hot
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|test
operator|.
name|dfs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|pathPolicyMap
operator|.
name|warm
argument_list|)
expr_stmt|;
name|test
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|test
operator|.
name|verifyFile
argument_list|(
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|warm
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
name|WARM
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|test
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test ARCHIVE is running out of spaces.    */
annotation|@
name|Test
DECL|method|testNoSpaceArchive ()
specifier|public
name|void
name|testNoSpaceArchive
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testNoSpaceArchive"
argument_list|)
expr_stmt|;
specifier|final
name|PathPolicyMap
name|pathPolicyMap
init|=
operator|new
name|PathPolicyMap
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|NamespaceScheme
name|nsScheme
init|=
name|pathPolicyMap
operator|.
name|newNamespaceScheme
argument_list|()
decl_stmt|;
specifier|final
name|ClusterScheme
name|clusterScheme
init|=
operator|new
name|ClusterScheme
argument_list|(
name|DEFAULT_CONF
argument_list|,
name|NUM_DATANODES
argument_list|,
name|REPL
argument_list|,
name|genStorageTypes
argument_list|(
name|NUM_DATANODES
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|MigrationTest
name|test
init|=
operator|new
name|MigrationTest
argument_list|(
name|clusterScheme
argument_list|,
name|nsScheme
argument_list|)
decl_stmt|;
try|try
block|{
name|test
operator|.
name|runBasicTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create 2 hot files with replication 3
specifier|final
name|short
name|replication
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|cold
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|test
operator|.
name|dfs
argument_list|,
name|p
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|replication
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|waitForAllReplicas
argument_list|(
name|replication
argument_list|,
name|p
argument_list|,
name|test
operator|.
name|dfs
argument_list|)
expr_stmt|;
block|}
comment|// set all the ARCHIVE volume to full
for|for
control|(
name|DataNode
name|dn
range|:
name|test
operator|.
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
name|setVolumeFull
argument_list|(
name|dn
argument_list|,
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
name|DataNodeTestUtils
operator|.
name|triggerHeartbeat
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test increasing replication but new replicas cannot be created
comment|// since no more ARCHIVE space.
specifier|final
name|Path
name|file0
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|cold
argument_list|,
literal|"file0"
argument_list|)
decl_stmt|;
specifier|final
name|Replication
name|r
init|=
name|test
operator|.
name|getReplication
argument_list|(
name|file0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|disk
argument_list|)
expr_stmt|;
specifier|final
name|short
name|newReplication
init|=
operator|(
name|short
operator|)
literal|5
decl_stmt|;
name|test
operator|.
name|dfs
operator|.
name|setReplication
argument_list|(
name|file0
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|test
operator|.
name|verifyReplication
argument_list|(
name|file0
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|archive
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test creating a hot file
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|hot
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|test
operator|.
name|dfs
argument_list|,
name|p
argument_list|,
name|BLOCK_SIZE
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|{
comment|//test move a cold file to warm
specifier|final
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|pathPolicyMap
operator|.
name|cold
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|test
operator|.
name|dfs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|pathPolicyMap
operator|.
name|warm
argument_list|)
expr_stmt|;
name|test
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|test
operator|.
name|verify
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|test
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

