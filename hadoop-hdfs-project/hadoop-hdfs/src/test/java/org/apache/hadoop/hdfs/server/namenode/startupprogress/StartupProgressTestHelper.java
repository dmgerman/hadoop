begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility methods that help with writing tests covering startup progress.  */
end_comment

begin_class
DECL|class|StartupProgressTestHelper
specifier|public
class|class
name|StartupProgressTestHelper
block|{
comment|/**    * Increments a counter a certain number of times.    *     * @param prog StartupProgress to increment    * @param phase Phase to increment    * @param step Step to increment    * @param delta long number of times to increment    */
DECL|method|incrementCounter (StartupProgress prog, Phase phase, Step step, long delta)
specifier|public
specifier|static
name|void
name|incrementCounter
parameter_list|(
name|StartupProgress
name|prog
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|StartupProgress
operator|.
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|delta
condition|;
operator|++
name|i
control|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sets up StartupProgress to a state part-way through the startup sequence.    *     * @param prog StartupProgress to set    */
DECL|method|setStartupProgressForRunningState (StartupProgress prog)
specifier|public
specifier|static
name|void
name|setStartupProgressForRunningState
parameter_list|(
name|StartupProgress
name|prog
parameter_list|)
block|{
name|prog
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up StartupProgress to final state after startup sequence has completed.    *     * @param prog StartupProgress to set    */
DECL|method|setStartupProgressForFinalState (StartupProgress prog)
specifier|public
specifier|static
name|void
name|setStartupProgressForFinalState
parameter_list|(
name|StartupProgress
name|prog
parameter_list|)
block|{
name|prog
operator|.
name|beginPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|Step
name|loadingFsImageInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|LOADING_FSIMAGE
argument_list|,
name|loadingFsImageInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|LOADING_FSIMAGE
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|Step
name|loadingEditsFile
init|=
operator|new
name|Step
argument_list|(
literal|"file"
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|,
literal|200L
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|LOADING_EDITS
argument_list|,
name|loadingEditsFile
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|LOADING_EDITS
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
expr_stmt|;
name|Step
name|savingCheckpointInodes
init|=
operator|new
name|Step
argument_list|(
name|INODES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
name|savingCheckpointInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
name|savingCheckpointInodes
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|SAVING_CHECKPOINT
argument_list|,
name|savingCheckpointInodes
argument_list|,
literal|300L
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|SAVING_CHECKPOINT
argument_list|,
name|savingCheckpointInodes
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|SAVING_CHECKPOINT
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|SAFEMODE
argument_list|)
expr_stmt|;
name|Step
name|awaitingBlocks
init|=
operator|new
name|Step
argument_list|(
name|AWAITING_REPORTED_BLOCKS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|SAFEMODE
argument_list|,
name|awaitingBlocks
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|SAFEMODE
argument_list|,
name|awaitingBlocks
argument_list|,
literal|400L
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|prog
argument_list|,
name|SAFEMODE
argument_list|,
name|awaitingBlocks
argument_list|,
literal|400L
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|SAFEMODE
argument_list|,
name|awaitingBlocks
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|SAFEMODE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

