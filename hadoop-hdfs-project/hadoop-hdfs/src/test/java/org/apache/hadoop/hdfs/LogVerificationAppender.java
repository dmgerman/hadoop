begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ThrowableInformation
import|;
end_import

begin_comment
comment|/**  * Used to verify that certain exceptions or messages are present in log output.  */
end_comment

begin_class
DECL|class|LogVerificationAppender
specifier|public
class|class
name|LogVerificationAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|log
specifier|private
specifier|final
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|log
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggingEvent
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|requiresLayout ()
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|append (final LoggingEvent loggingEvent)
specifier|protected
name|void
name|append
parameter_list|(
specifier|final
name|LoggingEvent
name|loggingEvent
parameter_list|)
block|{
name|log
operator|.
name|add
argument_list|(
name|loggingEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
DECL|method|getLog ()
specifier|public
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|getLog
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|LoggingEvent
argument_list|>
argument_list|(
name|log
argument_list|)
return|;
block|}
DECL|method|countExceptionsWithMessage (final String text)
specifier|public
name|int
name|countExceptionsWithMessage
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LoggingEvent
name|e
range|:
name|getLog
argument_list|()
control|)
block|{
name|ThrowableInformation
name|t
init|=
name|e
operator|.
name|getThrowableInformation
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|String
name|m
init|=
name|t
operator|.
name|getThrowable
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|contains
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

