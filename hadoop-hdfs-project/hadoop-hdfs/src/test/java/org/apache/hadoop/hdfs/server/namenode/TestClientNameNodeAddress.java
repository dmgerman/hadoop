begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test that {@link NameNodeUtils#getClientNamenodeAddress}  correctly  * computes the client address for WebHDFS redirects for different  * combinations of HA, federated and single NN setups.  */
end_comment

begin_class
DECL|class|TestClientNameNodeAddress
specifier|public
class|class
name|TestClientNameNodeAddress
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestClientNameNodeAddress
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testSimpleConfig ()
specifier|public
name|void
name|testSimpleConfig
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://host1:100"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"host1:100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWithoutPort ()
specifier|public
name|void
name|testSimpleWithoutPort
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://host1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithNoDefaultFs ()
specifier|public
name|void
name|testWithNoDefaultFs
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithNoHost ()
specifier|public
name|void
name|testWithNoHost
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs:///"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFederationWithHa ()
specifier|public
name|void
name|testFederationWithHa
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://ns1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|".ns1"
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_HA_NAMENODES_KEY_PREFIX
operator|+
literal|".ns2"
argument_list|,
literal|"nn1,nn2"
argument_list|)
expr_stmt|;
comment|// The current namenode belongs to ns1 and ns1 is the default nameservice.
name|assertThat
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The current namenode belongs to ns2 and ns1 is the default nameservice.
name|assertThat
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|"ns2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"ns2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFederationWithoutHa ()
specifier|public
name|void
name|testFederationWithoutHa
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://host1:100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMESERVICES
argument_list|,
literal|"ns1,ns2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|".ns1"
argument_list|,
literal|"host1:100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|".ns2"
argument_list|,
literal|"host2:200"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|"ns1"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"host1:100"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|NameNodeUtils
operator|.
name|getClientNamenodeAddress
argument_list|(
name|conf
argument_list|,
literal|"ns2"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"host2:200"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

