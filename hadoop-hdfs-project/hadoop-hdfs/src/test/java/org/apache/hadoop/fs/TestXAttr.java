begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for<code>XAttr</code> objects.  */
end_comment

begin_class
DECL|class|TestXAttr
specifier|public
class|class
name|TestXAttr
block|{
DECL|field|XATTR
DECL|field|XATTR1
DECL|field|XATTR2
DECL|field|XATTR3
DECL|field|XATTR4
DECL|field|XATTR5
specifier|private
specifier|static
name|XAttr
name|XATTR
decl_stmt|,
name|XATTR1
decl_stmt|,
name|XATTR2
decl_stmt|,
name|XATTR3
decl_stmt|,
name|XATTR4
decl_stmt|,
name|XATTR5
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|value
init|=
block|{
literal|0x31
block|,
literal|0x32
block|,
literal|0x33
block|}
decl_stmt|;
name|XATTR
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|XATTR1
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|XATTR2
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|TRUSTED
argument_list|)
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|XATTR3
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|SYSTEM
argument_list|)
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|XATTR4
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|SECURITY
argument_list|)
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|XATTR5
operator|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XAttr
operator|.
name|NameSpace
operator|.
name|RAW
argument_list|)
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXAttrEquals ()
specifier|public
name|void
name|testXAttrEquals
parameter_list|()
block|{
name|assertNotSame
argument_list|(
name|XATTR1
argument_list|,
name|XATTR2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|XATTR2
argument_list|,
name|XATTR3
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|XATTR3
argument_list|,
name|XATTR4
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|XATTR4
argument_list|,
name|XATTR5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR
argument_list|,
name|XATTR1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR1
argument_list|,
name|XATTR1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR2
argument_list|,
name|XATTR2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR3
argument_list|,
name|XATTR3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR4
argument_list|,
name|XATTR4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XATTR5
argument_list|,
name|XATTR5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR1
operator|.
name|equals
argument_list|(
name|XATTR2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR2
operator|.
name|equals
argument_list|(
name|XATTR3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR3
operator|.
name|equals
argument_list|(
name|XATTR4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR4
operator|.
name|equals
argument_list|(
name|XATTR5
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXAttrHashCode ()
specifier|public
name|void
name|testXAttrHashCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|XATTR
operator|.
name|hashCode
argument_list|()
argument_list|,
name|XATTR1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR1
operator|.
name|hashCode
argument_list|()
operator|==
name|XATTR2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR2
operator|.
name|hashCode
argument_list|()
operator|==
name|XATTR3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR3
operator|.
name|hashCode
argument_list|()
operator|==
name|XATTR4
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|XATTR4
operator|.
name|hashCode
argument_list|()
operator|==
name|XATTR5
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

