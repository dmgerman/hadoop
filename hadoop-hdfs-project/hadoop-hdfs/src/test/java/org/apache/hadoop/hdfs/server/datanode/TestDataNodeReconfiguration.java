begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test to reconfigure some parameters for DataNode without restart  */
end_comment

begin_class
DECL|class|TestDataNodeReconfiguration
specifier|public
class|class
name|TestDataNodeReconfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
operator|+
literal|"data"
decl_stmt|;
DECL|field|NN_ADDR
specifier|private
specifier|final
specifier|static
name|InetSocketAddress
name|NN_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|5020
argument_list|)
decl_stmt|;
DECL|field|NUM_NAME_NODE
specifier|private
specifier|final
name|int
name|NUM_NAME_NODE
init|=
literal|1
decl_stmt|;
DECL|field|NUM_DATA_NODE
specifier|private
specifier|final
name|int
name|NUM_DATA_NODE
init|=
literal|10
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|Setup ()
specifier|public
name|void
name|Setup
parameter_list|()
throws|throws
name|IOException
block|{
name|startDFSCluster
argument_list|(
name|NUM_NAME_NODE
argument_list|,
name|NUM_DATA_NODE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|DATA_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cannot delete data-node dirs"
argument_list|,
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startDFSCluster (int numNameNodes, int numDataNodes)
specifier|private
name|void
name|startDFSCluster
parameter_list|(
name|int
name|numNameNodes
parameter_list|,
name|int
name|numDataNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSNNTopology
name|nnTopology
init|=
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
name|numNameNodes
argument_list|)
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|nnTopology
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDataNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Starts an instance of DataNode    *    * @throws IOException    */
DECL|method|createDNsForTest (int numDateNode)
specifier|public
name|DataNode
index|[]
name|createDNsForTest
parameter_list|(
name|int
name|numDateNode
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DataNode
index|[]
name|result
init|=
operator|new
name|DataNode
index|[
name|numDateNode
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDateNode
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|InternalDataNodeTestUtils
operator|.
name|startDNWithMockNN
argument_list|(
name|conf
argument_list|,
name|NN_ADDR
argument_list|,
name|DATA_DIR
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testMaxConcurrentMoversReconfiguration ()
specifier|public
name|void
name|testMaxConcurrentMoversReconfiguration
parameter_list|()
throws|throws
name|ReconfigurationException
throws|,
name|IOException
block|{
name|int
name|maxConcurrentMovers
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_NODE
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// try invalid values
try|try
block|{
name|dn
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ReconfigurationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expecting NumberFormatException"
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NumberFormatException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dn
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ReconfigurationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expecting IllegalArgumentException"
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dn
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ReconfigurationException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expecting IllegalArgumentException"
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
comment|// change properties
name|dn
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxConcurrentMovers
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify change
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|,
name|maxConcurrentMovers
argument_list|,
name|dn
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|getMaxConcurrentMovers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|,
name|maxConcurrentMovers
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// revert to default
name|dn
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// verify default
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s has wrong value"
argument_list|,
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|,
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT
argument_list|,
name|dn
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|getMaxConcurrentMovers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"expect %s is not configured"
argument_list|,
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|,
literal|null
argument_list|,
name|dn
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAcquireWithMaxConcurrentMoversGreaterThanDefault ()
specifier|public
name|void
name|testAcquireWithMaxConcurrentMoversGreaterThanDefault
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
specifier|final
name|DataNode
index|[]
name|dns
init|=
name|createDNsForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|testAcquireOnMaxConcurrentMoversReconfiguration
argument_list|(
name|dns
index|[
literal|0
index|]
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dns
index|[
literal|0
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAcquireWithMaxConcurrentMoversLessThanDefault ()
specifier|public
name|void
name|testAcquireWithMaxConcurrentMoversLessThanDefault
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
specifier|final
name|DataNode
index|[]
name|dns
init|=
name|createDNsForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|testAcquireOnMaxConcurrentMoversReconfiguration
argument_list|(
name|dns
index|[
literal|0
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dns
index|[
literal|0
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simulates a scenario where the DataNode has been reconfigured with fewer    * mover threads, but all of the current treads are busy and therefore the    * DataNode is unable to honor this request within a reasonable amount of    * time. The DataNode eventually gives up and returns a flag indicating that    * the request was not honored.    */
annotation|@
name|Test
DECL|method|testFailedDecreaseConcurrentMovers ()
specifier|public
name|void
name|testFailedDecreaseConcurrentMovers
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
specifier|final
name|DataNode
index|[]
name|dns
init|=
name|createDNsForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DataNode
name|dataNode
init|=
name|dns
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
comment|// Set the current max to 2
name|dataNode
operator|.
name|xserver
operator|.
name|updateBalancerMaxConcurrentMovers
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Simulate grabbing 2 threads
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|dataNode
operator|.
name|xserver
operator|.
name|setMaxReconfigureWaitTime
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Attempt to set new maximum to 1
specifier|final
name|boolean
name|success
init|=
name|dataNode
operator|.
name|xserver
operator|.
name|updateBalancerMaxConcurrentMovers
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dataNode
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test with invalid configuration.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ReconfigurationException
operator|.
name|class
argument_list|)
DECL|method|testFailedDecreaseConcurrentMoversReconfiguration ()
specifier|public
name|void
name|testFailedDecreaseConcurrentMoversReconfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
specifier|final
name|DataNode
index|[]
name|dns
init|=
name|createDNsForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DataNode
name|dataNode
init|=
name|dns
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
comment|// Set the current max to 2
name|dataNode
operator|.
name|xserver
operator|.
name|updateBalancerMaxConcurrentMovers
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Simulate grabbing 2 threads
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|dataNode
operator|.
name|xserver
operator|.
name|setMaxReconfigureWaitTime
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now try reconfigure maximum downwards with threads released
name|dataNode
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|e
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|e
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|dataNode
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAcquireOnMaxConcurrentMoversReconfiguration ( DataNode dataNode, int maxConcurrentMovers)
specifier|private
name|void
name|testAcquireOnMaxConcurrentMoversReconfiguration
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|int
name|maxConcurrentMovers
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReconfigurationException
block|{
specifier|final
name|int
name|defaultMaxThreads
init|=
name|dataNode
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT
argument_list|)
decl_stmt|;
comment|/** Test that the default setup is working */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultMaxThreads
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"should be able to get thread quota"
argument_list|,
literal|true
argument_list|,
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should not be able to get thread quota"
argument_list|,
literal|false
argument_list|,
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
comment|// Give back the threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultMaxThreads
condition|;
name|i
operator|++
control|)
block|{
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|/** Test that the change is applied correctly */
comment|// change properties
name|dataNode
operator|.
name|reconfigureProperty
argument_list|(
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxConcurrentMovers
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"thread quota is wrong"
argument_list|,
name|maxConcurrentMovers
argument_list|,
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|getMaxConcurrentMovers
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxConcurrentMovers
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"should be able to get thread quota"
argument_list|,
literal|true
argument_list|,
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"should not be able to get thread quota"
argument_list|,
literal|false
argument_list|,
name|dataNode
operator|.
name|xserver
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

