begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DataNodeUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DataNodeUsageReportUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for {@link DataNodeUsageReport}.  */
end_comment

begin_class
DECL|class|TestDNUsageReport
specifier|public
class|class
name|TestDNUsageReport
block|{
DECL|field|dnUsageUtil
specifier|private
name|DataNodeUsageReportUtil
name|dnUsageUtil
decl_stmt|;
DECL|field|bytesWritten
specifier|private
name|long
name|bytesWritten
decl_stmt|;
DECL|field|bytesRead
specifier|private
name|long
name|bytesRead
decl_stmt|;
DECL|field|writeTime
specifier|private
name|long
name|writeTime
decl_stmt|;
DECL|field|readTime
specifier|private
name|long
name|readTime
decl_stmt|;
DECL|field|writeBlock
specifier|private
name|long
name|writeBlock
decl_stmt|;
DECL|field|readBlock
specifier|private
name|long
name|readBlock
decl_stmt|;
DECL|field|timeSinceLastReport
specifier|private
name|long
name|timeSinceLastReport
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|dnUsageUtil
operator|=
operator|new
name|DataNodeUsageReportUtil
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|IOException
block|{
name|dnUsageUtil
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Ensure that storage type and storage state are propagated    * in Storage Reports.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUsageReport ()
specifier|public
name|void
name|testUsageReport
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test1
name|DataNodeUsageReport
name|report
init|=
name|dnUsageUtil
operator|.
name|getUsageReport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
argument_list|,
name|DataNodeUsageReport
operator|.
name|EMPTY_REPORT
argument_list|)
expr_stmt|;
comment|// Test2
name|bytesWritten
operator|=
literal|200
expr_stmt|;
name|bytesRead
operator|=
literal|200
expr_stmt|;
name|writeTime
operator|=
literal|50
expr_stmt|;
name|readTime
operator|=
literal|50
expr_stmt|;
name|writeBlock
operator|=
literal|20
expr_stmt|;
name|readBlock
operator|=
literal|10
expr_stmt|;
name|timeSinceLastReport
operator|=
literal|5
expr_stmt|;
name|report
operator|=
name|dnUsageUtil
operator|.
name|getUsageReport
argument_list|(
name|bytesWritten
argument_list|,
name|bytesRead
argument_list|,
name|writeTime
argument_list|,
name|readTime
argument_list|,
name|writeBlock
argument_list|,
name|readBlock
argument_list|,
name|timeSinceLastReport
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bytesWritten
operator|/
name|timeSinceLastReport
argument_list|,
name|report
operator|.
name|getBytesWrittenPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bytesRead
operator|/
name|timeSinceLastReport
argument_list|,
name|report
operator|.
name|getBytesReadPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeTime
argument_list|,
name|report
operator|.
name|getWriteTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|readTime
argument_list|,
name|report
operator|.
name|getReadTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeBlock
operator|/
name|timeSinceLastReport
argument_list|,
name|report
operator|.
name|getBlocksWrittenPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|readBlock
operator|/
name|timeSinceLastReport
argument_list|,
name|report
operator|.
name|getBlocksReadPerSec
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test3
name|DataNodeUsageReport
name|report2
init|=
name|dnUsageUtil
operator|.
name|getUsageReport
argument_list|(
name|bytesWritten
argument_list|,
name|bytesRead
argument_list|,
name|writeTime
argument_list|,
name|readTime
argument_list|,
name|writeBlock
argument_list|,
name|readBlock
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
argument_list|,
name|report2
argument_list|)
expr_stmt|;
comment|// Test4
name|long
name|bytesWritten2
init|=
literal|50000
decl_stmt|;
name|long
name|bytesRead2
init|=
literal|40000
decl_stmt|;
name|long
name|writeTime2
init|=
literal|5000
decl_stmt|;
name|long
name|readTime2
init|=
literal|1500
decl_stmt|;
name|long
name|writeBlock2
init|=
literal|1000
decl_stmt|;
name|long
name|readBlock2
init|=
literal|200
decl_stmt|;
name|timeSinceLastReport
operator|=
literal|60
expr_stmt|;
name|report2
operator|=
name|dnUsageUtil
operator|.
name|getUsageReport
argument_list|(
name|bytesWritten2
argument_list|,
name|bytesRead2
argument_list|,
name|writeTime2
argument_list|,
name|readTime2
argument_list|,
name|writeBlock2
argument_list|,
name|readBlock2
argument_list|,
name|timeSinceLastReport
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|bytesWritten2
operator|-
name|bytesWritten
operator|)
operator|/
name|timeSinceLastReport
argument_list|,
name|report2
operator|.
name|getBytesWrittenPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|bytesRead2
operator|-
name|bytesRead
operator|)
operator|/
name|timeSinceLastReport
argument_list|,
name|report2
operator|.
name|getBytesReadPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeTime2
operator|-
name|writeTime
argument_list|,
name|report2
operator|.
name|getWriteTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|readTime2
operator|-
name|readTime
argument_list|,
name|report2
operator|.
name|getReadTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|writeBlock2
operator|-
name|writeBlock
operator|)
operator|/
name|timeSinceLastReport
argument_list|,
name|report2
operator|.
name|getBlocksWrittenPerSec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|readBlock2
operator|-
name|readBlock
operator|)
operator|/
name|timeSinceLastReport
argument_list|,
name|report2
operator|.
name|getBlocksReadPerSec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

