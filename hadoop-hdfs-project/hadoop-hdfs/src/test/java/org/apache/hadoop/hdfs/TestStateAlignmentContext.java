begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AlignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class is used to test server sending state alignment information to clients  * via RPC and likewise clients receiving and updating their last known  * state alignment info.  * These tests check that after a single RPC call a client will have caught up  * to the most recent alignment state of the server.  */
end_comment

begin_class
DECL|class|TestStateAlignmentContext
specifier|public
class|class
name|TestStateAlignmentContext
block|{
DECL|field|BLOCK_SIZE
specifier|static
specifier|final
name|long
name|BLOCK_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|NUMDATANODES
specifier|private
specifier|static
specifier|final
name|int
name|NUMDATANODES
init|=
literal|3
decl_stmt|;
DECL|field|CONF
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startUpCluster ()
specifier|public
specifier|static
name|void
name|startUpCluster
parameter_list|()
throws|throws
name|IOException
block|{
comment|// disable block scanner
name|CONF
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SCAN_PERIOD_HOURS_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Set short retry timeouts so this test runs faster
name|CONF
operator|.
name|setInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Retry
operator|.
name|WINDOW_BASE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setBoolean
argument_list|(
literal|"fs.hdfs.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUMDATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDownCluster ()
specifier|public
specifier|static
name|void
name|shutDownCluster
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test checks if after a client writes we can see the state id in    * updated via the response.    */
annotation|@
name|Test
DECL|method|testStateTransferOnWrite ()
specifier|public
name|void
name|testStateTransferOnWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|preWriteState
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLastWrittenTransactionId
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile1"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|long
name|clientState
init|=
name|dfs
operator|.
name|dfs
operator|.
name|getAlignmentContext
argument_list|()
operator|.
name|getLastSeenStateId
argument_list|()
decl_stmt|;
name|long
name|postWriteState
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLastWrittenTransactionId
argument_list|()
decl_stmt|;
comment|// Write(s) should have increased state. Check for greater than.
name|assertThat
argument_list|(
name|clientState
operator|>
name|preWriteState
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Client and server state should be equal.
name|assertThat
argument_list|(
name|clientState
argument_list|,
name|is
argument_list|(
name|postWriteState
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test checks if after a client reads we can see the state id in    * updated via the response.    */
annotation|@
name|Test
DECL|method|testStateTransferOnRead ()
specifier|public
name|void
name|testStateTransferOnRead
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile2"
argument_list|)
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|long
name|lastWrittenId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLastWrittenTransactionId
argument_list|()
decl_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read should catch client up to last written state.
name|long
name|clientState
init|=
name|dfs
operator|.
name|dfs
operator|.
name|getAlignmentContext
argument_list|()
operator|.
name|getLastSeenStateId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clientState
argument_list|,
name|is
argument_list|(
name|lastWrittenId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test checks that a fresh client starts with no state and becomes    * updated of state from RPC call.    */
annotation|@
name|Test
DECL|method|testStateTransferOnFreshClient ()
specifier|public
name|void
name|testStateTransferOnFreshClient
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile3"
argument_list|)
argument_list|,
literal|"ezpz"
argument_list|)
expr_stmt|;
name|long
name|lastWrittenId
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getLastWrittenTransactionId
argument_list|()
decl_stmt|;
try|try
init|(
name|DistributedFileSystem
name|clearDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|CONF
argument_list|)
init|)
block|{
name|ClientGCIContext
name|clientState
init|=
name|clearDfs
operator|.
name|dfs
operator|.
name|getAlignmentContext
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clientState
operator|.
name|getLastSeenStateId
argument_list|()
argument_list|,
name|is
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|clearDfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clientState
operator|.
name|getLastSeenStateId
argument_list|()
argument_list|,
name|is
argument_list|(
name|lastWrittenId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test mocks an AlignmentContext and ensures that DFSClient    * writes its lastSeenStateId into RPC requests.    */
annotation|@
name|Test
DECL|method|testClientSendsState ()
specifier|public
name|void
name|testClientSendsState
parameter_list|()
throws|throws
name|Exception
block|{
name|AlignmentContext
name|alignmentContext
init|=
name|dfs
operator|.
name|dfs
operator|.
name|getAlignmentContext
argument_list|()
decl_stmt|;
name|AlignmentContext
name|spiedAlignContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|alignmentContext
argument_list|)
decl_stmt|;
name|Client
operator|.
name|setAlignmentContext
argument_list|(
name|spiedAlignContext
argument_list|)
expr_stmt|;
comment|// Collect RpcRequestHeaders for verification later.
specifier|final
name|List
argument_list|<
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
argument_list|>
name|collectedHeaders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|a
lambda|->
block|{
name|Object
index|[]
name|arguments
init|=
name|a
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
name|header
init|=
operator|(
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
operator|)
name|arguments
index|[
literal|0
index|]
decl_stmt|;
name|collectedHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spiedAlignContext
argument_list|)
operator|.
name|updateRequestState
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile4"
argument_list|)
argument_list|,
literal|"shv"
argument_list|)
expr_stmt|;
comment|// Ensure first header and last header have different state.
name|assertThat
argument_list|(
name|collectedHeaders
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collectedHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStateId
argument_list|()
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|collectedHeaders
operator|.
name|get
argument_list|(
name|collectedHeaders
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure collected RpcRequestHeaders are in increasing order.
name|long
name|lastHeader
init|=
name|collectedHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStateId
argument_list|()
decl_stmt|;
for|for
control|(
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
name|header
range|:
name|collectedHeaders
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|collectedHeaders
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|long
name|currentHeader
init|=
name|header
operator|.
name|getStateId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|currentHeader
operator|>=
name|lastHeader
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|lastHeader
operator|=
name|header
operator|.
name|getStateId
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test mocks an AlignmentContext to send stateIds greater than    * server's stateId in RPC requests.    */
annotation|@
name|Test
DECL|method|testClientSendsGreaterState ()
specifier|public
name|void
name|testClientSendsGreaterState
parameter_list|()
throws|throws
name|Exception
block|{
name|AlignmentContext
name|alignmentContext
init|=
name|dfs
operator|.
name|dfs
operator|.
name|getAlignmentContext
argument_list|()
decl_stmt|;
name|AlignmentContext
name|spiedAlignContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|alignmentContext
argument_list|)
decl_stmt|;
name|Client
operator|.
name|setAlignmentContext
argument_list|(
name|spiedAlignContext
argument_list|)
expr_stmt|;
comment|// Make every client call have a stateId> server's stateId.
name|Mockito
operator|.
name|doAnswer
argument_list|(
name|a
lambda|->
block|{
name|Object
index|[]
name|arguments
init|=
name|a
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
name|header
init|=
operator|(
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|Builder
operator|)
name|arguments
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
return|return
name|a
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
finally|finally
block|{
name|header
operator|.
name|setStateId
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spiedAlignContext
argument_list|)
operator|.
name|updateRequestState
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|FSNamesystem
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/testFile4"
argument_list|)
argument_list|,
literal|"shv"
argument_list|)
expr_stmt|;
name|logCapturer
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|logCapturer
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
literal|"A client sent stateId: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

