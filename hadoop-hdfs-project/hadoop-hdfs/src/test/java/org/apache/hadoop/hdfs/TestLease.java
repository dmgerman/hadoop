begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyShort
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestLease
specifier|public
class|class
name|TestLease
block|{
DECL|method|hasLease (MiniDFSCluster cluster, Path src)
specifier|static
name|boolean
name|hasLease
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Path
name|src
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|getLeaseByPath
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|leaseCount (MiniDFSCluster cluster)
specifier|static
name|int
name|leaseCount
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getLeaseManager
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|countLease
argument_list|()
return|;
block|}
DECL|field|dirString
specifier|static
specifier|final
name|String
name|dirString
init|=
literal|"/test/lease"
decl_stmt|;
DECL|field|dir
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|dirString
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLease
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testLeaseAbort ()
specifier|public
name|void
name|testLeaseAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|NamenodeProtocols
name|preSpyNN
init|=
name|cluster
operator|.
name|getNameNodeRpc
argument_list|()
decl_stmt|;
name|NamenodeProtocols
name|spyNN
init|=
name|spy
argument_list|(
name|preSpyNN
argument_list|)
decl_stmt|;
name|DFSClient
name|dfs
init|=
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|spyNN
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|FSDataOutputStream
name|c_out
init|=
name|createFsOut
argument_list|(
name|dfs
argument_list|,
name|dirString
operator|+
literal|"c"
argument_list|)
decl_stmt|;
name|c_out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|c_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|DFSInputStream
name|c_in
init|=
name|dfs
operator|.
name|open
argument_list|(
name|dirString
operator|+
literal|"c"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|d_out
init|=
name|createFsOut
argument_list|(
name|dfs
argument_list|,
name|dirString
operator|+
literal|"d"
argument_list|)
decl_stmt|;
comment|// stub the renew method.
name|doThrow
argument_list|(
operator|new
name|RemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Your token is worthless"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|renewLease
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// We don't need to wait the lease renewer thread to act.
comment|// call renewLease() manually.
comment|// make it look like the soft limit has been exceeded.
name|LeaseRenewer
name|originalRenewer
init|=
name|dfs
operator|.
name|getLeaseRenewer
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|lastLeaseRenewal
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|HdfsConstants
operator|.
name|LEASE_SOFTLIMIT_PERIOD
operator|-
literal|1000
expr_stmt|;
try|try
block|{
name|dfs
operator|.
name|renewLease
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{}
comment|// Things should continue to work it passes hard limit without
comment|// renewing.
try|try
block|{
name|d_out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Write worked beyond the soft limit as expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Write failed."
argument_list|)
expr_stmt|;
block|}
comment|// make it look like the hard limit has been exceeded.
name|dfs
operator|.
name|lastLeaseRenewal
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
operator|-
literal|1000
expr_stmt|;
name|dfs
operator|.
name|renewLease
argument_list|()
expr_stmt|;
comment|// this should not work.
try|try
block|{
name|d_out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|d_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Write did not fail even after the fatal lease renewal failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Write failed as expected. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// If aborted, the renewer should be empty. (no reference to clients)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|originalRenewer
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// unstub
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyNN
argument_list|)
operator|.
name|renewLease
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing input streams should work
try|try
block|{
name|int
name|num
init|=
name|c_in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to read 1 byte"
argument_list|)
expr_stmt|;
block|}
name|c_in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Read failed with "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Read after lease renewal failure failed"
argument_list|)
expr_stmt|;
block|}
comment|// new file writes should work.
try|try
block|{
name|c_out
operator|=
name|createFsOut
argument_list|(
name|dfs
argument_list|,
name|dirString
operator|+
literal|"c"
argument_list|)
expr_stmt|;
name|c_out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|c_out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Write failed with "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Write failed"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLeaseAfterRename ()
specifier|public
name|void
name|testLeaseAfterRename
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test-file"
argument_list|)
decl_stmt|;
name|Path
name|d
init|=
operator|new
name|Path
argument_list|(
literal|"/test-d"
argument_list|)
decl_stmt|;
name|Path
name|d2
init|=
operator|new
name|Path
argument_list|(
literal|"/test-d-other"
argument_list|)
decl_stmt|;
comment|// open a file to get a lease
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
comment|//out.hsync();
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// just to ensure first fs doesn't have any logic to twiddle leases
name|DistributedFileSystem
name|fs2
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// rename the file into an existing dir
name|LOG
operator|.
name|info
argument_list|(
literal|"DMS: rename file into dir"
argument_list|)
expr_stmt|;
name|Path
name|pRenamed
init|=
operator|new
name|Path
argument_list|(
name|d
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|pRenamed
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|p
operator|+
literal|" exists"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pRenamed
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"has lease for "
operator|+
name|p
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"no lease for "
operator|+
name|pRenamed
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename the parent dir to a new non-existent dir
name|LOG
operator|.
name|info
argument_list|(
literal|"DMS: rename parent dir"
argument_list|)
expr_stmt|;
name|Path
name|pRenamedAgain
init|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
name|pRenamed
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|fs2
operator|.
name|rename
argument_list|(
name|d
argument_list|,
name|d2
argument_list|)
expr_stmt|;
comment|// src gone
name|Assert
operator|.
name|assertFalse
argument_list|(
name|d
operator|+
literal|" exists"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"has lease for "
operator|+
name|pRenamed
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst checks
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d2
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pRenamedAgain
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"no lease for "
operator|+
name|pRenamedAgain
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename the parent dir to existing dir
comment|// NOTE: rename w/o options moves paths into existing dir
name|LOG
operator|.
name|info
argument_list|(
literal|"DMS: rename parent again"
argument_list|)
expr_stmt|;
name|pRenamed
operator|=
name|pRenamedAgain
expr_stmt|;
name|pRenamedAgain
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|d
argument_list|,
name|d2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|mkdirs
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|rename
argument_list|(
name|d2
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// src gone
name|Assert
operator|.
name|assertFalse
argument_list|(
name|d2
operator|+
literal|" exists"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"no lease for "
operator|+
name|pRenamed
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst checks
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pRenamedAgain
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"no lease for "
operator|+
name|pRenamedAgain
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename with opts to non-existent dir
name|pRenamed
operator|=
name|pRenamedAgain
expr_stmt|;
name|pRenamedAgain
operator|=
operator|new
name|Path
argument_list|(
name|d2
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|rename
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
argument_list|,
name|d2
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// src gone
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"has lease for "
operator|+
name|pRenamed
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst checks
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d2
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pRenamedAgain
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"no lease for "
operator|+
name|pRenamedAgain
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
comment|// rename with opts to existing dir
comment|// NOTE: rename with options will not move paths into the existing dir
name|pRenamed
operator|=
name|pRenamedAgain
expr_stmt|;
name|pRenamedAgain
operator|=
operator|new
name|Path
argument_list|(
name|d
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|rename
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
argument_list|,
name|d
argument_list|,
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
comment|// src gone
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamed
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"has lease for "
operator|+
name|pRenamed
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamed
argument_list|)
argument_list|)
expr_stmt|;
comment|// dst checks
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pRenamedAgain
operator|+
literal|" not found"
argument_list|,
name|fs2
operator|.
name|exists
argument_list|(
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"no lease for "
operator|+
name|pRenamedAgain
argument_list|,
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|pRenamedAgain
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaseCount
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLease ()
specifier|public
name|void
name|testLease
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|a
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Path
name|b
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|DataOutputStream
name|a_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|DataOutputStream
name|b_out
init|=
name|fs
operator|.
name|create
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|b_out
operator|.
name|writeBytes
argument_list|(
literal|"something"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|b_out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|hasLease
argument_list|(
name|cluster
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testFactory ()
specifier|public
name|void
name|testFactory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|groups
init|=
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
decl_stmt|;
specifier|final
name|UserGroupInformation
index|[]
name|ugi
init|=
operator|new
name|UserGroupInformation
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ugi
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ugi
index|[
name|i
index|]
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user"
operator|+
name|i
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|HdfsFileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|1010
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mcp
argument_list|)
operator|.
name|getFileInfo
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|HdfsFileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|1010
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mcp
argument_list|)
operator|.
name|create
argument_list|(
name|anyString
argument_list|()
argument_list|,
operator|(
name|FsPermission
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
operator|(
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
operator|)
name|anyObject
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|DFSClient
name|c1
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out1
init|=
name|createFsOut
argument_list|(
name|c1
argument_list|,
literal|"/out1"
argument_list|)
decl_stmt|;
specifier|final
name|DFSClient
name|c2
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out2
init|=
name|createFsOut
argument_list|(
name|c2
argument_list|,
literal|"/out2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c1
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|,
name|c2
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c3
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|1
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out3
init|=
name|createFsOut
argument_list|(
name|c3
argument_list|,
literal|"/out3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c1
operator|.
name|getLeaseRenewer
argument_list|()
operator|!=
name|c3
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c4
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|1
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out4
init|=
name|createFsOut
argument_list|(
name|c4
argument_list|,
literal|"/out4"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c3
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|,
name|c4
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DFSClient
name|c5
init|=
name|createDFSClientAs
argument_list|(
name|ugi
index|[
literal|2
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out5
init|=
name|createFsOut
argument_list|(
name|c5
argument_list|,
literal|"/out5"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c1
operator|.
name|getLeaseRenewer
argument_list|()
operator|!=
name|c5
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|c3
operator|.
name|getLeaseRenewer
argument_list|()
operator|!=
name|c5
operator|.
name|getLeaseRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createFsOut (DFSClient dfs, String path)
specifier|private
name|FSDataOutputStream
name|createFsOut
parameter_list|(
name|DFSClient
name|dfs
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FSDataOutputStream
argument_list|(
name|dfs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|field|mcp
specifier|static
specifier|final
name|ClientProtocol
name|mcp
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createDFSClientAs (UserGroupInformation ugi, final Configuration conf)
specifier|static
specifier|public
name|DFSClient
name|createDFSClientAs
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DFSClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DFSClient
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DFSClient
argument_list|(
literal|null
argument_list|,
name|mcp
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

