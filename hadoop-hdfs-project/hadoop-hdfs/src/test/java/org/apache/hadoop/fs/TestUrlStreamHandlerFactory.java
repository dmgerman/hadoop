begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test of the URL stream handler factory.  */
end_comment

begin_class
DECL|class|TestUrlStreamHandlerFactory
specifier|public
class|class
name|TestUrlStreamHandlerFactory
block|{
DECL|field|RUNS
specifier|private
specifier|static
specifier|final
name|int
name|RUNS
init|=
literal|20
decl_stmt|;
DECL|field|THREADS
specifier|private
specifier|static
specifier|final
name|int
name|THREADS
init|=
literal|10
decl_stmt|;
DECL|field|TASKS
specifier|private
specifier|static
specifier|final
name|int
name|TASKS
init|=
literal|200
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|30
decl_stmt|;
annotation|@
name|Test
DECL|method|testConcurrency ()
specifier|public
name|void
name|testConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RUNS
condition|;
name|i
operator|++
control|)
block|{
name|singleRun
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|singleRun ()
specifier|private
name|void
name|singleRun
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FsUrlStreamHandlerFactory
name|factory
init|=
operator|new
name|FsUrlStreamHandlerFactory
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|THREADS
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|TASKS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TASKS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|aux
init|=
name|i
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|rand
init|=
name|aux
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|factory
operator|.
name|createURLStreamHandler
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// pass
block|}
comment|// check for exceptions
for|for
control|(
name|Future
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
break|break;
comment|// timed out
block|}
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

