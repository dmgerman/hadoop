begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|SCMTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|SCMContainerPlacementCapacity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test for SCM node pool manager.  */
end_comment

begin_class
DECL|class|TestSCMNodePoolManager
specifier|public
class|class
name|TestSCMNodePoolManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSCMNodePoolManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|final
name|File
name|testDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestSCMNodePoolManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createNodePoolManager (OzoneConfiguration conf)
name|SCMNodePoolManager
name|createNodePoolManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_PLACEMENT_IMPL_KEY
argument_list|,
name|SCMContainerPlacementCapacity
operator|.
name|class
argument_list|,
name|ContainerPlacementPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|new
name|SCMNodePoolManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Test default node pool.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDefaultNodePool ()
specifier|public
name|void
name|testDefaultNodePool
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|defaultPool
init|=
literal|"DefaultPool"
decl_stmt|;
name|NodePoolManager
name|npMgr
init|=
name|createNodePoolManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
literal|4
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodes
init|=
name|SCMTestUtils
operator|.
name|getDatanodeIDs
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|npMgr
operator|.
name|getNodePools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeID
name|node
range|:
name|nodes
control|)
block|{
name|npMgr
operator|.
name|addNode
argument_list|(
name|defaultPool
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodesRetrieved
init|=
name|npMgr
operator|.
name|getNodes
argument_list|(
name|defaultPool
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodesRetrieved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTwoDatanodeListsEqual
argument_list|(
name|nodes
argument_list|,
name|nodesRetrieved
argument_list|)
expr_stmt|;
name|DatanodeID
name|nodeRemoved
init|=
name|nodes
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|npMgr
operator|.
name|removeNode
argument_list|(
name|defaultPool
argument_list|,
name|nodeRemoved
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodesAfterRemove
init|=
name|npMgr
operator|.
name|getNodes
argument_list|(
name|defaultPool
argument_list|)
decl_stmt|;
name|assertTwoDatanodeListsEqual
argument_list|(
name|nodes
argument_list|,
name|nodesAfterRemove
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nonExistSet
init|=
name|npMgr
operator|.
name|getNodes
argument_list|(
literal|"NonExistSet"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nonExistSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test default node pool reload.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDefaultNodePoolReload ()
specifier|public
name|void
name|testDefaultNodePoolReload
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|defaultPool
init|=
literal|"DefaultPool"
decl_stmt|;
specifier|final
name|int
name|nodeCount
init|=
literal|4
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodes
init|=
name|SCMTestUtils
operator|.
name|getDatanodeIDs
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|SCMNodePoolManager
name|npMgr
init|=
name|createNodePoolManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|npMgr
operator|.
name|getNodePools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeID
name|node
range|:
name|nodes
control|)
block|{
name|npMgr
operator|.
name|addNode
argument_list|(
name|defaultPool
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodesRetrieved
init|=
name|npMgr
operator|.
name|getNodes
argument_list|(
name|defaultPool
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodesRetrieved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTwoDatanodeListsEqual
argument_list|(
name|nodes
argument_list|,
name|nodesRetrieved
argument_list|)
expr_stmt|;
name|npMgr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDefaultNodePoolReload: Finish adding nodes to pool"
operator|+
literal|" and close."
argument_list|)
expr_stmt|;
block|}
comment|// try reload with a new NodePoolManager instance
try|try
block|{
name|SCMNodePoolManager
name|npMgr
init|=
name|createNodePoolManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|nodesRetrieved
init|=
name|npMgr
operator|.
name|getNodes
argument_list|(
name|defaultPool
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|nodesRetrieved
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTwoDatanodeListsEqual
argument_list|(
name|nodes
argument_list|,
name|nodesRetrieved
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDefaultNodePoolReload: Finish reloading node pool."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compare and verify that two datanode lists are equal.    * @param list1 - datanode list 1.    * @param list2 - datanode list 2.    */
DECL|method|assertTwoDatanodeListsEqual (List<DatanodeID> list1, List<DatanodeID> list2)
specifier|private
name|void
name|assertTwoDatanodeListsEqual
parameter_list|(
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|list1
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|list2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|list1
operator|.
name|size
argument_list|()
argument_list|,
name|list2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ListUtils
operator|.
name|isEqualList
argument_list|(
name|list1
argument_list|,
name|list2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

