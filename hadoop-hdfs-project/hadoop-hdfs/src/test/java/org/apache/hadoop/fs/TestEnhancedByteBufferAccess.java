begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|ShortCircuitCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|ShortCircuitCache
operator|.
name|CacheVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|ShortCircuitReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * This class tests if EnhancedByteBufferAccess works correctly.  */
end_comment

begin_class
DECL|class|TestEnhancedByteBufferAccess
specifier|public
class|class
name|TestEnhancedByteBufferAccess
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEnhancedByteBufferAccess
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|sockDir
specifier|static
name|TemporarySocketDirectory
name|sockDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|sockDir
operator|=
operator|new
name|TemporarySocketDirectory
argument_list|()
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
block|}
DECL|method|byteBufferToArray (ByteBuffer buf)
specifier|private
specifier|static
name|byte
index|[]
name|byteBufferToArray
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|byte
name|resultArray
index|[]
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|resultArray
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|resultArray
return|;
block|}
DECL|method|initZeroCopyTest ()
specifier|public
specifier|static
name|HdfsConfiguration
name|initZeroCopyTest
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|SystemUtils
operator|.
name|IS_OS_UNIX
argument_list|)
expr_stmt|;
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_SIZE
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"TestRequestMmapAccess._PORT.sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testZeroCopyReads ()
specifier|public
name|void
name|testZeroCopyReads
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|12345
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|7567L
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|ByteBuffer
name|result
init|=
name|fsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dfsIn
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fsIn
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalZeroCopyBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|releaseBuffer
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testShortZeroCopyReads ()
specifier|public
name|void
name|testShortZeroCopyReads
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|12345
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|7567L
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
comment|// Try to read 8192, but only get 4096 because of the block size.
name|HdfsDataInputStream
name|dfsIn
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fsIn
decl_stmt|;
name|ByteBuffer
name|result
init|=
name|dfsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|8192
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalZeroCopyBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|dfsIn
operator|.
name|releaseBuffer
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to read 4097, but only get 4096 because of the block size.
name|result
operator|=
name|dfsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4097
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|4096
argument_list|,
literal|8192
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|dfsIn
operator|.
name|releaseBuffer
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZeroCopyReadsNoFallback ()
specifier|public
name|void
name|testZeroCopyReadsNoFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|12345
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|7567L
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|HdfsDataInputStream
name|dfsIn
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|fsIn
decl_stmt|;
name|ByteBuffer
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|dfsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4097
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ReadOption
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected UnsupportedOperationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|result
operator|=
name|dfsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|dfsIn
operator|.
name|getReadStatistics
argument_list|()
operator|.
name|getTotalZeroCopyBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CountingVisitor
specifier|private
specifier|static
class|class
name|CountingVisitor
implements|implements
name|CacheVisitor
block|{
DECL|field|expectedNumOutstandingMmaps
specifier|private
specifier|final
name|int
name|expectedNumOutstandingMmaps
decl_stmt|;
DECL|field|expectedNumReplicas
specifier|private
specifier|final
name|int
name|expectedNumReplicas
decl_stmt|;
DECL|field|expectedNumEvictable
specifier|private
specifier|final
name|int
name|expectedNumEvictable
decl_stmt|;
DECL|field|expectedNumMmapedEvictable
specifier|private
specifier|final
name|int
name|expectedNumMmapedEvictable
decl_stmt|;
DECL|method|CountingVisitor (int expectedNumOutstandingMmaps, int expectedNumReplicas, int expectedNumEvictable, int expectedNumMmapedEvictable)
name|CountingVisitor
parameter_list|(
name|int
name|expectedNumOutstandingMmaps
parameter_list|,
name|int
name|expectedNumReplicas
parameter_list|,
name|int
name|expectedNumEvictable
parameter_list|,
name|int
name|expectedNumMmapedEvictable
parameter_list|)
block|{
name|this
operator|.
name|expectedNumOutstandingMmaps
operator|=
name|expectedNumOutstandingMmaps
expr_stmt|;
name|this
operator|.
name|expectedNumReplicas
operator|=
name|expectedNumReplicas
expr_stmt|;
name|this
operator|.
name|expectedNumEvictable
operator|=
name|expectedNumEvictable
expr_stmt|;
name|this
operator|.
name|expectedNumMmapedEvictable
operator|=
name|expectedNumMmapedEvictable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visit (int numOutstandingMmaps, Map<ExtendedBlockId, ShortCircuitReplica> replicas, Map<ExtendedBlockId, InvalidToken> failedLoads, Map<Long, ShortCircuitReplica> evictable, Map<Long, ShortCircuitReplica> evictableMmapped)
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictable
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictableMmapped
parameter_list|)
block|{
if|if
condition|(
name|expectedNumOutstandingMmaps
operator|>=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumOutstandingMmaps
argument_list|,
name|numOutstandingMmaps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedNumReplicas
operator|>=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumReplicas
argument_list|,
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedNumEvictable
operator|>=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumEvictable
argument_list|,
name|evictable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedNumMmapedEvictable
operator|>=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNumMmapedEvictable
argument_list|,
name|evictableMmapped
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testZeroCopyMmapCache ()
specifier|public
name|void
name|testZeroCopyMmapCache
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|16385
decl_stmt|;
specifier|final
name|int
name|RANDOM_SEED
init|=
literal|23453
decl_stmt|;
specifier|final
name|String
name|CONTEXT
init|=
literal|"testZeroCopyMmapCacheContext"
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
name|ByteBuffer
name|results
index|[]
init|=
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
argument_list|,
name|CONTEXT
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|RANDOM_SEED
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
specifier|final
name|ShortCircuitCache
name|cache
init|=
name|ClientContext
operator|.
name|get
argument_list|(
name|CONTEXT
argument_list|,
operator|new
name|DFSClient
operator|.
name|Conf
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getShortCircuitCache
argument_list|()
decl_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CountingVisitor
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|fsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|results
index|[
literal|1
index|]
operator|=
name|fsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
comment|// The mmap should be of the first block of the file.
specifier|final
name|ExtendedBlock
name|firstBlock
init|=
name|DFSTestUtil
operator|.
name|getFirstBlock
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|)
decl_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CacheVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictable
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictableMmapped
parameter_list|)
block|{
name|ShortCircuitReplica
name|replica
init|=
name|replicas
operator|.
name|get
argument_list|(
operator|new
name|ExtendedBlockId
argument_list|(
name|firstBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|firstBlock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replica
operator|.
name|hasMmap
argument_list|()
argument_list|)
expr_stmt|;
comment|// The replica should not yet be evictable, since we have it open.
name|Assert
operator|.
name|assertNull
argument_list|(
name|replica
operator|.
name|getEvictableTimeNs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Read more blocks.
name|results
index|[
literal|2
index|]
operator|=
name|fsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
name|results
index|[
literal|3
index|]
operator|=
name|fsIn
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|4096
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should have 3 mmaps, 1 evictable
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CountingVisitor
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// After we close the cursors, the mmaps should be evictable for
comment|// a brief period of time.  Then, they should be closed (we're
comment|// using a very quick timeout)
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|results
control|)
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|fsIn
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
specifier|final
name|MutableBoolean
name|finished
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CacheVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|numOutstandingMmaps
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|replicas
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|InvalidToken
argument_list|>
name|failedLoads
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictable
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|ShortCircuitReplica
argument_list|>
name|evictableMmapped
parameter_list|)
block|{
name|finished
operator|.
name|setValue
argument_list|(
name|evictableMmapped
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|finished
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|cache
operator|.
name|accept
argument_list|(
operator|new
name|CountingVisitor
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test HDFS fallback reads.  HDFS streams support the ByteBufferReadable    * interface.    */
annotation|@
name|Test
DECL|method|testHdfsFallbackReads ()
specifier|public
name|void
name|testHdfsFallbackReads
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|16385
decl_stmt|;
specifier|final
name|int
name|RANDOM_SEED
init|=
literal|23453
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|RANDOM_SEED
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|testFallbackImpl
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RestrictedAllocatingByteBufferPool
specifier|private
specifier|static
class|class
name|RestrictedAllocatingByteBufferPool
implements|implements
name|ByteBufferPool
block|{
DECL|field|direct
specifier|private
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|method|RestrictedAllocatingByteBufferPool (boolean direct)
name|RestrictedAllocatingByteBufferPool
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBuffer (boolean direct, int length)
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|direct
operator|==
name|direct
argument_list|)
expr_stmt|;
return|return
name|direct
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|length
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putBuffer (ByteBuffer buffer)
specifier|public
name|void
name|putBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{     }
block|}
DECL|method|testFallbackImpl (InputStream stream, byte original[])
specifier|private
specifier|static
name|void
name|testFallbackImpl
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|byte
name|original
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|RestrictedAllocatingByteBufferPool
name|bufferPool
init|=
operator|new
name|RestrictedAllocatingByteBufferPool
argument_list|(
name|stream
operator|instanceof
name|ByteBufferReadable
argument_list|)
decl_stmt|;
name|ByteBuffer
name|result
init|=
name|ByteBufferUtil
operator|.
name|fallbackRead
argument_list|(
name|stream
argument_list|,
name|bufferPool
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ByteBufferUtil
operator|.
name|fallbackRead
argument_list|(
name|stream
argument_list|,
name|bufferPool
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|10
argument_list|,
literal|5010
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ByteBufferUtil
operator|.
name|fallbackRead
argument_list|(
name|stream
argument_list|,
name|bufferPool
argument_list|,
literal|9999999
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11375
argument_list|,
name|result
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|original
argument_list|,
literal|5010
argument_list|,
literal|16385
argument_list|)
argument_list|,
name|byteBufferToArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|ByteBufferUtil
operator|.
name|fallbackRead
argument_list|(
name|stream
argument_list|,
name|bufferPool
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the {@link ByteBufferUtil#fallbackRead} function directly.    */
annotation|@
name|Test
DECL|method|testFallbackRead ()
specifier|public
name|void
name|testFallbackRead
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
name|initZeroCopyTest
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|16385
decl_stmt|;
specifier|final
name|int
name|RANDOM_SEED
init|=
literal|23453
decl_stmt|;
name|FSDataInputStream
name|fsIn
init|=
literal|null
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
name|TEST_FILE_LENGTH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|RANDOM_SEED
argument_list|)
expr_stmt|;
try|try
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|TEST_PATH
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected InterruptedException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected TimeoutException during "
operator|+
literal|"waitReplication: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LENGTH
argument_list|)
expr_stmt|;
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsIn
operator|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|testFallbackImpl
argument_list|(
name|fsIn
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsIn
operator|!=
literal|null
condition|)
name|fsIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test fallback reads on a stream which does not support the    * ByteBufferReadable * interface.    */
annotation|@
name|Test
DECL|method|testIndirectFallbackReads ()
specifier|public
name|void
name|testIndirectFallbackReads
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|TEST_PATH
init|=
name|TEST_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"indirectFallbackTestFile"
decl_stmt|;
specifier|final
name|int
name|TEST_FILE_LENGTH
init|=
literal|16385
decl_stmt|;
specifier|final
name|int
name|RANDOM_SEED
init|=
literal|23453
decl_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|RANDOM_SEED
argument_list|)
decl_stmt|;
name|byte
name|original
index|[]
init|=
operator|new
name|byte
index|[
name|TEST_FILE_LENGTH
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|testFallbackImpl
argument_list|(
name|fis
argument_list|,
name|original
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fos
argument_list|,
name|fis
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

