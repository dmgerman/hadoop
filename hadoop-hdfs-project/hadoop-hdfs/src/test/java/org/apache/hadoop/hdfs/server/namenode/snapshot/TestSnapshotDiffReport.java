begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
operator|.
name|SyncFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests snapshot deletion.  */
end_comment

begin_class
DECL|class|TestSnapshotDiffReport
specifier|public
class|class
name|TestSnapshotDiffReport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotDiffReport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SEED
specifier|private
specifier|static
specifier|final
name|long
name|SEED
init|=
literal|0
decl_stmt|;
DECL|field|REPLICATION
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|REPLICATION_1
specifier|private
specifier|static
specifier|final
name|short
name|REPLICATION_1
init|=
literal|2
decl_stmt|;
DECL|field|BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|BLOCKSIZE
init|=
literal|1024
decl_stmt|;
DECL|field|BUFFERLEN
specifier|private
specifier|static
specifier|final
name|long
name|BUFFERLEN
init|=
name|BLOCKSIZE
operator|/
literal|2
decl_stmt|;
DECL|field|FILELEN
specifier|private
specifier|static
specifier|final
name|long
name|FILELEN
init|=
name|BLOCKSIZE
operator|*
literal|2
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/TestSnapshot"
argument_list|)
decl_stmt|;
DECL|field|sub1
specifier|private
specifier|final
name|Path
name|sub1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|hdfs
specifier|protected
name|DistributedFileSystem
name|hdfs
decl_stmt|;
DECL|field|snapshotNumberMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
name|snapshotNumberMap
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_CAPTURE_OPENFILES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ACCESSTIME_PRECISION_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_SKIP_CAPTURE_ACCESSTIME_ONLY_CHANGE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|hdfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|genSnapshotName (Path snapshotDir)
specifier|private
name|String
name|genSnapshotName
parameter_list|(
name|Path
name|snapshotDir
parameter_list|)
block|{
name|int
name|sNum
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|snapshotNumberMap
operator|.
name|containsKey
argument_list|(
name|snapshotDir
argument_list|)
condition|)
block|{
name|sNum
operator|=
name|snapshotNumberMap
operator|.
name|get
argument_list|(
name|snapshotDir
argument_list|)
expr_stmt|;
block|}
name|snapshotNumberMap
operator|.
name|put
argument_list|(
name|snapshotDir
argument_list|,
operator|++
name|sNum
argument_list|)
expr_stmt|;
return|return
literal|"s"
operator|+
name|sNum
return|;
block|}
comment|/**    * Create/modify/delete files under a given directory, also create snapshots    * of directories.    */
DECL|method|modifyAndCreateSnapshot (Path modifyDir, Path[] snapshotDirs)
specifier|private
name|void
name|modifyAndCreateSnapshot
parameter_list|(
name|Path
name|modifyDir
parameter_list|,
name|Path
index|[]
name|snapshotDirs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file10
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file10"
argument_list|)
decl_stmt|;
name|Path
name|file11
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file11"
argument_list|)
decl_stmt|;
name|Path
name|file12
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file12"
argument_list|)
decl_stmt|;
name|Path
name|file13
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file13"
argument_list|)
decl_stmt|;
name|Path
name|link13
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"link13"
argument_list|)
decl_stmt|;
name|Path
name|file14
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file14"
argument_list|)
decl_stmt|;
name|Path
name|file15
init|=
operator|new
name|Path
argument_list|(
name|modifyDir
argument_list|,
literal|"file15"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file10
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file12
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file13
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION_1
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create link13
name|hdfs
operator|.
name|createSymlink
argument_list|(
name|file13
argument_list|,
name|link13
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// create snapshot
for|for
control|(
name|Path
name|snapshotDir
range|:
name|snapshotDirs
control|)
block|{
name|hdfs
operator|.
name|allowSnapshot
argument_list|(
name|snapshotDir
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotDir
argument_list|,
name|genSnapshotName
argument_list|(
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// delete file11
name|hdfs
operator|.
name|delete
argument_list|(
name|file11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file12
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file12
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// modify file13
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
comment|// delete link13
name|hdfs
operator|.
name|delete
argument_list|(
name|link13
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// create file14
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file14
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create file15
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file15
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create snapshot
for|for
control|(
name|Path
name|snapshotDir
range|:
name|snapshotDirs
control|)
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotDir
argument_list|,
name|genSnapshotName
argument_list|(
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create file11 again
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|file11
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// delete file12
name|hdfs
operator|.
name|delete
argument_list|(
name|file12
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file13
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file13
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// create link13 again
name|hdfs
operator|.
name|createSymlink
argument_list|(
name|file13
argument_list|,
name|link13
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// delete file14
name|hdfs
operator|.
name|delete
argument_list|(
name|file14
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify file15
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file15
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// create snapshot
for|for
control|(
name|Path
name|snapshotDir
range|:
name|snapshotDirs
control|)
block|{
name|hdfs
operator|.
name|createSnapshot
argument_list|(
name|snapshotDir
argument_list|,
name|genSnapshotName
argument_list|(
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// modify file10
name|hdfs
operator|.
name|setReplication
argument_list|(
name|file10
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** check the correctness of the diff reports */
DECL|method|verifyDiffReport (Path dir, String from, String to, DiffReportEntry... entries)
specifier|private
name|void
name|verifyDiffReport
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|DiffReportEntry
modifier|...
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotDiffReport
name|report
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|dir
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
comment|// reverse the order of from and to
name|SnapshotDiffReport
name|inverseReport
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|dir
argument_list|,
name|to
argument_list|,
name|from
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|inverseReport
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|length
argument_list|,
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DiffReportEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|MODIFY
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|DELETE
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|DiffType
operator|.
name|CREATE
condition|)
block|{
name|assertTrue
argument_list|(
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inverseReport
operator|.
name|getDiffList
argument_list|()
operator|.
name|contains
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Test the computation and representation of diff between snapshots */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDiffReport ()
specifier|public
name|void
name|testDiffReport
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|setAllowNestedSnapshots
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|subsub1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"subsub1"
argument_list|)
decl_stmt|;
name|Path
name|subsubsub1
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"subsubsub1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subsubsub1
argument_list|)
expr_stmt|;
name|modifyAndCreateSnapshot
argument_list|(
name|sub1
argument_list|,
operator|new
name|Path
index|[]
block|{
name|sub1
block|,
name|subsubsub1
block|}
argument_list|)
expr_stmt|;
name|modifyAndCreateSnapshot
argument_list|(
name|subsubsub1
argument_list|,
operator|new
name|Path
index|[]
block|{
name|sub1
block|,
name|subsubsub1
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|subsub1
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception when getting snapshot diff report: "
operator|+
name|subsub1
operator|+
literal|" is not a snapshottable directory."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|subsub1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|invalidName
init|=
literal|"invalid"
decl_stmt|;
try|try
block|{
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
name|invalidName
argument_list|,
name|invalidName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception when providing invalid snapshot name for diff report"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot find the snapshot of directory "
operator|+
name|sub1
operator|+
literal|" with name "
operator|+
name|invalidName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// diff between the same snapshot
name|SnapshotDiffReport
name|report
init|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s0"
argument_list|,
literal|"s0"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|sub1
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|subsubsub1
argument_list|,
literal|"s0"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test path with scheme also works
name|report
operator|=
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|hdfs
operator|.
name|makeQualified
argument_list|(
name|subsubsub1
argument_list|)
argument_list|,
literal|"s0"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getDiffList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s0"
argument_list|,
literal|"s2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file15"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file12"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"link13"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s0"
argument_list|,
literal|"s5"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file15"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file12"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file10"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file10"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s2"
argument_list|,
literal|"s5"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"file10"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file10"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file15"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s3"
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file15"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file12"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file10"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make changes under a sub-directory, then delete the sub-directory. Make    * sure the diff report computation correctly retrieve the diff from the    * deleted sub-directory.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDiffReport2 ()
specifier|public
name|void
name|testDiffReport2
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|subsub1
init|=
operator|new
name|Path
argument_list|(
name|sub1
argument_list|,
literal|"subsub1"
argument_list|)
decl_stmt|;
name|Path
name|subsubsub1
init|=
operator|new
name|Path
argument_list|(
name|subsub1
argument_list|,
literal|"subsubsub1"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|subsubsub1
argument_list|)
expr_stmt|;
name|modifyAndCreateSnapshot
argument_list|(
name|subsubsub1
argument_list|,
operator|new
name|Path
index|[]
block|{
name|sub1
block|}
argument_list|)
expr_stmt|;
comment|// delete subsub1
name|hdfs
operator|.
name|delete
argument_list|(
name|subsub1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check diff report between s0 and s2
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s0"
argument_list|,
literal|"s2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file15"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file12"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file11"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/file13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1/subsubsub1/link13"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check diff report between s0 and the current status
name|verifyDiffReport
argument_list|(
name|sub1
argument_list|,
literal|"s0"
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"subsub1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a directory to its prior descendant, and verify the diff report.    */
annotation|@
name|Test
DECL|method|testDiffReportWithRename ()
specifier|public
name|void
name|testDiffReportWithRename
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir1
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|sdir2
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|sdir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|sdir2
argument_list|)
expr_stmt|;
comment|// create snapshot on root
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// /dir1/foo/bar -> /dir2/bar
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|sdir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|bar2
argument_list|)
expr_stmt|;
comment|// /dir1/foo -> /dir2/bar/foo
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|bar2
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// let's delete /dir2 to make things more complicated
name|hdfs
operator|.
name|delete
argument_list|(
name|sdir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar/foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo/bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo/bar"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a file/dir outside of the snapshottable dir should be reported as    * deleted. Rename a file/dir from outside should be reported as created.    */
annotation|@
name|Test
DECL|method|testDiffReportWithRenameOutside ()
specifier|public
name|void
name|testDiffReportWithRenameOutside
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileInFoo
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileInBar
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fileInFoo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fileInBar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
comment|// create snapshot on /dir1
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// move bar into dir1
specifier|final
name|Path
name|newBar
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"newBar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar
argument_list|,
name|newBar
argument_list|)
expr_stmt|;
comment|// move foo out of dir1 into dir2
specifier|final
name|Path
name|newFoo
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|newFoo
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|dir1
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|dir1
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|newBar
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renaming a file/dir then delete the ancestor dir of the rename target    * should be reported as deleted.    */
annotation|@
name|Test
DECL|method|testDiffReportWithRenameAndDelete ()
specifier|public
name|void
name|testDiffReportWithRenameAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileInFoo
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|dir2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileInBar
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fileInFoo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fileInBar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|fileInFoo
argument_list|,
name|fileInBar
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar/file"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo/file"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete bar
name|hdfs
operator|.
name|delete
argument_list|(
name|bar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s2"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir2/bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"dir1/foo/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDiffReportWithRenameToNewDir ()
specifier|public
name|void
name|testDiffReportWithRenameToNewDir
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|fileInFoo
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|fileInFoo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|mkdirs
argument_list|(
name|bar
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|fileInBar
init|=
operator|new
name|Path
argument_list|(
name|bar
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|fileInFoo
argument_list|,
name|fileInBar
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo/file"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"bar/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename a file and then append some data to it    */
annotation|@
name|Test
DECL|method|testDiffReportWithRenameAndAppend ()
specifier|public
name|void
name|testDiffReportWithRenameAndAppend
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|foo
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|bar
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|appendFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// append 10 bytes
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
comment|// we always put modification on the file before rename
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Nested renamed dir/file and the withNameList in the WithCount node of the    * parental directory is empty due to snapshot deletion. See HDFS-6996 for    * details.    */
annotation|@
name|Test
DECL|method|testDiffReportWithRenameAndSnapshotDeletion ()
specifier|public
name|void
name|testDiffReportWithRenameAndSnapshotDeletion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|bar
init|=
operator|new
name|Path
argument_list|(
name|foo
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|bar
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// rename /foo to /foo2
specifier|final
name|Path
name|foo2
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"foo2"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|foo
argument_list|,
name|foo2
argument_list|)
expr_stmt|;
comment|// now /foo/bar becomes /foo2/bar
specifier|final
name|Path
name|bar2
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
comment|// delete snapshot s0 so that the withNameList inside of the WithCount node
comment|// of foo becomes empty
name|hdfs
operator|.
name|deleteSnapshot
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// create snapshot s1 and rename bar again
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|bar3
init|=
operator|new
name|Path
argument_list|(
name|foo2
argument_list|,
literal|"bar-new"
argument_list|)
decl_stmt|;
name|hdfs
operator|.
name|rename
argument_list|(
name|bar2
argument_list|,
name|bar3
argument_list|)
expr_stmt|;
comment|// we always put modification on the file before rename
name|verifyDiffReport
argument_list|(
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|RENAME
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo2/bar"
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|"foo2/bar-new"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (final Path filePath)
specifier|private
name|void
name|createFile
parameter_list|(
specifier|final
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|filePath
argument_list|,
operator|(
name|int
operator|)
name|BUFFERLEN
argument_list|,
name|FILELEN
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToStream (final FSDataOutputStream outputStream, byte[] buf)
specifier|private
name|int
name|writeToStream
parameter_list|(
specifier|final
name|FSDataOutputStream
name|outputStream
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HdfsDataOutputStream
operator|)
name|outputStream
operator|)
operator|.
name|hsync
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|SyncFlag
operator|.
name|UPDATE_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|length
return|;
block|}
DECL|method|restartNameNode ()
specifier|private
name|void
name|restartNameNode
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|triggerBlockReports
argument_list|()
expr_stmt|;
name|NameNode
name|nameNode
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nameNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|saveNamespace
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nameNode
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Snapshot diff report for snapshots with open files captures in them.    * Also verify if the diff report remains the same across NameNode restarts.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDiffReportWithOpenFiles ()
specifier|public
name|void
name|testDiffReportWithOpenFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Construct the directory tree
specifier|final
name|Path
name|level0A
init|=
operator|new
name|Path
argument_list|(
literal|"/level_0_A"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeSnapRootDir
init|=
name|level0A
decl_stmt|;
specifier|final
name|String
name|flumeFileName
init|=
literal|"flume.log"
decl_stmt|;
specifier|final
name|String
name|flumeSnap1Name
init|=
literal|"flume_snap_1"
decl_stmt|;
specifier|final
name|String
name|flumeSnap2Name
init|=
literal|"flume_snap_2"
decl_stmt|;
comment|// Create files and open a stream
specifier|final
name|Path
name|flumeFile
init|=
operator|new
name|Path
argument_list|(
name|level0A
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|flumeFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|flumeOutputStream
init|=
name|hdfs
operator|.
name|append
argument_list|(
name|flumeFile
argument_list|)
decl_stmt|;
comment|// Create Snapshot S1
specifier|final
name|Path
name|flumeS1Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap1Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS1Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS1Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|flumeFileLengthAfterS1
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Verify if Snap S1 file length is same as the the live one
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|flumeFileWrittenDataLength
init|=
name|flumeFileLengthAfterS1
decl_stmt|;
name|int
name|newWriteLength
init|=
call|(
name|int
call|)
argument_list|(
name|BLOCKSIZE
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|newWriteLength
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// Write more data to flume file
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Create Snapshot S2
specifier|final
name|Path
name|flumeS2Dir
init|=
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|flumeSnapRootDir
argument_list|,
name|flumeSnap2Name
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|flumeS2Path
init|=
operator|new
name|Path
argument_list|(
name|flumeS2Dir
argument_list|,
name|flumeFileName
argument_list|)
decl_stmt|;
comment|// Verify live files length is same as all data written till now
specifier|final
name|long
name|flumeFileLengthAfterS2
init|=
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|flumeFileLengthAfterS2
argument_list|)
expr_stmt|;
comment|// Verify if Snap S2 file length is same as the live one
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap2Name
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
name|flumeSnap2Name
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write more data to flume file
name|flumeFileWrittenDataLength
operator|+=
name|writeToStream
argument_list|(
name|flumeOutputStream
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Verify old flume snapshots have point-in-time / frozen file lengths
comment|// even after the live file have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|flumeOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify if Snap S2 file length is same as the live one
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileWrittenDataLength
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify old flume snapshots have point-in-time / frozen file lengths
comment|// even after the live file have moved forward.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS1
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS1Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flumeFileLengthAfterS2
argument_list|,
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|flumeS2Path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap2Name
argument_list|,
literal|""
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
name|flumeSnap2Name
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|restartNameNode
argument_list|()
expr_stmt|;
name|verifyDiffReport
argument_list|(
name|level0A
argument_list|,
name|flumeSnap1Name
argument_list|,
name|flumeSnap2Name
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|flumeFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccessTime (Path path)
specifier|private
name|long
name|getAccessTime
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hdfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getAccessTime
argument_list|()
return|;
block|}
DECL|method|getAccessTimeStr (Path path)
specifier|private
name|String
name|getAccessTimeStr
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleDateFormat
name|timeFmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
return|return
name|timeFmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getAccessTime
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSSpath (Path path, Path ssRoot, String ssName)
specifier|private
name|Path
name|getSSpath
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|ssRoot
parameter_list|,
name|String
name|ssName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|ssRoot
argument_list|,
literal|".snapshot/"
operator|+
name|ssName
operator|+
literal|"/"
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|ssRoot
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|printAtime (Path path, Path ssRoot, String ssName)
specifier|private
name|void
name|printAtime
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|ssRoot
parameter_list|,
name|String
name|ssName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|ssPath
init|=
name|getSSpath
argument_list|(
name|path
argument_list|,
name|ssRoot
argument_list|,
name|ssName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Access time "
operator|+
name|path
operator|+
literal|": "
operator|+
name|getAccessTimeStr
argument_list|(
name|path
argument_list|)
operator|+
literal|" "
operator|+
name|ssPath
operator|+
literal|": "
operator|+
name|getAccessTimeStr
argument_list|(
name|ssPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAtimeEquals (Path path, Path ssRoot, String ssName1, String ssName2)
specifier|private
name|void
name|assertAtimeEquals
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|ssRoot
parameter_list|,
name|String
name|ssName1
parameter_list|,
name|String
name|ssName2
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|ssPath1
init|=
name|getSSpath
argument_list|(
name|path
argument_list|,
name|ssRoot
argument_list|,
name|ssName1
argument_list|)
decl_stmt|;
name|Path
name|ssPath2
init|=
name|getSSpath
argument_list|(
name|path
argument_list|,
name|ssRoot
argument_list|,
name|ssName2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getAccessTime
argument_list|(
name|ssPath1
argument_list|)
argument_list|,
name|getAccessTime
argument_list|(
name|ssPath2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAtimeNotEquals (Path path, Path ssRoot, String ssName1, String ssName2)
specifier|private
name|void
name|assertAtimeNotEquals
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|ssRoot
parameter_list|,
name|String
name|ssName1
parameter_list|,
name|String
name|ssName2
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|ssPath1
init|=
name|getSSpath
argument_list|(
name|path
argument_list|,
name|ssRoot
argument_list|,
name|ssName1
argument_list|)
decl_stmt|;
name|Path
name|ssPath2
init|=
name|getSSpath
argument_list|(
name|path
argument_list|,
name|ssRoot
argument_list|,
name|ssName2
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|getAccessTime
argument_list|(
name|ssPath1
argument_list|)
argument_list|,
name|getAccessTime
argument_list|(
name|ssPath2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check to see access time is not captured in snapshot when applicable.    * When DFS_NAMENODE_SNAPSHOT_SKIP_CAPTURE_ACCESSTIME_ONLY_CHANGE    * is set to true, and if a file's access time changed between two    * snapshots but has no other modification, then the access time is not    * captured in snapshot.    */
annotation|@
name|Test
DECL|method|testDontCaptureAccessTimeOnlyChangeReport ()
specifier|public
name|void
name|testDontCaptureAccessTimeOnlyChangeReport
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|froot
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|froot
argument_list|,
literal|"/testSdiffCalc"
argument_list|)
decl_stmt|;
comment|// items created pre enabling snapshot
specifier|final
name|Path
name|filePreSS
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"fParent/filePreSS"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dirPreSS
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dirPreSS"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dirPreSSChild
init|=
operator|new
name|Path
argument_list|(
name|dirPreSS
argument_list|,
literal|"dirPreSSChild"
argument_list|)
decl_stmt|;
comment|// items created after enabling snapshot
specifier|final
name|Path
name|filePostSS
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"fParent/filePostSS"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dirPostSS
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dirPostSS"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|dirPostSSChild
init|=
operator|new
name|Path
argument_list|(
name|dirPostSS
argument_list|,
literal|"dirPostSSChild"
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|filePreSS
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|dirPreSSChild
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|)
expr_stmt|;
comment|// items created after creating the first snapshot
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|filePostSS
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|hdfs
argument_list|,
name|dirPostSSChild
argument_list|,
name|BLOCKSIZE
argument_list|,
name|REPLICATION
argument_list|,
name|SEED
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|filePreSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|filePostSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|dirPreSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|dirPostSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|dirPostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|now
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|filePreSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|filePostSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|dirPreSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|dirPostSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|printAtime
argument_list|(
name|dirPostSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|now
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
comment|// modify filePostSS, and change access time
name|hdfs
operator|.
name|setReplication
argument_list|(
name|filePostSS
argument_list|,
call|(
name|short
call|)
argument_list|(
name|REPLICATION
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hdfs
operator|.
name|setTimes
argument_list|(
name|filePostSS
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|SnapshotTestHelper
operator|.
name|createSnapshot
argument_list|(
name|hdfs
argument_list|,
name|root
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\nsnapshotDiff s0 -> s1:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\nsnapshotDiff s1 -> s2:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|hdfs
operator|.
name|getSnapshotDiffReport
argument_list|(
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
comment|// access time should be captured in snapshot due to
comment|// other modification
name|assertAtimeNotEquals
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
comment|// restart NN, and see the access time relationship
comment|// still stands (no change caused by edit logs
comment|// loading)
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s0"
argument_list|,
literal|"s1"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPreSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeEquals
argument_list|(
name|dirPostSS
argument_list|,
name|root
argument_list|,
literal|"s1"
argument_list|,
literal|"s2"
argument_list|)
expr_stmt|;
name|assertAtimeNotEquals
argument_list|(
name|filePostSS
argument_list|,
name|root
argument_list|,
literal|"s2"
argument_list|,
literal|"s3"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

