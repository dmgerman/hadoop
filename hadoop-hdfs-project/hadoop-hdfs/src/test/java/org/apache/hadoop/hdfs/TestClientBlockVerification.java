begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClientBlockVerification
specifier|public
class|class
name|TestClientBlockVerification
block|{
DECL|field|util
specifier|static
name|BlockReaderTestUtil
name|util
init|=
literal|null
decl_stmt|;
DECL|field|TEST_FILE
specifier|static
specifier|final
name|Path
name|TEST_FILE
init|=
operator|new
name|Path
argument_list|(
literal|"/test.file"
argument_list|)
decl_stmt|;
DECL|field|FILE_SIZE_K
specifier|static
specifier|final
name|int
name|FILE_SIZE_K
init|=
literal|256
decl_stmt|;
DECL|field|testBlock
specifier|static
name|LocatedBlock
name|testBlock
init|=
literal|null
decl_stmt|;
static|static
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|RemoteBlockReader2
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster ()
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|REPLICATION_FACTOR
init|=
literal|1
decl_stmt|;
name|util
operator|=
operator|new
name|BlockReaderTestUtil
argument_list|(
name|REPLICATION_FACTOR
argument_list|)
expr_stmt|;
name|util
operator|.
name|writeFile
argument_list|(
name|TEST_FILE
argument_list|,
name|FILE_SIZE_K
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blkList
init|=
name|util
operator|.
name|getFileBlocks
argument_list|(
name|TEST_FILE
argument_list|,
name|FILE_SIZE_K
argument_list|)
decl_stmt|;
name|testBlock
operator|=
name|blkList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Use the first block to test
block|}
comment|/**    * Verify that if we read an entire block, we send CHECKSUM_OK    */
annotation|@
name|Test
DECL|method|testBlockVerification ()
specifier|public
name|void
name|testBlockVerification
parameter_list|()
throws|throws
name|Exception
block|{
name|RemoteBlockReader2
name|reader
init|=
operator|(
name|RemoteBlockReader2
operator|)
name|spy
argument_list|(
name|util
operator|.
name|getBlockReader
argument_list|(
name|testBlock
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE_K
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|util
operator|.
name|readAndCheckEOS
argument_list|(
name|reader
argument_list|,
name|FILE_SIZE_K
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|sendReadResult
argument_list|(
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that if we do an incomplete read, we don't call CHECKSUM_OK    */
annotation|@
name|Test
DECL|method|testIncompleteRead ()
specifier|public
name|void
name|testIncompleteRead
parameter_list|()
throws|throws
name|Exception
block|{
name|RemoteBlockReader2
name|reader
init|=
operator|(
name|RemoteBlockReader2
operator|)
name|spy
argument_list|(
name|util
operator|.
name|getBlockReader
argument_list|(
name|testBlock
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE_K
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|util
operator|.
name|readAndCheckEOS
argument_list|(
name|reader
argument_list|,
name|FILE_SIZE_K
operator|/
literal|2
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// We asked the blockreader for the whole file, and only read
comment|// half of it, so no CHECKSUM_OK
name|verify
argument_list|(
name|reader
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|sendReadResult
argument_list|(
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that if we ask for a half block, and read it all, we *do*    * send CHECKSUM_OK. The DN takes care of knowing whether it was    * the whole block or not.    */
annotation|@
name|Test
DECL|method|testCompletePartialRead ()
specifier|public
name|void
name|testCompletePartialRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ask for half the file
name|RemoteBlockReader2
name|reader
init|=
operator|(
name|RemoteBlockReader2
operator|)
name|spy
argument_list|(
name|util
operator|.
name|getBlockReader
argument_list|(
name|testBlock
argument_list|,
literal|0
argument_list|,
name|FILE_SIZE_K
operator|*
literal|1024
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// And read half the file
name|util
operator|.
name|readAndCheckEOS
argument_list|(
name|reader
argument_list|,
name|FILE_SIZE_K
operator|*
literal|1024
operator|/
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|sendReadResult
argument_list|(
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test various unaligned reads to make sure that we properly    * account even when we don't start or end on a checksum boundary    */
annotation|@
name|Test
DECL|method|testUnalignedReads ()
specifier|public
name|void
name|testUnalignedReads
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startOffsets
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|129
block|}
decl_stmt|;
name|int
name|lengths
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|30
block|,
literal|300
block|,
literal|512
block|,
literal|513
block|,
literal|1025
block|}
decl_stmt|;
for|for
control|(
name|int
name|startOffset
range|:
name|startOffsets
control|)
block|{
for|for
control|(
name|int
name|length
range|:
name|lengths
control|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing startOffset = "
operator|+
name|startOffset
operator|+
literal|" and "
operator|+
literal|" len="
operator|+
name|length
argument_list|)
expr_stmt|;
name|RemoteBlockReader2
name|reader
init|=
operator|(
name|RemoteBlockReader2
operator|)
name|spy
argument_list|(
name|util
operator|.
name|getBlockReader
argument_list|(
name|testBlock
argument_list|,
name|startOffset
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|util
operator|.
name|readAndCheckEOS
argument_list|(
name|reader
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reader
argument_list|)
operator|.
name|sendReadResult
argument_list|(
name|Status
operator|.
name|CHECKSUM_OK
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|teardownCluster ()
specifier|public
specifier|static
name|void
name|teardownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

