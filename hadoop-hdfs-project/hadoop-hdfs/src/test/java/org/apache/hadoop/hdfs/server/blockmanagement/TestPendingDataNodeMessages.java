begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SystemErasureCodingPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|PendingDataNodeMessages
operator|.
name|ReportedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
DECL|class|TestPendingDataNodeMessages
specifier|public
class|class
name|TestPendingDataNodeMessages
block|{
DECL|field|msgs
specifier|final
name|PendingDataNodeMessages
name|msgs
init|=
operator|new
name|PendingDataNodeMessages
argument_list|()
decl_stmt|;
DECL|field|block1Gs1
specifier|private
specifier|final
name|Block
name|block1Gs1
init|=
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|block1Gs2
specifier|private
specifier|final
name|Block
name|block1Gs2
init|=
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|block1Gs2DifferentInstance
specifier|private
specifier|final
name|Block
name|block1Gs2DifferentInstance
init|=
operator|new
name|Block
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|block2Gs1
specifier|private
specifier|final
name|Block
name|block2Gs1
init|=
operator|new
name|Block
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testQueues ()
specifier|public
name|void
name|testQueues
parameter_list|()
block|{
name|DatanodeDescriptor
name|fakeDN
init|=
name|DFSTestUtil
operator|.
name|getLocalDatanodeDescriptor
argument_list|()
decl_stmt|;
name|DatanodeStorage
name|storage
init|=
operator|new
name|DatanodeStorage
argument_list|(
literal|"STORAGE_ID"
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
name|storageInfo
init|=
operator|new
name|DatanodeStorageInfo
argument_list|(
name|fakeDN
argument_list|,
name|storage
argument_list|)
decl_stmt|;
name|msgs
operator|.
name|enqueueReportedBlock
argument_list|(
name|storageInfo
argument_list|,
name|block1Gs1
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|msgs
operator|.
name|enqueueReportedBlock
argument_list|(
name|storageInfo
argument_list|,
name|block1Gs2
argument_list|,
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|msgs
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nothing queued yet for block 2
name|assertNull
argument_list|(
name|msgs
operator|.
name|takeBlockQueue
argument_list|(
name|block2Gs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|msgs
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|ReportedBlockInfo
argument_list|>
name|q
init|=
name|msgs
operator|.
name|takeBlockQueue
argument_list|(
name|block1Gs2DifferentInstance
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ReportedBlockInfo [block=blk_1_1, dn=127.0.0.1:9866, reportedState=FINALIZED],"
operator|+
literal|"ReportedBlockInfo [block=blk_1_2, dn=127.0.0.1:9866, reportedState=FINALIZED]"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|msgs
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should be null if we pull again
name|assertNull
argument_list|(
name|msgs
operator|.
name|takeBlockQueue
argument_list|(
name|block1Gs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|msgs
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPendingDataNodeMessagesWithEC ()
specifier|public
name|void
name|testPendingDataNodeMessagesWithEC
parameter_list|()
throws|throws
name|Exception
block|{
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|SystemErasureCodingPolicies
operator|.
name|getByID
argument_list|(
name|SystemErasureCodingPolicies
operator|.
name|XOR_2_1_POLICY_ID
argument_list|)
decl_stmt|;
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/testPendingDataNodeMessagesWithEC"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|20
operator|*
literal|60000
argument_list|)
expr_stmt|;
name|int
name|numDn
init|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDn
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setErasureCodingPolicy
argument_list|(
name|dirPath
argument_list|,
name|ecPolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
literal|"file"
argument_list|)
argument_list|,
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
operator|*
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLogTailer
argument_list|()
operator|.
name|doTailEdits
argument_list|()
expr_stmt|;
comment|// PendingDataNodeMessages datanode message queue should be empty after
comment|// processing IBR
name|int
name|pendingIBRMsg
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All DN message should processed after tail edits"
argument_list|,
literal|0
argument_list|,
name|pendingIBRMsg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

