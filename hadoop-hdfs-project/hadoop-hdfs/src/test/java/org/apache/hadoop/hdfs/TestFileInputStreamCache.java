begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|TemporarySocketDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TestFileInputStreamCache
specifier|public
class|class
name|TestFileInputStreamCache
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileInputStreamCache
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateAndDestroy ()
specifier|public
name|void
name|testCreateAndDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputStreamCache
name|cache
init|=
operator|new
name|FileInputStreamCache
argument_list|(
literal|10
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|TestFileDescriptorPair
specifier|private
specifier|static
class|class
name|TestFileDescriptorPair
block|{
DECL|field|dir
name|TemporarySocketDirectory
name|dir
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
DECL|field|fis
name|FileInputStream
name|fis
index|[]
decl_stmt|;
DECL|method|TestFileDescriptorPair ()
specifier|public
name|TestFileDescriptorPair
parameter_list|()
throws|throws
name|IOException
block|{
name|fis
operator|=
operator|new
name|FileInputStream
index|[
literal|2
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|dir
operator|.
name|getDir
argument_list|()
operator|+
literal|"/file"
operator|+
name|i
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
index|[
name|i
index|]
operator|=
operator|new
name|FileInputStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFileInputStreams ()
specifier|public
name|FileInputStream
index|[]
name|getFileInputStreams
parameter_list|()
block|{
return|return
name|fis
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compareWith (FileInputStream other[])
specifier|public
name|boolean
name|compareWith
parameter_list|(
name|FileInputStream
name|other
index|[]
parameter_list|)
block|{
if|if
condition|(
operator|(
name|other
operator|==
literal|null
operator|)
operator|||
operator|(
name|fis
operator|==
literal|null
operator|)
condition|)
block|{
return|return
name|other
operator|==
name|fis
return|;
block|}
if|if
condition|(
name|fis
operator|.
name|length
operator|!=
name|other
operator|.
name|length
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fis
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fis
index|[
name|i
index|]
operator|!=
name|other
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddAndRetrieve ()
specifier|public
name|void
name|testAddAndRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputStreamCache
name|cache
init|=
operator|new
name|FileInputStreamCache
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|DatanodeID
name|dnId
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"xyzzy"
argument_list|,
literal|8080
argument_list|,
literal|9090
argument_list|,
literal|7070
argument_list|,
literal|6060
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"poolid"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|TestFileDescriptorPair
name|pair
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|,
name|pair
operator|.
name|getFileInputStreams
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
index|[]
init|=
name|cache
operator|.
name|get
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pair
operator|.
name|compareWith
argument_list|(
name|fis
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpiry ()
specifier|public
name|void
name|testExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputStreamCache
name|cache
init|=
operator|new
name|FileInputStreamCache
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DatanodeID
name|dnId
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"xyzzy"
argument_list|,
literal|8080
argument_list|,
literal|9090
argument_list|,
literal|7070
argument_list|,
literal|6060
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"poolid"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|TestFileDescriptorPair
name|pair
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|,
name|pair
operator|.
name|getFileInputStreams
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|cache
operator|.
name|getExpiryTimeMs
argument_list|()
operator|*
literal|100
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
index|[]
init|=
name|cache
operator|.
name|get
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|pair
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEviction ()
specifier|public
name|void
name|testEviction
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputStreamCache
name|cache
init|=
operator|new
name|FileInputStreamCache
argument_list|(
literal|1
argument_list|,
literal|10000000
argument_list|)
decl_stmt|;
name|DatanodeID
name|dnId
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"xyzzy"
argument_list|,
literal|8080
argument_list|,
literal|9090
argument_list|,
literal|7070
argument_list|,
literal|6060
argument_list|)
decl_stmt|;
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
literal|"poolid"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|TestFileDescriptorPair
name|pair
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|,
name|pair
operator|.
name|getFileInputStreams
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeID
name|dnId2
init|=
operator|new
name|DatanodeID
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"xyzzy"
argument_list|,
literal|8081
argument_list|,
literal|9091
argument_list|,
literal|7071
argument_list|,
literal|6061
argument_list|)
decl_stmt|;
name|TestFileDescriptorPair
name|pair2
init|=
operator|new
name|TestFileDescriptorPair
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|dnId2
argument_list|,
name|block
argument_list|,
name|pair2
operator|.
name|getFileInputStreams
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
index|[]
init|=
name|cache
operator|.
name|get
argument_list|(
name|dnId
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis2
index|[]
init|=
name|cache
operator|.
name|get
argument_list|(
name|dnId2
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pair2
operator|.
name|compareWith
argument_list|(
name|fis2
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

