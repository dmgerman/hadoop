begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|RequestSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests state transition from active->standby, and manual failover  * and failback between two namenodes.  */
end_comment

begin_class
DECL|class|TestHAStateTransitions
specifier|public
class|class
name|TestHAStateTransitions
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStandbyIsHot
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE_STR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE_STR
init|=
name|TEST_FILE_PATH
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
DECL|field|TEST_FILE_DATA
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE_DATA
init|=
literal|"Hello state transitioning world"
decl_stmt|;
DECL|field|REQ_INFO
specifier|private
specifier|static
specifier|final
name|StateChangeRequestInfo
name|REQ_INFO
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|RequestSource
operator|.
name|REQUEST_BY_USER_FORCED
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|EditLogTailer
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test which takes a single node and flip flops between    * active and standby mode, making sure it doesn't    * double-play any edits.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTransitionActiveToStandby ()
specifier|public
name|void
name|testTransitionActiveToStandby
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/x"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw trying to mutate FS in standby state"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Operation category WRITE is not supported"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Create a file, then delete the whole directory recursively.
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now if the standby tries to replay the last segment that it just
comment|// wrote as active, it would fail since it's trying to create a file
comment|// in a non-existent directory.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addCrmThreads (MiniDFSCluster cluster, LinkedList<Thread> crmThreads)
specifier|private
name|void
name|addCrmThreads
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|LinkedList
argument_list|<
name|Thread
argument_list|>
name|crmThreads
parameter_list|)
block|{
for|for
control|(
name|int
name|nn
init|=
literal|0
init|;
name|nn
operator|<=
literal|1
condition|;
name|nn
operator|++
control|)
block|{
name|Thread
name|thread
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
name|nn
argument_list|)
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getCacheManager
argument_list|()
operator|.
name|getCacheReplicationMonitor
argument_list|()
decl_stmt|;
if|if
condition|(
name|thread
operator|!=
literal|null
condition|)
block|{
name|crmThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that transitioning a service to the state that it is already    * in is a nop, specifically, an exception is not thrown.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTransitionToCurrentStateIsANop ()
specifier|public
name|void
name|testTransitionToCurrentStateIsANop
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Thread
argument_list|>
name|crmThreads
init|=
operator|new
name|LinkedList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|addCrmThreads
argument_list|(
name|cluster
argument_list|,
name|crmThreads
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addCrmThreads
argument_list|(
name|cluster
argument_list|,
name|crmThreads
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addCrmThreads
argument_list|(
name|cluster
argument_list|,
name|crmThreads
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addCrmThreads
argument_list|(
name|cluster
argument_list|,
name|crmThreads
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addCrmThreads
argument_list|(
name|cluster
argument_list|,
name|crmThreads
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Verify that all cacheReplicationMonitor threads shut down
for|for
control|(
name|Thread
name|thread
range|:
name|crmThreads
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test manual failover failback for one namespace    * @param cluster single process test cluster    * @param conf cluster configuration    * @param nsIndex namespace index starting from zero    * @throws Exception    */
DECL|method|testManualFailoverFailback (MiniDFSCluster cluster, Configuration conf, int nsIndex)
specifier|private
name|void
name|testManualFailoverFailback
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|nsIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|nn0
init|=
literal|2
operator|*
name|nsIndex
decl_stmt|,
name|nn1
init|=
literal|2
operator|*
name|nsIndex
operator|+
literal|1
decl_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active in namespace "
operator|+
name|nsIndex
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1 in namespace "
operator|+
name|nsIndex
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|nn0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|writeFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|,
name|TEST_FILE_DATA
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 0 in namespace "
operator|+
name|nsIndex
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_FILE_DATA
argument_list|,
name|DFSTestUtil
operator|.
name|readFile
argument_list|(
name|fs
argument_list|,
name|TEST_FILE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing test file"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1 in namespace "
operator|+
name|nsIndex
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|nn0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests manual failover back and forth between two NameNodes.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testManualFailoverAndFailback ()
specifier|public
name|void
name|testManualFailoverAndFailback
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// test the only namespace
name|testManualFailoverFailback
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Regression test for HDFS-2693: when doing state transitions, we need to    * lock the FSNamesystem so that we don't end up doing any writes while it's    * "in between" states.    * This test case starts up several client threads which do mutation operations    * while flipping a NN back and forth from active to standby.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testTransitionSynchronization ()
specifier|public
name|void
name|testTransitionSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|spyLock
init|=
name|NameNodeAdapter
operator|.
name|spyOnFsLock
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamesystem
argument_list|()
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|GenericTestUtils
operator|.
name|SleepAnswer
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyLock
argument_list|)
operator|.
name|writeLock
argument_list|()
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/test-"
operator|+
name|finalI
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test for HDFS-2812. Since lease renewals go from the client    * only to the active NN, the SBN will have out-of-date lease    * info when it becomes active. We need to make sure we don't    * accidentally mark the leases as expired when the failover    * proceeds.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testLeasesRenewedOnTransition ()
specifier|public
name|void
name|testLeasesRenewedOnTransition
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|NameNode
name|nn0
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with NN 0 active"
argument_list|)
expr_stmt|;
name|stm
operator|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|long
name|nn0t0
init|=
name|NameNodeAdapter
operator|.
name|getLeaseRenewalTime
argument_list|(
name|nn0
argument_list|,
name|TEST_FILE_STR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nn0t0
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|nn1t0
init|=
name|NameNodeAdapter
operator|.
name|getLeaseRenewalTime
argument_list|(
name|nn1
argument_list|,
name|TEST_FILE_STR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Lease should not yet exist on nn1"
argument_list|,
operator|-
literal|1
argument_list|,
name|nn1t0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// make sure time advances!
name|HATestUtil
operator|.
name|waitForStandbyToCatchUp
argument_list|(
name|nn0
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
name|long
name|nn1t1
init|=
name|NameNodeAdapter
operator|.
name|getLeaseRenewalTime
argument_list|(
name|nn1
argument_list|,
name|TEST_FILE_STR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lease should have been created on standby. Time was: "
operator|+
name|nn1t1
argument_list|,
name|nn1t1
operator|>
name|nn0t0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// make sure time advances!
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|nn1t2
init|=
name|NameNodeAdapter
operator|.
name|getLeaseRenewalTime
argument_list|(
name|nn1
argument_list|,
name|TEST_FILE_STR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lease should have been renewed by failover process"
argument_list|,
name|nn1t2
operator|>
name|nn1t1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|stm
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that delegation tokens continue to work after the failover.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testDelegationTokensAfterFailover ()
specifier|public
name|void
name|testDelegationTokensAfterFailover
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NameNode
name|nn1
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameNode
name|nn2
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|renewer
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|nn1
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to NN 1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|token
operator|=
name|nn2
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests manual failover back and forth between two NameNodes    * for federation cluster with two namespaces.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testManualFailoverFailbackFederationHA ()
specifier|public
name|void
name|testManualFailoverFailbackFederationHA
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// test for namespace 0
name|testManualFailoverFailback
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// test for namespace 1
name|testManualFailoverFailback
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFailoverWithEmptyInProgressEditLog ()
specifier|public
name|void
name|testFailoverWithEmptyInProgressEditLog
parameter_list|()
throws|throws
name|Exception
block|{
name|testFailoverAfterCrashDuringLogRoll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testFailoverWithEmptyInProgressEditLogWithHeader ()
specifier|public
name|void
name|testFailoverWithEmptyInProgressEditLogWithHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|testFailoverAfterCrashDuringLogRoll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailoverAfterCrashDuringLogRoll (boolean writeHeader)
specifier|private
specifier|static
name|void
name|testFailoverAfterCrashDuringLogRoll
parameter_list|(
name|boolean
name|writeHeader
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HA_TAILEDITS_PERIOD_KEY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|HATestUtil
operator|.
name|configureFailoverFs
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NameNode
name|nn0
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|nn0
operator|.
name|getRpcServer
argument_list|()
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createEmptyInProgressEditLog
argument_list|(
name|cluster
argument_list|,
name|nn0
argument_list|,
name|writeHeader
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createEmptyInProgressEditLog (MiniDFSCluster cluster, NameNode nn, boolean writeHeader)
specifier|private
specifier|static
name|void
name|createEmptyInProgressEditLog
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|,
name|NameNode
name|nn
parameter_list|,
name|boolean
name|writeHeader
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|txid
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
decl_stmt|;
name|URI
name|sharedEditsUri
init|=
name|cluster
operator|.
name|getSharedEditsDir
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|File
name|sharedEditsDir
init|=
operator|new
name|File
argument_list|(
name|sharedEditsUri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDirectory
name|storageDir
init|=
operator|new
name|StorageDirectory
argument_list|(
name|sharedEditsDir
argument_list|)
decl_stmt|;
name|File
name|inProgressFile
init|=
name|NameNodeAdapter
operator|.
name|getInProgressEditsFile
argument_list|(
name|storageDir
argument_list|,
name|txid
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create in-progress edits file"
argument_list|,
name|inProgressFile
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeHeader
condition|)
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|inProgressFile
argument_list|)
argument_list|)
decl_stmt|;
name|EditLogFileOutputStream
operator|.
name|writeHeader
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The secret manager needs to start/stop - the invariant should be that    * the secret manager runs if and only if the NN is active and not in    * safe mode. As a state diagram, we need to test all of the following    * transitions to make sure the secret manager is started when we transition    * into state 4, but none of the others.    *<pre>    *         SafeMode     Not SafeMode     * Standby   1<------> 2    *           ^          ^    *           |          |    *           v          v    * Active    3<------> 4    *</pre>    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSecretManagerState ()
specifier|public
name|void
name|testSecretManagerState
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|waitSafeMode
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|cluster
operator|.
name|getFileSystem
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TEST_FILE_PATH
argument_list|,
literal|6000
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SAFEMODE_EXTENSION_KEY
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|banner
argument_list|(
literal|"Started in state 1."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 1->2. Should not start secret manager"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 2->1. Should not start secret manager."
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 1->3. Should not start secret manager."
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|REQ_INFO
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 3->1. Should not start secret manager."
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
name|REQ_INFO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 1->3->4. Should start secret manager."
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|REQ_INFO
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 4->3. Should stop secret manager"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|enterSafeMode
argument_list|(
name|nn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 3->4. Should start secret manager"
argument_list|)
expr_stmt|;
name|NameNodeAdapter
operator|.
name|leaveSafeMode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// Loop the last check to suss out races.
name|banner
argument_list|(
literal|"Transition 4->2. Should stop secret manager."
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
name|REQ_INFO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
name|banner
argument_list|(
literal|"Transition 2->4. Should start secret manager"
argument_list|)
expr_stmt|;
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|REQ_INFO
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isStandbyState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nn
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isDTRunning
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test also serves to test    * {@link HAUtil#getProxiesForAllNameNodesInNameservice(Configuration, String)} and    * {@link DFSUtil#getRpcAddressesForNameserviceId(Configuration, String, String)}    * by virtue of the fact that it wouldn't work properly if the proxies    * returned were not for the correct NNs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testIsAtLeastOneActive ()
specifier|public
name|void
name|testIsAtLeastOneActive
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
operator|.
name|nnTopology
argument_list|(
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|HATestUtil
operator|.
name|setFailoverConfigurations
argument_list|(
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientProtocol
argument_list|>
name|namenodes
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|conf
argument_list|,
name|HATestUtil
operator|.
name|getLogicalHostname
argument_list|(
name|cluster
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namenodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToStandby
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|isDTRunning (NameNode nn)
specifier|private
name|boolean
name|isDTRunning
parameter_list|(
name|NameNode
name|nn
parameter_list|)
block|{
return|return
name|NameNodeAdapter
operator|.
name|getDtSecretManager
argument_list|(
name|nn
operator|.
name|getNamesystem
argument_list|()
argument_list|)
operator|.
name|isRunning
argument_list|()
return|;
block|}
comment|/**    * Print a big banner in the test log to make debug easier.    */
DECL|method|banner (String string)
specifier|static
name|void
name|banner
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n\n\n================================================\n"
operator|+
name|string
operator|+
literal|"\n"
operator|+
literal|"==================================================\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

