begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestWebHdfsContentLength
specifier|public
class|class
name|TestWebHdfsContentLength
block|{
DECL|field|listenSocket
specifier|private
specifier|static
name|ServerSocket
name|listenSocket
decl_stmt|;
DECL|field|bindAddr
specifier|private
specifier|static
name|String
name|bindAddr
decl_stmt|;
DECL|field|p
specifier|private
specifier|static
name|Path
name|p
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|contentLengthPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|contentLengthPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(Content-Length|Transfer-Encoding):\\s*(.*)"
argument_list|,
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
DECL|field|errResponse
specifier|private
specifier|static
name|String
name|errResponse
init|=
literal|"HTTP/1.1 500 Boom\r\n"
operator|+
literal|"Content-Length: 0\r\n"
operator|+
literal|"Connection: close\r\n\r\n"
decl_stmt|;
DECL|field|redirectResponse
specifier|private
specifier|static
name|String
name|redirectResponse
decl_stmt|;
DECL|field|executor
specifier|private
specifier|static
name|ExecutorService
name|executor
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|listenSocket
operator|=
operator|new
name|ServerSocket
argument_list|()
expr_stmt|;
name|listenSocket
operator|.
name|bind
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bindAddr
operator|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
operator|(
name|InetSocketAddress
operator|)
name|listenSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
name|redirectResponse
operator|=
literal|"HTTP/1.1 307 Redirect\r\n"
operator|+
literal|"Location: http://"
operator|+
name|bindAddr
operator|+
literal|"/path\r\n"
operator|+
literal|"Connection: close\r\n\r\n"
expr_stmt|;
name|p
operator|=
operator|new
name|Path
argument_list|(
literal|"webhdfs://"
operator|+
name|bindAddr
operator|+
literal|"/path"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|p
operator|.
name|getFileSystem
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|listenSocket
operator|!=
literal|null
condition|)
block|{
name|listenSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetOp ()
specifier|public
name|void
name|testGetOp
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getContentLength
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetOpWithRedirect ()
specifier|public
name|void
name|testGetOpWithRedirect
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future1
init|=
name|contentLengthFuture
argument_list|(
name|redirectResponse
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future2
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
operator|.
name|read
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getContentLength
argument_list|(
name|future1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getContentLength
argument_list|(
name|future2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutOp ()
specifier|public
name|void
name|testPutOp
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|getContentLength
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutOpWithRedirect ()
specifier|public
name|void
name|testPutOpWithRedirect
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future1
init|=
name|contentLengthFuture
argument_list|(
name|redirectResponse
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future2
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|getContentLength
argument_list|(
name|future1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"chunked"
argument_list|,
name|getContentLength
argument_list|(
name|future2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostOp ()
specifier|public
name|void
name|testPostOp
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|concat
argument_list|(
name|p
argument_list|,
operator|new
name|Path
index|[]
block|{
name|p
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|getContentLength
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostOpWithRedirect ()
specifier|public
name|void
name|testPostOpWithRedirect
parameter_list|()
block|{
comment|// POST operation with redirect
name|Future
argument_list|<
name|String
argument_list|>
name|future1
init|=
name|contentLengthFuture
argument_list|(
name|redirectResponse
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future2
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|append
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|getContentLength
argument_list|(
name|future1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"chunked"
argument_list|,
name|getContentLength
argument_list|(
name|future2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|contentLengthFuture
argument_list|(
name|errResponse
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
comment|// expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getContentLength
argument_list|(
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getContentLength (Future<String> future)
specifier|private
name|String
name|getContentLength
parameter_list|(
name|Future
argument_list|<
name|String
argument_list|>
name|future
parameter_list|)
block|{
name|String
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|future
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|matcher
init|=
name|contentLengthPattern
operator|.
name|matcher
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|matcher
operator|.
name|find
argument_list|()
condition|?
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|contentLengthFuture (final String response)
specifier|private
name|Future
argument_list|<
name|String
argument_list|>
name|contentLengthFuture
parameter_list|(
specifier|final
name|String
name|response
parameter_list|)
block|{
return|return
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Socket
name|client
init|=
name|listenSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|response
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
index|]
decl_stmt|;
comment|// much bigger than request
name|int
name|n
init|=
name|client
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
return|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

