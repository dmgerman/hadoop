begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestBlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|BaseReplicationPolicyTest
specifier|abstract
specifier|public
class|class
name|BaseReplicationPolicyTest
block|{
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|BlockPlacementPolicy
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|ALL
parameter_list|)
constructor_decl|;
block|}
DECL|field|cluster
specifier|protected
name|NetworkTopology
name|cluster
decl_stmt|;
DECL|field|dataNodes
specifier|protected
name|DatanodeDescriptor
name|dataNodes
index|[]
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|namenode
specifier|protected
name|NameNode
name|namenode
decl_stmt|;
DECL|field|dnManager
specifier|protected
name|DatanodeManager
name|dnManager
decl_stmt|;
DECL|field|replicator
specifier|protected
name|BlockPlacementPolicy
name|replicator
decl_stmt|;
DECL|field|filename
specifier|protected
specifier|final
name|String
name|filename
init|=
literal|"/dummyfile.txt"
decl_stmt|;
DECL|field|storages
specifier|protected
name|DatanodeStorageInfo
index|[]
name|storages
decl_stmt|;
DECL|field|blockPlacementPolicy
specifier|protected
name|String
name|blockPlacementPolicy
decl_stmt|;
DECL|field|nameNodeRpc
specifier|protected
name|NamenodeProtocols
name|nameNodeRpc
init|=
literal|null
decl_stmt|;
DECL|method|updateHeartbeatWithUsage (DatanodeDescriptor dn, long capacity, long dfsUsed, long remaining, long blockPoolUsed, long dnCacheCapacity, long dnCacheUsed, int xceiverCount, int volFailures)
specifier|static
name|void
name|updateHeartbeatWithUsage
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|dfsUsed
parameter_list|,
name|long
name|remaining
parameter_list|,
name|long
name|blockPoolUsed
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|volFailures
parameter_list|)
block|{
name|dn
operator|.
name|getStorageInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|setUtilizationForTesting
argument_list|(
name|capacity
argument_list|,
name|dfsUsed
argument_list|,
name|remaining
argument_list|,
name|blockPoolUsed
argument_list|)
expr_stmt|;
name|dn
operator|.
name|updateHeartbeat
argument_list|(
name|BlockManagerTestUtil
operator|.
name|getStorageReportsForDatanode
argument_list|(
name|dn
argument_list|)
argument_list|,
name|dnCacheCapacity
argument_list|,
name|dnCacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|volFailures
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodeDescriptors (Configuration conf)
specifier|abstract
name|DatanodeDescriptor
index|[]
name|getDatanodeDescriptors
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
annotation|@
name|Before
DECL|method|setupCluster ()
specifier|public
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|dataNodes
operator|=
name|getDatanodeDescriptors
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
name|PathUtils
operator|.
name|getTestDir
argument_list|(
name|TestReplicationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"name"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_REPLICATOR_CLASSNAME_KEY
argument_list|,
name|blockPlacementPolicy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|namenode
operator|=
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nameNodeRpc
operator|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
expr_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|replicator
operator|=
name|bm
operator|.
name|getBlockPlacementPolicy
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
expr_stmt|;
name|dnManager
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
expr_stmt|;
comment|// construct network topology
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|add
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getHeartbeatManager
argument_list|()
operator|.
name|addDatanode
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|updateHeartbeatWithUsage
argument_list|()
expr_stmt|;
block|}
DECL|method|updateHeartbeatWithUsage ()
name|void
name|updateHeartbeatWithUsage
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|updateHeartbeatWithUsage
argument_list|(
name|dataNodes
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|2
operator|*
name|HdfsServerConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|*
name|BLOCK_SIZE
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|namenode
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|isOnSameRack (DatanodeStorageInfo left, DatanodeStorageInfo right)
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeStorageInfo
name|right
parameter_list|)
block|{
return|return
name|isOnSameRack
argument_list|(
name|left
argument_list|,
name|right
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isOnSameRack (DatanodeStorageInfo left, DatanodeDescriptor right)
name|boolean
name|isOnSameRack
parameter_list|(
name|DatanodeStorageInfo
name|left
parameter_list|,
name|DatanodeDescriptor
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameRack
argument_list|(
name|left
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
name|right
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, List<DatanodeStorageInfo> chosenNodes)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, List<DatanodeStorageInfo> chosenNodes, Set<Node> excludedNodes)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|dataNodes
index|[
literal|0
index|]
argument_list|,
name|chosenNodes
argument_list|,
name|excludedNodes
argument_list|)
return|;
block|}
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, List<DatanodeStorageInfo> chosenNodes, Set<Node> excludedNodes)
name|DatanodeStorageInfo
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosenNodes
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
return|return
name|replicator
operator|.
name|chooseTarget
argument_list|(
name|filename
argument_list|,
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|false
argument_list|,
name|excludedNodes
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|TestBlockStoragePolicy
operator|.
name|DEFAULT_STORAGE_POLICY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

