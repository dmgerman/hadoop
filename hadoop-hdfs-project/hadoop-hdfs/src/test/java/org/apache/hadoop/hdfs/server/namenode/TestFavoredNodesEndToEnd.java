begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFavoredNodesEndToEnd
specifier|public
class|class
name|TestFavoredNodesEndToEnd
block|{
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
argument_list|,
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|field|cluster
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|NUM_DATA_NODES
specifier|private
specifier|final
specifier|static
name|int
name|NUM_DATA_NODES
init|=
literal|10
decl_stmt|;
DECL|field|NUM_FILES
specifier|private
specifier|final
specifier|static
name|int
name|NUM_FILES
init|=
literal|10
decl_stmt|;
DECL|field|SOME_BYTES
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|SOME_BYTES
init|=
operator|new
name|String
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|DistributedFileSystem
name|dfs
decl_stmt|;
DECL|field|datanodes
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
name|datanodes
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpBeforeClass ()
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATA_NODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitClusterUp
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|datanodes
operator|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownAfterClass ()
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testFavoredNodesEndToEnd ()
specifier|public
name|void
name|testFavoredNodesEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create 10 files with random preferred nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|i
argument_list|)
decl_stmt|;
comment|//pass a new created rand so as to get a uniform distribution each time
comment|//without too much collisions (look at the do-while loop in getDatanodes)
name|InetSocketAddress
name|datanode
index|[]
init|=
name|getDatanodes
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/filename"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|4096L
argument_list|,
literal|null
argument_list|,
name|datanode
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|SOME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocations
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//verify the files got created in the right nodes
for|for
control|(
name|BlockLocation
name|loc
range|:
name|locations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|loc
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
name|getStringForInetSocketAddrs
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compareNodes
argument_list|(
name|hosts
argument_list|,
name|hosts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testWhenFavoredNodesNotPresent ()
specifier|public
name|void
name|testWhenFavoredNodesNotPresent
parameter_list|()
throws|throws
name|Exception
block|{
comment|//when we ask for favored nodes but the nodes are not there, we should
comment|//get some other nodes. In other words, the write to hdfs should not fail
comment|//and if we do getBlockLocations on the file, we should see one blklocation
comment|//and three hosts for that
name|InetSocketAddress
name|arbitraryAddrs
index|[]
init|=
operator|new
name|InetSocketAddress
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|arbitraryAddrs
index|[
name|i
index|]
operator|=
name|getArbitraryLocalHostAddr
argument_list|()
expr_stmt|;
block|}
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/filename-foo-bar"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|4096L
argument_list|,
literal|null
argument_list|,
name|arbitraryAddrs
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|SOME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|getBlockLocations
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testWhenSomeNodesAreNotGood ()
specifier|public
name|void
name|testWhenSomeNodesAreNotGood
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 4 favored nodes
specifier|final
name|InetSocketAddress
name|addrs
index|[]
init|=
operator|new
name|InetSocketAddress
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
name|addrs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addrs
index|[
name|i
index|]
operator|=
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
name|hosts
index|[
name|i
index|]
operator|=
name|addrs
index|[
name|i
index|]
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addrs
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
comment|//make some datanode not "good" so that even if the client prefers it,
comment|//the namenode would not give it as a replica to write to
name|DatanodeInfo
name|d
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeByXferAddr
argument_list|(
name|addrs
index|[
literal|0
index|]
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|addrs
index|[
literal|0
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|//set the decommission status to true so that
comment|//BlockPlacementPolicyDefault.isGoodTarget returns false for this dn
name|d
operator|.
name|setDecommissioned
argument_list|()
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/filename-foo-bar-baz"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
operator|(
name|short
operator|)
literal|3
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
name|replication
argument_list|,
literal|4096L
argument_list|,
literal|null
argument_list|,
name|addrs
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|SOME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//reset the state
name|d
operator|.
name|stopDecommission
argument_list|()
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocations
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|replication
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
empty_stmt|;
comment|//also make sure that the datanode[0] is not in the list of hosts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replication
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|loc
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getNames
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|hosts
operator|.
name|length
operator|&&
operator|!
name|loc
operator|.
name|equals
argument_list|(
name|hosts
index|[
name|j
index|]
argument_list|)
condition|;
name|j
operator|++
control|)
empty_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"j="
operator|+
name|j
argument_list|,
name|j
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"loc="
operator|+
name|loc
operator|+
literal|" not in host list "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|hosts
argument_list|)
operator|+
literal|", j="
operator|+
name|j
argument_list|,
name|j
operator|<
name|hosts
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testFavoredNodesEndToEndForAppend ()
specifier|public
name|void
name|testFavoredNodesEndToEndForAppend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 10 files with random preferred nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// pass a new created rand so as to get a uniform distribution each time
comment|// without too much collisions (look at the do-while loop in getDatanodes)
name|InetSocketAddress
name|datanode
index|[]
init|=
name|getDatanodes
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/filename"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// create and close the file.
name|dfs
operator|.
name|create
argument_list|(
name|p
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|4096L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// re-open for append
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|append
argument_list|(
name|p
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
literal|4096
argument_list|,
literal|null
argument_list|,
name|datanode
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|SOME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocations
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// verify the files got created in the right nodes
for|for
control|(
name|BlockLocation
name|loc
range|:
name|locations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|loc
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
name|getStringForInetSocketAddrs
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compareNodes
argument_list|(
name|hosts
argument_list|,
name|hosts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testCreateStreamBuilderFavoredNodesEndToEnd ()
specifier|public
name|void
name|testCreateStreamBuilderFavoredNodesEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create 10 files with random preferred nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FILES
condition|;
name|i
operator|++
control|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|i
argument_list|)
decl_stmt|;
comment|//pass a new created rand so as to get a uniform distribution each time
comment|//without too much collisions (look at the do-while loop in getDatanodes)
name|InetSocketAddress
index|[]
name|dns
init|=
name|getDatanodes
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/filename"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|dfs
operator|.
name|newFSDataOutputStreamBuilder
argument_list|(
name|p
argument_list|)
operator|.
name|setFavoredNodes
argument_list|(
name|dns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|SOME_BYTES
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|getBlockLocations
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//verify the files got created in the right nodes
for|for
control|(
name|BlockLocation
name|loc
range|:
name|locations
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|loc
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
name|getStringForInetSocketAddrs
argument_list|(
name|dns
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compareNodes
argument_list|(
name|hosts
argument_list|,
name|hosts1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getBlockLocations (Path p)
specifier|private
name|BlockLocation
index|[]
name|getBlockLocations
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|dfs
argument_list|,
name|p
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|length
operator|==
literal|1
operator|&&
name|locations
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
return|return
name|locations
return|;
block|}
DECL|method|getStringForInetSocketAddrs (InetSocketAddress[] datanode)
specifier|private
name|String
index|[]
name|getStringForInetSocketAddrs
parameter_list|(
name|InetSocketAddress
index|[]
name|datanode
parameter_list|)
block|{
name|String
name|strs
index|[]
init|=
operator|new
name|String
index|[
name|datanode
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanode
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strs
index|[
name|i
index|]
operator|=
name|datanode
index|[
name|i
index|]
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|datanode
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
return|return
name|strs
return|;
block|}
DECL|method|compareNodes (String[] dnList1, String[] dnList2)
specifier|private
name|boolean
name|compareNodes
parameter_list|(
name|String
index|[]
name|dnList1
parameter_list|,
name|String
index|[]
name|dnList2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dnList1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dnList2
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|dnList1
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|dnList2
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|matched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matched
operator|==
literal|false
condition|)
block|{
name|fail
argument_list|(
name|dnList1
index|[
name|i
index|]
operator|+
literal|" not a favored node"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getDatanodes (Random rand)
specifier|private
name|InetSocketAddress
index|[]
name|getDatanodes
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
comment|//Get some unique random indexes
name|int
name|idx1
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_DATA_NODES
argument_list|)
decl_stmt|;
name|int
name|idx2
decl_stmt|;
do|do
block|{
name|idx2
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_DATA_NODES
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|idx1
operator|==
name|idx2
condition|)
do|;
name|int
name|idx3
decl_stmt|;
do|do
block|{
name|idx3
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_DATA_NODES
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|idx2
operator|==
name|idx3
operator|||
name|idx1
operator|==
name|idx3
condition|)
do|;
name|InetSocketAddress
index|[]
name|addrs
init|=
operator|new
name|InetSocketAddress
index|[
literal|3
index|]
decl_stmt|;
name|addrs
index|[
literal|0
index|]
operator|=
name|datanodes
operator|.
name|get
argument_list|(
name|idx1
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
name|addrs
index|[
literal|1
index|]
operator|=
name|datanodes
operator|.
name|get
argument_list|(
name|idx2
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
name|addrs
index|[
literal|2
index|]
operator|=
name|datanodes
operator|.
name|get
argument_list|(
name|idx3
argument_list|)
operator|.
name|getXferAddress
argument_list|()
expr_stmt|;
return|return
name|addrs
return|;
block|}
DECL|method|getArbitraryLocalHostAddr ()
specifier|private
name|InetSocketAddress
name|getArbitraryLocalHostAddr
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|65535
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|conflict
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DataNode
name|d
range|:
name|datanodes
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getXferAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|port
condition|)
block|{
name|port
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|65535
argument_list|)
expr_stmt|;
name|conflict
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conflict
operator|==
literal|false
condition|)
block|{
break|break;
block|}
block|}
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
end_class

end_unit

