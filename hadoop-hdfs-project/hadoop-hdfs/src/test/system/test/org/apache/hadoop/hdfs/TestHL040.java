begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|test
operator|.
name|system
operator|.
name|DNClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|test
operator|.
name|system
operator|.
name|HDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|test
operator|.
name|system
operator|.
name|NNClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_class
DECL|class|TestHL040
specifier|public
class|class
name|TestHL040
block|{
DECL|field|cluster
specifier|private
name|HDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHL040
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestHL040 ()
specifier|public
name|TestHL040
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Before
DECL|method|setupUp ()
specifier|public
name|void
name|setupUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|HDFSCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnect ()
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Staring TestHL040: connecting to the HDFSCluster "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"================ Getting namenode info ================"
argument_list|)
expr_stmt|;
name|NNClient
name|dfsMaster
init|=
name|cluster
operator|.
name|getNNClient
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Process info of namenode "
operator|+
name|dfsMaster
operator|.
name|getHostName
argument_list|()
operator|+
literal|" is: "
operator|+
name|dfsMaster
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"================ Getting datanode info ================"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|DNClient
argument_list|>
name|clients
init|=
name|cluster
operator|.
name|getDNClients
argument_list|()
decl_stmt|;
for|for
control|(
name|DNClient
name|dnC
range|:
name|clients
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Process info of datanode "
operator|+
name|dnC
operator|.
name|getHostName
argument_list|()
operator|+
literal|" is: "
operator|+
name|dnC
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Datanode process info isn't suppose to be null"
argument_list|,
name|dnC
operator|.
name|getProcessInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Free space "
operator|+
name|getFreeSpace
argument_list|(
name|dnC
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFreeSpace (DNClient dnC)
specifier|private
name|long
name|getFreeSpace
parameter_list|(
name|DNClient
name|dnC
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|volObj
init|=
name|dnC
operator|.
name|getDaemonAttribute
argument_list|(
literal|"VolumeInfo"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Attribute value is expected to be not null"
argument_list|,
name|volObj
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got object: "
operator|+
name|volObj
argument_list|)
expr_stmt|;
name|Map
name|volInfoMap
init|=
operator|(
name|Map
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|volObj
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|totalFreeSpace
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|volInfoMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
name|attrMap
init|=
operator|(
name|Map
operator|)
name|volInfoMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|freeSpace
init|=
operator|(
name|Long
operator|)
name|attrMap
operator|.
name|get
argument_list|(
literal|"freeSpace"
argument_list|)
decl_stmt|;
name|totalFreeSpace
operator|+=
name|freeSpace
expr_stmt|;
block|}
return|return
name|totalFreeSpace
return|;
block|}
block|}
end_class

end_unit

