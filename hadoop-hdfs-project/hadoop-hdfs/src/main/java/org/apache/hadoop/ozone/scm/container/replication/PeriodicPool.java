begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.container.replication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Periodic pool is a pool with a time stamp, this allows us to process pools  * based on a cyclic clock.  */
end_comment

begin_class
DECL|class|PeriodicPool
specifier|public
class|class
name|PeriodicPool
implements|implements
name|Comparable
argument_list|<
name|PeriodicPool
argument_list|>
block|{
DECL|field|poolName
specifier|private
specifier|final
name|String
name|poolName
decl_stmt|;
DECL|field|lastProcessedTime
specifier|private
name|long
name|lastProcessedTime
decl_stmt|;
DECL|field|totalProcessedCount
specifier|private
name|AtomicLong
name|totalProcessedCount
decl_stmt|;
comment|/**    * Constructs a periodic pool.    *    * @param poolName - Name of the pool    */
DECL|method|PeriodicPool (String poolName)
specifier|public
name|PeriodicPool
parameter_list|(
name|String
name|poolName
parameter_list|)
block|{
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
name|lastProcessedTime
operator|=
literal|0
expr_stmt|;
name|totalProcessedCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get pool Name.    * @return PoolName    */
DECL|method|getPoolName ()
specifier|public
name|String
name|getPoolName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
comment|/**    * Compares this object with the specified object for order.  Returns a    * negative integer, zero, or a positive integer as this object is less    * than, equal to, or greater than the specified object.    *    * @param o the object to be compared.    * @return a negative integer, zero, or a positive integer as this object is    * less than, equal to, or greater than the specified object.    * @throws NullPointerException if the specified object is null    * @throws ClassCastException   if the specified object's type prevents it    *                              from being compared to this object.    */
annotation|@
name|Override
DECL|method|compareTo (PeriodicPool o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|PeriodicPool
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|lastProcessedTime
argument_list|,
name|o
operator|.
name|lastProcessedTime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PeriodicPool
name|that
init|=
operator|(
name|PeriodicPool
operator|)
name|o
decl_stmt|;
return|return
name|poolName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|poolName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|poolName
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Returns the Total Times we have processed this pool.    *    * @return processed count.    */
DECL|method|getTotalProcessedCount ()
specifier|public
name|long
name|getTotalProcessedCount
parameter_list|()
block|{
return|return
name|totalProcessedCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Gets the last time we processed this pool.    * @return time in milliseconds    */
DECL|method|getLastProcessedTime ()
specifier|public
name|long
name|getLastProcessedTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastProcessedTime
return|;
block|}
comment|/**    * Sets the last processed time.    *    * @param lastProcessedTime - Long in milliseconds.    */
DECL|method|setLastProcessedTime (long lastProcessedTime)
specifier|public
name|void
name|setLastProcessedTime
parameter_list|(
name|long
name|lastProcessedTime
parameter_list|)
block|{
name|this
operator|.
name|lastProcessedTime
operator|=
name|lastProcessedTime
expr_stmt|;
block|}
comment|/*    * Increments the total processed count.    */
DECL|method|incTotalProcessedCount ()
specifier|public
name|void
name|incTotalProcessedCount
parameter_list|()
block|{
name|this
operator|.
name|totalProcessedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

