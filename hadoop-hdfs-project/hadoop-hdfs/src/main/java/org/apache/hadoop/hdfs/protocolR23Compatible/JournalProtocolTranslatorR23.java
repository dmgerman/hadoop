begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_comment
comment|/**  * This class forwards NN's ClientProtocol calls as RPC calls to the NN server  * while translating from the parameter types used in ClientProtocol to those  * used in protocolR23Compatile.*.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|JournalProtocolTranslatorR23
specifier|public
class|class
name|JournalProtocolTranslatorR23
implements|implements
name|JournalProtocol
implements|,
name|Closeable
block|{
DECL|field|rpcProxy
specifier|private
specifier|final
name|JournalWireProtocol
name|rpcProxy
decl_stmt|;
DECL|method|JournalProtocolTranslatorR23 (InetSocketAddress nameNodeAddr, Configuration conf)
specifier|public
name|JournalProtocolTranslatorR23
parameter_list|(
name|InetSocketAddress
name|nameNodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcProxy
operator|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|JournalWireProtocol
operator|.
name|class
argument_list|,
name|JournalWireProtocol
operator|.
name|versionID
argument_list|,
name|nameNodeAddr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocolName, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocolName
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rpcProxy
operator|.
name|getProtocolVersion
argument_list|(
name|protocolName
argument_list|,
name|clientVersion
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|rpcProxy
operator|.
name|getProtocolSignature2
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|journal (NamenodeRegistration registration, long firstTxnId, int numTxns, byte[] records)
specifier|public
name|void
name|journal
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|long
name|firstTxnId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|byte
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcProxy
operator|.
name|journal
argument_list|(
name|NamenodeRegistrationWritable
operator|.
name|convert
argument_list|(
name|registration
argument_list|)
argument_list|,
name|firstTxnId
argument_list|,
name|numTxns
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startLogSegment (NamenodeRegistration registration, long txid)
specifier|public
name|void
name|startLogSegment
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcProxy
operator|.
name|startLogSegment
argument_list|(
name|NamenodeRegistrationWritable
operator|.
name|convert
argument_list|(
name|registration
argument_list|)
argument_list|,
name|txid
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

