begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|storage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|client
operator|.
name|XceiverClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|client
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_comment
comment|/**  * An {@link InputStream} used by the REST service in combination with the  * {@link DistributedStorageHandler} to read the value of a key from a sequence  * of container chunks.  All bytes of the key value are stored in container  * chunks.  Each chunk may contain multiple underlying {@link ByteBuffer}  * instances.  This class encapsulates all state management for iterating  * through the sequence of chunks and the sequence of buffers within each chunk.  */
end_comment

begin_class
DECL|class|ChunkInputStream
class|class
name|ChunkInputStream
extends|extends
name|InputStream
block|{
DECL|field|EOF
specifier|private
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|args
specifier|private
specifier|final
name|UserArgs
name|args
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
name|XceiverClient
name|xceiverClient
decl_stmt|;
DECL|field|chunks
specifier|private
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
decl_stmt|;
DECL|field|chunkOffset
specifier|private
name|int
name|chunkOffset
decl_stmt|;
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
decl_stmt|;
DECL|field|bufferOffset
specifier|private
name|int
name|bufferOffset
decl_stmt|;
comment|/**    * Creates a new ChunkInputStream.    *    * @param key chunk key    * @param xceiverClientManager client manager that controls client    * @param xceiverClient client to perform container calls    * @param chunks list of chunks to read    * @param args container protocol call args    */
DECL|method|ChunkInputStream (String key, XceiverClientManager xceiverClientManager, XceiverClient xceiverClient, List<ChunkInfo> chunks, UserArgs args)
specifier|public
name|ChunkInputStream
parameter_list|(
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClient
name|xceiverClient
parameter_list|,
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunks
parameter_list|,
name|UserArgs
name|args
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|chunks
operator|=
name|chunks
expr_stmt|;
name|this
operator|.
name|chunkOffset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bufferOffset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|available
init|=
name|prepareRead
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|available
operator|==
name|EOF
condition|?
name|EOF
else|:
name|buffers
operator|.
name|get
argument_list|(
name|bufferOffset
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// According to the JavaDocs for InputStream, it is recommended that
comment|// subclasses provide an override of bulk read if possible for performance
comment|// reasons.  In addition to performance, we need to do it for correctness
comment|// reasons.  The Ozone REST service uses PipedInputStream and
comment|// PipedOutputStream to relay HTTP response data between a Jersey thread and
comment|// a Netty thread.  It turns out that PipedInputStream/PipedOutputStream
comment|// have a subtle dependency (bug?) on the wrapped stream providing separate
comment|// implementations of single-byte read and bulk read.  Without this, get key
comment|// responses might close the connection before writing all of the bytes
comment|// advertised in the Content-Length.
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|checkOpen
argument_list|()
expr_stmt|;
name|int
name|available
init|=
name|prepareRead
argument_list|(
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|==
name|EOF
condition|)
block|{
return|return
name|EOF
return|;
block|}
name|buffers
operator|.
name|get
argument_list|(
name|bufferOffset
argument_list|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|available
argument_list|)
expr_stmt|;
return|return
name|available
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|xceiverClientManager
operator|!=
literal|null
operator|&&
name|xceiverClient
operator|!=
literal|null
condition|)
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|)
expr_stmt|;
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|xceiverClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the stream is open.  If not, throws an exception.    *    * @throws IOException if stream is closed    */
DECL|method|checkOpen ()
specifier|private
specifier|synchronized
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|xceiverClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ChunkInputStream has been closed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Prepares to read by advancing through chunks and buffers as needed until it    * finds data to return or encounters EOF.    *    * @param len desired length of data to read    * @return length of data available to read, possibly less than desired length    */
DECL|method|prepareRead (int len)
specifier|private
specifier|synchronized
name|int
name|prepareRead
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|chunks
operator|==
literal|null
operator|||
name|chunks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This must be an empty key.
return|return
name|EOF
return|;
block|}
elseif|else
if|if
condition|(
name|buffers
operator|==
literal|null
condition|)
block|{
comment|// The first read triggers fetching the first chunk.
name|readChunkFromContainer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|buffers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buffers
operator|.
name|get
argument_list|(
name|bufferOffset
argument_list|)
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|// Data is available from the current buffer.
name|ByteBuffer
name|bb
init|=
name|buffers
operator|.
name|get
argument_list|(
name|bufferOffset
argument_list|)
decl_stmt|;
return|return
name|len
operator|>
name|bb
operator|.
name|remaining
argument_list|()
condition|?
name|bb
operator|.
name|remaining
argument_list|()
else|:
name|len
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|buffers
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|buffers
operator|.
name|get
argument_list|(
name|bufferOffset
argument_list|)
operator|.
name|hasRemaining
argument_list|()
operator|&&
name|bufferOffset
operator|<
name|buffers
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// There are additional buffers available.
operator|++
name|bufferOffset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|chunkOffset
operator|<
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// There are additional chunks available.
name|readChunkFromContainer
argument_list|(
name|chunkOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All available input has been consumed.
return|return
name|EOF
return|;
block|}
block|}
block|}
comment|/**    * Attempts to read the chunk at the specified offset in the chunk list.  If    * successful, then the data of the read chunk is saved so that its bytes can    * be returned from subsequent read calls.    *    * @param readChunkOffset offset in the chunk list of which chunk to read    * @throws IOException if there is an I/O error while performing the call    */
DECL|method|readChunkFromContainer (int readChunkOffset)
specifier|private
specifier|synchronized
name|void
name|readChunkFromContainer
parameter_list|(
name|int
name|readChunkOffset
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ReadChunkResponseProto
name|readChunkResponse
decl_stmt|;
try|try
block|{
name|readChunkResponse
operator|=
name|readChunk
argument_list|(
name|xceiverClient
argument_list|,
name|chunks
operator|.
name|get
argument_list|(
name|readChunkOffset
argument_list|)
argument_list|,
name|key
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected OzoneException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|chunkOffset
operator|=
name|readChunkOffset
expr_stmt|;
name|ByteString
name|byteString
init|=
name|readChunkResponse
operator|.
name|getData
argument_list|()
decl_stmt|;
name|buffers
operator|=
name|byteString
operator|.
name|asReadOnlyByteBufferList
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

