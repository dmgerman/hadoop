begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_comment
comment|/**  * Represent an {@link INodeFile} that is snapshotted.  * Note that snapshot files are represented by {@link INodeFileSnapshot}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|INodeFileWithSnapshot
specifier|public
class|class
name|INodeFileWithSnapshot
extends|extends
name|INodeFile
implements|implements
name|FileWithSnapshot
block|{
comment|/**    * A list of file diffs.    */
DECL|class|FileDiffList
specifier|static
class|class
name|FileDiffList
extends|extends
name|AbstractINodeDiffList
argument_list|<
name|INodeFile
argument_list|,
name|FileDiff
argument_list|>
block|{
DECL|field|currentINode
specifier|final
name|INodeFile
name|currentINode
decl_stmt|;
DECL|method|FileDiffList (INodeFile currentINode, List<FileDiff> diffs)
name|FileDiffList
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|List
argument_list|<
name|FileDiff
argument_list|>
name|diffs
parameter_list|)
block|{
name|super
argument_list|(
name|diffs
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentINode
operator|=
name|currentINode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentINode ()
name|INodeFile
name|getCurrentINode
parameter_list|()
block|{
return|return
name|currentINode
return|;
block|}
annotation|@
name|Override
DECL|method|addSnapshotDiff (Snapshot snapshot)
name|FileDiff
name|addSnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|addLast
argument_list|(
operator|new
name|FileDiff
argument_list|(
name|snapshot
argument_list|,
name|getCurrentINode
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|diffs
specifier|private
specifier|final
name|FileDiffList
name|diffs
decl_stmt|;
DECL|field|next
specifier|private
name|FileWithSnapshot
name|next
decl_stmt|;
DECL|method|INodeFileWithSnapshot (INodeFile f, FileDiffList diffs)
specifier|public
name|INodeFileWithSnapshot
parameter_list|(
name|INodeFile
name|f
parameter_list|,
name|FileDiffList
name|diffs
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|diffs
operator|=
operator|new
name|FileDiffList
argument_list|(
name|this
argument_list|,
name|diffs
operator|==
literal|null
condition|?
literal|null
else|:
name|diffs
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toUnderConstruction ( final String clientName, final String clientMachine, final DatanodeDescriptor clientNode)
specifier|public
name|INodeFileUnderConstructionWithSnapshot
name|toUnderConstruction
parameter_list|(
specifier|final
name|String
name|clientName
parameter_list|,
specifier|final
name|String
name|clientMachine
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|clientNode
parameter_list|)
block|{
specifier|final
name|INodeFileUnderConstructionWithSnapshot
name|f
init|=
operator|new
name|INodeFileUnderConstructionWithSnapshot
argument_list|(
name|this
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|clientNode
argument_list|,
name|diffs
argument_list|)
decl_stmt|;
name|this
operator|.
name|insertBefore
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
annotation|@
name|Override
DECL|method|isCurrentFileDeleted ()
specifier|public
name|boolean
name|isCurrentFileDeleted
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isEverythingDeleted ()
specifier|public
name|boolean
name|isEverythingDeleted
parameter_list|()
block|{
return|return
name|isCurrentFileDeleted
argument_list|()
operator|&&
name|diffs
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (final Snapshot latest)
specifier|public
name|INodeFileWithSnapshot
name|recordModification
parameter_list|(
specifier|final
name|Snapshot
name|latest
parameter_list|)
block|{
comment|// if this object is NOT the latest snapshot copy, this object is created
comment|// after the latest snapshot, then do NOT record modification.
if|if
condition|(
name|this
operator|==
name|getParent
argument_list|()
operator|.
name|getChild
argument_list|(
name|getLocalNameBytes
argument_list|()
argument_list|,
name|latest
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|asINodeFile ()
specifier|public
name|INodeFile
name|asINodeFile
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|FileWithSnapshot
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|setNext (FileWithSnapshot next)
specifier|public
name|void
name|setNext
parameter_list|(
name|FileWithSnapshot
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insertAfter (FileWithSnapshot inode)
specifier|public
name|void
name|insertAfter
parameter_list|(
name|FileWithSnapshot
name|inode
parameter_list|)
block|{
name|inode
operator|.
name|setNext
argument_list|(
name|this
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setNext
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insertBefore (FileWithSnapshot inode)
specifier|public
name|void
name|insertBefore
parameter_list|(
name|FileWithSnapshot
name|inode
parameter_list|)
block|{
name|inode
operator|.
name|setNext
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|next
operator|==
literal|null
operator|||
name|this
operator|.
name|next
operator|==
name|this
condition|)
block|{
name|this
operator|.
name|next
operator|=
name|inode
expr_stmt|;
return|return;
block|}
name|FileWithSnapshot
name|previous
init|=
name|Util
operator|.
name|getPrevious
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|previous
operator|.
name|setNext
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeSelf ()
specifier|public
name|void
name|removeSelf
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|next
operator|!=
literal|null
operator|&&
name|this
operator|.
name|next
operator|!=
name|this
condition|)
block|{
name|FileWithSnapshot
name|previous
init|=
name|Util
operator|.
name|getPrevious
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|previous
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileReplication (Snapshot snapshot)
specifier|public
name|short
name|getFileReplication
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getFileReplication
argument_list|()
else|:
name|super
operator|.
name|getFileReplication
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxFileReplication ()
specifier|public
name|short
name|getMaxFileReplication
parameter_list|()
block|{
specifier|final
name|short
name|max
init|=
name|isCurrentFileDeleted
argument_list|()
condition|?
literal|0
else|:
name|getFileReplication
argument_list|()
decl_stmt|;
return|return
name|Util
operator|.
name|getMaxFileReplication
argument_list|(
name|max
argument_list|,
name|diffs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockReplication ()
specifier|public
name|short
name|getBlockReplication
parameter_list|()
block|{
return|return
name|Util
operator|.
name|getBlockReplication
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|computeFileSize (boolean includesBlockInfoUnderConstruction, Snapshot snapshot)
specifier|public
name|long
name|computeFileSize
parameter_list|(
name|boolean
name|includesBlockInfoUnderConstruction
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|FileDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|fileSize
else|:
name|super
operator|.
name|computeFileSize
argument_list|(
name|includesBlockInfoUnderConstruction
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|computeMaxFileSize ()
specifier|public
name|long
name|computeMaxFileSize
parameter_list|()
block|{
if|if
condition|(
name|isCurrentFileDeleted
argument_list|()
condition|)
block|{
specifier|final
name|FileDiff
name|last
init|=
name|diffs
operator|.
name|getLast
argument_list|()
decl_stmt|;
return|return
name|last
operator|==
literal|null
condition|?
literal|0
else|:
name|last
operator|.
name|fileSize
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|computeFileSize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroySubtreeAndCollectBlocks (final Snapshot snapshot, final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|destroySubtreeAndCollectBlocks
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|clearReferences
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diffs
operator|.
name|deleteSnapshotDiff
argument_list|(
name|snapshot
argument_list|,
name|collectedBlocks
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//snapshot diff not found and nothing is deleted.
return|return
literal|0
return|;
block|}
block|}
name|Util
operator|.
name|collectBlocksAndClear
argument_list|(
name|this
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName (Snapshot snapshot)
specifier|public
name|String
name|getUserName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getUserName
argument_list|()
else|:
name|super
operator|.
name|getUserName
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getGroupName (Snapshot snapshot)
specifier|public
name|String
name|getGroupName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getGroupName
argument_list|()
else|:
name|super
operator|.
name|getGroupName
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFsPermission (Snapshot snapshot)
specifier|public
name|FsPermission
name|getFsPermission
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getFsPermission
argument_list|()
else|:
name|super
operator|.
name|getFsPermission
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAccessTime (Snapshot snapshot)
specifier|public
name|long
name|getAccessTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getAccessTime
argument_list|()
else|:
name|super
operator|.
name|getAccessTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime (Snapshot snapshot)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|INodeFile
name|inode
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|inode
operator|!=
literal|null
condition|?
name|inode
operator|.
name|getModificationTime
argument_list|()
else|:
name|super
operator|.
name|getModificationTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toDetailString ()
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toDetailString
argument_list|()
operator|+
operator|(
name|isCurrentFileDeleted
argument_list|()
condition|?
literal|"(DELETED), "
else|:
literal|", "
operator|)
operator|+
name|diffs
return|;
block|}
block|}
end_class

end_unit

